<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.pl.data.mapper.AppLogMapper">
  <resultMap id="BaseResultMap" type="com.pl.data.model.AppLog">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="appId" jdbcType="VARCHAR" property="appid" />
    <result column="clazz" jdbcType="VARCHAR" property="clazz" />
    <result column="method" jdbcType="VARCHAR" property="method" />
    <result column="level" jdbcType="VARCHAR" property="level" />
    <result column="logger" jdbcType="VARCHAR" property="logger" />
    <result column="Remarks" jdbcType="VARCHAR" property="remarks" />
    <result column="createTime" jdbcType="TIMESTAMP" property="createtime" />
    <result column="Dclt" jdbcType="TIMESTAMP" property="dclt" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.pl.data.model.AppLog">
    <result column="msg" jdbcType="LONGVARCHAR" property="msg" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, appId, clazz, method, level, logger, Remarks, createTime, Dclt
  </sql>
  <sql id="Blob_Column_List">
    msg
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.pl.data.model.AppLogExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from app_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.pl.data.model.AppLogExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from app_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from app_log
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from app_log
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.pl.data.model.AppLogExample">
    delete from app_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.pl.data.model.AppLog">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into app_log (appId, clazz, method, 
      level, logger, Remarks, 
      createTime, Dclt, msg
      )
    values (#{appid,jdbcType=VARCHAR}, #{clazz,jdbcType=VARCHAR}, #{method,jdbcType=VARCHAR}, 
      #{level,jdbcType=VARCHAR}, #{logger,jdbcType=VARCHAR}, #{remarks,jdbcType=VARCHAR}, 
      #{createtime,jdbcType=TIMESTAMP}, #{dclt,jdbcType=TIMESTAMP}, #{msg,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.pl.data.model.AppLog">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into app_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="appid != null">
        appId,
      </if>
      <if test="clazz != null">
        clazz,
      </if>
      <if test="method != null">
        method,
      </if>
      <if test="level != null">
        level,
      </if>
      <if test="logger != null">
        logger,
      </if>
      <if test="remarks != null">
        Remarks,
      </if>
      <if test="createtime != null">
        createTime,
      </if>
      <if test="dclt != null">
        Dclt,
      </if>
      <if test="msg != null">
        msg,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="appid != null">
        #{appid,jdbcType=VARCHAR},
      </if>
      <if test="clazz != null">
        #{clazz,jdbcType=VARCHAR},
      </if>
      <if test="method != null">
        #{method,jdbcType=VARCHAR},
      </if>
      <if test="level != null">
        #{level,jdbcType=VARCHAR},
      </if>
      <if test="logger != null">
        #{logger,jdbcType=VARCHAR},
      </if>
      <if test="remarks != null">
        #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null">
        #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="dclt != null">
        #{dclt,jdbcType=TIMESTAMP},
      </if>
      <if test="msg != null">
        #{msg,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.pl.data.model.AppLogExample" resultType="java.lang.Long">
    select count(*) from app_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update app_log
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.appid != null">
        appId = #{record.appid,jdbcType=VARCHAR},
      </if>
      <if test="record.clazz != null">
        clazz = #{record.clazz,jdbcType=VARCHAR},
      </if>
      <if test="record.method != null">
        method = #{record.method,jdbcType=VARCHAR},
      </if>
      <if test="record.level != null">
        level = #{record.level,jdbcType=VARCHAR},
      </if>
      <if test="record.logger != null">
        logger = #{record.logger,jdbcType=VARCHAR},
      </if>
      <if test="record.remarks != null">
        Remarks = #{record.remarks,jdbcType=VARCHAR},
      </if>
      <if test="record.createtime != null">
        createTime = #{record.createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.dclt != null">
        Dclt = #{record.dclt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.msg != null">
        msg = #{record.msg,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update app_log
    set id = #{record.id,jdbcType=BIGINT},
      appId = #{record.appid,jdbcType=VARCHAR},
      clazz = #{record.clazz,jdbcType=VARCHAR},
      method = #{record.method,jdbcType=VARCHAR},
      level = #{record.level,jdbcType=VARCHAR},
      logger = #{record.logger,jdbcType=VARCHAR},
      Remarks = #{record.remarks,jdbcType=VARCHAR},
      createTime = #{record.createtime,jdbcType=TIMESTAMP},
      Dclt = #{record.dclt,jdbcType=TIMESTAMP},
      msg = #{record.msg,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update app_log
    set id = #{record.id,jdbcType=BIGINT},
      appId = #{record.appid,jdbcType=VARCHAR},
      clazz = #{record.clazz,jdbcType=VARCHAR},
      method = #{record.method,jdbcType=VARCHAR},
      level = #{record.level,jdbcType=VARCHAR},
      logger = #{record.logger,jdbcType=VARCHAR},
      Remarks = #{record.remarks,jdbcType=VARCHAR},
      createTime = #{record.createtime,jdbcType=TIMESTAMP},
      Dclt = #{record.dclt,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.pl.data.model.AppLog">
    update app_log
    <set>
      <if test="appid != null">
        appId = #{appid,jdbcType=VARCHAR},
      </if>
      <if test="clazz != null">
        clazz = #{clazz,jdbcType=VARCHAR},
      </if>
      <if test="method != null">
        method = #{method,jdbcType=VARCHAR},
      </if>
      <if test="level != null">
        level = #{level,jdbcType=VARCHAR},
      </if>
      <if test="logger != null">
        logger = #{logger,jdbcType=VARCHAR},
      </if>
      <if test="remarks != null">
        Remarks = #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null">
        createTime = #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="dclt != null">
        Dclt = #{dclt,jdbcType=TIMESTAMP},
      </if>
      <if test="msg != null">
        msg = #{msg,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.pl.data.model.AppLog">
    update app_log
    set appId = #{appid,jdbcType=VARCHAR},
      clazz = #{clazz,jdbcType=VARCHAR},
      method = #{method,jdbcType=VARCHAR},
      level = #{level,jdbcType=VARCHAR},
      logger = #{logger,jdbcType=VARCHAR},
      Remarks = #{remarks,jdbcType=VARCHAR},
      createTime = #{createtime,jdbcType=TIMESTAMP},
      Dclt = #{dclt,jdbcType=TIMESTAMP},
      msg = #{msg,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.pl.data.model.AppLog">
    update app_log
    set appId = #{appid,jdbcType=VARCHAR},
      clazz = #{clazz,jdbcType=VARCHAR},
      method = #{method,jdbcType=VARCHAR},
      level = #{level,jdbcType=VARCHAR},
      logger = #{logger,jdbcType=VARCHAR},
      Remarks = #{remarks,jdbcType=VARCHAR},
      createTime = #{createtime,jdbcType=TIMESTAMP},
      Dclt = #{dclt,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>