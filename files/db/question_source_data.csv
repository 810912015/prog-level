"id";"qid";"lang";"source";"Remarks";"Dclt"
1;1;"C#";"public class Solution {
    public int[] ConstructArr(int[] a) {
 
    }
}";"";"2020-03-25 15:17:52"
2;1;"Java";"class Solution {
    public int[] constructArr(int[] a) {
 
    }
}";"";"2020-03-25 15:17:52"
3;1;"Rust";"impl Solution {
    pub fn construct_arr(a: Vec<i32>) -> Vec<i32> {
 
    }
}";"";"2020-03-25 15:17:52"
4;1;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* constructArr(int* a, int aSize, int* 
returnSize){
 
}";"";"2020-03-25 15:17:52"
5;1;"Scala";"object Solution {
    def constructArr(a: Array[Int]): Array[Int] = {
 
    }
}";"";"2020-03-25 15:17:52"
6;1;"Go";"func constructArr(a []int) []int {
 
}";"";"2020-03-25 15:17:52"
7;1;"Kotlin";"class Solution {
    fun constructArr(a: IntArray): IntArray {
 
    }
}";"";"2020-03-25 15:17:52"
8;1;"Python3";"class Solution:
    def constructArr(self, a: List[int]) -> List
[int]:";"";"2020-03-25 15:17:52"
9;1;"JavaScript";"/**
 * @param {number[]} a
 * @return {number[]}
 */
var constructArr = function(a) {
 
};";"";"2020-03-25 15:17:52"
10;1;"PHP";"class Solution {";"";"2020-03-25 15:17:52"
11;1;"Swift";"class Solution {
    func constructArr(_ a: [Int]) -> [Int] {
 
    }
}";"";"2020-03-25 15:17:52"
12;1;"Ruby";"# @param {Integer[]} a
# @return {Integer[]}
def construct_arr(a)
 
end";"";"2020-03-25 15:17:52"
13;1;"Python";"class Solution(object):
    def constructArr(self, a):
        """"""
        :type a: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:17:52"
14;2;"C#";"public class MinStack {
 
    /** initialize your data structure here. */
    public MinStack() {
 
    }
    
    public void Push(int x) {
 
    }
    
    public void Pop() {
 
    }
    
    public int Top() {
 
    }
    
    public int Min() {
 
    }
}
 
/**
 * Your MinStack object will be instantiated and ";"";"2020-03-25 15:17:52"
15;2;"Java";"class MinStack {
 
    /** initialize your data structure here. */
    public MinStack() {
 
    }
    
    public void push(int x) {
 
    }
    
    public void pop() {
 
    }
    
    public int top() {
 
    }
    
    public int min() {
 
    }
}
 
/**
 * Your MinStack object will be instantiated and ";"";"2020-03-25 15:17:52"
16;2;"C";"typedef struct {
 
} MinStack;
 
/** initialize your data structure here. */
 
MinStack* minStackCreate() {
 
}
 
void minStackPush(MinStack* obj, int x) {
 
}
 
void minStackPop(MinStack* obj) {
 
}
 
int minStackTop(MinStack* obj) {
 
}
 
int minStackMin(MinStack* obj) {
 
}
 ";"";"2020-03-25 15:17:52"
17;2;"Rust";"struct MinStack {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl MinStack {
 
    /** initialize your data structure here. */
    fn new() -> Self {
 
    }
    
    fn push(&self, x: i32) {
 
    }
    
    fn pop(&self) {
 
    }
    ";"";"2020-03-25 15:17:52"
18;2;"Scala";"class MinStack() {
 
    /** initialize your data structure here. */
 
 
    def push(x: Int) {
 
    }
 
    def pop() {
 
    }
 
    def top(): Int = {
 
    }
 
    def min(): Int = {
 
    }
 
}
 
/**
 * Your MinStack object will be instantiated and 
called as such:";"";"2020-03-25 15:17:52"
19;2;"Go";"type MinStack struct {
 
}
 
 
/** initialize your data structure here. */
func Constructor() MinStack {
 
}
 
 
func (this *MinStack) Push(x int)  {
 
}
 
 
func (this *MinStack) Pop()  {
 
}
 
 
func (this *MinStack) Top() int {
 
}
 
 ";"";"2020-03-25 15:17:52"
20;2;"Kotlin";"class MinStack() {
 
    /** initialize your data structure here. */
 
 
    fun push(x: Int) {
 
    }
 
    fun pop() {
 
    }
 
    fun top(): Int {
 
    }
 
    fun min(): Int {
 
    }
 
}
 
/**
 * Your MinStack object will be instantiated and 
called as such:";"";"2020-03-25 15:17:52"
21;2;"Python3";"class MinStack:
 
    def __init__(self):
        """"""
        initialize your data structure here.
        """"""
 
 
    def push(self, x: int) -> None:
 
 
    def pop(self) -> None:
 
 
    def top(self) -> int:
 
 
    def min(self) -> int:
 
 
 
# Your MinStack object will be instantiated and 
called as such:
# obj = MinStack()
# obj.push(x)
# obj.pop()";"";"2020-03-25 15:17:52"
22;2;"JavaScript";"/**
 * initialize your data structure here.
 */
var MinStack = function() {
 
};
 
/** 
 * @param {number} x
 * @return {void}
 */
MinStack.prototype.push = function(x) {
 
};
 
/**
 * @return {void}
 */
MinStack.prototype.pop = function() {
 
};
 
/**
 * @return {number}
 */
MinStack.prototype.top = function() {";"";"2020-03-25 15:17:52"
23;2;"PHP";"class MinStack {
    /**
     * initialize your data structure here.
     */
    function __construct() {
 
    }
 
    /**
     * @param Integer $x
     * @return NULL
     */
    function push($x) {
 
    }
 
    /**
     * @return NULL
     */
    function pop() {
 
    }
 
    /**
     * @return Integer
     */";"";"2020-03-25 15:17:52"
24;2;"Swift";"class MinStack {
 
    /** initialize your data structure here. */
    init() {
 
    }
    
    func push(_ x: Int) {
 
    }
    
    func pop() {
 
    }
    
    func top() -> Int {
 
    }
    
    func min() -> Int {
 
    }
}
 
/**
 * Your MinStack object will be instantiated and ";"";"2020-03-25 15:17:52"
25;2;"Ruby";"class MinStack
 
=begin
    initialize your data structure here.
=end
    def initialize()
 
    end
 
 
=begin
    :type x: Integer
    :rtype: Void
=end
    def push(x)
 
    end
 
 
=begin
    :rtype: Void
=end
    def pop()
 
    end
 ";"";"2020-03-25 15:17:52"
26;2;"Python";"class MinStack(object):
 
    def __init__(self):
        """"""
        initialize your data structure here.
        """"""
 
 
    def push(self, x):
        """"""
        :type x: int
        :rtype: None
        """"""
 
 
    def pop(self):
        """"""
        :rtype: None
        """"""
 
 
    def top(self):
        """"""
        :rtype: int
        """"""
 ";"";"2020-03-25 15:17:52"
27;3;"C#";"public class MyQueue {
 
    /** Initialize your data structure here. */
    public MyQueue() {
 
    }
    
    /** Push element x to the back of queue. */
    public void Push(int x) {
 
    }
    
    /** Removes the element from in front of queue 
and returns that element. */
    public int Pop() {
 
    }
    
    /** Get the front element. */
    public int Peek() {
 
    }
    
    /** Returns whether the queue is empty. */
    public bool Empty() {
 ";"";"2020-03-25 15:17:52"
28;3;"Java";"class MyQueue {
 
    /** Initialize your data structure here. */
    public MyQueue() {
 
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
 
    }
    
    /** Removes the element from in front of queue 
and returns that element. */
    public int pop() {
 
    }
    
    /** Get the front element. */
    public int peek() {
 
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
 ";"";"2020-03-25 15:17:52"
29;3;"Rust";"struct MyQueue {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl MyQueue {
 
    /** Initialize your data structure here. */
    fn new() -> Self {
 
    }
    
    /** Push element x to the back of queue. */
    fn push(&self, x: i32) {
 
    }
    
    /** Removes the element from in front of queue 
and returns that element. */
    fn pop(&self) -> i32 {";"";"2020-03-25 15:17:52"
30;3;"C";"typedef struct {
 
} MyQueue;
 
/** Initialize your data structure here. */
 
MyQueue* myQueueCreate() {
 
}
 
/** Push element x to the back of queue. */
void myQueuePush(MyQueue* obj, int x) {
 
}
 
/** Removes the element from in front of queue and 
returns that element. */
int myQueuePop(MyQueue* obj) {
 
}
 
/** Get the front element. */
int myQueuePeek(MyQueue* obj) {
 
}
 ";"";"2020-03-25 15:17:52"
31;3;"Scala";"class MyQueue() {
 
    /** Initialize your data structure here. */
 
 
    /** Push element x to the back of queue. */
    def push(x: Int) {
 
    }
 
    /** Removes the element from in front of queue 
and returns that element. */
    def pop(): Int = {
 
    }
 
    /** Get the front element. */
    def peek(): Int = {
 
    }
 
    /** Returns whether the queue is empty. */
    def empty(): Boolean = {
 
    }
 ";"";"2020-03-25 15:17:52"
32;3;"Go";"type MyQueue struct {
 
}
 
 
/** Initialize your data structure here. */
func Constructor() MyQueue {
 
}
 
 
/** Push element x to the back of queue. */
func (this *MyQueue) Push(x int)  {
 
}
 
 
/** Removes the element from in front of queue and 
returns that element. */
func (this *MyQueue) Pop() int {
 
}
 
 
/** Get the front element. */
func (this *MyQueue) Peek() int {";"";"2020-03-25 15:17:52"
33;3;"Kotlin";"class MyQueue() {
 
    /** Initialize your data structure here. */
 
 
    /** Push element x to the back of queue. */
    fun push(x: Int) {
 
    }
 
    /** Removes the element from in front of queue 
and returns that element. */
    fun pop(): Int {
 
    }
 
    /** Get the front element. */
    fun peek(): Int {
 
    }
 
    /** Returns whether the queue is empty. */
    fun empty(): Boolean {
 
    }
 ";"";"2020-03-25 15:17:52"
34;3;"Python3";"class MyQueue:
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
 
 
    def push(self, x: int) -> None:
        """"""
        Push element x to the back of queue.
        """"""
 
 
    def pop(self) -> int:
        """"""
        Removes the element from in front of queue 
and returns that element.
        """"""
 
 
    def peek(self) -> int:
        """"""
        Get the front element.
        """"""
 ";"";"2020-03-25 15:17:52"
35;3;"JavaScript";"/**
 * Initialize your data structure here.
 */
var MyQueue = function() {
 
};
 
/**
 * Push element x to the back of queue. 
 * @param {number} x
 * @return {void}
 */
MyQueue.prototype.push = function(x) {
 
};
 
/**
 * Removes the element from in front of queue and 
returns that element.
 * @return {number}
 */
MyQueue.prototype.pop = function() {
 
};
 
/**";"";"2020-03-25 15:17:52"
36;3;"PHP";"class MyQueue {
    /**
     * Initialize your data structure here.
     */
    function __construct() {
 
    }
 
    /**
     * Push element x to the back of queue.
     * @param Integer $x
     * @return NULL
     */
    function push($x) {
 
    }
 
    /**
     * Removes the element from in front of queue 
and returns that element.
     * @return Integer
     */
    function pop() {
 
    }
 ";"";"2020-03-25 15:17:52"
37;3;"Swift";"class MyQueue {
 
    /** Initialize your data structure here. */
    init() {
 
    }
    
    /** Push element x to the back of queue. */
    func push(_ x: Int) {
 
    }
    
    /** Removes the element from in front of queue 
and returns that element. */
    func pop() -> Int {
 
    }
    
    /** Get the front element. */
    func peek() -> Int {
 
    }
    
    /** Returns whether the queue is empty. */
    func empty() -> Bool {
 ";"";"2020-03-25 15:17:52"
38;3;"Ruby";"class MyQueue
 
=begin
    Initialize your data structure here.
=end
    def initialize()
 
    end
 
 
=begin
    Push element x to the back of queue.
    :type x: Integer
    :rtype: Void
=end
    def push(x)
 
    end
 
 
=begin
    Removes the element from in front of queue and 
returns that element.
    :rtype: Integer
=end
    def pop()";"";"2020-03-25 15:17:52"
39;3;"Python";"class MyQueue(object):
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
 
 
    def push(self, x):
        """"""
        Push element x to the back of queue.
        :type x: int
        :rtype: None
        """"""
 
 
    def pop(self):
        """"""
        Removes the element from in front of queue 
and returns that element.
        :rtype: int
        """"""
 
 
    def peek(self):
        """"""";"";"2020-03-25 15:17:52"
40;4;"C#";"public class Solution {
    public int MySqrt(int x) {
 
    }
}";"";"2020-03-25 15:17:52"
41;4;"Java";"class Solution {
    public int mySqrt(int x) {
 
    }
}";"";"2020-03-25 15:17:52"
42;4;"C";"int mySqrt(int x){
 
}";"";"2020-03-25 15:17:52"
43;4;"Rust";"impl Solution {
    pub fn my_sqrt(x: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:17:52"
44;4;"Scala";"object Solution {
    def mySqrt(x: Int): Int = {
 
    }
}";"";"2020-03-25 15:17:52"
45;4;"Go";"func mySqrt(x int) int {
 
}";"";"2020-03-25 15:17:52"
46;4;"Kotlin";"class Solution {
    fun mySqrt(x: Int): Int {
 
    }
}";"";"2020-03-25 15:17:52"
47;4;"Python3";"class Solution:
    def mySqrt(self, x: int) -> int:";"";"2020-03-25 15:17:52"
48;4;"JavaScript";"/**
 * @param {number} x
 * @return {number}
 */
var mySqrt = function(x) {
 
};";"";"2020-03-25 15:17:52"
49;4;"PHP";"class Solution {
 
    /**
     * @param Integer $x
     * @return Integer
     */
    function mySqrt($x) {
        
    }
}";"";"2020-03-25 15:17:52"
50;4;"Swift";"class Solution {
    func mySqrt(_ x: Int) -> Int {
        
    }
}";"";"2020-03-25 15:17:52"
51;4;"Ruby";"# @param {Integer} x";"";"2020-03-25 15:17:52"
52;4;"Python";"class Solution(object):
    def mySqrt(self, x):
        """"""
        :type x: int
        :rtype: int
        """"""";"";"2020-03-25 15:17:52"
53;5;"C#";"public class Solution {
    public string ShortestCommonSupersequence
(string str1, string str2) {
 
    }
}";"";"2020-03-25 15:17:52"
54;5;"Java";"class Solution {
    public String shortestCommonSupersequence
(String str1, String str2) {
 
    }
}";"";"2020-03-25 15:17:52"
55;5;"Rust";"impl Solution {
    pub fn shortest_common_supersequence(str1: 
String, str2: String) -> String {
        
    }
}";"";"2020-03-25 15:17:52"
56;5;"C";"char * shortestCommonSupersequence(char * str1, 
char * str2){
 
}";"";"2020-03-25 15:17:52"
57;5;"Scala";"object Solution {
    def shortestCommonSupersequence(str1: String, 
str2: String): String = {
 
    }
}";"";"2020-03-25 15:17:52"
58;5;"Go";"func shortestCommonSupersequence(str1 string, str2 
string) string {
 
}";"";"2020-03-25 15:17:52"
59;5;"Kotlin";"class Solution {
    fun shortestCommonSupersequence(str1: String, 
str2: String): String {
 
    }
}";"";"2020-03-25 15:17:52"
60;5;"Python3";"class Solution:
    def shortestCommonSupersequence(self, str1: str,
 str2: str) -> str:";"";"2020-03-25 15:17:52"
61;5;"JavaScript";"/**
 * @param {string} str1
 * @param {string} str2
 * @return {string}
 */
var shortestCommonSupersequence = function(str1, 
str2) {
 
};";"";"2020-03-25 15:17:52"
62;5;"PHP";"class Solution {
 
    /**
     * @param String $str1
     * @param String $str2
     * @return String
     */
    function shortestCommonSupersequence($str1, 
$str2) {
        
    }
}";"";"2020-03-25 15:17:52"
63;5;"Swift";"class Solution {
    func shortestCommonSupersequence(_ str1: String,
 _ str2: String) -> String {
        
    }
}";"";"2020-03-25 15:17:52"
64;5;"Ruby";"# @param {String} str1
# @param {String} str2
# @return {String}
def shortest_common_supersequence(str1, str2)
 
end";"";"2020-03-25 15:17:52"
65;5;"Python";"class Solution(object):
    def shortestCommonSupersequence(self, str1, 
str2):
        """"""
        :type str1: str
        :type str2: str
        :rtype: str
        """"""";"";"2020-03-25 15:17:52"
66;6;"C#";"public class Solution {
    public int[] RearrangeBarcodes(int[] barcodes) {
 
    }
}";"";"2020-03-25 15:17:52"
67;6;"Java";"class Solution {
    public int[] rearrangeBarcodes(int[] barcodes) {
 
    }
}";"";"2020-03-25 15:17:52"
68;6;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* rearrangeBarcodes(int* barcodes, int 
barcodesSize, int* returnSize){
 
}";"";"2020-03-25 15:17:52"
69;6;"Rust";"impl Solution {
    pub fn rearrange_barcodes(barcodes: Vec<i32>) 
-> Vec<i32> {
        
    }
}";"";"2020-03-25 15:17:52"
70;6;"Scala";"object Solution {
    def rearrangeBarcodes(barcodes: Array[Int]): 
Array[Int] = {
 
    }
}";"";"2020-03-25 15:17:52"
71;6;"Go";"func rearrangeBarcodes(barcodes []int) []int {
 
}";"";"2020-03-25 15:17:52"
72;6;"Kotlin";"class Solution {
    fun rearrangeBarcodes(barcodes: IntArray): 
IntArray {
 
    }
}";"";"2020-03-25 15:17:52"
73;6;"Python3";"class Solution:
    def rearrangeBarcodes(self, barcodes: List[int])
 -> List[int]:";"";"2020-03-25 15:17:52"
74;6;"JavaScript";"/**
 * @param {number[]} barcodes
 * @return {number[]}
 */
var rearrangeBarcodes = function(barcodes) {
 
};";"";"2020-03-25 15:17:52"
75;6;"PHP";"class Solution {
 
    /**
     * @param Integer[] $barcodes
     * @return Integer[]
     */
    function rearrangeBarcodes($barcodes) {
        
    }
}";"";"2020-03-25 15:17:52"
76;6;"Swift";"class Solution {
    func rearrangeBarcodes(_ barcodes: [Int]) -> 
[Int] {
        
    }
}";"";"2020-03-25 15:17:52"
77;6;"Ruby";"# @param {Integer[]} barcodes";"";"2020-03-25 15:17:52"
78;6;"Python";"class Solution(object):
    def rearrangeBarcodes(self, barcodes):
        """"""
        :type barcodes: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:17:52"
79;7;"C#";"public class Solution {
    public int BalancedStringSplit(string s) {
 
    }
}";"";"2020-03-25 15:17:52"
80;7;"Java";"class Solution {
    public int balancedStringSplit(String s) {
 
    }
}";"";"2020-03-25 15:17:52"
81;7;"C";"int balancedStringSplit(char * s){
 
}";"";"2020-03-25 15:17:52"
82;7;"Rust";"impl Solution {
    pub fn balanced_string_split(s: String) -> i32 {
 
    }
}";"";"2020-03-25 15:17:52"
83;7;"Scala";"object Solution {
    def balancedStringSplit(s: String): Int = {
 
    }
}";"";"2020-03-25 15:17:52"
84;7;"Go";"func balancedStringSplit(s string) int {
 
}";"";"2020-03-25 15:17:52"
85;7;"Kotlin";"class Solution {
    fun balancedStringSplit(s: String): Int {
 
    }
}";"";"2020-03-25 15:17:52"
86;7;"Python3";"class Solution:
    def balancedStringSplit(self, s: str) -> int:";"";"2020-03-25 15:17:52"
87;7;"JavaScript";"/**
 * @param {string} s
 * @return {number}
 */
var balancedStringSplit = function(s) {
 
};";"";"2020-03-25 15:17:52"
88;7;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return Integer
     */
    function balancedStringSplit($s) {
 
    }
}";"";"2020-03-25 15:17:52"
89;7;"Swift";"class Solution {
    func balancedStringSplit(_ s: String) -> Int {
 
    }
}";"";"2020-03-25 15:17:52"
90;7;"Ruby";"# @param {String} s
# @return {Integer}
def balanced_string_split(s)
 
end";"";"2020-03-25 15:17:52"
91;7;"Python";"class Solution(object):
    def balancedStringSplit(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""";"";"2020-03-25 15:17:52"
92;8;"C#";"public class Solution {
    public int WaysToChange(int n) {
 
    }
}";"";"2020-03-25 15:17:52"
93;8;"Java";"class Solution {
    public int waysToChange(int n) {
 
    }
}";"";"2020-03-25 15:17:52"
94;8;"C";"int waysToChange(int n){
 
}";"";"2020-03-25 15:17:52"
95;8;"Rust";"impl Solution {
    pub fn ways_to_change(n: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:17:52"
96;8;"Scala";"object Solution {
    def waysToChange(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:17:52"
97;8;"Go";"func waysToChange(n int) int {
 
}";"";"2020-03-25 15:17:52"
98;8;"Kotlin";"class Solution {
    fun waysToChange(n: Int): Int {
 
    }
}";"";"2020-03-25 15:17:52"
99;8;"Python3";"class Solution:
    def waysToChange(self, n: int) -> int:";"";"2020-03-25 15:17:52"
100;8;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var waysToChange = function(n) {
 
};";"";"2020-03-25 15:17:52"
101;8;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function waysToChange($n) {
 
    }
}";"";"2020-03-25 15:17:52"
102;8;"Swift";"class Solution {
    func waysToChange(_ n: Int) -> Int {
 
    }
}";"";"2020-03-25 15:17:52"
103;8;"Ruby";"# @param {Integer} n";"";"2020-03-25 15:17:52"
104;8;"Python";"class Solution(object):
    def waysToChange(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:17:52"
105;9;"C#";"public class Solution {
    public int OrangesRotting(int[][] grid) {
 
    }
}";"";"2020-03-25 15:17:52"
106;9;"Java";"class Solution {
    public int orangesRotting(int[][] grid) {
 
    }
}";"";"2020-03-25 15:17:52"
107;9;"C";"int orangesRotting(int** grid, int gridSize, int* 
gridColSize){
 
}";"";"2020-03-25 15:17:52"
108;9;"Rust";"impl Solution {
    pub fn oranges_rotting(grid: Vec<Vec<i32>>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:17:52"
109;9;"Scala";"object Solution {
    def orangesRotting(grid: Array[Array[Int]]): 
Int = {
 
    }
}";"";"2020-03-25 15:17:52"
110;9;"Go";"func orangesRotting(grid [][]int) int {
 
}";"";"2020-03-25 15:17:52"
111;9;"Kotlin";"class Solution {
    fun orangesRotting(grid: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:17:52"
112;9;"Python3";"class Solution:
    def orangesRotting(self, grid: List[List[int]]) 
-> int:";"";"2020-03-25 15:17:52"
113;9;"JavaScript";"/**
 * @param {number[][]} grid
 * @return {number}
 */
var orangesRotting = function(grid) {
 
};";"";"2020-03-25 15:17:52"
114;9;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $grid
     * @return Integer
     */
    function orangesRotting($grid) {
        
    }
}";"";"2020-03-25 15:17:52"
115;9;"Swift";"class Solution {
    func orangesRotting(_ grid: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:17:52"
116;9;"Ruby";"# @param {Integer[][]} grid";"";"2020-03-25 15:17:52"
117;9;"Python";"class Solution(object):
    def orangesRotting(self, grid):
        """"""
        :type grid: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:17:52"
118;10;"C#";"public class Solution {
    public int Add(int a, int b) {
 
    }
}";"";"2020-03-25 15:17:52"
119;10;"Java";"class Solution {
    public int add(int a, int b) {
 
    }
}";"";"2020-03-25 15:17:52"
120;10;"C";"int add(int a, int b){
 
}";"";"2020-03-25 15:17:52"
121;10;"Rust";"impl Solution {
    pub fn add(a: i32, b: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:17:52"
122;10;"Scala";"object Solution {
    def add(a: Int, b: Int): Int = {
 
    }
}";"";"2020-03-25 15:17:52"
123;10;"Go";"func add(a int, b int) int {
 
}";"";"2020-03-25 15:17:52"
124;10;"Kotlin";"class Solution {
    fun add(a: Int, b: Int): Int {
 
    }
}";"";"2020-03-25 15:17:52"
125;10;"Python3";"class Solution:
    def add(self, a: int, b: int) -> int:";"";"2020-03-25 15:17:52"
126;10;"JavaScript";"/**
 * @param {number} a
 * @param {number} b
 * @return {number}
 */
var add = function(a, b) {
 
};";"";"2020-03-25 15:17:52"
127;10;"PHP";"class Solution {
 
    /**
     * @param Integer $a
     * @param Integer $b
     * @return Integer
     */
    function add($a, $b) {
 
    }
}";"";"2020-03-25 15:17:52"
128;10;"Swift";"class Solution {
    func add(_ a: Int, _ b: Int) -> Int {
 
    }
}";"";"2020-03-25 15:17:52"
129;10;"Ruby";"# @param {Integer} a";"";"2020-03-25 15:17:52"
130;10;"Python";"class Solution(object):
    def add(self, a, b):
        """"""
        :type a: int
        :type b: int
        :rtype: int
        """"""";"";"2020-03-25 15:17:52"
131;11;"C#";"public class Solution {
    public int RotatedDigits(int N) {
 
    }
}";"";"2020-03-25 15:17:53"
132;11;"Java";"class Solution {
    public int rotatedDigits(int N) {
 
    }
}";"";"2020-03-25 15:17:53"
133;11;"C";"int rotatedDigits(int N){
 
}";"";"2020-03-25 15:17:53"
134;11;"Rust";"impl Solution {
    pub fn rotated_digits(n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:17:53"
135;11;"Scala";"object Solution {
    def rotatedDigits(N: Int): Int = {
 
    }
}";"";"2020-03-25 15:17:53"
136;11;"Go";"func rotatedDigits(N int) int {
 
}";"";"2020-03-25 15:17:53"
137;11;"Kotlin";"class Solution {
    fun rotatedDigits(N: Int): Int {
 
    }
}";"";"2020-03-25 15:17:53"
138;11;"Python3";"class Solution:
    def rotatedDigits(self, N: int) -> int:";"";"2020-03-25 15:17:53"
139;11;"JavaScript";"/**
 * @param {number} N
 * @return {number}
 */
var rotatedDigits = function(N) {
 
};";"";"2020-03-25 15:17:53"
140;11;"PHP";"class Solution {
 
    /**
     * @param Integer $N
     * @return Integer
     */
    function rotatedDigits($N) {
        
    }
}";"";"2020-03-25 15:17:53"
141;11;"Swift";"class Solution {
    func rotatedDigits(_ N: Int) -> Int {
        
    }
}";"";"2020-03-25 15:17:53"
142;11;"Ruby";"# @param {Integer} n
# @return {Integer}
def rotated_digits(n)
 
end";"";"2020-03-25 15:17:53"
143;11;"Python";"class Solution(object):
    def rotatedDigits(self, N):
        """"""
        :type N: int
        :rtype: int
        """"""";"";"2020-03-25 15:17:53"
144;12;"C#";"public class Solution {
    public IList<int> SplitIntoFibonacci(string S) {
 
    }
}";"";"2020-03-25 15:17:53"
145;12;"Java";"class Solution {
    public List<Integer> splitIntoFibonacci(String 
S) {
 
    }
}";"";"2020-03-25 15:17:53"
146;12;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* splitIntoFibonacci(char * S, int* returnSize){
 
}";"";"2020-03-25 15:17:53"
147;12;"Rust";"impl Solution {
    pub fn split_into_fibonacci(s: String) -> 
Vec<i32> {
        
    }
}";"";"2020-03-25 15:17:53"
148;12;"Scala";"object Solution {
    def splitIntoFibonacci(S: String): List[Int] = {
 
    }
}";"";"2020-03-25 15:17:53"
149;12;"Python3";"class Solution:
    def splitIntoFibonacci(self, S: str) -> List
[int]:";"";"2020-03-25 15:17:53"
150;12;"JavaScript";"/**
 * @param {string} S
 * @return {number[]}
 */
var splitIntoFibonacci = function(S) {
 
};";"";"2020-03-25 15:17:53"
151;12;"Go";"func splitIntoFibonacci(S string) []int {
 
}";"";"2020-03-25 15:17:53"
152;12;"PHP";"class Solution {
 
    /**
     * @param String $S
     * @return Integer[]
     */
    function splitIntoFibonacci($S) {
        
    }
}";"";"2020-03-25 15:17:53"
153;12;"Ruby";"# @param {String} s";"";"2020-03-25 15:17:53"
154;12;"Python";"class Solution(object):
    def splitIntoFibonacci(self, S):
        """"""
        :type S: str
        :rtype: List[int]
        """"""";"";"2020-03-25 15:17:53"
155;12;"Kotlin";"class Solution {
    fun splitIntoFibonacci(S: String): List<Int> {
 
    }
}";"";"2020-03-25 15:17:53"
156;13;"C#";"public class Solution {
    public int[][] ColorBorder(int[][] grid, int r0,
 int c0, int color) {
 
    }
}";"";"2020-03-25 15:17:53"
157;13;"Java";"class Solution {
    public int[][] colorBorder(int[][] grid, int r0,
 int c0, int color) {
 
    }
}";"";"2020-03-25 15:17:53"
158;13;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** colorBorder(int** grid, int gridSize, int* 
gridColSize, int r0, int c0, int color, int* 
returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:17:53"
159;13;"Rust";"impl Solution {
    pub fn color_border(grid: Vec<Vec<i32>>, r0: 
i32, c0: i32, color: i32) -> Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:17:53"
160;13;"Scala";"object Solution {
    def colorBorder(grid: Array[Array[Int]], r0: 
Int, c0: Int, color: Int): Array[Array[Int]] = {
 
    }
}";"";"2020-03-25 15:17:53"
161;13;"Go";"func colorBorder(grid [][]int, r0 int, c0 int, 
color int) [][]int {
 
}";"";"2020-03-25 15:17:53"
162;13;"Kotlin";"class Solution {
    fun colorBorder(grid: Array<IntArray>, r0: Int, 
c0: Int, color: Int): Array<IntArray> {
 
    }
}";"";"2020-03-25 15:17:53"
163;13;"Python3";"class Solution:
    def colorBorder(self, grid: List[List[int]], 
r0: int, c0: int, color: int) -> List[List[int]]:";"";"2020-03-25 15:17:53"
164;13;"JavaScript";"/**
 * @param {number[][]} grid
 * @param {number} r0
 * @param {number} c0
 * @param {number} color
 * @return {number[][]}
 */
var colorBorder = function(grid, r0, c0, color) {
 
};";"";"2020-03-25 15:17:53"
165;13;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $grid
     * @param Integer $r0
     * @param Integer $c0
     * @param Integer $color
     * @return Integer[][]
     */
    function colorBorder($grid, $r0, $c0, $color) {
        
    }
}";"";"2020-03-25 15:17:53"
166;13;"Swift";"class Solution {
    func colorBorder(_ grid: [[Int]], _ r0: Int, _ 
c0: Int, _ color: Int) -> [[Int]] {
        
    }
}";"";"2020-03-25 15:17:53"
167;13;"Ruby";"# @param {Integer[][]} grid";"";"2020-03-25 15:17:53"
168;13;"Python";"class Solution(object):
    def colorBorder(self, grid, r0, c0, color):
        """"""
        :type grid: List[List[int]]
        :type r0: int
        :type c0: int
        :type color: int
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:17:53"
169;14;"C#";"public class Solution {
    public string LicenseKeyFormatting(string S, 
int K) {
 
    }
}";"";"2020-03-25 15:17:53"
170;14;"Java";"class Solution {
    public String licenseKeyFormatting(String S, 
int K) {
 
    }
}";"";"2020-03-25 15:17:53"
171;14;"Rust";"impl Solution {
    pub fn license_key_formatting(s: String, k: i32)
 -> String {
        
    }
}";"";"2020-03-25 15:17:53"
172;14;"C";"char * licenseKeyFormatting(char * S, int K){
 
}";"";"2020-03-25 15:17:53"
173;14;"Scala";"object Solution {
    def licenseKeyFormatting(S: String, K: Int): 
String = {
 
    }
}";"";"2020-03-25 15:17:53"
174;14;"Go";"func licenseKeyFormatting(S string, K int) string {
 
}";"";"2020-03-25 15:17:53"
175;14;"Kotlin";"class Solution {
    fun licenseKeyFormatting(S: String, K: Int): 
String {
 
    }
}";"";"2020-03-25 15:17:53"
176;14;"Python3";"class Solution:
    def licenseKeyFormatting(self, S: str, K: int) 
-> str:";"";"2020-03-25 15:17:53"
177;14;"JavaScript";"/**
 * @param {string} S
 * @param {number} K
 * @return {string}
 */
var licenseKeyFormatting = function(S, K) {
 
};";"";"2020-03-25 15:17:53"
178;14;"PHP";"class Solution {
 
    /**
     * @param String $S
     * @param Integer $K
     * @return String
     */
    function licenseKeyFormatting($S, $K) {
        
    }
}";"";"2020-03-25 15:17:53"
179;14;"Swift";"class Solution {
    func licenseKeyFormatting(_ S: String, _ K: Int)
 -> String {
        
    }
}";"";"2020-03-25 15:17:53"
180;14;"Ruby";"# @param {String} s
# @param {Integer} k
# @return {String}
def license_key_formatting(s, k)
 
end";"";"2020-03-25 15:17:53"
181;14;"Python";"class Solution(object):
    def licenseKeyFormatting(self, S, K):
        """"""
        :type S: str
        :type K: int
        :rtype: str
        """"""";"";"2020-03-25 15:17:53"
182;15;"C#";"public class Solution {
    public bool BackspaceCompare(string S, string T)
 {
 
    }
}";"";"2020-03-25 15:17:53"
183;15;"Java";"class Solution {
    public boolean backspaceCompare(String S, 
String T) {
 
    }
}";"";"2020-03-25 15:17:53"
184;15;"C";"bool backspaceCompare(char * S, char * T){
 
}";"";"2020-03-25 15:17:53"
185;15;"Rust";"impl Solution {
    pub fn backspace_compare(s: String, t: String) 
-> bool {
        
    }
}";"";"2020-03-25 15:17:53"
186;15;"Scala";"object Solution {
    def backspaceCompare(S: String, T: String): 
Boolean = {
 
    }
}";"";"2020-03-25 15:17:53"
187;15;"Go";"func backspaceCompare(S string, T string) bool {
 
}";"";"2020-03-25 15:17:53"
188;15;"Kotlin";"class Solution {
    fun backspaceCompare(S: String, T: String): 
Boolean {
 
    }
}";"";"2020-03-25 15:17:53"
189;15;"Python3";"class Solution:
    def backspaceCompare(self, S: str, T: str) -> 
bool:";"";"2020-03-25 15:17:53"
190;15;"JavaScript";"/**
 * @param {string} S
 * @param {string} T
 * @return {boolean}
 */
var backspaceCompare = function(S, T) {
 
};";"";"2020-03-25 15:17:53"
191;15;"PHP";"class Solution {
 
    /**
     * @param String $S
     * @param String $T
     * @return Boolean
     */
    function backspaceCompare($S, $T) {
        
    }
}";"";"2020-03-25 15:17:53"
192;15;"Swift";"class Solution {
    func backspaceCompare(_ S: String, _ T: String) 
-> Bool {
        
    }
}";"";"2020-03-25 15:17:53"
193;15;"Ruby";"# @param {String} s";"";"2020-03-25 15:17:53"
194;15;"Python";"class Solution(object):
    def backspaceCompare(self, S, T):
        """"""
        :type S: str
        :type T: str
        :rtype: bool
        """"""";"";"2020-03-25 15:17:53"
195;16;"C#";"public class Solution {
    public int DistinctSubseqII(string S) {
 
    }
}";"";"2020-03-25 15:17:53"
196;16;"Java";"class Solution {
    public int distinctSubseqII(String S) {
 
    }
}";"";"2020-03-25 15:17:53"
197;16;"Rust";"impl Solution {
    pub fn distinct_subseq_ii(s: String) -> i32 {
        
    }
}";"";"2020-03-25 15:17:53"
198;16;"C";"int distinctSubseqII(char * S){
 
}";"";"2020-03-25 15:17:53"
199;16;"Scala";"object Solution {
    def distinctSubseqII(S: String): Int = {
 
    }
}";"";"2020-03-25 15:17:53"
200;16;"Go";"func distinctSubseqII(S string) int {
 
}";"";"2020-03-25 15:17:53"
201;16;"Kotlin";"class Solution {
    fun distinctSubseqII(S: String): Int {
 
    }
}";"";"2020-03-25 15:17:53"
202;16;"Python3";"class Solution:
    def distinctSubseqII(self, S: str) -> int:";"";"2020-03-25 15:17:53"
203;16;"JavaScript";"/**
 * @param {string} S
 * @return {number}
 */
var distinctSubseqII = function(S) {
 
};";"";"2020-03-25 15:17:53"
204;16;"PHP";"class Solution {";"";"2020-03-25 15:17:53"
205;16;"Swift";"class Solution {
    func distinctSubseqII(_ S: String) -> Int {
        
    }
}";"";"2020-03-25 15:17:53"
206;16;"Ruby";"# @param {String} s
# @return {Integer}
def distinct_subseq_ii(s)
 
end";"";"2020-03-25 15:17:53"
207;16;"Python";"class Solution(object):
    def distinctSubseqII(self, S):
        """"""
        :type S: str
        :rtype: int
        """"""";"";"2020-03-25 15:17:53"
208;17;"C#";"public class Solution {
    public string[] FindWords(string[] words) {
 
    }
}";"";"2020-03-25 15:17:53"
209;17;"Java";"class Solution {
    public String[] findWords(String[] words) {
 
    }
}";"";"2020-03-25 15:17:53"
210;17;"Rust";"impl Solution {
    pub fn find_words(words: Vec<String>) -> 
Vec<String> {
        
    }
}";"";"2020-03-25 15:17:53"
211;17;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** findWords(char ** words, int wordsSize, 
int* returnSize){
 
}";"";"2020-03-25 15:17:53"
212;17;"Scala";"object Solution {
    def findWords(words: Array[String]): Array
[String] = {
 
    }
}";"";"2020-03-25 15:17:53"
213;17;"Go";"func findWords(words []string) []string {
 
}";"";"2020-03-25 15:17:53"
214;17;"Kotlin";"class Solution {
    fun findWords(words: Array<String>): 
Array<String> {
 
    }
}";"";"2020-03-25 15:17:53"
215;17;"Python3";"class Solution:
    def findWords(self, words: List[str]) -> List
[str]:";"";"2020-03-25 15:17:53"
216;17;"JavaScript";"/**
 * @param {string[]} words
 * @return {string[]}
 */
var findWords = function(words) {
 
};";"";"2020-03-25 15:17:53"
217;17;"PHP";"class Solution {
 
    /**
     * @param String[] $words
     * @return String[]
     */
    function findWords($words) {
        
    }
}";"";"2020-03-25 15:17:53"
218;17;"Swift";"class Solution {
    func findWords(_ words: [String]) -> [String] {
        
    }
}";"";"2020-03-25 15:17:53"
219;17;"Ruby";"# @param {String[]} words
# @return {String[]}
def find_words(words)
 
end";"";"2020-03-25 15:17:53"
220;17;"Python";"class Solution(object):
    def findWords(self, words):
        """"""
        :type words: List[str]
        :rtype: List[str]
        """"""";"";"2020-03-25 15:17:53"
221;18;"C#";"public class Solution {
    public int MaxEnvelopes(int[][] envelopes) {
 
    }
}";"";"2020-03-25 15:17:53"
222;18;"Java";"class Solution {
    public int maxEnvelopes(int[][] envelopes) {
 
    }
}";"";"2020-03-25 15:17:53"
223;18;"C";"int maxEnvelopes(int** envelopes, int envelopesSize,
 int* envelopesColSize){
 
}";"";"2020-03-25 15:17:53"
224;18;"Rust";"impl Solution {
    pub fn max_envelopes(envelopes: Vec<Vec<i32>>) 
-> i32 {
        
    }
}";"";"2020-03-25 15:17:53"
225;18;"Scala";"object Solution {
    def maxEnvelopes(envelopes: Array[Array[Int]]): 
Int = {
 
    }
}";"";"2020-03-25 15:17:53"
226;18;"Go";"func maxEnvelopes(envelopes [][]int) int {
 
}";"";"2020-03-25 15:17:53"
227;18;"Kotlin";"class Solution {
    fun maxEnvelopes(envelopes: Array<IntArray>): 
Int {
 
    }
}";"";"2020-03-25 15:17:53"
228;18;"Python3";"class Solution:
    def maxEnvelopes(self, envelopes: List[List[int]
]) -> int:";"";"2020-03-25 15:17:53"
229;18;"JavaScript";"/**
 * @param {number[][]} envelopes
 * @return {number}
 */
var maxEnvelopes = function(envelopes) {
 
};";"";"2020-03-25 15:17:53"
230;18;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $envelopes
     * @return Integer
     */
    function maxEnvelopes($envelopes) {
        
    }
}";"";"2020-03-25 15:17:53"
231;18;"Swift";"class Solution {
    func maxEnvelopes(_ envelopes: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:17:53"
232;18;"Ruby";"# @param {Integer[][]} envelopes
# @return {Integer}
def max_envelopes(envelopes)
 
end";"";"2020-03-25 15:17:53"
233;18;"Python";"class Solution(object):
    def maxEnvelopes(self, envelopes):
        """"""
        :type envelopes: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:17:53"
234;19;"C#";"public class Solution {
    public int[][] KClosest(int[][] points, int K) {
 
    }
}";"";"2020-03-25 15:17:53"
235;19;"Java";"class Solution {
    public int[][] kClosest(int[][] points, int K) {
 
    }
}";"";"2020-03-25 15:17:53"
236;19;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** kClosest(int** points, int pointsSize, int* 
pointsColSize, int K, int* returnSize, int** 
returnColumnSizes){
 
}";"";"2020-03-25 15:17:53"
237;19;"Rust";"impl Solution {
    pub fn k_closest(points: Vec<Vec<i32>>, k: i32) 
-> Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:17:53"
238;19;"Scala";"object Solution {
    def kClosest(points: Array[Array[Int]], K: Int)
: Array[Array[Int]] = {
 
    }
}";"";"2020-03-25 15:17:53"
239;19;"Go";"func kClosest(points [][]int, K int) [][]int {
 
}";"";"2020-03-25 15:17:53"
240;19;"Kotlin";"class Solution {
    fun kClosest(points: Array<IntArray>, K: Int): 
Array<IntArray> {
 
    }
}";"";"2020-03-25 15:17:53"
241;19;"Python3";"class Solution:
    def kClosest(self, points: List[List[int]], K: 
int) -> List[List[int]]:";"";"2020-03-25 15:17:53"
242;19;"JavaScript";"/**
 * @param {number[][]} points
 * @param {number} K
 * @return {number[][]}
 */
var kClosest = function(points, K) {
 
};";"";"2020-03-25 15:17:53"
243;19;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $points
     * @param Integer $K
     * @return Integer[][]
     */
    function kClosest($points, $K) {
        
    }
}";"";"2020-03-25 15:17:53"
244;19;"Swift";"class Solution {
    func kClosest(_ points: [[Int]], _ K: Int) -> [
[Int]] {
        
    }
}";"";"2020-03-25 15:17:53"
245;19;"Ruby";"# @param {Integer[][]} points";"";"2020-03-25 15:17:53"
246;19;"Python";"class Solution(object):
    def kClosest(self, points, K):
        """"""
        :type points: List[List[int]]
        :type K: int
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:17:53"
247;20;"C#";"public class Solution {
    public int NumPrimeArrangements(int n) {
 
    }
}";"";"2020-03-25 15:17:53"
248;20;"Java";"class Solution {
    public int numPrimeArrangements(int n) {
 
    }
}";"";"2020-03-25 15:17:53"
249;20;"Rust";"impl Solution {
    pub fn num_prime_arrangements(n: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:17:53"
250;20;"C";"int numPrimeArrangements(int n){
 
}";"";"2020-03-25 15:17:53"
251;20;"Scala";"object Solution {
    def numPrimeArrangements(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:17:53"
252;20;"Go";"func numPrimeArrangements(n int) int {
 
}";"";"2020-03-25 15:17:53"
253;20;"Kotlin";"class Solution {
    fun numPrimeArrangements(n: Int): Int {
 
    }
}";"";"2020-03-25 15:17:53"
254;20;"Python3";"class Solution:
    def numPrimeArrangements(self, n: int) -> int:";"";"2020-03-25 15:17:53"
255;20;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var numPrimeArrangements = function(n) {
 
};";"";"2020-03-25 15:17:53"
256;20;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function numPrimeArrangements($n) {
 
    }
}";"";"2020-03-25 15:17:53"
257;20;"Swift";"class Solution {
    func numPrimeArrangements(_ n: Int) -> Int {
 
    }
}";"";"2020-03-25 15:17:53"
258;20;"Ruby";"# @param {Integer} n
# @return {Integer}
def num_prime_arrangements(n)
 
end";"";"2020-03-25 15:17:53"
259;20;"Python";"class Solution(object):
    def numPrimeArrangements(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:17:53"
260;21;"C#";"public class Solution {
    public bool ContainsNearbyDuplicate(int[] nums, 
int k) {
 
    }
}";"";"2020-03-25 15:17:53"
261;21;"Java";"class Solution {
    public boolean containsNearbyDuplicate(int[] 
nums, int k) {
 
    }
}";"";"2020-03-25 15:17:53"
262;21;"C";"bool containsNearbyDuplicate(int* nums, int 
numsSize, int k){
 
}";"";"2020-03-25 15:17:53"
263;21;"Rust";"impl Solution {
    pub fn contains_nearby_duplicate(nums: Vec<i32>,
 k: i32) -> bool {
 
    }
}";"";"2020-03-25 15:17:53"
264;21;"Scala";"object Solution {
    def containsNearbyDuplicate(nums: Array[Int], 
k: Int): Boolean = {
 
    }
}";"";"2020-03-25 15:17:53"
265;21;"Go";"func containsNearbyDuplicate(nums []int, k int) 
bool {
 
}";"";"2020-03-25 15:17:53"
266;21;"Kotlin";"class Solution {
    fun containsNearbyDuplicate(nums: IntArray, k: 
Int): Boolean {
 
    }
}";"";"2020-03-25 15:17:53"
267;21;"Python3";"class Solution:
    def containsNearbyDuplicate(self, nums: List
[int], k: int) -> bool:";"";"2020-03-25 15:17:53"
268;21;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} k
 * @return {boolean}
 */
var containsNearbyDuplicate = function(nums, k) {
 
};";"";"2020-03-25 15:17:53"
269;21;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer $k
     * @return Boolean
     */
    function containsNearbyDuplicate($nums, $k) {
 
    }
}";"";"2020-03-25 15:17:53"
270;21;"Swift";"class Solution {
    func containsNearbyDuplicate(_ nums: [Int], _ 
k: Int) -> Bool {
 
    }
}";"";"2020-03-25 15:17:53"
271;21;"Ruby";"# @param {Integer[]} nums
# @param {Integer} k
# @return {Boolean}
def contains_nearby_duplicate(nums, k)
 
end";"";"2020-03-25 15:17:53"
272;21;"Python";"class Solution(object):
    def containsNearbyDuplicate(self, nums, k):
        """"""
        :type nums: List[int]
        :type k: int
        :rtype: bool
        """"""";"";"2020-03-25 15:17:53"
273;22;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class CBTInserter {
 
    public CBTInserter(TreeNode root) {
 
    }
    
    public int Insert(int v) {
 
    }
    
    public TreeNode Get_root() {
 
    }
}
 
/**
 * Your CBTInserter object will be instantiated and ";"";"2020-03-25 15:17:53"
274;22;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class CBTInserter {
 
    public CBTInserter(TreeNode root) {
 
    }
    
    public int insert(int v) {
 
    }
    
    public TreeNode get_root() {
 
    }
}
 
/**
 * Your CBTInserter object will be instantiated and ";"";"2020-03-25 15:17:53"
275;22;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
 
typedef struct {
    
} CBTInserter;
 
 
CBTInserter* cBTInserterCreate(struct TreeNode* 
root) {
    
}
 
int cBTInserterInsert(CBTInserter* obj, int v) {
  
}
 
struct TreeNode* cBTInserterGet_root(CBTInserter* ";"";"2020-03-25 15:17:53"
276;22;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
struct CBTInserter {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.";"";"2020-03-25 15:17:53"
277;22;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
class CBTInserter(_root: TreeNode) {
 
    def insert(v: Int): Int = {
 
    }
 
    def get_root(): TreeNode = {
 
    }
 
}
 
/**
 * Your CBTInserter object will be instantiated and 
called as such:
 * var obj = new CBTInserter(root)
 * var param_1 = obj.insert(v)
 * var param_2 = obj.get_root()";"";"2020-03-25 15:17:53"
278;22;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
type CBTInserter struct {
 
}
 
 
func Constructor(root *TreeNode) CBTInserter {
 
}
 
 
func (this *CBTInserter) Insert(v int) int {
 
}
 
 
func (this *CBTInserter) Get_root() *TreeNode {
 
}";"";"2020-03-25 15:17:53"
279;22;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class CBTInserter(root: TreeNode?) {
 
    fun insert(v: Int): Int {
 
    }
 
    fun get_root(): TreeNode? {
 
    }
 
}
 
/**
 * Your CBTInserter object will be instantiated and 
called as such:
 * var obj = CBTInserter(root)";"";"2020-03-25 15:17:53"
280;22;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class CBTInserter:
 
    def __init__(self, root: TreeNode):
        
 
    def insert(self, v: int) -> int:
        
 
    def get_root(self) -> TreeNode:
        
 
 
# Your CBTInserter object will be instantiated and 
called as such:
# obj = CBTInserter(root)
# param_1 = obj.insert(v)
# param_2 = obj.get_root()";"";"2020-03-25 15:17:53"
281;22;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 */
var CBTInserter = function(root) {
 
};
 
/** 
 * @param {number} v
 * @return {number}
 */
CBTInserter.prototype.insert = function(v) {
 
};
 
/**
 * @return {TreeNode}
 */
CBTInserter.prototype.get_root = function() {";"";"2020-03-25 15:17:53"
282;22;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class CBTInserter {
    /**
     * @param TreeNode $root
     */
    function __construct($root) {
        
    }
  
    /**
     * @param Integer $v
     * @return Integer
     */
    function insert($v) {
        
    }
  ";"";"2020-03-25 15:17:53"
283;22;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
 
class CBTInserter {
 
    init(_ root: TreeNode?) {
        
    }
    
    func insert(_ v: Int) -> Int {
        
    }
    
    func get_root() -> TreeNode? {
        ";"";"2020-03-25 15:17:53"
284;22;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:17:53"
285;22;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class CBTInserter(object):
 
    def __init__(self, root):
        """"""
        :type root: TreeNode
        """"""
        
 
    def insert(self, v):
        """"""
        :type v: int
        :rtype: int
        """"""
        
 
    def get_root(self):
        """"""
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:17:53"
286;23;"C#";"public class Solution {
    public int ThreeSumClosest(int[] nums, int 
target) {
 
    }
}";"";"2020-03-25 15:17:53"
287;23;"Java";"class Solution {
    public int threeSumClosest(int[] nums, int 
target) {
 
    }
}";"";"2020-03-25 15:17:53"
288;23;"C";"int threeSumClosest(int* nums, int numsSize, int 
target){
 
}";"";"2020-03-25 15:17:53"
289;23;"Rust";"impl Solution {
    pub fn three_sum_closest(nums: Vec<i32>, 
target: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:17:53"
290;23;"Scala";"object Solution {
    def threeSumClosest(nums: Array[Int], target: 
Int): Int = {
 
    }
}";"";"2020-03-25 15:17:53"
291;23;"Go";"func threeSumClosest(nums []int, target int) int {
 
}";"";"2020-03-25 15:17:53"
292;23;"Kotlin";"class Solution {
    fun threeSumClosest(nums: IntArray, target: Int)
: Int {
 
    }
}";"";"2020-03-25 15:17:53"
293;23;"Python3";"class Solution:
    def threeSumClosest(self, nums: List[int], 
target: int) -> int:";"";"2020-03-25 15:17:53"
294;23;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */
var threeSumClosest = function(nums, target) {
 
};";"";"2020-03-25 15:17:53"
295;23;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer $target
     * @return Integer
     */
    function threeSumClosest($nums, $target) {
        
    }
}";"";"2020-03-25 15:17:53"
296;23;"Swift";"class Solution {
    func threeSumClosest(_ nums: [Int], _ target: 
Int) -> Int {
        
    }
}";"";"2020-03-25 15:17:53"
297;23;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:17:53"
298;23;"Python";"class Solution(object):
    def threeSumClosest(self, nums, target):
        """"""
        :type nums: List[int]
        :type target: int
        :rtype: int
        """"""";"";"2020-03-25 15:17:53"
299;24;"C#";"public class Solution {
    public int ReachNumber(int target) {
 
    }
}";"";"2020-03-25 15:17:53"
300;24;"Java";"class Solution {
    public int reachNumber(int target) {
 
    }
}";"";"2020-03-25 15:17:53"
301;24;"Rust";"impl Solution {
    pub fn reach_number(target: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:17:53"
302;24;"C";"int reachNumber(int target){
 
}";"";"2020-03-25 15:17:53"
303;24;"Scala";"object Solution {
    def reachNumber(target: Int): Int = {
 
    }
}";"";"2020-03-25 15:17:53"
304;24;"JavaScript";"/**
 * @param {number} target
 * @return {number}
 */
var reachNumber = function(target) {
 
};";"";"2020-03-25 15:17:53"
305;24;"Python3";"class Solution:
    def reachNumber(self, target: int) -> int:";"";"2020-03-25 15:17:53"
306;24;"Go";"func reachNumber(target int) int {
 
}";"";"2020-03-25 15:17:53"
307;24;"Swift";"class Solution {
    func reachNumber(_ target: Int) -> Int {
        
    }
}";"";"2020-03-25 15:17:53"
308;24;"Ruby";"# @param {Integer} target
# @return {Integer}
def reach_number(target)
 
end";"";"2020-03-25 15:17:53"
309;24;"Kotlin";"class Solution {
    fun reachNumber(target: Int): Int {
 
    }
}";"";"2020-03-25 15:17:53"
310;24;"Python";"class Solution(object):
    def reachNumber(self, target):
        """"""
        :type target: int
        :rtype: int
        """"""";"";"2020-03-25 15:17:53"
311;25;"C#";"public class Solution {
    public int MaxSizeSlices(int[] slices) {
 
    }
}";"";"2020-03-25 15:17:53"
312;25;"Java";"class Solution {
    public int maxSizeSlices(int[] slices) {
 
    }
}";"";"2020-03-25 15:17:53"
313;25;"C";"int maxSizeSlices(int* slices, int slicesSize){
 
}";"";"2020-03-25 15:17:53"
314;25;"Rust";"impl Solution {
    pub fn max_size_slices(slices: Vec<i32>) -> i32 
{
 
    }
}";"";"2020-03-25 15:17:53"
315;25;"Scala";"object Solution {
    def maxSizeSlices(slices: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:17:53"
316;25;"Go";"func maxSizeSlices(slices []int) int {
 
}";"";"2020-03-25 15:17:53"
317;25;"Kotlin";"class Solution {
    fun maxSizeSlices(slices: IntArray): Int {
 
    }
}";"";"2020-03-25 15:17:53"
318;25;"Python3";"class Solution:
    def maxSizeSlices(self, slices: List[int]) -> 
int:";"";"2020-03-25 15:17:53"
319;25;"JavaScript";"/**
 * @param {number[]} slices
 * @return {number}
 */
var maxSizeSlices = function(slices) {
 
};";"";"2020-03-25 15:17:53"
320;25;"PHP";"class Solution {
 
    /**
     * @param Integer[] $slices
     * @return Integer
     */
    function maxSizeSlices($slices) {
 
    }
}";"";"2020-03-25 15:17:53"
321;25;"Swift";"class Solution {
    func maxSizeSlices(_ slices: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:17:53"
322;25;"Ruby";"# @param {Integer[]} slices
# @return {Integer}
def max_size_slices(slices)
 
end";"";"2020-03-25 15:17:53"
323;25;"Python";"class Solution(object):
    def maxSizeSlices(self, slices):
        """"""
        :type slices: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:17:53"
324;26;"Rust";"impl Solution {
    pub fn strange_printer(s: String) -> i32 {
        
    }
}";"";"2020-03-25 15:17:54"
325;26;"Scala";"object Solution {
    def strangePrinter(s: String): Int = {
 
    }
}";"";"2020-03-25 15:17:54"
326;26;"Go";"func strangePrinter(s string) int {
 
}";"";"2020-03-25 15:17:54"
327;26;"PHP";"class Solution {";"";"2020-03-25 15:17:54"
328;26;"Swift";"class Solution {
    func strangePrinter(_ s: String) -> Int {
        
    }
}";"";"2020-03-25 15:17:54"
329;26;"Ruby";"# @param {String} s
# @return {Integer}
def strange_printer(s)
 
end";"";"2020-03-25 15:17:54"
330;26;"Kotlin";"class Solution {
    fun strangePrinter(s: String): Int {
 
    }
}";"";"2020-03-25 15:17:54"
331;27;"C#";"public class Solution {
    public int MajorityElement(int[] nums) {
 
    }
}";"";"2020-03-25 15:17:54"
332;27;"Java";"class Solution {
    public int majorityElement(int[] nums) {
 
    }
}";"";"2020-03-25 15:17:54"
333;27;"Rust";"impl Solution {
    pub fn majority_element(nums: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:17:54"
334;27;"C";"int majorityElement(int* nums, int numsSize){
 
}";"";"2020-03-25 15:17:54"
335;27;"Scala";"object Solution {
    def majorityElement(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:17:54"
336;27;"Go";"func majorityElement(nums []int) int {
 
}";"";"2020-03-25 15:17:54"
337;27;"Kotlin";"class Solution {
    fun majorityElement(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:17:54"
338;27;"Python3";"class Solution:
    def majorityElement(self, nums: List[int]) -> 
int:";"";"2020-03-25 15:17:54"
339;27;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var majorityElement = function(nums) {
 
};";"";"2020-03-25 15:17:54"
340;27;"PHP";"class Solution {";"";"2020-03-25 15:17:54"
341;27;"Swift";"class Solution {
    func majorityElement(_ nums: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:17:54"
342;27;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def majority_element(nums)
 
end";"";"2020-03-25 15:17:54"
343;27;"Python";"class Solution(object):
    def majorityElement(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:17:54"
344;28;"C#";"public class Solution {
    public bool QueryString(string S, int N) {
 
    }
}";"";"2020-03-25 15:17:54"
345;28;"Java";"class Solution {
    public boolean queryString(String S, int N) {
 
    }
}";"";"2020-03-25 15:17:54"
346;28;"C";"bool queryString(char * S, int N){
 
}";"";"2020-03-25 15:17:54"
347;28;"Rust";"impl Solution {
    pub fn query_string(s: String, n: i32) -> bool {
        
    }
}";"";"2020-03-25 15:17:54"
348;28;"Scala";"object Solution {
    def queryString(S: String, N: Int): Boolean = {
 
    }
}";"";"2020-03-25 15:17:54"
349;28;"Go";"func queryString(S string, N int) bool {
 
}";"";"2020-03-25 15:17:54"
350;28;"Kotlin";"class Solution {
    fun queryString(S: String, N: Int): Boolean {
 
    }
}";"";"2020-03-25 15:17:54"
351;28;"Python3";"class Solution:
    def queryString(self, S: str, N: int) -> bool:";"";"2020-03-25 15:17:54"
352;28;"JavaScript";"/**
 * @param {string} S
 * @param {number} N
 * @return {boolean}
 */
var queryString = function(S, N) {
 
};";"";"2020-03-25 15:17:54"
353;28;"PHP";"class Solution {
 
    /**
     * @param String $S
     * @param Integer $N
     * @return Boolean
     */
    function queryString($S, $N) {
        
    }
}";"";"2020-03-25 15:17:54"
354;28;"Swift";"class Solution {
    func queryString(_ S: String, _ N: Int) -> Bool 
{
        
    }
}";"";"2020-03-25 15:17:54"
355;28;"Ruby";"# @param {String} s";"";"2020-03-25 15:17:54"
356;28;"Python";"class Solution(object):
    def queryString(self, S, N):
        """"""
        :type S: str
        :type N: int
        :rtype: bool
        """"""";"";"2020-03-25 15:17:54"
357;29;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode AddTwoNumbers(ListNode l1, 
ListNode l2) {
 
    }
}";"";"2020-03-25 15:17:54"
358;29;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, 
ListNode l2) {
 
    }
}";"";"2020-03-25 15:17:54"
359;29;"Rust";"// Definition for singly-linked list.";"";"2020-03-25 15:17:54"
360;29;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
struct ListNode* addTwoNumbers(struct ListNode* l1, 
struct ListNode* l2){
 
}";"";"2020-03-25 15:17:54"
361;29;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def addTwoNumbers(l1: ListNode, l2: ListNode): 
ListNode = {
 
    }
}";"";"2020-03-25 15:17:54"
362;29;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */
var addTwoNumbers = function(l1, l2) {
 
};";"";"2020-03-25 15:17:54"
363;29;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: 
ListNode) -> ListNode:";"";"2020-03-25 15:17:54"
364;29;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func addTwoNumbers(l1 *ListNode, l2 *ListNode) 
*ListNode {
 
}";"";"2020-03-25 15:17:54"
365;29;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func addTwoNumbers(_ l1: ListNode?, _ l2: 
ListNode?) -> ListNode? {
        
    }
}";"";"2020-03-25 15:17:54"
366;29;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# @param {ListNode} l1
# @param {ListNode} l2
# @return {ListNode}
def add_two_numbers(l1, l2)
 
end";"";"2020-03-25 15:17:54"
367;29;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun addTwoNumbers(l1: ListNode?, l2: ListNode?)
: ListNode? {
 
    }
}";"";"2020-03-25 15:17:54"
368;29;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """"""
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """"""";"";"2020-03-25 15:17:54"
369;30;"C#";"public class Solution {
    public int LongestConsecutive(int[] nums) {
 
    }
}";"";"2020-03-25 15:17:54"
370;30;"Java";"class Solution {
    public int longestConsecutive(int[] nums) {
 
    }
}";"";"2020-03-25 15:17:54"
371;30;"C";"int longestConsecutive(int* nums, int numsSize){
 
}";"";"2020-03-25 15:17:54"
372;30;"Rust";"impl Solution {
    pub fn longest_consecutive(nums: Vec<i32>) -> 
i32 {
 
    }
}";"";"2020-03-25 15:17:54"
373;30;"Scala";"object Solution {
    def longestConsecutive(nums: Array[Int]): Int = 
{
 
    }
}";"";"2020-03-25 15:17:54"
374;30;"Go";"func longestConsecutive(nums []int) int {
 
}";"";"2020-03-25 15:17:54"
375;30;"Kotlin";"class Solution {
    fun longestConsecutive(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:17:54"
376;30;"Python3";"class Solution:
    def longestConsecutive(self, nums: List[int]) 
-> int:";"";"2020-03-25 15:17:54"
377;30;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var longestConsecutive = function(nums) {
 
};";"";"2020-03-25 15:17:54"
378;30;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function longestConsecutive($nums) {
 
    }
}";"";"2020-03-25 15:17:54"
379;30;"Swift";"class Solution {
    func longestConsecutive(_ nums: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:17:54"
380;30;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def longest_consecutive(nums)
 
end";"";"2020-03-25 15:17:54"
381;30;"Python";"class Solution(object):
    def longestConsecutive(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:17:54"
382;31;"C#";"public class Solution {
    public int Candy(int[] ratings) {
 
    }
}";"";"2020-03-25 15:17:54"
383;31;"Java";"class Solution {
    public int candy(int[] ratings) {
 
    }
}";"";"2020-03-25 15:17:54"
384;31;"C";"int candy(int* ratings, int ratingsSize){
 
}";"";"2020-03-25 15:17:54"
385;31;"Rust";"impl Solution {
    pub fn candy(ratings: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:17:54"
386;31;"Scala";"object Solution {
    def candy(ratings: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:17:54"
387;31;"Go";"func candy(ratings []int) int {
 
}";"";"2020-03-25 15:17:54"
388;31;"Kotlin";"class Solution {
    fun candy(ratings: IntArray): Int {
 
    }
}";"";"2020-03-25 15:17:54"
389;31;"Python3";"class Solution:
    def candy(self, ratings: List[int]) -> int:";"";"2020-03-25 15:17:54"
390;31;"JavaScript";"/**
 * @param {number[]} ratings
 * @return {number}
 */
var candy = function(ratings) {
 
};";"";"2020-03-25 15:17:54"
391;31;"PHP";"class Solution {
 
    /**
     * @param Integer[] $ratings
     * @return Integer
     */
    function candy($ratings) {
 
    }
}";"";"2020-03-25 15:17:54"
392;31;"Swift";"class Solution {
    func candy(_ ratings: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:17:54"
393;31;"Ruby";"# @param {Integer[]} ratings";"";"2020-03-25 15:17:54"
394;31;"Python";"class Solution(object):
    def candy(self, ratings):
        """"""
        :type ratings: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:17:54"
395;32;"C#";"public class Solution {
    public IList<int> FindClosestElements(int[] arr,
 int k, int x) {
 
    }
}";"";"2020-03-25 15:17:54"
396;32;"Java";"class Solution {
    public List<Integer> findClosestElements(int[] 
arr, int k, int x) {
 
    }
}";"";"2020-03-25 15:17:54"
397;32;"Rust";"impl Solution {
    pub fn find_closest_elements(arr: Vec<i32>, k: 
i32, x: i32) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:17:54"
398;32;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* findClosestElements(int* arr, int arrSize, int 
k, int x, int* returnSize){
 
}";"";"2020-03-25 15:17:54"
399;32;"Scala";"object Solution {
    def findClosestElements(arr: Array[Int], k: Int,
 x: Int): List[Int] = {
 
    }
}";"";"2020-03-25 15:17:54"
400;32;"Go";"func findClosestElements(arr []int, k int, x int) []
int {
 
}";"";"2020-03-25 15:17:54"
401;32;"Kotlin";"class Solution {
    fun findClosestElements(arr: IntArray, k: Int, 
x: Int): List<Int> {
 
    }
}";"";"2020-03-25 15:17:54"
402;32;"Python3";"class Solution:
    def findClosestElements(self, arr: List[int], 
k: int, x: int) -> List[int]:";"";"2020-03-25 15:17:54"
403;32;"JavaScript";"/**
 * @param {number[]} arr
 * @param {number} k
 * @param {number} x
 * @return {number[]}
 */
var findClosestElements = function(arr, k, x) {
 
};";"";"2020-03-25 15:17:54"
404;32;"PHP";"class Solution {
 
    /**
     * @param Integer[] $arr
     * @param Integer $k
     * @param Integer $x
     * @return Integer[]
     */
    function findClosestElements($arr, $k, $x) {
        
    }
}";"";"2020-03-25 15:17:54"
405;32;"Swift";"class Solution {
    func findClosestElements(_ arr: [Int], _ k: Int,
 _ x: Int) -> [Int] {
        
    }
}";"";"2020-03-25 15:17:54"
406;32;"Ruby";"# @param {Integer[]} arr
# @param {Integer} k
# @param {Integer} x
# @return {Integer[]}
def find_closest_elements(arr, k, x)
 
end";"";"2020-03-25 15:17:54"
407;32;"Python";"class Solution(object):
    def findClosestElements(self, arr, k, x):
        """"""
        :type arr: List[int]
        :type k: int
        :type x: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:17:54"
408;33;"C#";"public class Solution {
    public int MaxWidthRamp(int[] A) {
 
    }
}";"";"2020-03-25 15:17:54"
409;33;"Java";"class Solution {
    public int maxWidthRamp(int[] A) {
 
    }
}";"";"2020-03-25 15:17:54"
410;33;"Rust";"impl Solution {
    pub fn max_width_ramp(a: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:17:54"
411;33;"C";"int maxWidthRamp(int* A, int ASize){
 
}";"";"2020-03-25 15:17:54"
412;33;"Scala";"object Solution {
    def maxWidthRamp(A: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:17:54"
413;33;"Go";"func maxWidthRamp(A []int) int {
 
}";"";"2020-03-25 15:17:54"
414;33;"Kotlin";"class Solution {
    fun maxWidthRamp(A: IntArray): Int {
 
    }
}";"";"2020-03-25 15:17:54"
415;33;"Python3";"class Solution:
    def maxWidthRamp(self, A: List[int]) -> int:";"";"2020-03-25 15:17:54"
416;33;"JavaScript";"/**
 * @param {number[]} A
 * @return {number}
 */
var maxWidthRamp = function(A) {
 
};";"";"2020-03-25 15:17:54"
417;33;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @return Integer
     */
    function maxWidthRamp($A) {
        
    }
}";"";"2020-03-25 15:17:54"
418;33;"Swift";"class Solution {
    func maxWidthRamp(_ A: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:17:54"
419;33;"Ruby";"# @param {Integer[]} a
# @return {Integer}
def max_width_ramp(a)
 
end";"";"2020-03-25 15:17:54"
420;33;"Python";"class Solution(object):
    def maxWidthRamp(self, A):
        """"""
        :type A: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:17:54"
421;34;"C#";"public class Solution {
    public int MaximumProduct(int[] nums) {
 
    }
}";"";"2020-03-25 15:17:54"
422;34;"Java";"class Solution {
    public int maximumProduct(int[] nums) {
 
    }
}";"";"2020-03-25 15:17:54"
423;34;"C++";"class Solution {";"";"2020-03-25 15:17:54"
424;34;"C";"int maximumProduct(int* nums, int numsSize){
 
}";"";"2020-03-25 15:17:54"
425;34;"Rust";"impl Solution {
    pub fn maximum_product(nums: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:17:54"
426;34;"Scala";"object Solution {
    def maximumProduct(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:17:54"
427;34;"Go";"func maximumProduct(nums []int) int {
 
}";"";"2020-03-25 15:17:54"
428;34;"Kotlin";"class Solution {
    fun maximumProduct(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:17:54"
429;34;"Python3";"class Solution:
    def maximumProduct(self, nums: List[int]) -> 
int:";"";"2020-03-25 15:17:54"
430;34;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var maximumProduct = function(nums) {
 
};";"";"2020-03-25 15:17:54"
431;34;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function maximumProduct($nums) {
        
    }
}";"";"2020-03-25 15:17:54"
432;34;"Swift";"class Solution {
    func maximumProduct(_ nums: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:17:54"
433;34;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def maximum_product(nums)
 
end";"";"2020-03-25 15:17:54"
434;34;"Python";"class Solution(object):
    def maximumProduct(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:17:54"
435;35;"C#";"public class Solution {
    public string GenerateTheString(int n) {
 
    }
}";"";"2020-03-25 15:17:54"
436;35;"Java";"class Solution {
    public String generateTheString(int n) {
 
    }
}";"";"2020-03-25 15:17:54"
437;35;"C";"char * generateTheString(int n){
 
}";"";"2020-03-25 15:17:54"
438;35;"Rust";"impl Solution {
    pub fn generate_the_string(n: i32) -> String {
 
    }
}";"";"2020-03-25 15:17:54"
439;35;"Scala";"object Solution {
    def generateTheString(n: Int): String = {
 
    }
}";"";"2020-03-25 15:17:54"
440;35;"Go";"func generateTheString(n int) string {
 
}";"";"2020-03-25 15:17:54"
441;35;"Kotlin";"class Solution {
    fun generateTheString(n: Int): String {
 
    }
}";"";"2020-03-25 15:17:54"
442;35;"Python3";"class Solution:
    def generateTheString(self, n: int) -> str:";"";"2020-03-25 15:17:54"
443;35;"JavaScript";"/**
 * @param {number} n
 * @return {string}
 */
var generateTheString = function(n) {
 
};";"";"2020-03-25 15:17:54"
444;35;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return String
     */
    function generateTheString($n) {
 
    }
}";"";"2020-03-25 15:17:54"
445;35;"Swift";"class Solution {
    func generateTheString(_ n: Int) -> String {
        
    }
}";"";"2020-03-25 15:17:54"
446;35;"Ruby";"# @param {Integer} n
# @return {String}
def generate_the_string(n)
 
end";"";"2020-03-25 15:17:54"
447;35;"Python";"class Solution(object):
    def generateTheString(self, n):
        """"""
        :type n: int
        :rtype: str
        """"""";"";"2020-03-25 15:17:54"
448;36;"C#";"public class Solution {
    public int MissingNumber(int[] nums) {
 
    }
}";"";"2020-03-25 15:17:54"
449;36;"Java";"class Solution {
    public int missingNumber(int[] nums) {
 
    }
}";"";"2020-03-25 15:17:54"
450;36;"C";"int missingNumber(int* nums, int numsSize){
 
}";"";"2020-03-25 15:17:54"
451;36;"Rust";"impl Solution {
    pub fn missing_number(nums: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:17:54"
452;36;"Scala";"object Solution {
    def missingNumber(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:17:54"
453;36;"Go";"func missingNumber(nums []int) int {
 
}";"";"2020-03-25 15:17:54"
454;36;"Kotlin";"class Solution {
    fun missingNumber(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:17:54"
455;36;"Python3";"class Solution:
    def missingNumber(self, nums: List[int]) -> int:";"";"2020-03-25 15:17:54"
456;36;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var missingNumber = function(nums) {
 
};";"";"2020-03-25 15:17:54"
457;36;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function missingNumber($nums) {
 
    }
}";"";"2020-03-25 15:17:54"
458;36;"Swift";"class Solution {
    func missingNumber(_ nums: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:17:54"
459;36;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:17:54"
460;36;"Python";"class Solution(object):
    def missingNumber(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:17:54"
461;37;"C#";"public class Solution {
    public int MaxProfitAssignment(int[] difficulty,
 int[] profit, int[] worker) {
 
    }
}";"";"2020-03-25 15:17:54"
462;37;"Java";"class Solution {
    public int maxProfitAssignment(int[] difficulty,
 int[] profit, int[] worker) {
 
    }
}";"";"2020-03-25 15:17:54"
463;37;"C";"int maxProfitAssignment(int* difficulty, int 
difficultySize, int* profit, int profitSize, int* 
worker, int workerSize){
 
}";"";"2020-03-25 15:17:54"
464;37;"Rust";"impl Solution {
    pub fn max_profit_assignment(difficulty: 
Vec<i32>, profit: Vec<i32>, worker: Vec<i32>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:17:54"
465;37;"Scala";"object Solution {
    def maxProfitAssignment(difficulty: Array[Int], 
profit: Array[Int], worker: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:17:54"
466;37;"Go";"func maxProfitAssignment(difficulty []int, profit []
int, worker []int) int {
 
}";"";"2020-03-25 15:17:54"
467;37;"Kotlin";"class Solution {
    fun maxProfitAssignment(difficulty: IntArray, 
profit: IntArray, worker: IntArray): Int {
 
    }
}";"";"2020-03-25 15:17:54"
468;37;"Python3";"class Solution:
    def maxProfitAssignment(self, difficulty: List
[int], profit: List[int], worker: List[int]) -> int:";"";"2020-03-25 15:17:54"
469;37;"JavaScript";"/**
 * @param {number[]} difficulty
 * @param {number[]} profit
 * @param {number[]} worker
 * @return {number}
 */
var maxProfitAssignment = function(difficulty, 
profit, worker) {
 
};";"";"2020-03-25 15:17:54"
470;37;"PHP";"class Solution {
 
    /**
     * @param Integer[] $difficulty
     * @param Integer[] $profit
     * @param Integer[] $worker
     * @return Integer
     */
    function maxProfitAssignment($difficulty, 
$profit, $worker) {
        
    }
}";"";"2020-03-25 15:17:54"
471;37;"Swift";"class Solution {
    func maxProfitAssignment(_ difficulty: [Int], _ 
profit: [Int], _ worker: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:17:54"
472;37;"Ruby";"";"";"2020-03-25 15:17:54"
473;37;"Python";"class Solution(object):
    def maxProfitAssignment(self, difficulty, 
profit, worker):
        """"""
        :type difficulty: List[int]
        :type profit: List[int]
        :type worker: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:17:54"
474;38;"C#";"public class Solution {
    public int[] FindRightInterval(int[][] 
intervals) {
 
    }
}";"";"2020-03-25 15:17:54"
475;38;"Java";"class Solution {
    public int[] findRightInterval(int[][] 
intervals) {
 
    }
}";"";"2020-03-25 15:17:54"
476;38;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* findRightInterval(int** intervals, int 
intervalsSize, int* intervalsColSize, int* 
returnSize){
 
}";"";"2020-03-25 15:17:54"
477;38;"Rust";"impl Solution {
    pub fn find_right_interval(intervals: 
Vec<Vec<i32>>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:17:54"
478;38;"Scala";"object Solution {
    def findRightInterval(intervals: Array[Array
[Int]]): Array[Int] = {
 
    }
}";"";"2020-03-25 15:17:54"
479;38;"Go";"func findRightInterval(intervals [][]int) []int {
 
}";"";"2020-03-25 15:17:54"
480;38;"Kotlin";"class Solution {
    fun findRightInterval(intervals: 
Array<IntArray>): IntArray {
 
    }
}";"";"2020-03-25 15:17:54"
481;38;"Python3";"class Solution:
    def findRightInterval(self, intervals: List[List
[int]]) -> List[int]:";"";"2020-03-25 15:17:54"
482;38;"JavaScript";"/**
 * @param {number[][]} intervals
 * @return {number[]}
 */
var findRightInterval = function(intervals) {
 
};";"";"2020-03-25 15:17:54"
483;38;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $intervals
     * @return Integer[]
     */
    function findRightInterval($intervals) {
        
    }
}";"";"2020-03-25 15:17:54"
484;38;"Swift";"class Solution {
    func findRightInterval(_ intervals: [[Int]]) -> 
[Int] {
        
    }
}";"";"2020-03-25 15:17:54"
485;38;"Ruby";"# @param {Integer[][]} intervals
# @return {Integer[]}
def find_right_interval(intervals)
 
end";"";"2020-03-25 15:17:54"
486;38;"Python";"class Solution(object):
    def findRightInterval(self, intervals):
        """"""
        :type intervals: List[List[int]]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:17:54"
487;39;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int GetDecimalValue(ListNode head) {
 
    }
}";"";"2020-03-25 15:17:54"
488;39;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public int getDecimalValue(ListNode head) {
 
    }
}";"";"2020-03-25 15:17:54"
489;39;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn get_decimal_value(head: 
Option<Box<ListNode>>) -> i32 {
 
    }
}";"";"2020-03-25 15:17:54"
490;39;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
int getDecimalValue(struct ListNode* head){
 
}";"";"2020-03-25 15:17:54"
491;39;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def getDecimalValue(head: ListNode): Int = {
 
    }
}";"";"2020-03-25 15:17:54"
492;39;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func getDecimalValue(head *ListNode) int {
 
}";"";"2020-03-25 15:17:54"
493;39;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun getDecimalValue(head: ListNode?): Int {
 
    }
}";"";"2020-03-25 15:17:54"
494;39;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def getDecimalValue(self, head: ListNode) -> 
int:";"";"2020-03-25 15:17:54"
495;39;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @return {number}
 */
var getDecimalValue = function(head) {
 
};";"";"2020-03-25 15:17:54"
496;39;"PHP";"/**";"";"2020-03-25 15:17:54"
497;39;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func getDecimalValue(_ head: ListNode?) -> Int {
 
    }
}";"";"2020-03-25 15:17:54"
498;39;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# @param {ListNode} head
# @return {Integer}
def get_decimal_value(head)
 
end";"";"2020-03-25 15:17:54"
499;39;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def getDecimalValue(self, head):
        """"""
        :type head: ListNode
        :rtype: int
        """"""";"";"2020-03-25 15:17:54"
500;40;"C#";"public class Solution {
    public int CountArrangement(int N) {
 
    }
}";"";"2020-03-25 15:17:54"
501;40;"Java";"class Solution {
    public int countArrangement(int N) {
 
    }
}";"";"2020-03-25 15:17:54"
502;40;"C";"int countArrangement(int N){
 
}";"";"2020-03-25 15:17:54"
503;40;"Rust";"impl Solution {
    pub fn count_arrangement(n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:17:54"
504;40;"Scala";"object Solution {
    def countArrangement(N: Int): Int = {
 
    }
}";"";"2020-03-25 15:17:54"
505;40;"Go";"func countArrangement(N int) int {
 
}";"";"2020-03-25 15:17:54"
506;40;"Kotlin";"class Solution {
    fun countArrangement(N: Int): Int {
 
    }
}";"";"2020-03-25 15:17:54"
507;40;"Python3";"class Solution:
    def countArrangement(self, N: int) -> int:";"";"2020-03-25 15:17:54"
508;40;"JavaScript";"/**
 * @param {number} N
 * @return {number}
 */
var countArrangement = function(N) {
 
};";"";"2020-03-25 15:17:54"
509;40;"PHP";"class Solution {
 
    /**
     * @param Integer $N
     * @return Integer
     */
    function countArrangement($N) {
        
    }
}";"";"2020-03-25 15:17:54"
510;40;"Swift";"class Solution {
    func countArrangement(_ N: Int) -> Int {
        
    }
}";"";"2020-03-25 15:17:54"
511;40;"Ruby";"# @param {Integer} n
# @return {Integer}
def count_arrangement(n)
 
end";"";"2020-03-25 15:17:54"
512;40;"Python";"class Solution(object):
    def countArrangement(self, N):
        """"""
        :type N: int
        :rtype: int
        """"""";"";"2020-03-25 15:17:54"
513;41;"C#";"public class MyStack {
 
    /** Initialize your data structure here. */
    public MyStack() {
 
    }
    
    /** Push element x onto stack. */
    public void Push(int x) {
 
    }
    
    /** Removes the element on top of the stack and 
returns that element. */
    public int Pop() {
 
    }
    
    /** Get the top element. */
    public int Top() {
 
    }
    
    /** Returns whether the stack is empty. */
    public bool Empty() {
 ";"";"2020-03-25 15:17:54"
514;41;"Java";"class MyStack {
 
    /** Initialize your data structure here. */
    public MyStack() {
 
    }
    
    /** Push element x onto stack. */
    public void push(int x) {
 
    }
    
    /** Removes the element on top of the stack and 
returns that element. */
    public int pop() {
 
    }
    
    /** Get the top element. */
    public int top() {
 
    }
    
    /** Returns whether the stack is empty. */
    public boolean empty() {
 ";"";"2020-03-25 15:17:54"
515;41;"C";"typedef struct {
 
} MyStack;
 
/** Initialize your data structure here. */
 
MyStack* myStackCreate() {
 
}
 
/** Push element x onto stack. */
void myStackPush(MyStack* obj, int x) {
 
}
 
/** Removes the element on top of the stack and 
returns that element. */
int myStackPop(MyStack* obj) {
 
}
 
/** Get the top element. */
int myStackTop(MyStack* obj) {
 
}
 ";"";"2020-03-25 15:17:54"
516;41;"Rust";"struct MyStack {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl MyStack {
 
    /** Initialize your data structure here. */
    fn new() -> Self {
 
    }
    
    /** Push element x onto stack. */
    fn push(&self, x: i32) {
 
    }
    
    /** Removes the element on top of the stack and 
returns that element. */
    fn pop(&self) -> i32 {";"";"2020-03-25 15:17:54"
517;41;"Scala";"class MyStack() {
 
    /** Initialize your data structure here. */
 
 
    /** Push element x onto stack. */
    def push(x: Int) {
 
    }
 
    /** Removes the element on top of the stack and 
returns that element. */
    def pop(): Int = {
 
    }
 
    /** Get the top element. */
    def top(): Int = {
 
    }
 
    /** Returns whether the stack is empty. */
    def empty(): Boolean = {
 
    }
 ";"";"2020-03-25 15:17:54"
518;41;"Go";"type MyStack struct {
 
}
 
 
/** Initialize your data structure here. */
func Constructor() MyStack {
 
}
 
 
/** Push element x onto stack. */
func (this *MyStack) Push(x int)  {
 
}
 
 
/** Removes the element on top of the stack and 
returns that element. */
func (this *MyStack) Pop() int {
 
}
 
 
/** Get the top element. */
func (this *MyStack) Top() int {";"";"2020-03-25 15:17:54"
519;41;"Kotlin";"class MyStack() {
 
    /** Initialize your data structure here. */
 
 
    /** Push element x onto stack. */
    fun push(x: Int) {
 
    }
 
    /** Removes the element on top of the stack and 
returns that element. */
    fun pop(): Int {
 
    }
 
    /** Get the top element. */
    fun top(): Int {
 
    }
 
    /** Returns whether the stack is empty. */
    fun empty(): Boolean {
 
    }
 ";"";"2020-03-25 15:17:54"
520;41;"Python3";"class MyStack:
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
 
 
    def push(self, x: int) -> None:
        """"""
        Push element x onto stack.
        """"""
 
 
    def pop(self) -> int:
        """"""
        Removes the element on top of the stack and 
returns that element.
        """"""
 
 
    def top(self) -> int:
        """"""
        Get the top element.
        """"""
 ";"";"2020-03-25 15:17:54"
521;41;"JavaScript";"/**
 * Initialize your data structure here.
 */
var MyStack = function() {
 
};
 
/**
 * Push element x onto stack. 
 * @param {number} x
 * @return {void}
 */
MyStack.prototype.push = function(x) {
 
};
 
/**
 * Removes the element on top of the stack and 
returns that element.
 * @return {number}
 */
MyStack.prototype.pop = function() {
 
};
 
/**";"";"2020-03-25 15:17:54"
522;41;"PHP";"class MyStack {
    /**
     * Initialize your data structure here.
     */
    function __construct() {
 
    }
 
    /**
     * Push element x onto stack.
     * @param Integer $x
     * @return NULL
     */
    function push($x) {
 
    }
 
    /**
     * Removes the element on top of the stack and 
returns that element.
     * @return Integer
     */
    function pop() {
 
    }
 ";"";"2020-03-25 15:17:54"
523;41;"Swift";"class MyStack {
 
    /** Initialize your data structure here. */
    init() {
 
    }
    
    /** Push element x onto stack. */
    func push(_ x: Int) {
 
    }
    
    /** Removes the element on top of the stack and 
returns that element. */
    func pop() -> Int {
 
    }
    
    /** Get the top element. */
    func top() -> Int {
 
    }
    
    /** Returns whether the stack is empty. */
    func empty() -> Bool {
 ";"";"2020-03-25 15:17:54"
524;41;"Ruby";"class MyStack";"";"2020-03-25 15:17:54"
525;41;"Python";"class MyStack(object):
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
 
 
    def push(self, x):
        """"""
        Push element x onto stack.
        :type x: int
        :rtype: None
        """"""
 
 
    def pop(self):
        """"""
        Removes the element on top of the stack and 
returns that element.
        :rtype: int
        """"""
 
 
    def top(self):
        """"""";"";"2020-03-25 15:17:54"
526;42;"C#";"public class Solution {
    public int Trap(int[] height) {
 
    }
}";"";"2020-03-25 15:17:54"
527;42;"Java";"class Solution {
    public int trap(int[] height) {
 
    }
}";"";"2020-03-25 15:17:54"
528;42;"C";"int trap(int* height, int heightSize){
 
}";"";"2020-03-25 15:17:54"
529;42;"Rust";"impl Solution {
    pub fn trap(height: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:17:54"
530;42;"Scala";"object Solution {
    def trap(height: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:17:54"
531;42;"Go";"func trap(height []int) int {
 
}";"";"2020-03-25 15:17:54"
532;42;"Kotlin";"class Solution {
    fun trap(height: IntArray): Int {
 
    }
}";"";"2020-03-25 15:17:54"
533;42;"Python3";"class Solution:
    def trap(self, height: List[int]) -> int:";"";"2020-03-25 15:17:54"
534;42;"JavaScript";"/**
 * @param {number[]} height
 * @return {number}
 */
var trap = function(height) {
 
};";"";"2020-03-25 15:17:54"
535;42;"PHP";"class Solution {
 
    /**
     * @param Integer[] $height
     * @return Integer
     */
    function trap($height) {
        
    }
}";"";"2020-03-25 15:17:54"
536;42;"Swift";"class Solution {
    func trap(_ height: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:17:54"
537;42;"Ruby";"# @param {Integer[]} height";"";"2020-03-25 15:17:54"
538;42;"Python";"class Solution(object):
    def trap(self, height):
        """"""
        :type height: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:17:54"
539;43;"C#";"public class Solution {
    public string MaskPII(string S) {
 
    }
}";"";"2020-03-25 15:17:55"
540;43;"Java";"class Solution {
    public String maskPII(String S) {
 
    }
}";"";"2020-03-25 15:17:55"
541;43;"Rust";"impl Solution {
    pub fn mask_pii(s: String) -> String {
        
    }
}";"";"2020-03-25 15:17:55"
542;43;"C";"char * maskPII(char * S){
 
}";"";"2020-03-25 15:17:55"
543;43;"Scala";"object Solution {
    def maskPII(S: String): String = {
 
    }
}";"";"2020-03-25 15:17:55"
544;43;"Go";"func maskPII(S string) string {
 
}";"";"2020-03-25 15:17:55"
545;43;"Kotlin";"class Solution {
    fun maskPII(S: String): String {
 
    }
}";"";"2020-03-25 15:17:55"
546;43;"Python3";"class Solution:
    def maskPII(self, S: str) -> str:";"";"2020-03-25 15:17:55"
547;43;"JavaScript";"/**
 * @param {string} S
 * @return {string}
 */
var maskPII = function(S) {
 
};";"";"2020-03-25 15:17:55"
548;43;"PHP";"";"";"2020-03-25 15:17:55"
549;43;"Swift";"class Solution {
    func maskPII(_ S: String) -> String {
        
    }
}";"";"2020-03-25 15:17:55"
550;43;"Ruby";"# @param {String} s
# @return {String}
def mask_pii(s)
 
end";"";"2020-03-25 15:17:55"
551;43;"Python";"class Solution(object):
    def maskPII(self, S):
        """"""
        :type S: str
        :rtype: str
        """"""";"";"2020-03-25 15:17:55"
552;44;"C#";"public class Solution {
    public int MaxEvents(int[][] events) {
 
    }
}";"";"2020-03-25 15:17:55"
553;44;"Java";"class Solution {
    public int maxEvents(int[][] events) {
 
    }
}";"";"2020-03-25 15:17:55"
554;44;"C";"int maxEvents(int** events, int eventsSize, int* 
eventsColSize){
 
}";"";"2020-03-25 15:17:55"
555;44;"Rust";"impl Solution {
    pub fn max_events(events: Vec<Vec<i32>>) -> i32 
{
 
    }
}";"";"2020-03-25 15:17:55"
556;44;"Scala";"object Solution {
    def maxEvents(events: Array[Array[Int]]): Int = 
{
 
    }
}";"";"2020-03-25 15:17:55"
557;44;"Go";"func maxEvents(events [][]int) int {
 
}";"";"2020-03-25 15:17:55"
558;44;"Kotlin";"class Solution {
    fun maxEvents(events: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:17:55"
559;44;"Python3";"class Solution:
    def maxEvents(self, events: List[List[int]]) -> 
int:";"";"2020-03-25 15:17:55"
560;44;"JavaScript";"/**
 * @param {number[][]} events
 * @return {number}
 */
var maxEvents = function(events) {
 
};";"";"2020-03-25 15:17:55"
561;44;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $events
     * @return Integer
     */
    function maxEvents($events) {
 
    }
}";"";"2020-03-25 15:17:55"
562;44;"Swift";"class Solution {
    func maxEvents(_ events: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:17:55"
563;44;"Ruby";"# @param {Integer[][]} events
# @return {Integer}
def max_events(events)
 
end";"";"2020-03-25 15:17:55"
564;44;"Python";"class Solution(object):
    def maxEvents(self, events):
        """"""
        :type events: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:17:55"
565;45;"C#";"public class Solution {
    public int ScoreOfParentheses(string S) {
 
    }
}";"";"2020-03-25 15:17:55"
566;45;"Java";"class Solution {
    public int scoreOfParentheses(String S) {
 
    }
}";"";"2020-03-25 15:17:55"
567;45;"C";"int scoreOfParentheses(char * S){
 
}";"";"2020-03-25 15:17:55"
568;45;"Rust";"impl Solution {
    pub fn score_of_parentheses(s: String) -> i32 {
        
    }
}";"";"2020-03-25 15:17:55"
569;45;"Scala";"object Solution {
    def scoreOfParentheses(S: String): Int = {
 
    }
}";"";"2020-03-25 15:17:55"
570;45;"Python3";"class Solution:
    def scoreOfParentheses(self, S: str) -> int:";"";"2020-03-25 15:17:55"
571;45;"Go";"func scoreOfParentheses(S string) int {
 
}";"";"2020-03-25 15:17:55"
572;45;"PHP";"class Solution {
 
    /**
     * @param String $S
     * @return Integer
     */
    function scoreOfParentheses($S) {
        
    }
}";"";"2020-03-25 15:17:55"
573;45;"Swift";"class Solution {
    func scoreOfParentheses(_ S: String) -> Int {
        
    }
}";"";"2020-03-25 15:17:55"
574;45;"Ruby";"# @param {String} s";"";"2020-03-25 15:17:55"
575;45;"Python";"class Solution(object):
    def scoreOfParentheses(self, S):
        """"""
        :type S: str
        :rtype: int
        """"""";"";"2020-03-25 15:17:55"
576;45;"Kotlin";"class Solution {
    fun scoreOfParentheses(S: String): Int {
 
    }
}";"";"2020-03-25 15:17:55"
577;46;"C#";"public class Solution {
    public bool IsBoomerang(int[][] points) {
 
    }
}";"";"2020-03-25 15:17:55"
578;46;"Java";"class Solution {
    public boolean isBoomerang(int[][] points) {
 
    }
}";"";"2020-03-25 15:17:55"
579;46;"Rust";"impl Solution {
    pub fn is_boomerang(points: Vec<Vec<i32>>) -> 
bool {
        
    }
}";"";"2020-03-25 15:17:55"
580;46;"C";"bool isBoomerang(int** points, int pointsSize, int* 
pointsColSize){
 
}";"";"2020-03-25 15:17:55"
581;46;"Scala";"object Solution {
    def isBoomerang(points: Array[Array[Int]]): 
Boolean = {
 
    }
}";"";"2020-03-25 15:17:55"
582;46;"Go";"func isBoomerang(points [][]int) bool {
 
}";"";"2020-03-25 15:17:55"
583;46;"Kotlin";"class Solution {
    fun isBoomerang(points: Array<IntArray>): 
Boolean {
 
    }
}";"";"2020-03-25 15:17:55"
584;46;"Python3";"class Solution:
    def isBoomerang(self, points: List[List[int]]) 
-> bool:";"";"2020-03-25 15:17:55"
585;46;"JavaScript";"/**
 * @param {number[][]} points
 * @return {boolean}
 */
var isBoomerang = function(points) {
 
};";"";"2020-03-25 15:17:55"
586;46;"PHP";"class Solution {";"";"2020-03-25 15:17:55"
587;46;"Swift";"class Solution {
    func isBoomerang(_ points: [[Int]]) -> Bool {
        
    }
}";"";"2020-03-25 15:17:55"
588;46;"Ruby";"# @param {Integer[][]} points
# @return {Boolean}
def is_boomerang(points)
 
end";"";"2020-03-25 15:17:55"
589;46;"Python";"class Solution(object):
    def isBoomerang(self, points):
        """"""
        :type points: List[List[int]]
        :rtype: bool
        """"""";"";"2020-03-25 15:17:55"
590;47;"Java";"class Solution {
    public String convert(String s, int numRows) {
 
    }
}";"";"2020-03-25 15:17:55"
591;47;"Rust";"impl Solution {";"";"2020-03-25 15:17:55"
592;47;"C";"char * convert(char * s, int numRows){
 
}";"";"2020-03-25 15:17:55"
593;47;"Scala";"object Solution {
    def convert(s: String, numRows: Int): String = {
 
    }
}";"";"2020-03-25 15:17:55"
594;47;"JavaScript";"/**
 * @param {string} s
 * @param {number} numRows
 * @return {string}
 */
var convert = function(s, numRows) {
 
};";"";"2020-03-25 15:17:55"
595;47;"Python3";"class Solution:
    def convert(self, s: str, numRows: int) -> str:";"";"2020-03-25 15:17:55"
596;47;"Go";"func convert(s string, numRows int) string {
 
}";"";"2020-03-25 15:17:55"
597;47;"Swift";"class Solution {
    func convert(_ s: String, _ numRows: Int) -> 
String {
        
    }
}";"";"2020-03-25 15:17:55"
598;47;"Ruby";"# @param {String} s
# @param {Integer} num_rows
# @return {String}
def convert(s, num_rows)
 
end";"";"2020-03-25 15:17:55"
599;47;"Kotlin";"class Solution {
    fun convert(s: String, numRows: Int): String {
 
    }
}";"";"2020-03-25 15:17:55"
600;47;"Python";"class Solution(object):
    def convert(self, s, numRows):
        """"""
        :type s: str
        :type numRows: int
        :rtype: str
        """"""";"";"2020-03-25 15:17:55"
601;48;"C#";"public class Solution {
    public int TriangleNumber(int[] nums) {
 
    }
}";"";"2020-03-25 15:17:55"
602;48;"Java";"class Solution {
    public int triangleNumber(int[] nums) {
 
    }
}";"";"2020-03-25 15:17:55"
603;48;"Rust";"impl Solution {
    pub fn triangle_number(nums: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:17:55"
604;48;"C";"int triangleNumber(int* nums, int numsSize){
 
}";"";"2020-03-25 15:17:55"
605;48;"Scala";"object Solution {
    def triangleNumber(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:17:55"
606;48;"Go";"func triangleNumber(nums []int) int {
 
}";"";"2020-03-25 15:17:55"
607;48;"Kotlin";"class Solution {
    fun triangleNumber(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:17:55"
608;48;"Python3";"class Solution:
    def triangleNumber(self, nums: List[int]) -> 
int:";"";"2020-03-25 15:17:55"
609;48;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var triangleNumber = function(nums) {
 
};";"";"2020-03-25 15:17:55"
610;48;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function triangleNumber($nums) {
        
    }
}";"";"2020-03-25 15:17:55"
611;48;"Swift";"class Solution {
    func triangleNumber(_ nums: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:17:55"
612;48;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def triangle_number(nums)
 
end";"";"2020-03-25 15:17:55"
613;48;"Python";"class Solution(object):
    def triangleNumber(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:17:55"
614;49;"C#";"public class Solution {
    public string DecodeString(string s) {
 
    }
}";"";"2020-03-25 15:17:55"
615;49;"Java";"class Solution {
    public String decodeString(String s) {
 
    }
}";"";"2020-03-25 15:17:55"
616;49;"Rust";"impl Solution {
    pub fn decode_string(s: String) -> String {
        
    }
}";"";"2020-03-25 15:17:55"
617;49;"C";"char * decodeString(char * s){
 
}";"";"2020-03-25 15:17:55"
618;49;"Scala";"object Solution {
    def decodeString(s: String): String = {
 
    }
}";"";"2020-03-25 15:17:55"
619;49;"Go";"func decodeString(s string) string {
 
}";"";"2020-03-25 15:17:55"
620;49;"Kotlin";"class Solution {
    fun decodeString(s: String): String {
 
    }
}";"";"2020-03-25 15:17:55"
621;49;"Python3";"class Solution:
    def decodeString(self, s: str) -> str:";"";"2020-03-25 15:17:55"
622;49;"JavaScript";"/**
 * @param {string} s
 * @return {string}
 */
var decodeString = function(s) {
 
};";"";"2020-03-25 15:17:55"
623;49;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return String
     */
    function decodeString($s) {
        
    }
}";"";"2020-03-25 15:17:55"
624;49;"Swift";"class Solution {
    func decodeString(_ s: String) -> String {
        
    }
}";"";"2020-03-25 15:17:55"
625;49;"Ruby";"# @param {String} s
# @return {String}
def decode_string(s)
 
end";"";"2020-03-25 15:17:55"
626;49;"Python";"class Solution(object):
    def decodeString(self, s):
        """"""
        :type s: str
        :rtype: str
        """"""";"";"2020-03-25 15:17:55"
627;50;"C#";"public class Solution {
    public int SmallestDifference(int[] a, int[] b) 
{
 
    }
}";"";"2020-03-25 15:17:55"
628;50;"Java";"class Solution {
    public int smallestDifference(int[] a, int[] b) 
{
 
    }
}";"";"2020-03-25 15:17:55"
629;50;"Rust";"impl Solution {
    pub fn smallest_difference(a: Vec<i32>, b: 
Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:17:55"
630;50;"C";"int smallestDifference(int* a, int aSize, int* b, 
int bSize){
 
}";"";"2020-03-25 15:17:55"
631;50;"Scala";"object Solution {
    def smallestDifference(a: Array[Int], b: Array
[Int]): Int = {
 
    }
}";"";"2020-03-25 15:17:55"
632;50;"Go";"func smallestDifference(a []int, b []int) int {
 
}";"";"2020-03-25 15:17:55"
633;50;"Kotlin";"class Solution {
    fun smallestDifference(a: IntArray, b: IntArray)
: Int {
 
    }
}";"";"2020-03-25 15:17:55"
634;50;"Python3";"class Solution:
    def smallestDifference(self, a: List[int], b: 
List[int]) -> int:";"";"2020-03-25 15:17:55"
635;50;"JavaScript";"/**
 * @param {number[]} a
 * @param {number[]} b
 * @return {number}
 */
var smallestDifference = function(a, b) {
 
};";"";"2020-03-25 15:17:55"
636;50;"PHP";"class Solution {
 
    /**
     * @param Integer[] $a
     * @param Integer[] $b
     * @return Integer
     */
    function smallestDifference($a, $b) {
 
    }
}";"";"2020-03-25 15:17:55"
637;50;"Swift";"class Solution {
    func smallestDifference(_ a: [Int], _ b: [Int]) 
-> Int {
 
    }
}";"";"2020-03-25 15:17:55"
638;50;"Ruby";"# @param {Integer[]} a
# @param {Integer[]} b
# @return {Integer}
def smallest_difference(a, b)
 
end";"";"2020-03-25 15:17:55"
639;50;"Python";"class Solution(object):
    def smallestDifference(self, a, b):
        """"""
        :type a: List[int]
        :type b: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:17:55"
640;51;"C#";"public class Solution {
    public int UniquePathsWithObstacles(int[][] 
obstacleGrid) {
 
    }
}";"";"2020-03-25 15:17:55"
641;51;"Java";"class Solution {
    public int uniquePathsWithObstacles(int[][] 
obstacleGrid) {
 
    }
}";"";"2020-03-25 15:17:55"
642;51;"C";"int uniquePathsWithObstacles(int** obstacleGrid, 
int obstacleGridSize, int* obstacleGridColSize){
 
}";"";"2020-03-25 15:17:55"
643;51;"Rust";"impl Solution {
    pub fn unique_paths_with_obstacles
(obstacle_grid: Vec<Vec<i32>>) -> i32 {
        
    }
}";"";"2020-03-25 15:17:55"
644;51;"Scala";"object Solution {
    def uniquePathsWithObstacles(obstacleGrid: Array
[Array[Int]]): Int = {
 
    }
}";"";"2020-03-25 15:17:55"
645;51;"Go";"func uniquePathsWithObstacles(obstacleGrid [][]int) 
int {
 
}";"";"2020-03-25 15:17:55"
646;51;"Kotlin";"class Solution {
    fun uniquePathsWithObstacles(obstacleGrid: 
Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:17:55"
647;51;"Python3";"class Solution:
    def uniquePathsWithObstacles(self, 
obstacleGrid: List[List[int]]) -> int:";"";"2020-03-25 15:17:55"
648;51;"JavaScript";"/**
 * @param {number[][]} obstacleGrid
 * @return {number}
 */
var uniquePathsWithObstacles = function
(obstacleGrid) {
 
};";"";"2020-03-25 15:17:55"
649;51;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $obstacleGrid
     * @return Integer
     */
    function uniquePathsWithObstacles($obstacleGrid)
 {
        
    }
}";"";"2020-03-25 15:17:55"
650;51;"Swift";"class Solution {
    func uniquePathsWithObstacles(_ obstacleGrid: [
[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:17:55"
651;51;"Ruby";"# @param {Integer[][]} obstacle_grid";"";"2020-03-25 15:17:55"
652;51;"Python";"class Solution(object):
    def uniquePathsWithObstacles(self, obstacleGrid)
:
        """"""
        :type obstacleGrid: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:17:55"
653;52;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int WidthOfBinaryTree(TreeNode root) {
 
    }
}";"";"2020-03-25 15:17:55"
654;52;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
 
    }
}";"";"2020-03-25 15:17:55"
655;52;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int widthOfBinaryTree(struct TreeNode* root){
 
}";"";"2020-03-25 15:17:55"
656;52;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn width_of_binary_tree(root: 
Option<Rc<RefCell<TreeNode>>>) -> i32 {
        
    }
}";"";"2020-03-25 15:17:55"
657;52;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def widthOfBinaryTree(root: TreeNode): Int = {
 
    }
}";"";"2020-03-25 15:17:55"
658;52;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var widthOfBinaryTree = function(root) {
 
};";"";"2020-03-25 15:17:55"
659;52;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func widthOfBinaryTree(root *TreeNode) int {
 
}";"";"2020-03-25 15:17:55"
660;52;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer
     */
    function widthOfBinaryTree($root) {
        
    }
}";"";"2020-03-25 15:17:55"
661;52;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func widthOfBinaryTree(_ root: TreeNode?) -> 
Int {
        
    }
}";"";"2020-03-25 15:17:55"
662;52;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:17:55"
663;52;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def widthOfBinaryTree(self, root):
        """"""
        :type root: TreeNode
        :rtype: int
        """"""";"";"2020-03-25 15:17:55"
664;52;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun widthOfBinaryTree(root: TreeNode?): Int {
 
    }
}";"";"2020-03-25 15:17:55"
665;53;"C#";"public class Solution {
    public int[] LoudAndRich(int[][] richer, int[] 
quiet) {
 
    }
}";"";"2020-03-25 15:17:55"
666;53;"Java";"class Solution {
    public int[] loudAndRich(int[][] richer, int[] 
quiet) {
 
    }
}";"";"2020-03-25 15:17:55"
667;53;"Rust";"impl Solution {
    pub fn loud_and_rich(richer: Vec<Vec<i32>>, 
quiet: Vec<i32>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:17:55"
668;53;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* loudAndRich(int** richer, int richerSize, int* 
richerColSize, int* quiet, int quietSize, int* 
returnSize){
 
}";"";"2020-03-25 15:17:55"
669;53;"Scala";"object Solution {
    def loudAndRich(richer: Array[Array[Int]], 
quiet: Array[Int]): Array[Int] = {
 
    }
}";"";"2020-03-25 15:17:55"
670;53;"Go";"func loudAndRich(richer [][]int, quiet []int) []int 
{
 
}";"";"2020-03-25 15:17:55"
671;53;"Kotlin";"class Solution {
    fun loudAndRich(richer: Array<IntArray>, quiet: 
IntArray): IntArray {
 
    }
}";"";"2020-03-25 15:17:55"
672;53;"Python3";"class Solution:
    def loudAndRich(self, richer: List[List[int]], 
quiet: List[int]) -> List[int]:";"";"2020-03-25 15:17:55"
673;53;"JavaScript";"/**
 * @param {number[][]} richer
 * @param {number[]} quiet
 * @return {number[]}
 */
var loudAndRich = function(richer, quiet) {
 
};";"";"2020-03-25 15:17:55"
674;53;"PHP";"";"";"2020-03-25 15:17:55"
675;53;"Swift";"class Solution {
    func loudAndRich(_ richer: [[Int]], _ quiet: 
[Int]) -> [Int] {
        
    }
}";"";"2020-03-25 15:17:55"
676;53;"Ruby";"# @param {Integer[][]} richer
# @param {Integer[]} quiet
# @return {Integer[]}
def loud_and_rich(richer, quiet)
 
end";"";"2020-03-25 15:17:55"
677;53;"Python";"class Solution(object):
    def loudAndRich(self, richer, quiet):
        """"""
        :type richer: List[List[int]]
        :type quiet: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:17:55"
678;54;"C#";"public class Solution {
    public bool ValidateStackSequences(int[] pushed,
 int[] popped) {
 
    }
}";"";"2020-03-25 15:17:55"
679;54;"Java";"class Solution {
    public boolean validateStackSequences(int[] 
pushed, int[] popped) {
 
    }
}";"";"2020-03-25 15:17:55"
680;54;"Rust";"impl Solution {
    pub fn validate_stack_sequences(pushed: 
Vec<i32>, popped: Vec<i32>) -> bool {
 
    }
}";"";"2020-03-25 15:17:55"
681;54;"C";"bool validateStackSequences(int* pushed, int 
pushedSize, int* popped, int poppedSize){
 
}";"";"2020-03-25 15:17:55"
682;54;"Scala";"object Solution {
    def validateStackSequences(pushed: Array[Int], 
popped: Array[Int]): Boolean = {
 
    }
}";"";"2020-03-25 15:17:55"
683;54;"Go";"func validateStackSequences(pushed []int, popped []
int) bool {
 
}";"";"2020-03-25 15:17:55"
684;54;"Kotlin";"class Solution {
    fun validateStackSequences(pushed: IntArray, 
popped: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:17:55"
685;54;"Python3";"class Solution:
    def validateStackSequences(self, pushed: List
[int], popped: List[int]) -> bool:";"";"2020-03-25 15:17:55"
686;54;"JavaScript";"/**
 * @param {number[]} pushed
 * @param {number[]} popped
 * @return {boolean}
 */
var validateStackSequences = function(pushed, 
popped) {
 
};";"";"2020-03-25 15:17:55"
687;54;"PHP";"class Solution {
 
    /**
     * @param Integer[] $pushed
     * @param Integer[] $popped
     * @return Boolean
     */
    function validateStackSequences($pushed, 
$popped) {
 
    }
}";"";"2020-03-25 15:17:55"
688;54;"Swift";"class Solution {
    func validateStackSequences(_ pushed: [Int], _ 
popped: [Int]) -> Bool {
 
    }
}";"";"2020-03-25 15:17:55"
689;54;"Ruby";"# @param {Integer[]} pushed
# @param {Integer[]} popped
# @return {Boolean}
def validate_stack_sequences(pushed, popped)
 
end";"";"2020-03-25 15:17:55"
690;54;"Python";"class Solution(object):
    def validateStackSequences(self, pushed, popped)
:
        """"""
        :type pushed: List[int]
        :type popped: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:17:55"
691;55;"C#";"public class WordsFrequency {
 
    public WordsFrequency(string[] book) {
 
    }
    
    public int Get(string word) {
 
    }
}
 
/**
 * Your WordsFrequency object will be instantiated 
and called as such:
 * WordsFrequency obj = new WordsFrequency(book);
 * int param_1 = obj.Get(word);
 */";"";"2020-03-25 15:17:55"
692;55;"Java";"class WordsFrequency {
 
    public WordsFrequency(String[] book) {
 
    }
    
    public int get(String word) {
 
    }
}
 
/**
 * Your WordsFrequency object will be instantiated 
and called as such:
 * WordsFrequency obj = new WordsFrequency(book);
 * int param_1 = obj.get(word);
 */";"";"2020-03-25 15:17:55"
693;55;"Rust";"struct WordsFrequency {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl WordsFrequency {
 
    fn new(book: Vec<String>) -> Self {
 
    }
    
    fn get(&self, word: String) -> i32 {
 
    }
}
 
/**
 * Your WordsFrequency object will be instantiated 
and called as such:
 * let obj = WordsFrequency::new(book);";"";"2020-03-25 15:17:55"
694;55;"C";"typedef struct {
 
} WordsFrequency;
 
 
WordsFrequency* wordsFrequencyCreate(char** book, 
int bookSize) {
 
}
 
int wordsFrequencyGet(WordsFrequency* obj, char* 
word) {
 
}
 
void wordsFrequencyFree(WordsFrequency* obj) {
 
}
 
/**
 * Your WordsFrequency struct will be instantiated 
and called as such:
 * WordsFrequency* obj = wordsFrequencyCreate(book, 
bookSize);
 * int param_1 = wordsFrequencyGet(obj, word);
 ";"";"2020-03-25 15:17:55"
695;55;"Scala";"class WordsFrequency(_book: Array[String]) {
 
    def get(word: String): Int = {
 
    }
 
}
 
/**
 * Your WordsFrequency object will be instantiated 
and called as such:
 * var obj = new WordsFrequency(book)
 * var param_1 = obj.get(word)
 */";"";"2020-03-25 15:17:55"
696;55;"Go";"type WordsFrequency struct {
 
}
 
 
func Constructor(book []string) WordsFrequency {
 
}
 
 
func (this *WordsFrequency) Get(word string) int {
 
}
 
 
/**
 * Your WordsFrequency object will be instantiated 
and called as such:
 * obj := Constructor(book);
 * param_1 := obj.Get(word);
 */";"";"2020-03-25 15:17:55"
697;55;"Kotlin";"class WordsFrequency(book: Array<String>) {
 
    fun get(word: String): Int {
 
    }
 
}
 
/**
 * Your WordsFrequency object will be instantiated 
and called as such:
 * var obj = WordsFrequency(book)
 * var param_1 = obj.get(word)
 */";"";"2020-03-25 15:17:55"
698;55;"Python3";"class WordsFrequency:
 
    def __init__(self, book: List[str]):
 
 
    def get(self, word: str) -> int:
 
 
 
# Your WordsFrequency object will be instantiated 
and called as such:
# obj = WordsFrequency(book)
# param_1 = obj.get(word)";"";"2020-03-25 15:17:55"
699;55;"JavaScript";"/**
 * @param {string[]} book
 */
var WordsFrequency = function(book) {
 
};
 
/** 
 * @param {string} word
 * @return {number}
 */
WordsFrequency.prototype.get = function(word) {
 
};
 
/**
 * Your WordsFrequency object will be instantiated 
and called as such:
 * var obj = new WordsFrequency(book)
 * var param_1 = obj.get(word)
 */";"";"2020-03-25 15:17:55"
700;55;"PHP";"class WordsFrequency {
    /**
     * @param String[] $book
     */
    function __construct($book) {
 
    }
 
    /**
     * @param String $word
     * @return Integer
     */
    function get($word) {
 
    }
}
 
/**
 * Your WordsFrequency object will be instantiated 
and called as such:
 * $obj = WordsFrequency($book);
 * $ret_1 = $obj->get($word);
 */";"";"2020-03-25 15:17:55"
701;55;"Swift";"class WordsFrequency {
 
    init(_ book: [String]) {
 
    }
    
    func get(_ word: String) -> Int {
 
    }
}
 
/**
 * Your WordsFrequency object will be instantiated 
and called as such:
 * let obj = WordsFrequency(book)
 * let ret_1: Int = obj.get(word)
 */";"";"2020-03-25 15:17:55"
702;55;"Ruby";"class WordsFrequency
 
=begin
    :type book: String[]
=end
    def initialize(book)
 
    end
 
 
=begin
    :type word: String
    :rtype: Integer
=end
    def get(word)
 
    end
 
 
end
 
# Your WordsFrequency object will be instantiated 
and called as such:
# obj = WordsFrequency.new(book)
# param_1 = obj.get(word)";"";"2020-03-25 15:17:55"
703;55;"Python";"class WordsFrequency(object):
 
    def __init__(self, book):
        """"""
        :type book: List[str]
        """"""
 
 
    def get(self, word):
        """"""
        :type word: str
        :rtype: int
        """"""
 
 
 
# Your WordsFrequency object will be instantiated 
and called as such:
# obj = WordsFrequency(book)
# param_1 = obj.get(word)";"";"2020-03-25 15:17:55"
704;56;"C#";"public class Solution {
 
    public Solution(double radius, double x_center, 
double y_center) {
 
    }
    
    public double[] RandPoint() {
 
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * Solution obj = new Solution(radius, x_center, 
y_center);
 * double[] param_1 = obj.RandPoint();
 */";"";"2020-03-25 15:17:55"
705;56;"Java";"class Solution {
 
    public Solution(double radius, double x_center, 
double y_center) {
 
    }
    
    public double[] randPoint() {
 
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * Solution obj = new Solution(radius, x_center, 
y_center);
 * double[] param_1 = obj.randPoint();
 */";"";"2020-03-25 15:17:55"
706;56;"Rust";"struct Solution {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl Solution {
 
    fn new(radius: f64, x_center: f64, y_center: 
f64) -> Self {
        
    }
    
    fn rand_point(&self) -> Vec<f64> {
        
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:";"";"2020-03-25 15:17:55"
707;56;"C";"typedef struct {
    
} Solution;
 
 
Solution* solutionCreate(double radius, double 
x_center, double y_center) {
    
}
 
double* solutionRandPoint(Solution* obj, int* 
retSize) {
  
}
 
void solutionFree(Solution* obj) {
    
}
 
/**
 * Your Solution struct will be instantiated and 
called as such:
 * Solution* obj = solutionCreate(radius, x_center, 
y_center);
 * double* param_1 = solutionRandPoint(obj, retSize)
;";"";"2020-03-25 15:17:55"
708;56;"Scala";"class Solution(_radius: Double, _x_center: Double, 
_y_center: Double) {
 
    def randPoint(): Array[Double] = {
 
    }
 
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * var obj = new Solution(radius, x_center, 
y_center)
 * var param_1 = obj.randPoint()
 */";"";"2020-03-25 15:17:55"
709;56;"Go";"type Solution struct {
 
}
 
 
func Constructor(radius float64, x_center float64, 
y_center float64) Solution {
 
}
 
 
func (this *Solution) RandPoint() []float64 {
 
}
 
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * obj := Constructor(radius, x_center, y_center);
 * param_1 := obj.RandPoint();
 */";"";"2020-03-25 15:17:55"
710;56;"Kotlin";"class Solution(radius: Double, x_center: Double, 
y_center: Double) {
 
    fun randPoint(): DoubleArray {
 
    }
 
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * var obj = Solution(radius, x_center, y_center)
 * var param_1 = obj.randPoint()
 */";"";"2020-03-25 15:17:55"
711;56;"Python3";"class Solution:
 
    def __init__(self, radius: float, x_center: 
float, y_center: float):
        
 
    def randPoint(self) -> List[float]:
        
 
 
# Your Solution object will be instantiated and 
called as such:
# obj = Solution(radius, x_center, y_center)
# param_1 = obj.randPoint()";"";"2020-03-25 15:17:55"
712;56;"JavaScript";"/**
 * @param {number} radius
 * @param {number} x_center
 * @param {number} y_center
 */
var Solution = function(radius, x_center, y_center) 
{
 
};
 
/**
 * @return {number[]}
 */
Solution.prototype.randPoint = function() {
 
};
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * var obj = new Solution(radius, x_center, 
y_center)
 * var param_1 = obj.randPoint()
 */";"";"2020-03-25 15:17:55"
713;56;"PHP";"";"";"2020-03-25 15:17:55"
714;56;"Swift";"class Solution {
 
    init(_ radius: Double, _ x_center: Double, _ 
y_center: Double) {
        
    }
    
    func randPoint() -> [Double] {
        
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * let obj = Solution(radius, x_center, y_center)
 * let ret_1: [Double] = obj.randPoint()
 */";"";"2020-03-25 15:17:55"
715;56;"Ruby";"class Solution
 
=begin
    :type radius: Float
    :type x_center: Float
    :type y_center: Float
=end
    def initialize(radius, x_center, y_center)
 
    end
 
 
=begin
    :rtype: Float[]
=end
    def rand_point()
 
    end
 
 
end
 
# Your Solution object will be instantiated and 
called as such:
# obj = Solution.new(radius, x_center, y_center)
# param_1 = obj.rand_point()";"";"2020-03-25 15:17:55"
716;56;"Python";"class Solution(object):
 
    def __init__(self, radius, x_center, y_center):
        """"""
        :type radius: float
        :type x_center: float
        :type y_center: float
        """"""
        
 
    def randPoint(self):
        """"""
        :rtype: List[float]
        """"""
        
 
 
# Your Solution object will be instantiated and 
called as such:
# obj = Solution(radius, x_center, y_center)
# param_1 = obj.randPoint()";"";"2020-03-25 15:17:55"
717;57;"C#";"public class Solution {
    public int MinimumDistance(string word) {
        
    }
}";"";"2020-03-25 15:17:55"
718;57;"Java";"class Solution {
    public int minimumDistance(String word) {
 
    }
}";"";"2020-03-25 15:17:55"
719;57;"Rust";"impl Solution {
    pub fn minimum_distance(word: String) -> i32 {
 
    }
}";"";"2020-03-25 15:17:55"
720;57;"C";"int minimumDistance(char * word){
 
}";"";"2020-03-25 15:17:55"
721;57;"Scala";"object Solution {
    def minimumDistance(word: String): Int = {
 
    }
}";"";"2020-03-25 15:17:55"
722;57;"Go";"func minimumDistance(word string) int {
 
}";"";"2020-03-25 15:17:55"
723;57;"Kotlin";"class Solution {
    fun minimumDistance(word: String): Int {
 
    }
}";"";"2020-03-25 15:17:55"
724;57;"Python3";"class Solution:
    def minimumDistance(self, word: str) -> int:";"";"2020-03-25 15:17:55"
725;57;"JavaScript";"/**
 * @param {string} word
 * @return {number}
 */
var minimumDistance = function(word) {
    
};";"";"2020-03-25 15:17:55"
726;57;"PHP";"class Solution {";"";"2020-03-25 15:17:55"
727;57;"Swift";"class Solution {
    func minimumDistance(_ word: String) -> Int {
 
    }
}";"";"2020-03-25 15:17:55"
728;57;"Ruby";"# @param {String} word
# @return {Integer}
def minimum_distance(word)
    
end";"";"2020-03-25 15:17:55"
729;57;"Python";"class Solution(object):
    def minimumDistance(self, word):
        """"""
        :type word: str
        :rtype: int
        """"""";"";"2020-03-25 15:17:55"
730;58;"C#";"public class Solution {
    public int DistributeCandies(int[] candies) {
 
    }
}";"";"2020-03-25 15:17:55"
731;58;"Java";"class Solution {
    public int distributeCandies(int[] candies) {
 
    }
}";"";"2020-03-25 15:17:55"
732;58;"Rust";"impl Solution {
    pub fn distribute_candies(candies: Vec<i32>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:17:55"
733;58;"C";"int distributeCandies(int* candies, int candiesSize)
{
 
}";"";"2020-03-25 15:17:55"
734;58;"Scala";"object Solution {
    def distributeCandies(candies: Array[Int]): Int 
= {
 
    }
}";"";"2020-03-25 15:17:55"
735;58;"Go";"func distributeCandies(candies []int) int {
 
}";"";"2020-03-25 15:17:55"
736;58;"Kotlin";"class Solution {
    fun distributeCandies(candies: IntArray): Int {
 
    }
}";"";"2020-03-25 15:17:55"
737;58;"Python3";"class Solution:
    def distributeCandies(self, candies: List[int]) 
-> int:";"";"2020-03-25 15:17:55"
738;58;"JavaScript";"/**
 * @param {number[]} candies
 * @return {number}
 */
var distributeCandies = function(candies) {
 
};";"";"2020-03-25 15:17:55"
739;58;"PHP";"class Solution {
 
    /**
     * @param Integer[] $candies
     * @return Integer
     */
    function distributeCandies($candies) {
        
    }
}";"";"2020-03-25 15:17:55"
740;58;"Swift";"class Solution {
    func distributeCandies(_ candies: [Int]) -> Int 
{
        
    }
}";"";"2020-03-25 15:17:55"
741;58;"Ruby";"# @param {Integer[]} candies
# @return {Integer}
def distribute_candies(candies)
 
end";"";"2020-03-25 15:17:55"
742;58;"Python";"class Solution(object):
    def distributeCandies(self, candies):
        """"""
        :type candies: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:17:55"
743;59;"C#";"public class Solution {
    public int ClosedIsland(int[][] grid) {
 
    }
}";"";"2020-03-25 15:17:55"
744;59;"Java";"class Solution {
    public int closedIsland(int[][] grid) {
 
    }
}";"";"2020-03-25 15:17:55"
745;59;"C";"int closedIsland(int** grid, int gridSize, int* 
gridColSize){
 
}";"";"2020-03-25 15:17:55"
746;59;"Rust";"impl Solution {
    pub fn closed_island(grid: Vec<Vec<i32>>) -> 
i32 {
 
    }
}";"";"2020-03-25 15:17:55"
747;59;"Scala";"object Solution {
    def closedIsland(grid: Array[Array[Int]]): Int 
= {
 
    }
}";"";"2020-03-25 15:17:55"
748;59;"Go";"func closedIsland(grid [][]int) int {
 
}";"";"2020-03-25 15:17:55"
749;59;"Kotlin";"class Solution {
    fun closedIsland(grid: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:17:55"
750;59;"Python3";"class Solution:
    def closedIsland(self, grid: List[List[int]]) 
-> int:";"";"2020-03-25 15:17:55"
751;59;"JavaScript";"/**
 * @param {number[][]} grid
 * @return {number}
 */
var closedIsland = function(grid) {
 
};";"";"2020-03-25 15:17:55"
752;59;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $grid
     * @return Integer
     */
    function closedIsland($grid) {
 
    }
}";"";"2020-03-25 15:17:55"
753;59;"Swift";"class Solution {
    func closedIsland(_ grid: [[Int]]) -> Int {
 
    }
}";"";"2020-03-25 15:17:55"
754;59;"Ruby";"# @param {Integer[][]} grid
# @return {Integer}
def closed_island(grid)
 
end";"";"2020-03-25 15:17:55"
755;59;"Python";"class Solution(object):
    def closedIsland(self, grid):
        """"""
        :type grid: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:17:55"
756;60;"C#";"public class Solution {
    public IList<int> PartitionLabels(string S) {
 
    }
}";"";"2020-03-25 15:17:56"
757;60;"Java";"class Solution {
    public List<Integer> partitionLabels(String S) {
 
    }
}";"";"2020-03-25 15:17:56"
758;60;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* partitionLabels(char * S, int* returnSize){
 
}";"";"2020-03-25 15:17:56"
759;60;"Rust";"impl Solution {
    pub fn partition_labels(s: String) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:17:56"
760;60;"Scala";"object Solution {
    def partitionLabels(S: String): List[Int] = {
 
    }
}";"";"2020-03-25 15:17:56"
761;60;"Go";"func partitionLabels(S string) []int {
 
}";"";"2020-03-25 15:17:56"
762;60;"Kotlin";"class Solution {
    fun partitionLabels(S: String): List<Int> {
 
    }
}";"";"2020-03-25 15:17:56"
763;60;"Python3";"class Solution:
    def partitionLabels(self, S: str) -> List[int]:";"";"2020-03-25 15:17:56"
764;60;"JavaScript";"/**
 * @param {string} S
 * @return {number[]}
 */
var partitionLabels = function(S) {
 
};";"";"2020-03-25 15:17:56"
765;60;"PHP";"class Solution {
 
    /**
     * @param String $S
     * @return Integer[]
     */
    function partitionLabels($S) {
        
    }
}";"";"2020-03-25 15:17:56"
766;60;"Swift";"class Solution {
    func partitionLabels(_ S: String) -> [Int] {
        
    }
}";"";"2020-03-25 15:17:56"
767;60;"Ruby";"# @param {String} s
# @return {Integer[]}
def partition_labels(s)
 
end";"";"2020-03-25 15:17:56"
768;60;"Python";"class Solution(object):
    def partitionLabels(self, S):
        """"""
        :type S: str
        :rtype: List[int]
        """"""";"";"2020-03-25 15:17:56"
769;61;"C#";"public class Solution {
    public bool IsAdditiveNumber(string num) {
 
    }
}";"";"2020-03-25 15:17:56"
770;61;"Java";"class Solution {
    public boolean isAdditiveNumber(String num) {
 
    }
}";"";"2020-03-25 15:17:56"
771;61;"Rust";"impl Solution {
    pub fn is_additive_number(num: String) -> bool {
        
    }
}";"";"2020-03-25 15:17:56"
772;61;"C";"bool isAdditiveNumber(char * num){
 
}";"";"2020-03-25 15:17:56"
773;61;"Scala";"object Solution {
    def isAdditiveNumber(num: String): Boolean = {
 
    }
}";"";"2020-03-25 15:17:56"
774;61;"Go";"func isAdditiveNumber(num string) bool {
 
}";"";"2020-03-25 15:17:56"
775;61;"Kotlin";"class Solution {
    fun isAdditiveNumber(num: String): Boolean {
 
    }
}";"";"2020-03-25 15:17:56"
776;61;"Python3";"class Solution:
    def isAdditiveNumber(self, num: str) -> bool:";"";"2020-03-25 15:17:56"
777;61;"JavaScript";"/**
 * @param {string} num
 * @return {boolean}
 */
var isAdditiveNumber = function(num) {
 
};";"";"2020-03-25 15:17:56"
778;61;"PHP";"class Solution {";"";"2020-03-25 15:17:56"
779;61;"Swift";"class Solution {
    func isAdditiveNumber(_ num: String) -> Bool {
        
    }
}";"";"2020-03-25 15:17:56"
780;61;"Ruby";"# @param {String} num
# @return {Boolean}
def is_additive_number(num)
 
end";"";"2020-03-25 15:17:56"
781;61;"Python";"class Solution(object):
    def isAdditiveNumber(self, num):
        """"""
        :type num: str
        :rtype: bool
        """"""";"";"2020-03-25 15:17:56"
782;62;"C#";"public class CQueue {
 
    public CQueue() {
 
    }
    
    public void AppendTail(int value) {
 
    }
    
    public int DeleteHead() {
 
    }
}
 
/**
 * Your CQueue object will be instantiated and 
called as such:
 * CQueue obj = new CQueue();
 * obj.AppendTail(value);
 * int param_2 = obj.DeleteHead();
 */";"";"2020-03-25 15:17:56"
783;62;"Java";"class CQueue {
 
    public CQueue() {
 
    }
    
    public void appendTail(int value) {
 
    }
    
    public int deleteHead() {
 
    }
}
 
/**
 * Your CQueue object will be instantiated and 
called as such:
 * CQueue obj = new CQueue();
 * obj.appendTail(value);
 * int param_2 = obj.deleteHead();
 */";"";"2020-03-25 15:17:56"
784;62;"C";"typedef struct {
 
} CQueue;
 
 
CQueue* cQueueCreate() {
 
}
 
void cQueueAppendTail(CQueue* obj, int value) {
 
}
 
int cQueueDeleteHead(CQueue* obj) {
 
}
 
void cQueueFree(CQueue* obj) {
 
}
 
/**
 * Your CQueue struct will be instantiated and 
called as such:
 * CQueue* obj = cQueueCreate();
 * cQueueAppendTail(obj, value);";"";"2020-03-25 15:17:56"
785;62;"Rust";"struct CQueue {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl CQueue {
 
    fn new() -> Self {
 
    }
    
    fn append_tail(&self, value: i32) {
 
    }
    
    fn delete_head(&self) -> i32 {
 
    }
}
 ";"";"2020-03-25 15:17:56"
786;62;"Scala";"class CQueue() {
 
    def appendTail(value: Int) {
 
    }
 
    def deleteHead(): Int = {
 
    }
 
}
 
/**
 * Your CQueue object will be instantiated and 
called as such:
 * var obj = new CQueue()
 * obj.appendTail(value)
 * var param_2 = obj.deleteHead()
 */";"";"2020-03-25 15:17:56"
787;62;"Go";"type CQueue struct {
 
}
 
 
func Constructor() CQueue {
 
}
 
 
func (this *CQueue) AppendTail(value int)  {
 
}
 
 
func (this *CQueue) DeleteHead() int {
 
}
 
 
/**
 * Your CQueue object will be instantiated and 
called as such:
 * obj := Constructor();
 * obj.AppendTail(value);
 * param_2 := obj.DeleteHead();";"";"2020-03-25 15:17:56"
788;62;"Kotlin";"class CQueue() {
 
    fun appendTail(value: Int) {
 
    }
 
    fun deleteHead(): Int {
 
    }
 
}
 
/**
 * Your CQueue object will be instantiated and 
called as such:
 * var obj = CQueue()
 * obj.appendTail(value)
 * var param_2 = obj.deleteHead()
 */";"";"2020-03-25 15:17:56"
789;62;"Python3";"class CQueue:
 
    def __init__(self):
 
 
    def appendTail(self, value: int) -> None:
 
 
    def deleteHead(self) -> int:
 
 
 
# Your CQueue object will be instantiated and 
called as such:
# obj = CQueue()
# obj.appendTail(value)
# param_2 = obj.deleteHead()";"";"2020-03-25 15:17:56"
790;62;"JavaScript";"var CQueue = function() {
 
};
 
/** 
 * @param {number} value
 * @return {void}
 */
CQueue.prototype.appendTail = function(value) {
 
};
 
/**
 * @return {number}
 */
CQueue.prototype.deleteHead = function() {
 
};
 
/**
 * Your CQueue object will be instantiated and 
called as such:
 * var obj = new CQueue()
 * obj.appendTail(value)
 * var param_2 = obj.deleteHead()
 */";"";"2020-03-25 15:17:56"
791;62;"PHP";"class CQueue {
    /**
     */
    function __construct() {
 
    }
 
    /**
     * @param Integer $value
     * @return NULL
     */
    function appendTail($value) {
 
    }
 
    /**
     * @return Integer
     */
    function deleteHead() {
 
    }
}
 
/**
 * Your CQueue object will be instantiated and 
called as such:";"";"2020-03-25 15:17:56"
792;62;"Swift";"class CQueue {
 
    init() {
 
    }
    
    func appendTail(_ value: Int) {
 
    }
    
    func deleteHead() -> Int {
 
    }
}
 
/**
 * Your CQueue object will be instantiated and 
called as such:
 * let obj = CQueue()
 * obj.appendTail(value)
 * let ret_2: Int = obj.deleteHead()
 */";"";"2020-03-25 15:17:56"
793;62;"Ruby";"class CQueue";"";"2020-03-25 15:17:56"
794;62;"Python";"class CQueue(object):
 
    def __init__(self):
 
 
    def appendTail(self, value):
        """"""
        :type value: int
        :rtype: None
        """"""
 
 
    def deleteHead(self):
        """"""
        :rtype: int
        """"""
 
 
 
# Your CQueue object will be instantiated and 
called as such:
# obj = CQueue()
# obj.appendTail(value)
# param_2 = obj.deleteHead()";"";"2020-03-25 15:17:56"
795;63;"C#";"public class Solution {
    public double MyPow(double x, int n) {
 
    }
}";"";"2020-03-25 15:17:56"
796;63;"Java";"class Solution {
    public double myPow(double x, int n) {
 
    }
}";"";"2020-03-25 15:17:56"
797;63;"C";"double myPow(double x, int n){
 
}";"";"2020-03-25 15:17:56"
798;63;"Rust";"impl Solution {
    pub fn my_pow(x: f64, n: i32) -> f64 {
 
    }
}";"";"2020-03-25 15:17:56"
799;63;"Scala";"object Solution {
    def myPow(x: Double, n: Int): Double = {
 
    }
}";"";"2020-03-25 15:17:56"
800;63;"Go";"func myPow(x float64, n int) float64 {
 
}";"";"2020-03-25 15:17:56"
801;63;"Kotlin";"class Solution {
    fun myPow(x: Double, n: Int): Double {
 
    }
}";"";"2020-03-25 15:17:56"
802;63;"Python3";"class Solution:
    def myPow(self, x: float, n: int) -> float:";"";"2020-03-25 15:17:56"
803;63;"JavaScript";"/**
 * @param {number} x
 * @param {number} n
 * @return {number}
 */
var myPow = function(x, n) {
 
};";"";"2020-03-25 15:17:56"
804;63;"PHP";"class Solution {
 
    /**
     * @param Float $x
     * @param Integer $n
     * @return Float
     */
    function myPow($x, $n) {
 
    }
}";"";"2020-03-25 15:17:56"
805;63;"Swift";"class Solution {
    func myPow(_ x: Double, _ n: Int) -> Double {
 
    }
}";"";"2020-03-25 15:17:56"
806;63;"Ruby";"# @param {Float} x
# @param {Integer} n
# @return {Float}
def my_pow(x, n)
 
end";"";"2020-03-25 15:17:56"
807;63;"Python";"class Solution(object):
    def myPow(self, x, n):
        """"""
        :type x: float
        :type n: int
        :rtype: float
        """"""";"";"2020-03-25 15:17:56"
808;64;"C#";"public class Solution {
    public int MinFlips(int[][] mat) {
 
    }
}";"";"2020-03-25 15:17:56"
809;64;"Java";"class Solution {
    public int minFlips(int[][] mat) {
 
    }
}";"";"2020-03-25 15:17:56"
810;64;"Rust";"impl Solution {
    pub fn min_flips(mat: Vec<Vec<i32>>) -> i32 {
 
    }
}";"";"2020-03-25 15:17:56"
811;64;"C";"int minFlips(int** mat, int matSize, int* 
matColSize){
 
}";"";"2020-03-25 15:17:56"
812;64;"Scala";"object Solution {
    def minFlips(mat: Array[Array[Int]]): Int = {
 
    }
}";"";"2020-03-25 15:17:56"
813;64;"Go";"func minFlips(mat [][]int) int {
 
}";"";"2020-03-25 15:17:56"
814;64;"Kotlin";"class Solution {
    fun minFlips(mat: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:17:56"
815;64;"Python3";"class Solution:
    def minFlips(self, mat: List[List[int]]) -> int:";"";"2020-03-25 15:17:56"
816;64;"JavaScript";"/**
 * @param {number[][]} mat
 * @return {number}
 */
var minFlips = function(mat) {
 
};";"";"2020-03-25 15:17:56"
817;64;"PHP";"class Solution {";"";"2020-03-25 15:17:56"
818;64;"Swift";"class Solution {
    func minFlips(_ mat: [[Int]]) -> Int {
 
    }
}";"";"2020-03-25 15:17:56"
819;64;"Ruby";"# @param {Integer[][]} mat
# @return {Integer}
def min_flips(mat)
 
end";"";"2020-03-25 15:17:56"
820;64;"Python";"class Solution(object):
    def minFlips(self, mat):
        """"""
        :type mat: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:17:56"
821;65;"C#";"public class Solution {
    public bool IsIsomorphic(string s, string t) {
 
    }
}";"";"2020-03-25 15:17:56"
822;65;"Java";"class Solution {
    public boolean isIsomorphic(String s, String t) 
{
 
    }
}";"";"2020-03-25 15:17:56"
823;65;"Rust";"impl Solution {
    pub fn is_isomorphic(s: String, t: String) -> 
bool {
 
    }
}";"";"2020-03-25 15:17:56"
824;65;"C";"bool isIsomorphic(char * s, char * t){
 
}";"";"2020-03-25 15:17:56"
825;65;"Scala";"object Solution {
    def isIsomorphic(s: String, t: String): Boolean 
= {
 
    }
}";"";"2020-03-25 15:17:56"
826;65;"Go";"func isIsomorphic(s string, t string) bool {
 
}";"";"2020-03-25 15:17:56"
827;65;"Kotlin";"class Solution {
    fun isIsomorphic(s: String, t: String): Boolean 
{
 
    }
}";"";"2020-03-25 15:17:56"
828;65;"Python3";"class Solution:
    def isIsomorphic(self, s: str, t: str) -> bool:";"";"2020-03-25 15:17:56"
829;65;"JavaScript";"/**
 * @param {string} s
 * @param {string} t
 * @return {boolean}
 */
var isIsomorphic = function(s, t) {
 
};";"";"2020-03-25 15:17:56"
830;65;"PHP";"class Solution {";"";"2020-03-25 15:17:56"
831;65;"Swift";"class Solution {
    func isIsomorphic(_ s: String, _ t: String) -> 
Bool {
 
    }
}";"";"2020-03-25 15:17:56"
832;65;"Ruby";"# @param {String} s
# @param {String} t
# @return {Boolean}
def is_isomorphic(s, t)
 
end";"";"2020-03-25 15:17:56"
833;65;"Python";"class Solution(object):
    def isIsomorphic(self, s, t):
        """"""
        :type s: str
        :type t: str
        :rtype: bool
        """"""";"";"2020-03-25 15:17:56"
834;66;"C#";"public class RecentCounter {
 
    public RecentCounter() {
 
    }
    
    public int Ping(int t) {
 
    }
}
 
/**
 * Your RecentCounter object will be instantiated 
and called as such:
 * RecentCounter obj = new RecentCounter();
 * int param_1 = obj.Ping(t);
 */";"";"2020-03-25 15:17:56"
835;66;"Java";"class RecentCounter {
 
    public RecentCounter() {
 
    }
    
    public int ping(int t) {
 
    }
}
 
/**
 * Your RecentCounter object will be instantiated 
and called as such:
 * RecentCounter obj = new RecentCounter();
 * int param_1 = obj.ping(t);
 */";"";"2020-03-25 15:17:56"
836;66;"Rust";"struct RecentCounter {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl RecentCounter {
 
    fn new() -> Self {
        
    }
    
    fn ping(&self, t: i32) -> i32 {
        
    }
}
 
/**
 * Your RecentCounter object will be instantiated 
and called as such:
 * let obj = RecentCounter::new();";"";"2020-03-25 15:17:56"
837;66;"C";"typedef struct {
    
} RecentCounter;
 
 
RecentCounter* recentCounterCreate() {
    
}
 
int recentCounterPing(RecentCounter* obj, int t) {
  
}
 
void recentCounterFree(RecentCounter* obj) {
    
}
 
/**
 * Your RecentCounter struct will be instantiated 
and called as such:
 * RecentCounter* obj = recentCounterCreate();
 * int param_1 = recentCounterPing(obj, t);
 
 * recentCounterFree(obj);
*/";"";"2020-03-25 15:17:56"
838;66;"Scala";"class RecentCounter() {
 
    def ping(t: Int): Int = {
 
    }
 
}
 
/**
 * Your RecentCounter object will be instantiated 
and called as such:
 * var obj = new RecentCounter()
 * var param_1 = obj.ping(t)
 */";"";"2020-03-25 15:17:56"
839;66;"Go";"type RecentCounter struct {
 
}
 
 
func Constructor() RecentCounter {
 
}
 
 
func (this *RecentCounter) Ping(t int) int {
 
}
 
 
/**
 * Your RecentCounter object will be instantiated 
and called as such:
 * obj := Constructor();
 * param_1 := obj.Ping(t);
 */";"";"2020-03-25 15:17:56"
840;66;"Kotlin";"class RecentCounter() {
 
    fun ping(t: Int): Int {
 
    }
 
}
 
/**
 * Your RecentCounter object will be instantiated 
and called as such:
 * var obj = RecentCounter()
 * var param_1 = obj.ping(t)
 */";"";"2020-03-25 15:17:56"
841;66;"Python3";"class RecentCounter:
 
    def __init__(self):
        
 
    def ping(self, t: int) -> int:
        
 
 
# Your RecentCounter object will be instantiated 
and called as such:
# obj = RecentCounter()
# param_1 = obj.ping(t)";"";"2020-03-25 15:17:56"
842;66;"JavaScript";"var RecentCounter = function() {
 
};
 
/** 
 * @param {number} t
 * @return {number}
 */
RecentCounter.prototype.ping = function(t) {
 
};
 
/**
 * Your RecentCounter object will be instantiated 
and called as such:
 * var obj = new RecentCounter()
 * var param_1 = obj.ping(t)
 */";"";"2020-03-25 15:17:56"
843;66;"PHP";"class RecentCounter {";"";"2020-03-25 15:17:56"
844;66;"Swift";"class RecentCounter {
 
    init() {
        
    }
    
    func ping(_ t: Int) -> Int {
        
    }
}
 
/**
 * Your RecentCounter object will be instantiated 
and called as such:
 * let obj = RecentCounter()
 * let ret_1: Int = obj.ping(t)
 */";"";"2020-03-25 15:17:56"
845;66;"Ruby";"class RecentCounter
    def initialize()
 
    end
 
 
=begin
    :type t: Integer
    :rtype: Integer
=end
    def ping(t)
 
    end
 
 
end
 
# Your RecentCounter object will be instantiated 
and called as such:
# obj = RecentCounter.new()
# param_1 = obj.ping(t)";"";"2020-03-25 15:17:56"
846;66;"Python";"class RecentCounter(object):
 
    def __init__(self):
        
 
    def ping(self, t):
        """"""
        :type t: int
        :rtype: int
        """"""
        
 
 
# Your RecentCounter object will be instantiated 
and called as such:
# obj = RecentCounter()
# param_1 = obj.ping(t)";"";"2020-03-25 15:17:56"
847;67;"C#";"/*
// Definition for a Node.
public class Node {
    public int val;
    public IList<Node> children;
 
    public Node() {}
 
    public Node(int _val) {
        val = _val;
    }
 
    public Node(int _val, IList<Node> _children) {
        val = _val;
        children = _children;
    }
}
*/
public class Solution {
    public IList<int> Postorder(Node root) {
        
    }
}";"";"2020-03-25 15:17:56"
848;67;"Java";"/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;
 
    public Node() {}
 
    public Node(int _val) {
        val = _val;
    }
 
    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public List<Integer> postorder(Node root) {
        
    }
}";"";"2020-03-25 15:17:56"
849;67;"Python3";"""""""
# Definition for a Node.
class Node:
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children
""""""
class Solution:
    def postorder(self, root: 'Node') -> List[int]:";"";"2020-03-25 15:17:56"
850;67;"JavaScript";"/**
 * // Definition for a Node.
 * function Node(val,children) {
 *    this.val = val;
 *    this.children = children;
 * };
 */
/**
 * @param {Node} root
 * @return {number[]}
 */
var postorder = function(root) {
    
};";"";"2020-03-25 15:17:56"
851;67;"Go";"/**
 * Definition for a Node.
 * type Node struct {
 *     Val int
 *     Children []*Node
 * }
 */
 
func postorder(root *Node) []int {
    
}";"";"2020-03-25 15:17:56"
852;67;"Python";"""""""
# Definition for a Node.
class Node(object):
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children
""""""
class Solution(object):
    def postorder(self, root):
        """"""
        :type root: Node
        :rtype: List[int]
        """"""";"";"2020-03-25 15:17:56"
853;68;"C#";"public class Solution {
    public IList<int> LargestDivisibleSubset(int[] 
nums) {
 
    }
}";"";"2020-03-25 15:17:56"
854;68;"Java";"class Solution {
    public List<Integer> largestDivisibleSubset(int
[] nums) {
 
    }
}";"";"2020-03-25 15:17:56"
855;68;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* largestDivisibleSubset(int* nums, int numsSize,
 int* returnSize){
 
}";"";"2020-03-25 15:17:56"
856;68;"Rust";"impl Solution {
    pub fn largest_divisible_subset(nums: Vec<i32>) 
-> Vec<i32> {
        
    }
}";"";"2020-03-25 15:17:56"
857;68;"Scala";"object Solution {
    def largestDivisibleSubset(nums: Array[Int]): 
List[Int] = {
 
    }
}";"";"2020-03-25 15:17:56"
858;68;"Go";"func largestDivisibleSubset(nums []int) []int {
 
}";"";"2020-03-25 15:17:56"
859;68;"Kotlin";"class Solution {
    fun largestDivisibleSubset(nums: IntArray): 
List<Int> {
 
    }
}";"";"2020-03-25 15:17:56"
860;68;"Python3";"class Solution:
    def largestDivisibleSubset(self, nums: List[int]
) -> List[int]:";"";"2020-03-25 15:17:56"
861;68;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number[]}
 */
var largestDivisibleSubset = function(nums) {
 
};";"";"2020-03-25 15:17:56"
862;68;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer[]
     */
    function largestDivisibleSubset($nums) {
        
    }
}";"";"2020-03-25 15:17:56"
863;68;"Swift";"class Solution {
    func largestDivisibleSubset(_ nums: [Int]) -> 
[Int] {
        
    }
}";"";"2020-03-25 15:17:56"
864;68;"Ruby";"# @param {Integer[]} nums
# @return {Integer[]}
def largest_divisible_subset(nums)
 
end";"";"2020-03-25 15:17:56"
865;68;"Python";"class Solution(object):
    def largestDivisibleSubset(self, nums):
        """"""
        :type nums: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:17:56"
866;69;"C#";"public class Solution {
    public int SlidingPuzzle(int[][] board) {
 
    }
}";"";"2020-03-25 15:17:56"
867;69;"Java";"class Solution {
    public int slidingPuzzle(int[][] board) {
 
    }
}";"";"2020-03-25 15:17:56"
868;69;"C";"int slidingPuzzle(int** board, int boardSize, int* 
boardColSize){
 
}";"";"2020-03-25 15:17:56"
869;69;"Rust";"impl Solution {
    pub fn sliding_puzzle(board: Vec<Vec<i32>>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:17:56"
870;69;"Scala";"object Solution {
    def slidingPuzzle(board: Array[Array[Int]]): 
Int = {
 
    }
}";"";"2020-03-25 15:17:56"
871;69;"Go";"func slidingPuzzle(board [][]int) int {
 
}";"";"2020-03-25 15:17:56"
872;69;"Kotlin";"class Solution {
    fun slidingPuzzle(board: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:17:56"
873;69;"Python3";"class Solution:
    def slidingPuzzle(self, board: List[List[int]]) 
-> int:";"";"2020-03-25 15:17:56"
874;69;"JavaScript";"/**
 * @param {number[][]} board
 * @return {number}
 */
var slidingPuzzle = function(board) {
 
};";"";"2020-03-25 15:17:56"
875;69;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $board
     * @return Integer
     */
    function slidingPuzzle($board) {
        
    }
}";"";"2020-03-25 15:17:56"
876;69;"Swift";"class Solution {
    func slidingPuzzle(_ board: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:17:56"
877;69;"Ruby";"# @param {Integer[][]} board
# @return {Integer}
def sliding_puzzle(board)
 
end";"";"2020-03-25 15:17:56"
878;69;"Python";"class Solution(object):
    def slidingPuzzle(self, board):
        """"""
        :type board: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:17:56"
879;70;"C#";"public class Solution {
    public int HeightChecker(int[] heights) {
 
    }
}";"";"2020-03-25 15:17:56"
880;70;"Java";"class Solution {
    public int heightChecker(int[] heights) {
 
    }
}";"";"2020-03-25 15:17:56"
881;70;"Rust";"impl Solution {
    pub fn height_checker(heights: Vec<i32>) -> i32 
{
        
    }
}";"";"2020-03-25 15:17:56"
882;70;"C";"int heightChecker(int* heights, int heightsSize){
 
}";"";"2020-03-25 15:17:56"
883;70;"Scala";"object Solution {
    def heightChecker(heights: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:17:56"
884;70;"Go";"func heightChecker(heights []int) int {
 
}";"";"2020-03-25 15:17:56"
885;70;"Kotlin";"class Solution {
    fun heightChecker(heights: IntArray): Int {
 
    }
}";"";"2020-03-25 15:17:56"
886;70;"Python3";"class Solution:
    def heightChecker(self, heights: List[int]) -> 
int:";"";"2020-03-25 15:17:56"
887;70;"JavaScript";"/**
 * @param {number[]} heights
 * @return {number}
 */
var heightChecker = function(heights) {
 
};";"";"2020-03-25 15:17:56"
888;70;"PHP";"class Solution {
 
    /**
     * @param Integer[] $heights
     * @return Integer
     */
    function heightChecker($heights) {
        
    }
}";"";"2020-03-25 15:17:56"
889;70;"Swift";"class Solution {
    func heightChecker(_ heights: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:17:56"
890;70;"Ruby";"# @param {Integer[]} heights
# @return {Integer}
def height_checker(heights)
 
end";"";"2020-03-25 15:17:56"
891;70;"Python";"class Solution(object):
    def heightChecker(self, heights):
        """"""
        :type heights: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:17:56"
892;71;"C#";"public class Solution {
    public string PushDominoes(string dominoes) {
 
    }
}";"";"2020-03-25 15:17:56"
893;71;"Java";"class Solution {
    public String pushDominoes(String dominoes) {
 
    }
}";"";"2020-03-25 15:17:56"
894;71;"C";"char * pushDominoes(char * dominoes){
 
}";"";"2020-03-25 15:17:56"
895;71;"Rust";"impl Solution {
    pub fn push_dominoes(dominoes: String) -> 
String {
        
    }
}";"";"2020-03-25 15:17:56"
896;71;"Scala";"object Solution {
    def pushDominoes(dominoes: String): String = {
 
    }
}";"";"2020-03-25 15:17:56"
897;71;"Go";"func pushDominoes(dominoes string) string {
 
}";"";"2020-03-25 15:17:56"
898;71;"Kotlin";"class Solution {
    fun pushDominoes(dominoes: String): String {
 
    }
}";"";"2020-03-25 15:17:56"
899;71;"Python3";"class Solution:
    def pushDominoes(self, dominoes: str) -> str:";"";"2020-03-25 15:17:56"
900;71;"JavaScript";"/**
 * @param {string} dominoes
 * @return {string}
 */
var pushDominoes = function(dominoes) {
 
};";"";"2020-03-25 15:17:56"
901;71;"PHP";"class Solution {
 
    /**
     * @param String $dominoes
     * @return String
     */
    function pushDominoes($dominoes) {
        
    }
}";"";"2020-03-25 15:17:56"
902;71;"Swift";"class Solution {
    func pushDominoes(_ dominoes: String) -> String 
{
        
    }
}";"";"2020-03-25 15:17:56"
903;71;"Ruby";"# @param {String} dominoes";"";"2020-03-25 15:17:56"
904;71;"Python";"class Solution(object):
    def pushDominoes(self, dominoes):
        """"""
        :type dominoes: str
        :rtype: str
        """"""";"";"2020-03-25 15:17:56"
905;72;"MS SQL Server";"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS 
INT AS
BEGIN
    RETURN (
        /* Write your T-SQL query statement below. 
*/
        
    );
END";"";"2020-03-25 15:17:56"
906;72;"Oracle";"CREATE FUNCTION getNthHighestSalary(N IN NUMBER) ";"";"2020-03-25 15:17:56"
907;73;"C#";"public class Solution {
    public int LengthLongestPath(string input) {
 
    }
}";"";"2020-03-25 15:17:56"
908;73;"Java";"class Solution {
    public int lengthLongestPath(String input) {
 
    }
}";"";"2020-03-25 15:17:56"
909;73;"Rust";"impl Solution {
    pub fn length_longest_path(input: String) -> 
i32 {
        
    }
}";"";"2020-03-25 15:17:56"
910;73;"C";"int lengthLongestPath(char * input){
 
}";"";"2020-03-25 15:17:56"
911;73;"Scala";"object Solution {
    def lengthLongestPath(input: String): Int = {
 
    }
}";"";"2020-03-25 15:17:56"
912;73;"Go";"func lengthLongestPath(input string) int {
 
}";"";"2020-03-25 15:17:56"
913;73;"Kotlin";"class Solution {
    fun lengthLongestPath(input: String): Int {
 
    }
}";"";"2020-03-25 15:17:56"
914;73;"Python3";"class Solution:
    def lengthLongestPath(self, input: str) -> int:";"";"2020-03-25 15:17:56"
915;73;"JavaScript";"/**
 * @param {string} input
 * @return {number}
 */
var lengthLongestPath = function(input) {
 
};";"";"2020-03-25 15:17:56"
916;73;"PHP";"class Solution {";"";"2020-03-25 15:17:56"
917;73;"Swift";"class Solution {
    func lengthLongestPath(_ input: String) -> Int {
        
    }
}";"";"2020-03-25 15:17:56"
918;73;"Ruby";"# @param {String} input
# @return {Integer}
def length_longest_path(input)
 
end";"";"2020-03-25 15:17:56"
919;73;"Python";"class Solution(object):
    def lengthLongestPath(self, input):
        """"""
        :type input: str
        :rtype: int
        """"""";"";"2020-03-25 15:17:56"
920;74;"C#";"public class Solution {
    public void WiggleSort(int[] nums) {
 
    }
}";"";"2020-03-25 15:17:56"
921;74;"Java";"class Solution {
    public void wiggleSort(int[] nums) {
 
    }
}";"";"2020-03-25 15:17:56"
922;74;"Rust";"impl Solution {
    pub fn wiggle_sort(nums: &mut Vec<i32>) {
 
    }
}";"";"2020-03-25 15:17:56"
923;74;"C";"void wiggleSort(int* nums, int numsSize){
 
}";"";"2020-03-25 15:17:56"
924;74;"Scala";"object Solution {
    def wiggleSort(nums: Array[Int]): Unit = {
 
    }
}";"";"2020-03-25 15:17:56"
925;74;"Go";"func wiggleSort(nums []int)  {
 
}";"";"2020-03-25 15:17:56"
926;74;"Kotlin";"class Solution {
    fun wiggleSort(nums: IntArray): Unit {
 
    }
}";"";"2020-03-25 15:17:56"
927;74;"Python3";"class Solution:
    def wiggleSort(self, nums: List[int]) -> None:
        """"""
        Do not return anything, modify nums 
in-place instead.
        """"""";"";"2020-03-25 15:17:56"
928;74;"JavaScript";"/**
 * @param {number[]} nums
 * @return {void} Do not return anything, modify 
nums in-place instead.
 */
var wiggleSort = function(nums) {
 
};";"";"2020-03-25 15:17:56"
929;74;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return NULL
     */
    function wiggleSort(&$nums) {
 
    }
}";"";"2020-03-25 15:17:56"
930;74;"Swift";"class Solution {
    func wiggleSort(_ nums: inout [Int]) {
 
    }
}";"";"2020-03-25 15:17:56"
931;74;"Ruby";"# @param {Integer[]} nums
# @return {Void} Do not return anything, modify 
nums in-place instead.
def wiggle_sort(nums)
 
end";"";"2020-03-25 15:17:56"
932;74;"Python";"class Solution(object):
    def wiggleSort(self, nums):
        """"""
        :type nums: List[int]
        :rtype: None Do not return anything, modify 
nums in-place instead.
        """"""";"";"2020-03-25 15:17:56"
933;75;"C#";"public class Solution {
    public int FindMinDifference(IList<string> 
timePoints) {
 
    }
}";"";"2020-03-25 15:17:56"
934;75;"Java";"class Solution {
    public int findMinDifference(List<String> 
timePoints) {
 
    }
}";"";"2020-03-25 15:17:56"
935;75;"Rust";"impl Solution {
    pub fn find_min_difference(time_points: 
Vec<String>) -> i32 {
        
    }
}";"";"2020-03-25 15:17:56"
936;75;"C";"int findMinDifference(char ** timePoints, int 
timePointsSize){
 
}";"";"2020-03-25 15:17:56"
937;75;"Scala";"object Solution {
    def findMinDifference(timePoints: List[String])
: Int = {
 
    }
}";"";"2020-03-25 15:17:56"
938;75;"Go";"func findMinDifference(timePoints []string) int {
 
}";"";"2020-03-25 15:17:56"
939;75;"Kotlin";"class Solution {
    fun findMinDifference(timePoints: List<String>)
: Int {
 
    }
}";"";"2020-03-25 15:17:56"
940;75;"Python3";"class Solution:
    def findMinDifference(self, timePoints: List
[str]) -> int:";"";"2020-03-25 15:17:56"
941;75;"JavaScript";"/**
 * @param {string[]} timePoints
 * @return {number}
 */
var findMinDifference = function(timePoints) {
 
};";"";"2020-03-25 15:17:56"
942;75;"PHP";"class Solution {
 
    /**
     * @param String[] $timePoints
     * @return Integer
     */
    function findMinDifference($timePoints) {
        
    }
}";"";"2020-03-25 15:17:56"
943;75;"Swift";"class Solution {
    func findMinDifference(_ timePoints: [String]) 
-> Int {
        
    }
}";"";"2020-03-25 15:17:56"
944;75;"Ruby";"# @param {String[]} time_points
# @return {Integer}
def find_min_difference(time_points)
 
end";"";"2020-03-25 15:17:56"
945;75;"Python";"class Solution(object):
    def findMinDifference(self, timePoints):
        """"""
        :type timePoints: List[str]
        :rtype: int
        """"""";"";"2020-03-25 15:17:56"
946;76;"C#";"public class Solution {
    public bool ValidateBinaryTreeNodes(int n, int[]
 leftChild, int[] rightChild) {
 
    }
}";"";"2020-03-25 15:17:56"
947;76;"Java";"class Solution {
    public boolean validateBinaryTreeNodes(int n, 
int[] leftChild, int[] rightChild) {
 
    }
}";"";"2020-03-25 15:17:56"
948;76;"Rust";"impl Solution {
    pub fn validate_binary_tree_nodes(n: i32, 
left_child: Vec<i32>, right_child: Vec<i32>) -> 
bool {
        
    }
}";"";"2020-03-25 15:17:56"
949;76;"C";"bool validateBinaryTreeNodes(int n, int* leftChild, 
int leftChildSize, int* rightChild, int 
rightChildSize){
 
}";"";"2020-03-25 15:17:56"
950;76;"Scala";"object Solution {
    def validateBinaryTreeNodes(n: Int, leftChild: 
Array[Int], rightChild: Array[Int]): Boolean = {
 
    }
}";"";"2020-03-25 15:17:56"
951;76;"Go";"func validateBinaryTreeNodes(n int, leftChild []int,
 rightChild []int) bool {
 
}";"";"2020-03-25 15:17:56"
952;76;"Kotlin";"class Solution {
    fun validateBinaryTreeNodes(n: Int, leftChild: 
IntArray, rightChild: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:17:56"
953;76;"Python3";"class Solution:
    def validateBinaryTreeNodes(self, n: int, 
leftChild: List[int], rightChild: List[int]) -> 
bool:";"";"2020-03-25 15:17:56"
954;76;"JavaScript";"/**
 * @param {number} n
 * @param {number[]} leftChild
 * @param {number[]} rightChild
 * @return {boolean}
 */
var validateBinaryTreeNodes = function(n, leftChild,
 rightChild) {
 
};";"";"2020-03-25 15:17:56"
955;76;"PHP";"class Solution {";"";"2020-03-25 15:17:56"
956;76;"Swift";"class Solution {
    func validateBinaryTreeNodes(_ n: Int, _ 
leftChild: [Int], _ rightChild: [Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:17:56"
957;76;"Ruby";"# @param {Integer} n
# @param {Integer[]} left_child
# @param {Integer[]} right_child
# @return {Boolean}
def validate_binary_tree_nodes(n, left_child, 
right_child)
 
end";"";"2020-03-25 15:17:56"
958;76;"Python";"class Solution(object):
    def validateBinaryTreeNodes(self, n, leftChild, 
rightChild):
        """"""
        :type n: int
        :type leftChild: List[int]
        :type rightChild: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:17:56"
959;77;"C#";"public class TopVotedCandidate {
 
    public TopVotedCandidate(int[] persons, int[] 
times) {
 
    }
    
    public int Q(int t) {
 
    }
}
 
/**
 * Your TopVotedCandidate object will be 
instantiated and called as such:
 * TopVotedCandidate obj = new TopVotedCandidate
(persons, times);
 * int param_1 = obj.Q(t);
 */";"";"2020-03-25 15:17:56"
960;77;"Java";"class TopVotedCandidate {
 
    public TopVotedCandidate(int[] persons, int[] 
times) {
 
    }
    
    public int q(int t) {
 
    }
}
 
/**
 * Your TopVotedCandidate object will be 
instantiated and called as such:
 * TopVotedCandidate obj = new TopVotedCandidate
(persons, times);
 * int param_1 = obj.q(t);
 */";"";"2020-03-25 15:17:56"
961;77;"C";"typedef struct {
    
} TopVotedCandidate;
 
 
TopVotedCandidate* topVotedCandidateCreate(int* 
persons, int personsSize, int* times, int timesSize)
 {
    
}
 
int topVotedCandidateQ(TopVotedCandidate* obj, int 
t) {
  
}
 
void topVotedCandidateFree(TopVotedCandidate* obj) {
    
}
 
/**
 * Your TopVotedCandidate struct will be 
instantiated and called as such:
 * TopVotedCandidate* obj = topVotedCandidateCreate
(persons, personsSize, times, timesSize);
 * int param_1 = topVotedCandidateQ(obj, t);";"";"2020-03-25 15:17:56"
962;77;"Rust";"struct TopVotedCandidate {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl TopVotedCandidate {
 
    fn new(persons: Vec<i32>, times: Vec<i32>) -> 
Self {
        
    }
    
    fn q(&self, t: i32) -> i32 {
        
    }
}
 
/**
 * Your TopVotedCandidate object will be 
instantiated and called as such:";"";"2020-03-25 15:17:56"
963;77;"Scala";"class TopVotedCandidate(_persons: Array[Int], 
_times: Array[Int]) {
 
    def q(t: Int): Int = {
 
    }
 
}
 
/**
 * Your TopVotedCandidate object will be 
instantiated and called as such:
 * var obj = new TopVotedCandidate(persons, times)
 * var param_1 = obj.q(t)
 */";"";"2020-03-25 15:17:56"
964;77;"Go";"type TopVotedCandidate struct {
 
}
 
 
func Constructor(persons []int, times []int) 
TopVotedCandidate {
 
}
 
 
func (this *TopVotedCandidate) Q(t int) int {
 
}
 
 
/**
 * Your TopVotedCandidate object will be 
instantiated and called as such:
 * obj := Constructor(persons, times);
 * param_1 := obj.Q(t);
 */";"";"2020-03-25 15:17:56"
965;77;"Kotlin";"class TopVotedCandidate(persons: IntArray, times: 
IntArray) {
 
    fun q(t: Int): Int {
 
    }
 
}
 
/**
 * Your TopVotedCandidate object will be 
instantiated and called as such:
 * var obj = TopVotedCandidate(persons, times)
 * var param_1 = obj.q(t)
 */";"";"2020-03-25 15:17:56"
966;77;"Python3";"class TopVotedCandidate:
 
    def __init__(self, persons: List[int], times: 
List[int]):
        
 
    def q(self, t: int) -> int:
        
 
 
# Your TopVotedCandidate object will be 
instantiated and called as such:
# obj = TopVotedCandidate(persons, times)
# param_1 = obj.q(t)";"";"2020-03-25 15:17:56"
967;77;"JavaScript";"/**
 * @param {number[]} persons
 * @param {number[]} times
 */
var TopVotedCandidate = function(persons, times) {
 
};
 
/** 
 * @param {number} t
 * @return {number}
 */
TopVotedCandidate.prototype.q = function(t) {
 
};
 
/**
 * Your TopVotedCandidate object will be 
instantiated and called as such:
 * var obj = new TopVotedCandidate(persons, times)
 * var param_1 = obj.q(t)
 */";"";"2020-03-25 15:17:56"
968;77;"PHP";"class TopVotedCandidate {
    /**
     * @param Integer[] $persons
     * @param Integer[] $times
     */
    function __construct($persons, $times) {
        
    }
  
    /**
     * @param Integer $t
     * @return Integer
     */
    function q($t) {
        
    }
}
 
/**
 * Your TopVotedCandidate object will be 
instantiated and called as such:
 * $obj = TopVotedCandidate($persons, $times);
 * $ret_1 = $obj->q($t);
 */";"";"2020-03-25 15:17:56"
969;77;"Swift";"class TopVotedCandidate {
 
    init(_ persons: [Int], _ times: [Int]) {
        
    }
    
    func q(_ t: Int) -> Int {
        
    }
}
 
/**
 * Your TopVotedCandidate object will be 
instantiated and called as such:
 * let obj = TopVotedCandidate(persons, times)
 * let ret_1: Int = obj.q(t)
 */";"";"2020-03-25 15:17:56"
970;77;"Ruby";"class TopVotedCandidate";"";"2020-03-25 15:17:56"
971;77;"Python";"class TopVotedCandidate(object):
 
    def __init__(self, persons, times):
        """"""
        :type persons: List[int]
        :type times: List[int]
        """"""
        
 
    def q(self, t):
        """"""
        :type t: int
        :rtype: int
        """"""
        
 
 
# Your TopVotedCandidate object will be 
instantiated and called as such:
# obj = TopVotedCandidate(persons, times)
# param_1 = obj.q(t)";"";"2020-03-25 15:17:56"
972;78;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int SumNumbers(TreeNode root) {
 
    }
}";"";"2020-03-25 15:17:57"
973;78;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int sumNumbers(TreeNode root) {
 
    }
}";"";"2020-03-25 15:17:57"
974;78;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn sum_numbers(root: 
Option<Rc<RefCell<TreeNode>>>) -> i32 {
 
    }
}";"";"2020-03-25 15:17:57"
975;78;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int sumNumbers(struct TreeNode* root){
 
}";"";"2020-03-25 15:17:57"
976;78;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def sumNumbers(root: TreeNode): Int = {
 
    }
}";"";"2020-03-25 15:17:57"
977;78;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func sumNumbers(root *TreeNode) int {
 
}";"";"2020-03-25 15:17:57"
978;78;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun sumNumbers(root: TreeNode?): Int {
 
    }
}";"";"2020-03-25 15:17:57"
979;78;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def sumNumbers(self, root: TreeNode) -> int:";"";"2020-03-25 15:17:57"
980;78;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var sumNumbers = function(root) {
 
};";"";"2020-03-25 15:17:57"
981;78;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer
     */
    function sumNumbers($root) {
 
    }
}";"";"2020-03-25 15:17:57"
982;78;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func sumNumbers(_ root: TreeNode?) -> Int {
 
    }
}";"";"2020-03-25 15:17:57"
983;78;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer}
def sum_numbers(root)
 
end";"";"2020-03-25 15:17:57"
984;78;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def sumNumbers(self, root):
        """"""
        :type root: TreeNode
        :rtype: int
        """"""";"";"2020-03-25 15:17:57"
985;79;"C#";"public class Solution {
    public int TrailingZeroes(int n) {
 
    }
}";"";"2020-03-25 15:17:57"
986;79;"Java";"class Solution {
    public int trailingZeroes(int n) {
 
    }
}";"";"2020-03-25 15:17:57"
987;79;"Rust";"impl Solution {
    pub fn trailing_zeroes(n: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:17:57"
988;79;"C";"int trailingZeroes(int n){
 
}";"";"2020-03-25 15:17:57"
989;79;"Scala";"object Solution {
    def trailingZeroes(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:17:57"
990;79;"Go";"func trailingZeroes(n int) int {
 
}";"";"2020-03-25 15:17:57"
991;79;"Kotlin";"class Solution {
    fun trailingZeroes(n: Int): Int {
 
    }
}";"";"2020-03-25 15:17:57"
992;79;"Python3";"class Solution:
    def trailingZeroes(self, n: int) -> int:";"";"2020-03-25 15:17:57"
993;79;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var trailingZeroes = function(n) {
 
};";"";"2020-03-25 15:17:57"
994;79;"PHP";"class Solution {";"";"2020-03-25 15:17:57"
995;79;"Swift";"class Solution {
    func trailingZeroes(_ n: Int) -> Int {
 
    }
}";"";"2020-03-25 15:17:57"
996;79;"Ruby";"# @param {Integer} n
# @return {Integer}
def trailing_zeroes(n)
 
end";"";"2020-03-25 15:17:57"
997;79;"Python";"class Solution(object):
    def trailingZeroes(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:17:57"
998;80;"C#";"public class Solution {
    public int LongestStrChain(string[] words) {
 
    }
}";"";"2020-03-25 15:17:57"
999;80;"Java";"class Solution {
    public int longestStrChain(String[] words) {
 
    }
}";"";"2020-03-25 15:17:57"
1000;80;"Rust";"impl Solution {
    pub fn longest_str_chain(words: Vec<String>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:17:57"
1001;80;"C";"int longestStrChain(char ** words, int wordsSize){
 
}";"";"2020-03-25 15:17:57"
1002;80;"Scala";"object Solution {
    def longestStrChain(words: Array[String]): Int 
= {
 
    }
}";"";"2020-03-25 15:17:57"
1003;80;"Go";"func longestStrChain(words []string) int {
 
}";"";"2020-03-25 15:17:57"
1004;80;"Kotlin";"class Solution {
    fun longestStrChain(words: Array<String>): Int {
 
    }
}";"";"2020-03-25 15:17:57"
1005;80;"Python3";"class Solution:
    def longestStrChain(self, words: List[str]) -> 
int:";"";"2020-03-25 15:17:57"
1006;80;"JavaScript";"/**
 * @param {string[]} words
 * @return {number}
 */
var longestStrChain = function(words) {
 
};";"";"2020-03-25 15:17:57"
1007;80;"PHP";"class Solution {";"";"2020-03-25 15:17:57"
1008;80;"Swift";"class Solution {
    func longestStrChain(_ words: [String]) -> Int {
        
    }
}";"";"2020-03-25 15:17:57"
1009;80;"Ruby";"# @param {String[]} words
# @return {Integer}
def longest_str_chain(words)
 
end";"";"2020-03-25 15:17:57"
1010;80;"Python";"class Solution(object):
    def longestStrChain(self, words):
        """"""
        :type words: List[str]
        :rtype: int
        """"""";"";"2020-03-25 15:17:57"
1011;81;"C#";"public class Solution {
    public IList<string> RestoreIpAddresses(string 
s) {
 
    }
}";"";"2020-03-25 15:17:57"
1012;81;"Java";"class Solution {
    public List<String> restoreIpAddresses(String s)
 {
 
    }
}";"";"2020-03-25 15:17:57"
1013;81;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** restoreIpAddresses(char * s, int* 
returnSize){
 
}";"";"2020-03-25 15:17:57"
1014;81;"Rust";"impl Solution {
    pub fn restore_ip_addresses(s: String) -> 
Vec<String> {
        
    }
}";"";"2020-03-25 15:17:57"
1015;81;"Scala";"object Solution {
    def restoreIpAddresses(s: String): List[String] 
= {
 
    }
}";"";"2020-03-25 15:17:57"
1016;81;"Go";"func restoreIpAddresses(s string) []string {
 
}";"";"2020-03-25 15:17:57"
1017;81;"Kotlin";"class Solution {
    fun restoreIpAddresses(s: String): List<String> 
{
 
    }
}";"";"2020-03-25 15:17:57"
1018;81;"Python3";"class Solution:
    def restoreIpAddresses(self, s: str) -> List
[str]:";"";"2020-03-25 15:17:57"
1019;81;"JavaScript";"/**
 * @param {string} s
 * @return {string[]}
 */
var restoreIpAddresses = function(s) {
 
};";"";"2020-03-25 15:17:57"
1020;81;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return String[]
     */
    function restoreIpAddresses($s) {
        
    }
}";"";"2020-03-25 15:17:57"
1021;81;"Swift";"class Solution {
    func restoreIpAddresses(_ s: String) -> [String]
 {
        
    }
}";"";"2020-03-25 15:17:57"
1022;81;"Ruby";"# @param {String} s";"";"2020-03-25 15:17:57"
1023;81;"Python";"class Solution(object):
    def restoreIpAddresses(self, s):
        """"""
        :type s: str
        :rtype: List[str]
        """"""";"";"2020-03-25 15:17:57"
1024;82;"C#";"public class Solution {
    public bool IsSelfCrossing(int[] x) {
 
    }
}";"";"2020-03-25 15:17:57"
1025;82;"Java";"class Solution {
    public boolean isSelfCrossing(int[] x) {
 
    }
}";"";"2020-03-25 15:17:57"
1026;82;"C";"bool isSelfCrossing(int* x, int xSize){
 
}";"";"2020-03-25 15:17:57"
1027;82;"Rust";"impl Solution {
    pub fn is_self_crossing(x: Vec<i32>) -> bool {
        
    }
}";"";"2020-03-25 15:17:57"
1028;82;"Scala";"object Solution {
    def isSelfCrossing(x: Array[Int]): Boolean = {
 
    }
}";"";"2020-03-25 15:17:57"
1029;82;"Go";"func isSelfCrossing(x []int) bool {
 
}";"";"2020-03-25 15:17:57"
1030;82;"Kotlin";"class Solution {
    fun isSelfCrossing(x: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:17:57"
1031;82;"Python3";"class Solution:
    def isSelfCrossing(self, x: List[int]) -> bool:";"";"2020-03-25 15:17:57"
1032;82;"JavaScript";"/**
 * @param {number[]} x
 * @return {boolean}
 */
var isSelfCrossing = function(x) {
 
};";"";"2020-03-25 15:17:57"
1033;82;"PHP";"class Solution {
 
    /**
     * @param Integer[] $x
     * @return Boolean
     */
    function isSelfCrossing($x) {
        
    }
}";"";"2020-03-25 15:17:57"
1034;82;"Swift";"class Solution {
    func isSelfCrossing(_ x: [Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:17:57"
1035;82;"Ruby";"# @param {Integer[]} x";"";"2020-03-25 15:17:57"
1036;82;"Python";"class Solution(object):
    def isSelfCrossing(self, x):
        """"""
        :type x: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:17:57"
1037;83;"C#";"public class Solution {
    public int MaxCandies(int[] status, int[] 
candies, int[][] keys, int[][] containedBoxes, int[]
 initialBoxes) {
 
    }
}";"";"2020-03-25 15:17:57"
1038;83;"Java";"class Solution {
    public int maxCandies(int[] status, int[] 
candies, int[][] keys, int[][] containedBoxes, int[]
 initialBoxes) {
 
    }
}";"";"2020-03-25 15:17:57"
1039;83;"C";"int maxCandies(int* status, int statusSize, int* 
candies, int candiesSize, int** keys, int keysSize, 
int* keysColSize, int** containedBoxes, int 
containedBoxesSize, int* containedBoxesColSize, 
int* initialBoxes, int initialBoxesSize){
 
}";"";"2020-03-25 15:17:57"
1040;83;"Rust";"impl Solution {
    pub fn max_candies(status: Vec<i32>, candies: 
Vec<i32>, keys: Vec<Vec<i32>>, contained_boxes: 
Vec<Vec<i32>>, initial_boxes: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:17:57"
1041;83;"Scala";"object Solution {
    def maxCandies(status: Array[Int], candies: 
Array[Int], keys: Array[Array[Int]], 
containedBoxes: Array[Array[Int]], initialBoxes: 
Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:17:57"
1042;83;"Go";"func maxCandies(status []int, candies []int, keys []
[]int, containedBoxes [][]int, initialBoxes []int) 
int {
 
}";"";"2020-03-25 15:17:57"
1043;83;"Kotlin";"class Solution {
    fun maxCandies(status: IntArray, candies: 
IntArray, keys: Array<IntArray>, containedBoxes: 
Array<IntArray>, initialBoxes: IntArray): Int {
 
    }
}";"";"2020-03-25 15:17:57"
1044;83;"Python3";"class Solution:
    def maxCandies(self, status: List[int], 
candies: List[int], keys: List[List[int]], 
containedBoxes: List[List[int]], initialBoxes: List
[int]) -> int:";"";"2020-03-25 15:17:57"
1045;83;"JavaScript";"/**
 * @param {number[]} status
 * @param {number[]} candies
 * @param {number[][]} keys
 * @param {number[][]} containedBoxes
 * @param {number[]} initialBoxes
 * @return {number}
 */
var maxCandies = function(status, candies, keys, 
containedBoxes, initialBoxes) {
 
};";"";"2020-03-25 15:17:57"
1046;83;"PHP";"class Solution {
 
    /**
     * @param Integer[] $status
     * @param Integer[] $candies
     * @param Integer[][] $keys
     * @param Integer[][] $containedBoxes
     * @param Integer[] $initialBoxes
     * @return Integer
     */
    function maxCandies($status, $candies, $keys, 
$containedBoxes, $initialBoxes) {
 
    }
}";"";"2020-03-25 15:17:57"
1047;83;"Swift";"class Solution {
    func maxCandies(_ status: [Int], _ candies: 
[Int], _ keys: [[Int]], _ containedBoxes: [[Int]], 
_ initialBoxes: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:17:57"
1048;83;"Ruby";"# @param {Integer[]} status";"";"2020-03-25 15:17:57"
1049;83;"Python";"class Solution(object):
    def maxCandies(self, status, candies, keys, 
containedBoxes, initialBoxes):
        """"""
        :type status: List[int]
        :type candies: List[int]
        :type keys: List[List[int]]
        :type containedBoxes: List[List[int]]
        :type initialBoxes: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:17:57"
1050;84;"C#";"public class Solution {
    public bool WordPattern(string pattern, string 
str) {
 
    }
}";"";"2020-03-25 15:17:57"
1051;84;"Java";"class Solution {
    public boolean wordPattern(String pattern, 
String str) {
 
    }
}";"";"2020-03-25 15:17:57"
1052;84;"C";"bool wordPattern(char * pattern, char * str){
 
}";"";"2020-03-25 15:17:57"
1053;84;"Rust";"impl Solution {
    pub fn word_pattern(pattern: String, str: 
String) -> bool {
        
    }
}";"";"2020-03-25 15:17:57"
1054;84;"Scala";"object Solution {
    def wordPattern(pattern: String, str: String): 
Boolean = {
 
    }
}";"";"2020-03-25 15:17:57"
1055;84;"Go";"func wordPattern(pattern string, str string) bool {
 
}";"";"2020-03-25 15:17:57"
1056;84;"Kotlin";"class Solution {
    fun wordPattern(pattern: String, str: String): 
Boolean {
 
    }
}";"";"2020-03-25 15:17:57"
1057;84;"Python3";"class Solution:
    def wordPattern(self, pattern: str, str: str) 
-> bool:";"";"2020-03-25 15:17:57"
1058;84;"JavaScript";"/**
 * @param {string} pattern
 * @param {string} str
 * @return {boolean}
 */
var wordPattern = function(pattern, str) {
 
};";"";"2020-03-25 15:17:57"
1059;84;"PHP";"class Solution {
 
    /**
     * @param String $pattern
     * @param String $str
     * @return Boolean
     */
    function wordPattern($pattern, $str) {
        
    }
}";"";"2020-03-25 15:17:57"
1060;84;"Swift";"class Solution {
    func wordPattern(_ pattern: String, _ str: 
String) -> Bool {
        
    }
}";"";"2020-03-25 15:17:57"
1061;84;"Ruby";"# @param {String} pattern
# @param {String} str
# @return {Boolean}
def word_pattern(pattern, str)
 
end";"";"2020-03-25 15:17:57"
1062;84;"Python";"class Solution(object):
    def wordPattern(self, pattern, str):
        """"""
        :type pattern: str
        :type str: str
        :rtype: bool
        """"""";"";"2020-03-25 15:17:57"
1063;85;"C#";"public class Solution {
    public IList<int> PancakeSort(int[] A) {
 
    }
}";"";"2020-03-25 15:17:57"
1064;85;"Java";"class Solution {
    public List<Integer> pancakeSort(int[] A) {
 
    }
}";"";"2020-03-25 15:17:57"
1065;85;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* pancakeSort(int* A, int ASize, int* returnSize)
{
 
}";"";"2020-03-25 15:17:57"
1066;85;"Rust";"impl Solution {
    pub fn pancake_sort(a: Vec<i32>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:17:57"
1067;85;"Scala";"object Solution {
    def pancakeSort(A: Array[Int]): List[Int] = {
 
    }
}";"";"2020-03-25 15:17:57"
1068;85;"Go";"func pancakeSort(A []int) []int {
 
}";"";"2020-03-25 15:17:57"
1069;85;"Kotlin";"class Solution {
    fun pancakeSort(A: IntArray): List<Int> {
 
    }
}";"";"2020-03-25 15:17:57"
1070;85;"Python3";"class Solution:
    def pancakeSort(self, A: List[int]) -> List[int]
:";"";"2020-03-25 15:17:57"
1071;85;"JavaScript";"/**
 * @param {number[]} A
 * @return {number[]}
 */
var pancakeSort = function(A) {
 
};";"";"2020-03-25 15:17:57"
1072;85;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @return Integer[]
     */
    function pancakeSort($A) {
        
    }
}";"";"2020-03-25 15:17:57"
1073;85;"Swift";"class Solution {
    func pancakeSort(_ A: [Int]) -> [Int] {
        
    }
}";"";"2020-03-25 15:17:57"
1074;85;"Ruby";"# @param {Integer[]} a
# @return {Integer[]}
def pancake_sort(a)
 
end";"";"2020-03-25 15:17:57"
1075;85;"Python";"class Solution(object):
    def pancakeSort(self, A):
        """"""
        :type A: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:17:57"
1076;86;"C#";"public class NumArray {
 
    public NumArray(int[] nums) {
 
    }
    
    public int SumRange(int i, int j) {
 
    }
}
 
/**
 * Your NumArray object will be instantiated and 
called as such:
 * NumArray obj = new NumArray(nums);
 * int param_1 = obj.SumRange(i,j);
 */";"";"2020-03-25 15:17:57"
1077;86;"Java";"class NumArray {
 
    public NumArray(int[] nums) {
 
    }
    
    public int sumRange(int i, int j) {
 
    }
}
 
/**
 * Your NumArray object will be instantiated and 
called as such:
 * NumArray obj = new NumArray(nums);
 * int param_1 = obj.sumRange(i,j);
 */";"";"2020-03-25 15:17:57"
1078;86;"Rust";"struct NumArray {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl NumArray {
 
    fn new(nums: Vec<i32>) -> Self {
        
    }
    
    fn sum_range(&self, i: i32, j: i32) -> i32 {
        
    }
}
 
/**
 * Your NumArray object will be instantiated and 
called as such:
 * let obj = NumArray::new(nums);";"";"2020-03-25 15:17:57"
1079;86;"C";"typedef struct {
    
} NumArray;
 
 
NumArray* numArrayCreate(int* nums, int numsSize) {
    
}
 
int numArraySumRange(NumArray* obj, int i, int j) {
  
}
 
void numArrayFree(NumArray* obj) {
    
}
 
/**
 * Your NumArray struct will be instantiated and 
called as such:
 * NumArray* obj = numArrayCreate(nums, numsSize);
 * int param_1 = numArraySumRange(obj, i, j);
 
 * numArrayFree(obj);
*/";"";"2020-03-25 15:17:57"
1080;86;"Scala";"class NumArray(_nums: Array[Int]) {
 
    def sumRange(i: Int, j: Int): Int = {
 
    }
 
}
 
/**
 * Your NumArray object will be instantiated and 
called as such:
 * var obj = new NumArray(nums)
 * var param_1 = obj.sumRange(i,j)
 */";"";"2020-03-25 15:17:57"
1081;86;"Go";"type NumArray struct {
 
}
 
 
func Constructor(nums []int) NumArray {
 
}
 
 
func (this *NumArray) SumRange(i int, j int) int {
 
}
 
 
/**
 * Your NumArray object will be instantiated and 
called as such:
 * obj := Constructor(nums);
 * param_1 := obj.SumRange(i,j);
 */";"";"2020-03-25 15:17:57"
1082;86;"Kotlin";"class NumArray(nums: IntArray) {
 
    fun sumRange(i: Int, j: Int): Int {
 
    }
 
}
 
/**
 * Your NumArray object will be instantiated and 
called as such:
 * var obj = NumArray(nums)
 * var param_1 = obj.sumRange(i,j)
 */";"";"2020-03-25 15:17:57"
1083;86;"Python3";"class NumArray:
 
    def __init__(self, nums: List[int]):
        
 
    def sumRange(self, i: int, j: int) -> int:
        
 
 
# Your NumArray object will be instantiated and 
called as such:
# obj = NumArray(nums)
# param_1 = obj.sumRange(i,j)";"";"2020-03-25 15:17:57"
1084;86;"JavaScript";"/**
 * @param {number[]} nums
 */
var NumArray = function(nums) {
 
};
 
/** 
 * @param {number} i 
 * @param {number} j
 * @return {number}
 */
NumArray.prototype.sumRange = function(i, j) {
 
};
 
/**
 * Your NumArray object will be instantiated and 
called as such:
 * var obj = new NumArray(nums)
 * var param_1 = obj.sumRange(i,j)
 */";"";"2020-03-25 15:17:57"
1085;86;"PHP";"class NumArray {
    /**
     * @param Integer[] $nums
     */
    function __construct($nums) {
        
    }
  
    /**
     * @param Integer $i
     * @param Integer $j
     * @return Integer
     */
    function sumRange($i, $j) {
        
    }
}
 
/**
 * Your NumArray object will be instantiated and 
called as such:
 * $obj = NumArray($nums);
 * $ret_1 = $obj->sumRange($i, $j);
 */";"";"2020-03-25 15:17:57"
1086;86;"Swift";"class NumArray {
 
    init(_ nums: [Int]) {
        
    }
    
    func sumRange(_ i: Int, _ j: Int) -> Int {
        
    }
}
 
/**
 * Your NumArray object will be instantiated and 
called as such:
 * let obj = NumArray(nums)
 * let ret_1: Int = obj.sumRange(i, j)
 */";"";"2020-03-25 15:17:57"
1087;86;"Ruby";"class NumArray
 
=begin
    :type nums: Integer[]
=end
    def initialize(nums)
 
    end
 
 
=begin
    :type i: Integer
    :type j: Integer
    :rtype: Integer
=end
    def sum_range(i, j)
 
    end
 
 
end
 
# Your NumArray object will be instantiated and 
called as such:
# obj = NumArray.new(nums)
# param_1 = obj.sum_range(i, j)";"";"2020-03-25 15:17:57"
1088;86;"Python";"class NumArray(object):
 
    def __init__(self, nums):
        """"""
        :type nums: List[int]
        """"""
        
 
    def sumRange(self, i, j):
        """"""
        :type i: int
        :type j: int
        :rtype: int
        """"""
        
 
 
# Your NumArray object will be instantiated and 
called as such:
# obj = NumArray(nums)
# param_1 = obj.sumRange(i,j)";"";"2020-03-25 15:17:57"
1089;87;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<IList<int>> LevelOrder(TreeNode 
root) {
 
    }
}";"";"2020-03-25 15:17:57"
1090;87;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode 
root) {
 
    }
}";"";"2020-03-25 15:17:57"
1091;87;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn level_order(root: 
Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<i32>> {
 
    }
}";"";"2020-03-25 15:17:57"
1092;87;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** levelOrder(struct TreeNode* root, int* 
returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:17:57"
1093;87;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def levelOrder(root: TreeNode): List[List[Int]] 
= {
 
    }
}";"";"2020-03-25 15:17:57"
1094;87;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func levelOrder(root *TreeNode) [][]int {
 
}";"";"2020-03-25 15:17:57"
1095;87;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun levelOrder(root: TreeNode?): 
List<List<Int>> {
 
    }
}";"";"2020-03-25 15:17:57"
1096;87;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def levelOrder(self, root: TreeNode) -> List
[List[int]]:";"";"2020-03-25 15:17:57"
1097;87;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[][]}
 */
var levelOrder = function(root) {
 
};";"";"2020-03-25 15:17:57"
1098;87;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer[][]
     */
    function levelOrder($root) {
 
    }
}";"";"2020-03-25 15:17:57"
1099;87;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func levelOrder(_ root: TreeNode?) -> [[Int]] {
 
    }
}";"";"2020-03-25 15:17:57"
1100;87;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer[][]}
def level_order(root)
 
end";"";"2020-03-25 15:17:57"
1101;87;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def levelOrder(self, root):
        """"""
        :type root: TreeNode
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:17:57"
1102;88;"C#";"public class Solution {
    public int SubarraysWithKDistinct(int[] A, int 
K) {
 
    }
}";"";"2020-03-25 15:17:57"
1103;88;"Java";"class Solution {
    public int subarraysWithKDistinct(int[] A, int 
K) {
 
    }
}";"";"2020-03-25 15:17:57"
1104;88;"C";"int subarraysWithKDistinct(int* A, int ASize, int K)
{
 
}";"";"2020-03-25 15:17:57"
1105;88;"Rust";"impl Solution {
    pub fn subarrays_with_k_distinct(a: Vec<i32>, 
k: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:17:57"
1106;88;"Scala";"object Solution {
    def subarraysWithKDistinct(A: Array[Int], K: 
Int): Int = {
 
    }
}";"";"2020-03-25 15:17:57"
1107;88;"Go";"func subarraysWithKDistinct(A []int, K int) int {
 
}";"";"2020-03-25 15:17:57"
1108;88;"Kotlin";"class Solution {
    fun subarraysWithKDistinct(A: IntArray, K: Int)
: Int {
 
    }
}";"";"2020-03-25 15:17:57"
1109;88;"Python3";"class Solution:
    def subarraysWithKDistinct(self, A: List[int], 
K: int) -> int:";"";"2020-03-25 15:17:57"
1110;88;"JavaScript";"/**
 * @param {number[]} A
 * @param {number} K
 * @return {number}
 */
var subarraysWithKDistinct = function(A, K) {
 
};";"";"2020-03-25 15:17:57"
1111;88;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @param Integer $K
     * @return Integer
     */
    function subarraysWithKDistinct($A, $K) {
        
    }
}";"";"2020-03-25 15:17:57"
1112;88;"Swift";"class Solution {
    func subarraysWithKDistinct(_ A: [Int], _ K: 
Int) -> Int {
        
    }
}";"";"2020-03-25 15:17:57"
1113;88;"Ruby";"# @param {Integer[]} a
# @param {Integer} k
# @return {Integer}
def subarrays_with_k_distinct(a, k)
 
end";"";"2020-03-25 15:17:57"
1114;88;"Python";"class Solution(object):
    def subarraysWithKDistinct(self, A, K):
        """"""
        :type A: List[int]
        :type K: int
        :rtype: int
        """"""";"";"2020-03-25 15:17:57"
1115;89;"C#";"public class Solution {
    public int RemoveDuplicates(int[] nums) {
 
    }
}";"";"2020-03-25 15:17:57"
1116;89;"Java";"class Solution {
    public int removeDuplicates(int[] nums) {
 
    }
}";"";"2020-03-25 15:17:57"
1117;89;"Rust";"impl Solution {
    pub fn remove_duplicates(nums: &mut Vec<i32>) 
-> i32 {
        
    }
}";"";"2020-03-25 15:17:57"
1118;89;"C";"int removeDuplicates(int* nums, int numsSize){
 
}";"";"2020-03-25 15:17:57"
1119;89;"Scala";"object Solution {
    def removeDuplicates(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:17:57"
1120;89;"Go";"func removeDuplicates(nums []int) int {
 
}";"";"2020-03-25 15:17:57"
1121;89;"Kotlin";"class Solution {
    fun removeDuplicates(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:17:57"
1122;89;"Python3";"class Solution:
    def removeDuplicates(self, nums: List[int]) -> 
int:";"";"2020-03-25 15:17:57"
1123;89;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var removeDuplicates = function(nums) {
 
};";"";"2020-03-25 15:17:57"
1124;89;"PHP";"class Solution {";"";"2020-03-25 15:17:57"
1125;89;"Swift";"class Solution {
    func removeDuplicates(_ nums: inout [Int]) -> 
Int {
        
    }
}";"";"2020-03-25 15:17:57"
1126;89;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def remove_duplicates(nums)
 
end";"";"2020-03-25 15:17:57"
1127;89;"Python";"class Solution(object):
    def removeDuplicates(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:17:57"
1128;90;"C#";"public class Solution {
    public int[] FindRedundantDirectedConnection(int
[][] edges) {
 
    }
}";"";"2020-03-25 15:17:57"
1129;90;"Java";"class Solution {
    public int[] findRedundantDirectedConnection(int
[][] edges) {
 
    }
}";"";"2020-03-25 15:17:57"
1130;90;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* findRedundantDirectedConnection(int** edges, 
int edgesSize, int* edgesColSize, int* returnSize){
 
}";"";"2020-03-25 15:17:57"
1131;90;"Rust";"impl Solution {
    pub fn find_redundant_directed_connection
(edges: Vec<Vec<i32>>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:17:57"
1132;90;"Scala";"object Solution {
    def findRedundantDirectedConnection(edges: Array
[Array[Int]]): Array[Int] = {
 
    }
}";"";"2020-03-25 15:17:57"
1133;90;"Go";"func findRedundantDirectedConnection(edges [][]int) 
[]int {
 
}";"";"2020-03-25 15:17:57"
1134;90;"Kotlin";"class Solution {
    fun findRedundantDirectedConnection(edges: 
Array<IntArray>): IntArray {
 
    }
}";"";"2020-03-25 15:17:57"
1135;90;"Python3";"class Solution:
    def findRedundantDirectedConnection(self, 
edges: List[List[int]]) -> List[int]:";"";"2020-03-25 15:17:57"
1136;90;"JavaScript";"/**
 * @param {number[][]} edges
 * @return {number[]}
 */
var findRedundantDirectedConnection = function
(edges) {
 
};";"";"2020-03-25 15:17:57"
1137;90;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $edges
     * @return Integer[]
     */
    function findRedundantDirectedConnection($edges)
 {
        
    }
}";"";"2020-03-25 15:17:57"
1138;90;"Swift";"class Solution {
    func findRedundantDirectedConnection(_ edges: [
[Int]]) -> [Int] {
        
    }
}";"";"2020-03-25 15:17:57"
1139;90;"Ruby";"# @param {Integer[][]} edges
# @return {Integer[]}
def find_redundant_directed_connection(edges)
 
end";"";"2020-03-25 15:17:57"
1140;90;"Python";"class Solution(object):
    def findRedundantDirectedConnection(self, edges)
:
        """"""
        :type edges: List[List[int]]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:17:57"
1141;91;"C#";"public class Solution {
    public bool VerifyPostorder(int[] postorder) {
 
    }
}";"";"2020-03-25 15:17:57"
1142;91;"Java";"class Solution {
    public boolean verifyPostorder(int[] postorder) 
{
 
    }
}";"";"2020-03-25 15:17:57"
1143;91;"Rust";"impl Solution {
    pub fn verify_postorder(postorder: Vec<i32>) -> 
bool {
 
    }
}";"";"2020-03-25 15:17:57"
1144;91;"C";"bool verifyPostorder(int* postorder, int 
postorderSize){
 
}";"";"2020-03-25 15:17:57"
1145;91;"Scala";"object Solution {
    def verifyPostorder(postorder: Array[Int]): 
Boolean = {
 
    }
}";"";"2020-03-25 15:17:57"
1146;91;"Go";"func verifyPostorder(postorder []int) bool {
 
}";"";"2020-03-25 15:17:57"
1147;91;"Kotlin";"class Solution {
    fun verifyPostorder(postorder: IntArray): 
Boolean {
 
    }
}";"";"2020-03-25 15:17:57"
1148;91;"Python3";"class Solution:
    def verifyPostorder(self, postorder: List[int]) 
-> bool:";"";"2020-03-25 15:17:57"
1149;91;"JavaScript";"/**
 * @param {number[]} postorder
 * @return {boolean}
 */
var verifyPostorder = function(postorder) {
 
};";"";"2020-03-25 15:17:57"
1150;91;"PHP";"class Solution {
 
    /**
     * @param Integer[] $postorder
     * @return Boolean
     */
    function verifyPostorder($postorder) {
 
    }
}";"";"2020-03-25 15:17:57"
1151;91;"Swift";"class Solution {
    func verifyPostorder(_ postorder: [Int]) -> 
Bool {
 
    }
}";"";"2020-03-25 15:17:57"
1152;91;"Ruby";"# @param {Integer[]} postorder
# @return {Boolean}
def verify_postorder(postorder)
 
end";"";"2020-03-25 15:17:57"
1153;91;"Python";"class Solution(object):
    def verifyPostorder(self, postorder):
        """"""
        :type postorder: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:17:57"
1154;92;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public string Tree2str(TreeNode t) {
 
    }
}";"";"2020-03-25 15:17:57"
1155;92;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public String tree2str(TreeNode t) {
 
    }
}";"";"2020-03-25 15:17:57"
1156;92;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn tree2str(t: 
Option<Rc<RefCell<TreeNode>>>) -> String {
        
    }
}";"";"2020-03-25 15:17:57"
1157;92;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
char * tree2str(struct TreeNode* t){
 
}";"";"2020-03-25 15:17:57"
1158;92;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def tree2str(t: TreeNode): String = {
 
    }
}";"";"2020-03-25 15:17:57"
1159;92;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func tree2str(t *TreeNode) string {
 
}";"";"2020-03-25 15:17:57"
1160;92;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun tree2str(t: TreeNode?): String {
 
    }
}";"";"2020-03-25 15:17:57"
1161;92;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def tree2str(self, t: TreeNode) -> str:";"";"2020-03-25 15:17:57"
1162;92;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} t
 * @return {string}
 */
var tree2str = function(t) {
 
};";"";"2020-03-25 15:17:57"
1163;92;"PHP";"/**";"";"2020-03-25 15:17:57"
1164;92;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func tree2str(_ t: TreeNode?) -> String {
        
    }
}";"";"2020-03-25 15:17:57"
1165;92;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} t
# @return {String}
def tree2str(t)
 
end";"";"2020-03-25 15:17:57"
1166;92;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def tree2str(self, t):
        """"""
        :type t: TreeNode
        :rtype: str
        """"""";"";"2020-03-25 15:17:57"
1167;93;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public bool IsCompleteTree(TreeNode root) {
 
    }
}";"";"2020-03-25 15:17:57"
1168;93;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isCompleteTree(TreeNode root) {
 
    }
}";"";"2020-03-25 15:17:57"
1169;93;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn is_complete_tree(root: 
Option<Rc<RefCell<TreeNode>>>) -> bool {
        
    }
}";"";"2020-03-25 15:17:57"
1170;93;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
bool isCompleteTree(struct TreeNode* root){
 
}";"";"2020-03-25 15:17:57"
1171;93;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def isCompleteTree(root: TreeNode): Boolean = {
 
    }
}";"";"2020-03-25 15:17:57"
1172;93;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func isCompleteTree(root *TreeNode) bool {
 
}";"";"2020-03-25 15:17:57"
1173;93;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun isCompleteTree(root: TreeNode?): Boolean {
 
    }
}";"";"2020-03-25 15:17:57"
1174;93;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def isCompleteTree(self, root: TreeNode) -> 
bool:";"";"2020-03-25 15:17:57"
1175;93;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isCompleteTree = function(root) {
 
};";"";"2020-03-25 15:17:57"
1176;93;"PHP";"/**";"";"2020-03-25 15:17:57"
1177;93;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func isCompleteTree(_ root: TreeNode?) -> Bool {
        
    }
}";"";"2020-03-25 15:17:57"
1178;93;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Boolean}
def is_complete_tree(root)
 
end";"";"2020-03-25 15:17:57"
1179;93;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def isCompleteTree(self, root):
        """"""
        :type root: TreeNode
        :rtype: bool
        """"""";"";"2020-03-25 15:17:57"
1180;94;"C#";"public class Solution {
    public int MaxCoins(int[] nums) {
 
    }
}";"";"2020-03-25 15:17:58"
1181;94;"Java";"class Solution {
    public int maxCoins(int[] nums) {
 
    }
}";"";"2020-03-25 15:17:58"
1182;94;"Rust";"impl Solution {
    pub fn max_coins(nums: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:17:58"
1183;94;"C";"int maxCoins(int* nums, int numsSize){
 
}";"";"2020-03-25 15:17:58"
1184;94;"Scala";"object Solution {
    def maxCoins(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:17:58"
1185;94;"Go";"func maxCoins(nums []int) int {
 
}";"";"2020-03-25 15:17:58"
1186;94;"Kotlin";"class Solution {
    fun maxCoins(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:17:58"
1187;94;"Python3";"class Solution:
    def maxCoins(self, nums: List[int]) -> int:";"";"2020-03-25 15:17:58"
1188;94;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var maxCoins = function(nums) {
 
};";"";"2020-03-25 15:17:58"
1189;94;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function maxCoins($nums) {
        
    }
}";"";"2020-03-25 15:17:58"
1190;94;"Swift";"class Solution {
    func maxCoins(_ nums: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:17:58"
1191;94;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def max_coins(nums)
 
end";"";"2020-03-25 15:17:58"
1192;94;"Python";"class Solution(object):
    def maxCoins(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:17:58"
1193;95;"C#";"public class MaxQueue {
 
    public MaxQueue() {
 
    }
    
    public int Max_value() {
 
    }
    
    public void Push_back(int value) {
 
    }
    
    public int Pop_front() {
 
    }
}
 
/**
 * Your MaxQueue object will be instantiated and 
called as such:
 * MaxQueue obj = new MaxQueue();
 * int param_1 = obj.Max_value();
 * obj.Push_back(value);
 * int param_3 = obj.Pop_front();";"";"2020-03-25 15:17:58"
1194;95;"Java";"class MaxQueue {
 
    public MaxQueue() {
 
    }
    
    public int max_value() {
 
    }
    
    public void push_back(int value) {
 
    }
    
    public int pop_front() {
 
    }
}
 
/**
 * Your MaxQueue object will be instantiated and 
called as such:
 * MaxQueue obj = new MaxQueue();
 * int param_1 = obj.max_value();
 * obj.push_back(value);
 * int param_3 = obj.pop_front();";"";"2020-03-25 15:17:58"
1195;95;"C";"typedef struct {
 
} MaxQueue;
 
 
MaxQueue* maxQueueCreate() {
 
}
 
int maxQueueMax_value(MaxQueue* obj) {
 
}
 
void maxQueuePush_back(MaxQueue* obj, int value) {
 
}
 
int maxQueuePop_front(MaxQueue* obj) {
 
}
 
void maxQueueFree(MaxQueue* obj) {
 
}
 
/**";"";"2020-03-25 15:17:58"
1196;95;"Rust";"struct MaxQueue {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl MaxQueue {
 
    fn new() -> Self {
 
    }
    
    fn max_value(&self) -> i32 {
 
    }
    
    fn push_back(&self, value: i32) {
 
    }
    
    fn pop_front(&self) -> i32 {";"";"2020-03-25 15:17:58"
1197;95;"Scala";"class MaxQueue() {
 
    def max_value(): Int = {
 
    }
 
    def push_back(value: Int) {
 
    }
 
    def pop_front(): Int = {
 
    }
 
}
 
/**
 * Your MaxQueue object will be instantiated and 
called as such:
 * var obj = new MaxQueue()
 * var param_1 = obj.max_value()
 * obj.push_back(value)
 * var param_3 = obj.pop_front()
 */";"";"2020-03-25 15:17:58"
1198;95;"Go";"type MaxQueue struct {
 
}
 
 
func Constructor() MaxQueue {
 
}
 
 
func (this *MaxQueue) Max_value() int {
 
}
 
 
func (this *MaxQueue) Push_back(value int)  {
 
}
 
 
func (this *MaxQueue) Pop_front() int {
 
}
 
 
/**";"";"2020-03-25 15:17:58"
1199;95;"Kotlin";"class MaxQueue() {
 
    fun max_value(): Int {
 
    }
 
    fun push_back(value: Int) {
 
    }
 
    fun pop_front(): Int {
 
    }
 
}
 
/**
 * Your MaxQueue object will be instantiated and 
called as such:
 * var obj = MaxQueue()
 * var param_1 = obj.max_value()
 * obj.push_back(value)
 * var param_3 = obj.pop_front()
 */";"";"2020-03-25 15:17:58"
1200;95;"Python3";"class MaxQueue:
 
    def __init__(self):
 
 
    def max_value(self) -> int:
 
 
    def push_back(self, value: int) -> None:
 
 
    def pop_front(self) -> int:
 
 
 
# Your MaxQueue object will be instantiated and 
called as such:
# obj = MaxQueue()
# param_1 = obj.max_value()
# obj.push_back(value)
# param_3 = obj.pop_front()";"";"2020-03-25 15:17:58"
1201;95;"JavaScript";"var MaxQueue = function() {
 
};
 
/**
 * @return {number}
 */
MaxQueue.prototype.max_value = function() {
 
};
 
/** 
 * @param {number} value
 * @return {void}
 */
MaxQueue.prototype.push_back = function(value) {
 
};
 
/**
 * @return {number}
 */
MaxQueue.prototype.pop_front = function() {
 
};
 ";"";"2020-03-25 15:17:58"
1202;95;"PHP";"class MaxQueue {
    /**
     */
    function __construct() {
 
    }
 
    /**
     * @return Integer
     */
    function max_value() {
 
    }
 
    /**
     * @param Integer $value
     * @return NULL
     */
    function push_back($value) {
 
    }
 
    /**
     * @return Integer
     */
    function pop_front() {";"";"2020-03-25 15:17:58"
1203;95;"Swift";"class MaxQueue {
 
    init() {
 
    }
    
    func max_value() -> Int {
 
    }
    
    func push_back(_ value: Int) {
 
    }
    
    func pop_front() -> Int {
 
    }
}
 
/**
 * Your MaxQueue object will be instantiated and 
called as such:
 * let obj = MaxQueue()
 * let ret_1: Int = obj.max_value()
 * obj.push_back(value)
 * let ret_3: Int = obj.pop_front()";"";"2020-03-25 15:17:58"
1204;95;"Ruby";"class MaxQueue
    def initialize()
 
    end
 
 
=begin
    :rtype: Integer
=end
    def max_value()
 
    end
 
 
=begin
    :type value: Integer
    :rtype: Void
=end
    def push_back(value)
 
    end
 
 
=begin
    :rtype: Integer
=end";"";"2020-03-25 15:17:58"
1205;95;"Python";"class MaxQueue(object):
 
    def __init__(self):
 
 
    def max_value(self):
        """"""
        :rtype: int
        """"""
 
 
    def push_back(self, value):
        """"""
        :type value: int
        :rtype: None
        """"""
 
 
    def pop_front(self):
        """"""
        :rtype: int
        """"""
 
 
 
# Your MaxQueue object will be instantiated and ";"";"2020-03-25 15:17:58"
1206;96;"C#";"public class Solution {
    public int StrStr(string haystack, string 
needle) {
 
    }
}";"";"2020-03-25 15:17:58"
1207;96;"Java";"class Solution {
    public int strStr(String haystack, String 
needle) {
 
    }
}";"";"2020-03-25 15:17:58"
1208;96;"Rust";"impl Solution {
    pub fn str_str(haystack: String, needle: String)
 -> i32 {
        
    }
}";"";"2020-03-25 15:17:58"
1209;96;"C";"int strStr(char * haystack, char * needle){
 
}";"";"2020-03-25 15:17:58"
1210;96;"Scala";"object Solution {
    def strStr(haystack: String, needle: String): 
Int = {
 
    }
}";"";"2020-03-25 15:17:58"
1211;96;"Go";"func strStr(haystack string, needle string) int {
 
}";"";"2020-03-25 15:17:58"
1212;96;"Kotlin";"class Solution {
    fun strStr(haystack: String, needle: String): 
Int {
 
    }
}";"";"2020-03-25 15:17:58"
1213;96;"Python3";"class Solution:
    def strStr(self, haystack: str, needle: str) -> 
int:";"";"2020-03-25 15:17:58"
1214;96;"JavaScript";"/**
 * @param {string} haystack
 * @param {string} needle
 * @return {number}
 */
var strStr = function(haystack, needle) {
 
};";"";"2020-03-25 15:17:58"
1215;96;"PHP";"class Solution {";"";"2020-03-25 15:17:58"
1216;96;"Swift";"class Solution {
    func strStr(_ haystack: String, _ needle: 
String) -> Int {
        
    }
}";"";"2020-03-25 15:17:58"
1217;96;"Ruby";"# @param {String} haystack
# @param {String} needle
# @return {Integer}
def str_str(haystack, needle)
 
end";"";"2020-03-25 15:17:58"
1218;96;"Python";"class Solution(object):
    def strStr(self, haystack, needle):
        """"""
        :type haystack: str
        :type needle: str
        :rtype: int
        """"""";"";"2020-03-25 15:17:58"
1219;97;"C#";"public class Solution {
    public bool DetectCapitalUse(string word) {
 
    }
}";"";"2020-03-25 15:17:58"
1220;97;"Java";"class Solution {
    public boolean detectCapitalUse(String word) {
 
    }
}";"";"2020-03-25 15:17:58"
1221;97;"C";"bool detectCapitalUse(char * word){
 
}";"";"2020-03-25 15:17:58"
1222;97;"Rust";"impl Solution {
    pub fn detect_capital_use(word: String) -> bool 
{
        
    }
}";"";"2020-03-25 15:17:58"
1223;97;"Scala";"object Solution {
    def detectCapitalUse(word: String): Boolean = {
 
    }
}";"";"2020-03-25 15:17:58"
1224;97;"Go";"func detectCapitalUse(word string) bool {
 
}";"";"2020-03-25 15:17:58"
1225;97;"Kotlin";"class Solution {
    fun detectCapitalUse(word: String): Boolean {
 
    }
}";"";"2020-03-25 15:17:58"
1226;97;"Python3";"class Solution:
    def detectCapitalUse(self, word: str) -> bool:";"";"2020-03-25 15:17:58"
1227;97;"JavaScript";"/**
 * @param {string} word
 * @return {boolean}
 */
var detectCapitalUse = function(word) {
 
};";"";"2020-03-25 15:17:58"
1228;97;"PHP";"class Solution {
 
    /**
     * @param String $word
     * @return Boolean
     */
    function detectCapitalUse($word) {
        
    }
}";"";"2020-03-25 15:17:58"
1229;97;"Swift";"class Solution {
    func detectCapitalUse(_ word: String) -> Bool {
        
    }
}";"";"2020-03-25 15:17:58"
1230;97;"Ruby";"# @param {String} word
# @return {Boolean}
def detect_capital_use(word)
 
end";"";"2020-03-25 15:17:58"
1231;97;"Python";"class Solution(object):
    def detectCapitalUse(self, word):
        """"""
        :type word: str
        :rtype: bool
        """"""";"";"2020-03-25 15:17:58"
1232;98;"C#";"public class Solution {
    public int Evaluate(string expression) {
 
    }
}";"";"2020-03-25 15:17:58"
1233;98;"Java";"class Solution {
    public int evaluate(String expression) {
 
    }
}";"";"2020-03-25 15:17:58"
1234;98;"Rust";"impl Solution {
    pub fn evaluate(expression: String) -> i32 {
        
    }
}";"";"2020-03-25 15:17:58"
1235;98;"C";"int evaluate(char * expression){
 
}";"";"2020-03-25 15:17:58"
1236;98;"Scala";"object Solution {
    def evaluate(expression: String): Int = {
 
    }
}";"";"2020-03-25 15:17:58"
1237;98;"Go";"func evaluate(expression string) int {
 
}";"";"2020-03-25 15:17:58"
1238;98;"Kotlin";"class Solution {
    fun evaluate(expression: String): Int {
 
    }
}";"";"2020-03-25 15:17:58"
1239;98;"Python3";"class Solution:
    def evaluate(self, expression: str) -> int:";"";"2020-03-25 15:17:58"
1240;98;"JavaScript";"/**
 * @param {string} expression
 * @return {number}
 */
var evaluate = function(expression) {
 
};";"";"2020-03-25 15:17:58"
1241;98;"PHP";"class Solution {
 
    /**
     * @param String $expression
     * @return Integer
     */
    function evaluate($expression) {
        
    }
}";"";"2020-03-25 15:17:58"
1242;98;"Swift";"class Solution {
    func evaluate(_ expression: String) -> Int {
        
    }
}";"";"2020-03-25 15:17:58"
1243;98;"Ruby";"# @param {String} expression
# @return {Integer}
def evaluate(expression)
 
end";"";"2020-03-25 15:17:58"
1244;98;"Python";"class Solution(object):
    def evaluate(self, expression):
        """"""
        :type expression: str
        :rtype: int
        """"""";"";"2020-03-25 15:17:58"
1245;99;"C#";"public class Solution {
    public int MinInsertions(string s) {
 
    }
}";"";"2020-03-25 15:17:58"
1246;99;"Java";"class Solution {
    public int minInsertions(String s) {
 
    }
}";"";"2020-03-25 15:17:58"
1247;99;"Rust";"impl Solution {
    pub fn min_insertions(s: String) -> i32 {
 
    }
}";"";"2020-03-25 15:17:58"
1248;99;"C";"int minInsertions(char * s){
 
}";"";"2020-03-25 15:17:58"
1249;99;"Scala";"object Solution {
    def minInsertions(s: String): Int = {
 
    }
}";"";"2020-03-25 15:17:58"
1250;99;"Go";"func minInsertions(s string) int {
 
}";"";"2020-03-25 15:17:58"
1251;99;"Kotlin";"class Solution {
    fun minInsertions(s: String): Int {
 
    }
}";"";"2020-03-25 15:17:58"
1252;99;"Python3";"class Solution:
    def minInsertions(self, s: str) -> int:";"";"2020-03-25 15:17:58"
1253;99;"JavaScript";"/**
 * @param {string} s
 * @return {number}
 */
var minInsertions = function(s) {
 
};";"";"2020-03-25 15:17:58"
1254;99;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return Integer
     */
    function minInsertions($s) {
 
    }
}";"";"2020-03-25 15:17:58"
1255;99;"Swift";"class Solution {
    func minInsertions(_ s: String) -> Int {
 
    }
}";"";"2020-03-25 15:17:58"
1256;99;"Ruby";"# @param {String} s
# @return {Integer}
def min_insertions(s)
 
end";"";"2020-03-25 15:17:58"
1257;99;"Python";"class Solution(object):
    def minInsertions(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""";"";"2020-03-25 15:17:58"
1258;100;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int RangeSumBST(TreeNode root, int L, 
int R) {
 
    }
}";"";"2020-03-25 15:17:58"
1259;100;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int rangeSumBST(TreeNode root, int L, 
int R) {
 
    }
}";"";"2020-03-25 15:17:58"
1260;100;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn range_sum_bst(root: 
Option<Rc<RefCell<TreeNode>>>, l: i32, r: i32) -> 
i32 {
        
    }";"";"2020-03-25 15:17:58"
1261;100;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int rangeSumBST(struct TreeNode* root, int L, int R)
{
 
}";"";"2020-03-25 15:17:58"
1262;100;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def rangeSumBST(root: TreeNode, L: Int, R: Int)
: Int = {
 
    }
}";"";"2020-03-25 15:17:58"
1263;100;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func rangeSumBST(root *TreeNode, L int, R int) int {
 
}";"";"2020-03-25 15:17:58"
1264;100;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun rangeSumBST(root: TreeNode?, L: Int, R: Int)
: Int {
 
    }
}";"";"2020-03-25 15:17:58"
1265;100;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def rangeSumBST(self, root: TreeNode, L: int, 
R: int) -> int:";"";"2020-03-25 15:17:58"
1266;100;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} L
 * @param {number} R
 * @return {number}
 */
var rangeSumBST = function(root, L, R) {
 
};";"";"2020-03-25 15:17:58"
1267;100;"PHP";"/**";"";"2020-03-25 15:17:58"
1268;100;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func rangeSumBST(_ root: TreeNode?, _ L: Int, _ 
R: Int) -> Int {
        
    }
}";"";"2020-03-25 15:17:58"
1269;100;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @param {Integer} l
# @param {Integer} r
# @return {Integer}
def range_sum_bst(root, l, r)
 
end";"";"2020-03-25 15:17:58"
1270;100;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def rangeSumBST(self, root, L, R):
        """"""
        :type root: TreeNode
        :type L: int
        :type R: int
        :rtype: int
        """"""";"";"2020-03-25 15:17:58"
1271;101;"C#";"public class Solution {
    public IList<IList<int>> CombinationSum3(int k, 
int n) {
 
    }
}";"";"2020-03-25 15:17:58"
1272;101;"Java";"class Solution {
    public List<List<Integer>> combinationSum3(int 
k, int n) {
 
    }
}";"";"2020-03-25 15:17:58"
1273;101;"Rust";"impl Solution {
    pub fn combination_sum3(k: i32, n: i32) -> 
Vec<Vec<i32>> {
 
    }
}";"";"2020-03-25 15:17:58"
1274;101;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** combinationSum3(int k, int n, int* returnSize,
 int** returnColumnSizes){
 
}";"";"2020-03-25 15:17:58"
1275;101;"Scala";"object Solution {
    def combinationSum3(k: Int, n: Int): List[List
[Int]] = {
 
    }
}";"";"2020-03-25 15:17:58"
1276;101;"Go";"func combinationSum3(k int, n int) [][]int {
 
}";"";"2020-03-25 15:17:58"
1277;101;"Kotlin";"class Solution {
    fun combinationSum3(k: Int, n: Int): 
List<List<Int>> {
 
    }
}";"";"2020-03-25 15:17:58"
1278;101;"Python3";"class Solution:
    def combinationSum3(self, k: int, n: int) -> 
List[List[int]]:";"";"2020-03-25 15:17:58"
1279;101;"JavaScript";"/**
 * @param {number} k
 * @param {number} n
 * @return {number[][]}
 */
var combinationSum3 = function(k, n) {
 
};";"";"2020-03-25 15:17:58"
1280;101;"PHP";"class Solution {";"";"2020-03-25 15:17:58"
1281;101;"Swift";"class Solution {
    func combinationSum3(_ k: Int, _ n: Int) -> [
[Int]] {
 
    }
}";"";"2020-03-25 15:17:58"
1282;101;"Ruby";"# @param {Integer} k
# @param {Integer} n
# @return {Integer[][]}
def combination_sum3(k, n)
 
end";"";"2020-03-25 15:17:58"
1283;101;"Python";"class Solution(object):
    def combinationSum3(self, k, n):
        """"""
        :type k: int
        :type n: int
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:17:58"
1284;102;"C#";"public class Solution {
    public string ReverseOnlyLetters(string S) {
 
    }
}";"";"2020-03-25 15:17:58"
1285;102;"Java";"class Solution {
    public String reverseOnlyLetters(String S) {
 
    }
}";"";"2020-03-25 15:17:58"
1286;102;"C";"char * reverseOnlyLetters(char * S){
 
}";"";"2020-03-25 15:17:58"
1287;102;"Rust";"impl Solution {
    pub fn reverse_only_letters(s: String) -> 
String {
        
    }
}";"";"2020-03-25 15:17:58"
1288;102;"Scala";"object Solution {
    def reverseOnlyLetters(S: String): String = {
 
    }
}";"";"2020-03-25 15:17:58"
1289;102;"Go";"func reverseOnlyLetters(S string) string {
 
}";"";"2020-03-25 15:17:58"
1290;102;"Kotlin";"class Solution {
    fun reverseOnlyLetters(S: String): String {
 
    }
}";"";"2020-03-25 15:17:58"
1291;102;"Python3";"class Solution:
    def reverseOnlyLetters(self, S: str) -> str:";"";"2020-03-25 15:17:58"
1292;102;"JavaScript";"/**
 * @param {string} S
 * @return {string}
 */
var reverseOnlyLetters = function(S) {
 
};";"";"2020-03-25 15:17:58"
1293;102;"PHP";"class Solution {
 
    /**
     * @param String $S
     * @return String
     */
    function reverseOnlyLetters($S) {
        
    }
}";"";"2020-03-25 15:17:58"
1294;102;"Swift";"class Solution {
    func reverseOnlyLetters(_ S: String) -> String {
        
    }
}";"";"2020-03-25 15:17:58"
1295;102;"Ruby";"# @param {String} s";"";"2020-03-25 15:17:58"
1296;102;"Python";"class Solution(object):
    def reverseOnlyLetters(self, S):
        """"""
        :type S: str
        :rtype: str
        """"""";"";"2020-03-25 15:17:58"
1297;103;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class BSTIterator {
 
    public BSTIterator(TreeNode root) {
 
    }
    
    /** @return the next smallest number */
    public int Next() {
 
    }
    
    /** @return whether we have a next smallest 
number */
    public bool HasNext() {
 
    }
}";"";"2020-03-25 15:17:58"
1298;103;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class BSTIterator {
 
    public BSTIterator(TreeNode root) {
 
    }
    
    /** @return the next smallest number */
    public int next() {
 
    }
    
    /** @return whether we have a next smallest 
number */
    public boolean hasNext() {
 
    }
}";"";"2020-03-25 15:17:58"
1299;103;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
 
typedef struct {
 
} BSTIterator;
 
 
BSTIterator* bSTIteratorCreate(struct TreeNode* 
root) {
 
}
 
/** @return the next smallest number */
int bSTIteratorNext(BSTIterator* obj) {
 
}
 ";"";"2020-03-25 15:17:58"
1300;103;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
struct BSTIterator {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.";"";"2020-03-25 15:17:58"
1301;103;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
class BSTIterator(_root: TreeNode) {
 
    /** @return the next smallest number */
    def next(): Int = {
 
    }
 
    /** @return whether we have a next smallest 
number */
    def hasNext(): Boolean = {
 
    }
 
}
 
/**
 * Your BSTIterator object will be instantiated and 
called as such:";"";"2020-03-25 15:17:58"
1302;103;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
type BSTIterator struct {
 
}
 
 
func Constructor(root *TreeNode) BSTIterator {
 
}
 
 
/** @return the next smallest number */
func (this *BSTIterator) Next() int {
 
}
 
 
/** @return whether we have a next smallest number 
*/";"";"2020-03-25 15:17:58"
1303;103;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class BSTIterator(root: TreeNode?) {
 
    /** @return the next smallest number */
    fun next(): Int {
 
    }
 
    /** @return whether we have a next smallest 
number */
    fun hasNext(): Boolean {
 
    }
 
}
 
/**";"";"2020-03-25 15:17:58"
1304;103;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class BSTIterator:
 
    def __init__(self, root: TreeNode):
 
 
    def next(self) -> int:
        """"""
        @return the next smallest number
        """"""
 
 
    def hasNext(self) -> bool:
        """"""
        @return whether we have a next smallest 
number
        """"""
 
 
 ";"";"2020-03-25 15:17:58"
1305;103;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 */
var BSTIterator = function(root) {
 
};
 
/**
 * @return the next smallest number
 * @return {number}
 */
BSTIterator.prototype.next = function() {
 
};
 
/**
 * @return whether we have a next smallest number
 * @return {boolean}
 */";"";"2020-03-25 15:17:58"
1306;103;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class BSTIterator {
    /**
     * @param TreeNode $root
     */
    function __construct($root) {
 
    }
 
    /**
     * @return the next smallest number
     * @return Integer
     */
    function next() {
 
    }
 ";"";"2020-03-25 15:17:58"
1307;103;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
 
class BSTIterator {
 
    init(_ root: TreeNode?) {
 
    }
    
    /** @return the next smallest number */
    func next() -> Int {
 
    }
    
    /** @return whether we have a next smallest ";"";"2020-03-25 15:17:58"
1308;103;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:17:58"
1309;103;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class BSTIterator(object):
 
    def __init__(self, root):
        """"""
        :type root: TreeNode
        """"""
 
 
    def next(self):
        """"""
        @return the next smallest number
        :rtype: int
        """"""
 
 
    def hasNext(self):
        """"""
        @return whether we have a next smallest 
number";"";"2020-03-25 15:17:58"
1310;104;"C#";"public class Solution {
    public int MinKBitFlips(int[] A, int K) {
 
    }
}";"";"2020-03-25 15:17:58"
1311;104;"Java";"class Solution {
    public int minKBitFlips(int[] A, int K) {
 
    }
}";"";"2020-03-25 15:17:58"
1312;104;"Rust";"impl Solution {
    pub fn min_k_bit_flips(a: Vec<i32>, k: i32) -> 
i32 {
        
    }
}";"";"2020-03-25 15:17:58"
1313;104;"C";"int minKBitFlips(int* A, int ASize, int K){
 
}";"";"2020-03-25 15:17:58"
1314;104;"Scala";"object Solution {
    def minKBitFlips(A: Array[Int], K: Int): Int = {
 
    }
}";"";"2020-03-25 15:17:58"
1315;104;"Go";"func minKBitFlips(A []int, K int) int {
 
}";"";"2020-03-25 15:17:58"
1316;104;"Kotlin";"class Solution {
    fun minKBitFlips(A: IntArray, K: Int): Int {
 
    }
}";"";"2020-03-25 15:17:58"
1317;104;"Python3";"class Solution:
    def minKBitFlips(self, A: List[int], K: int) -> 
int:";"";"2020-03-25 15:17:58"
1318;104;"JavaScript";"/**
 * @param {number[]} A
 * @param {number} K
 * @return {number}
 */
var minKBitFlips = function(A, K) {
 
};";"";"2020-03-25 15:17:58"
1319;104;"PHP";"class Solution {";"";"2020-03-25 15:17:58"
1320;104;"Swift";"class Solution {
    func minKBitFlips(_ A: [Int], _ K: Int) -> Int {
        
    }
}";"";"2020-03-25 15:17:58"
1321;104;"Ruby";"# @param {Integer[]} a
# @param {Integer} k
# @return {Integer}
def min_k_bit_flips(a, k)
 
end";"";"2020-03-25 15:17:58"
1322;104;"Python";"class Solution(object):
    def minKBitFlips(self, A, K):
        """"""
        :type A: List[int]
        :type K: int
        :rtype: int
        """"""";"";"2020-03-25 15:17:58"
1323;105;"C#";"public class Solution {
    public int MissingNumber(int[] nums) {
 
    }
}";"";"2020-03-25 15:17:58"
1324;105;"Java";"class Solution {
    public int missingNumber(int[] nums) {
 
    }
}";"";"2020-03-25 15:17:58"
1325;105;"C";"int missingNumber(int* nums, int numsSize){
 
}";"";"2020-03-25 15:17:58"
1326;105;"Rust";"impl Solution {
    pub fn missing_number(nums: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:17:58"
1327;105;"Scala";"object Solution {
    def missingNumber(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:17:58"
1328;105;"Go";"func missingNumber(nums []int) int {
 
}";"";"2020-03-25 15:17:58"
1329;105;"Kotlin";"class Solution {
    fun missingNumber(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:17:58"
1330;105;"JavaScript";"/**";"";"2020-03-25 15:17:58"
1331;105;"Python3";"class Solution:
    def missingNumber(self, nums: List[int]) -> int:";"";"2020-03-25 15:17:58"
1332;105;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function missingNumber($nums) {
 
    }
}";"";"2020-03-25 15:17:58"
1333;105;"Swift";"class Solution {
    func missingNumber(_ nums: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:17:58"
1334;105;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def missing_number(nums)
 
end";"";"2020-03-25 15:17:58"
1335;105;"Python";"class Solution(object):
    def missingNumber(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:17:58"
1336;106;"C#";"public class Solution {
    public int SwimInWater(int[][] grid) {
 
    }
}";"";"2020-03-25 15:17:58"
1337;106;"Java";"class Solution {
    public int swimInWater(int[][] grid) {
 
    }
}";"";"2020-03-25 15:17:58"
1338;106;"Rust";"impl Solution {
    pub fn swim_in_water(grid: Vec<Vec<i32>>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:17:58"
1339;106;"C";"int swimInWater(int** grid, int gridSize, int* 
gridColSize){
 
}";"";"2020-03-25 15:17:58"
1340;106;"Scala";"object Solution {
    def swimInWater(grid: Array[Array[Int]]): Int = 
{
 
    }
}";"";"2020-03-25 15:17:58"
1341;106;"Go";"func swimInWater(grid [][]int) int {
 
}";"";"2020-03-25 15:17:58"
1342;106;"Kotlin";"class Solution {
    fun swimInWater(grid: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:17:58"
1343;106;"Python3";"class Solution:
    def swimInWater(self, grid: List[List[int]]) -> 
int:";"";"2020-03-25 15:17:58"
1344;106;"JavaScript";"/**
 * @param {number[][]} grid
 * @return {number}
 */
var swimInWater = function(grid) {
 
};";"";"2020-03-25 15:17:58"
1345;106;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $grid
     * @return Integer
     */
    function swimInWater($grid) {
        
    }
}";"";"2020-03-25 15:17:58"
1346;106;"Swift";"class Solution {
    func swimInWater(_ grid: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:17:58"
1347;106;"Ruby";"# @param {Integer[][]} grid
# @return {Integer}
def swim_in_water(grid)
 
end";"";"2020-03-25 15:17:58"
1348;106;"Python";"class Solution(object):
    def swimInWater(self, grid):
        """"""
        :type grid: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:17:58"
1349;107;"C#";"public class Solution {
    public int LongestPalindrome(string s) {
 
    }
}";"";"2020-03-25 15:17:58"
1350;107;"Java";"class Solution {
    public int longestPalindrome(String s) {
 
    }
}";"";"2020-03-25 15:17:58"
1351;107;"Rust";"impl Solution {
    pub fn longest_palindrome(s: String) -> i32 {
        
    }
}";"";"2020-03-25 15:17:58"
1352;107;"C";"int longestPalindrome(char * s){
 
}";"";"2020-03-25 15:17:58"
1353;107;"Scala";"object Solution {
    def longestPalindrome(s: String): Int = {
 
    }
}";"";"2020-03-25 15:17:58"
1354;107;"Go";"func longestPalindrome(s string) int {
 
}";"";"2020-03-25 15:17:58"
1355;107;"Kotlin";"class Solution {
    fun longestPalindrome(s: String): Int {
 
    }
}";"";"2020-03-25 15:17:58"
1356;107;"Python3";"class Solution:
    def longestPalindrome(self, s: str) -> int:";"";"2020-03-25 15:17:58"
1357;107;"JavaScript";"/**
 * @param {string} s
 * @return {number}
 */
var longestPalindrome = function(s) {
 
};";"";"2020-03-25 15:17:58"
1358;107;"PHP";"class Solution {";"";"2020-03-25 15:17:58"
1359;107;"Swift";"class Solution {
    func longestPalindrome(_ s: String) -> Int {
        
    }
}";"";"2020-03-25 15:17:58"
1360;107;"Ruby";"# @param {String} s
# @return {Integer}
def longest_palindrome(s)
 
end";"";"2020-03-25 15:17:58"
1361;107;"Python";"class Solution(object):
    def longestPalindrome(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""";"";"2020-03-25 15:17:58"
1362;108;"C#";"public class Solution {
    public string BreakPalindrome(string palindrome)
 {
        
    }
}";"";"2020-03-25 15:17:58"
1363;108;"Java";"class Solution {
    public String breakPalindrome(String palindrome)
 {
 
    }
}";"";"2020-03-25 15:17:58"
1364;108;"C";"char * breakPalindrome(char * palindrome){
 
}";"";"2020-03-25 15:17:58"
1365;108;"Rust";"impl Solution {
    pub fn break_palindrome(palindrome: String) -> 
String {
 
    }
}";"";"2020-03-25 15:17:58"
1366;108;"Scala";"object Solution {
    def breakPalindrome(palindrome: String): String 
= {
 
    }
}";"";"2020-03-25 15:17:58"
1367;108;"Go";"func breakPalindrome(palindrome string) string {
 
}";"";"2020-03-25 15:17:58"
1368;108;"Kotlin";"class Solution {
    fun breakPalindrome(palindrome: String): String 
{
 
    }
}";"";"2020-03-25 15:17:58"
1369;108;"Python3";"class Solution:
    def breakPalindrome(self, palindrome: str) -> 
str:";"";"2020-03-25 15:17:58"
1370;108;"JavaScript";"/**
 * @param {string} palindrome
 * @return {string}
 */
var breakPalindrome = function(palindrome) {
    
};";"";"2020-03-25 15:17:58"
1371;108;"PHP";"class Solution {
 
    /**
     * @param String $palindrome
     * @return String
     */
    function breakPalindrome($palindrome) {
 
    }
}";"";"2020-03-25 15:17:58"
1372;108;"Swift";"class Solution {
    func breakPalindrome(_ palindrome: String) -> 
String {
 
    }
}";"";"2020-03-25 15:17:58"
1373;108;"Ruby";"# @param {String} palindrome";"";"2020-03-25 15:17:58"
1374;108;"Python";"class Solution(object):
    def breakPalindrome(self, palindrome):
        """"""
        :type palindrome: str
        :rtype: str
        """"""";"";"2020-03-25 15:17:58"
1375;109;"C#";"public class Solution {
    public int MaxProduct(int[] nums) {
 
    }
}";"";"2020-03-25 15:17:59"
1376;109;"Java";"class Solution {
    public int maxProduct(int[] nums) {
 
    }
}";"";"2020-03-25 15:17:59"
1377;109;"Rust";"impl Solution {
    pub fn max_product(nums: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:17:59"
1378;109;"C";"int maxProduct(int* nums, int numsSize){
 
}";"";"2020-03-25 15:17:59"
1379;109;"Scala";"object Solution {
    def maxProduct(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:17:59"
1380;109;"Go";"func maxProduct(nums []int) int {
 
}";"";"2020-03-25 15:17:59"
1381;109;"Kotlin";"class Solution {
    fun maxProduct(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:17:59"
1382;109;"Python3";"class Solution:
    def maxProduct(self, nums: List[int]) -> int:";"";"2020-03-25 15:17:59"
1383;109;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var maxProduct = function(nums) {
 
};";"";"2020-03-25 15:17:59"
1384;109;"PHP";"class Solution {";"";"2020-03-25 15:17:59"
1385;109;"Swift";"class Solution {
    func maxProduct(_ nums: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:17:59"
1386;109;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def max_product(nums)
 
end";"";"2020-03-25 15:17:59"
1387;109;"Python";"class Solution(object):
    def maxProduct(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:17:59"
1388;110;"C#";"public class Solution {
    public int[] ShortestToChar(string S, char C) {
 
    }
}";"";"2020-03-25 15:17:59"
1389;110;"Java";"class Solution {
    public int[] shortestToChar(String S, char C) {
 
    }
}";"";"2020-03-25 15:17:59"
1390;110;"Rust";"impl Solution {
    pub fn shortest_to_char(s: String, c: char) -> 
Vec<i32> {
        
    }
}";"";"2020-03-25 15:17:59"
1391;110;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* shortestToChar(char * S, char C, int* 
returnSize){
 
}";"";"2020-03-25 15:17:59"
1392;110;"Scala";"object Solution {
    def shortestToChar(S: String, C: Char): Array
[Int] = {
 
    }
}";"";"2020-03-25 15:17:59"
1393;110;"Go";"func shortestToChar(S string, C byte) []int {
 
}";"";"2020-03-25 15:17:59"
1394;110;"Kotlin";"class Solution {
    fun shortestToChar(S: String, C: Char): 
IntArray {
 
    }
}";"";"2020-03-25 15:17:59"
1395;110;"Python3";"class Solution:
    def shortestToChar(self, S: str, C: str) -> List
[int]:";"";"2020-03-25 15:17:59"
1396;110;"JavaScript";"/**
 * @param {string} S
 * @param {character} C
 * @return {number[]}
 */
var shortestToChar = function(S, C) {
 
};";"";"2020-03-25 15:17:59"
1397;110;"PHP";"class Solution {
 
    /**
     * @param String $S
     * @param String $C
     * @return Integer[]
     */
    function shortestToChar($S, $C) {
        
    }
}";"";"2020-03-25 15:17:59"
1398;110;"Swift";"class Solution {
    func shortestToChar(_ S: String, _ C: Character)
 -> [Int] {
        
    }
}";"";"2020-03-25 15:17:59"
1399;110;"Ruby";"# @param {String} s
# @param {Character} c
# @return {Integer[]}
def shortest_to_char(s, c)
 
end";"";"2020-03-25 15:17:59"
1400;110;"Python";"class Solution(object):
    def shortestToChar(self, S, C):
        """"""
        :type S: str
        :type C: str
        :rtype: List[int]
        """"""";"";"2020-03-25 15:17:59"
1401;111;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<IList<int>> LevelOrder(TreeNode 
root) {
 
    }
}";"";"2020-03-25 15:17:59"
1402;111;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode 
root) {
 
    }
}";"";"2020-03-25 15:17:59"
1403;111;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** levelOrder(struct TreeNode* root, int* 
returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:17:59"
1404;111;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn level_order(root: 
Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<i32>> {
 
    }
}";"";"2020-03-25 15:17:59"
1405;111;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def levelOrder(root: TreeNode): List[List[Int]] 
= {
 
    }
}";"";"2020-03-25 15:17:59"
1406;111;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func levelOrder(root *TreeNode) [][]int {
 
}";"";"2020-03-25 15:17:59"
1407;111;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun levelOrder(root: TreeNode?): 
List<List<Int>> {
 
    }
}";"";"2020-03-25 15:17:59"
1408;111;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def levelOrder(self, root: TreeNode) -> List
[List[int]]:";"";"2020-03-25 15:17:59"
1409;111;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[][]}
 */
var levelOrder = function(root) {
 
};";"";"2020-03-25 15:17:59"
1410;111;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer[][]
     */
    function levelOrder($root) {
 
    }
}";"";"2020-03-25 15:17:59"
1411;111;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func levelOrder(_ root: TreeNode?) -> [[Int]] {
 
    }
}";"";"2020-03-25 15:17:59"
1412;111;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer[][]}
def level_order(root)
 
end";"";"2020-03-25 15:17:59"
1413;111;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def levelOrder(self, root):
        """"""
        :type root: TreeNode
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:17:59"
1414;112;"MS SQL Server";"/* Write your T-SQL query statement below */";"";"2020-03-25 15:17:59"
1415;112;"Oracle";"/* Write your PL/SQL query statement below */";"";"2020-03-25 15:17:59"
1416;113;"C#";"public class Solution {
    public string AddStrings(string num1, string 
num2) {
 
    }
}";"";"2020-03-25 15:17:59"
1417;113;"Java";"class Solution {
    public String addStrings(String num1, String 
num2) {
 
    }
}";"";"2020-03-25 15:17:59"
1418;113;"C";"char * addStrings(char * num1, char * num2){
 
}";"";"2020-03-25 15:17:59"
1419;113;"Rust";"impl Solution {
    pub fn add_strings(num1: String, num2: String) 
-> String {
        
    }
}";"";"2020-03-25 15:17:59"
1420;113;"Scala";"object Solution {
    def addStrings(num1: String, num2: String): 
String = {
 
    }
}";"";"2020-03-25 15:17:59"
1421;113;"Go";"func addStrings(num1 string, num2 string) string {
 
}";"";"2020-03-25 15:17:59"
1422;113;"Kotlin";"class Solution {
    fun addStrings(num1: String, num2: String): 
String {
 
    }
}";"";"2020-03-25 15:17:59"
1423;113;"Python3";"class Solution:
    def addStrings(self, num1: str, num2: str) -> 
str:";"";"2020-03-25 15:17:59"
1424;113;"JavaScript";"/**
 * @param {string} num1
 * @param {string} num2
 * @return {string}
 */
var addStrings = function(num1, num2) {
 
};";"";"2020-03-25 15:17:59"
1425;113;"PHP";"class Solution {
 
    /**
     * @param String $num1
     * @param String $num2
     * @return String
     */
    function addStrings($num1, $num2) {
        
    }
}";"";"2020-03-25 15:17:59"
1426;113;"Swift";"class Solution {
    func addStrings(_ num1: String, _ num2: String) 
-> String {
        
    }
}";"";"2020-03-25 15:17:59"
1427;113;"Ruby";"# @param {String} num1
# @param {String} num2
# @return {String}
def add_strings(num1, num2)
 
end";"";"2020-03-25 15:17:59"
1428;113;"Python";"class Solution(object):
    def addStrings(self, num1, num2):
        """"""
        :type num1: str
        :type num2: str
        :rtype: str
        """"""";"";"2020-03-25 15:17:59"
1429;114;"C#";"public class Solution {
    public int FindClosest(string[] words, string 
word1, string word2) {
 
    }
}";"";"2020-03-25 15:17:59"
1430;114;"Java";"class Solution {
    public int findClosest(String[] words, String 
word1, String word2) {
 
    }
}";"";"2020-03-25 15:17:59"
1431;114;"Rust";"impl Solution {
    pub fn find_closest(words: Vec<String>, word1: 
String, word2: String) -> i32 {
 
    }
}";"";"2020-03-25 15:17:59"
1432;114;"C";"int findClosest(char** words, int wordsSize, char* 
word1, char* word2){
 
}";"";"2020-03-25 15:17:59"
1433;114;"Scala";"object Solution {
    def findClosest(words: Array[String], word1: 
String, word2: String): Int = {
 
    }
}";"";"2020-03-25 15:17:59"
1434;114;"Go";"func findClosest(words []string, word1 string, 
word2 string) int {
 
}";"";"2020-03-25 15:17:59"
1435;114;"Kotlin";"class Solution {
    fun findClosest(words: Array<String>, word1: 
String, word2: String): Int {
 
    }
}";"";"2020-03-25 15:17:59"
1436;114;"Python3";"class Solution:
    def findClosest(self, words: List[str], word1: 
str, word2: str) -> int:";"";"2020-03-25 15:17:59"
1437;114;"JavaScript";"/**
 * @param {string[]} words
 * @param {string} word1
 * @param {string} word2
 * @return {number}
 */
var findClosest = function(words, word1, word2) {
 
};";"";"2020-03-25 15:17:59"
1438;114;"PHP";"class Solution {
 
    /**
     * @param String[] $words
     * @param String $word1
     * @param String $word2
     * @return Integer
     */
    function findClosest($words, $word1, $word2) {
 
    }
}";"";"2020-03-25 15:17:59"
1439;114;"Swift";"class Solution {
    func findClosest(_ words: [String], _ word1: 
String, _ word2: String) -> Int {
 
    }
}";"";"2020-03-25 15:17:59"
1440;114;"Ruby";"# @param {String[]} words
# @param {String} word1
# @param {String} word2
# @return {Integer}
def find_closest(words, word1, word2)
 
end";"";"2020-03-25 15:17:59"
1441;114;"Python";"class Solution(object):
    def findClosest(self, words, word1, word2):
        """"""
        :type words: List[str]
        :type word1: str
        :type word2: str
        :rtype: int
        """"""";"";"2020-03-25 15:17:59"
1442;115;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int MaxDepth(TreeNode root) {
 
    }
}";"";"2020-03-25 15:17:59"
1443;115;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
 
    }
}";"";"2020-03-25 15:17:59"
1444;115;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int maxDepth(struct TreeNode* root){
 
}";"";"2020-03-25 15:17:59"
1445;115;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn max_depth(root: 
Option<Rc<RefCell<TreeNode>>>) -> i32 {
        
    }
}";"";"2020-03-25 15:17:59"
1446;115;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def maxDepth(root: TreeNode): Int = {
 
    }
}";"";"2020-03-25 15:17:59"
1447;115;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func maxDepth(root *TreeNode) int {
 
}";"";"2020-03-25 15:17:59"
1448;115;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun maxDepth(root: TreeNode?): Int {
 
    }
}";"";"2020-03-25 15:17:59"
1449;115;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def maxDepth(self, root: TreeNode) -> int:";"";"2020-03-25 15:17:59"
1450;115;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var maxDepth = function(root) {
 
};";"";"2020-03-25 15:17:59"
1451;115;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer
     */
    function maxDepth($root) {
        
    }
}";"";"2020-03-25 15:17:59"
1452;115;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func maxDepth(_ root: TreeNode?) -> Int {
        
    }
}";"";"2020-03-25 15:17:59"
1453;115;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:17:59"
1454;115;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def maxDepth(self, root):
        """"""
        :type root: TreeNode
        :rtype: int
        """"""";"";"2020-03-25 15:17:59"
1455;116;"C#";"public class Solution {
    public int NumTilings(int N) {
 
    }
}";"";"2020-03-25 15:17:59"
1456;116;"Java";"class Solution {
    public int numTilings(int N) {
 
    }
}";"";"2020-03-25 15:17:59"
1457;116;"C";"int numTilings(int N){
 
}";"";"2020-03-25 15:17:59"
1458;116;"Rust";"impl Solution {
    pub fn num_tilings(n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:17:59"
1459;116;"Scala";"object Solution {
    def numTilings(N: Int): Int = {
 
    }
}";"";"2020-03-25 15:17:59"
1460;116;"Go";"func numTilings(N int) int {
 
}";"";"2020-03-25 15:17:59"
1461;116;"Kotlin";"class Solution {
    fun numTilings(N: Int): Int {
 
    }
}";"";"2020-03-25 15:17:59"
1462;116;"Python3";"class Solution:
    def numTilings(self, N: int) -> int:";"";"2020-03-25 15:17:59"
1463;116;"JavaScript";"/**
 * @param {number} N
 * @return {number}
 */
var numTilings = function(N) {
 
};";"";"2020-03-25 15:17:59"
1464;116;"PHP";"class Solution {
 
    /**
     * @param Integer $N
     * @return Integer
     */
    function numTilings($N) {
        
    }
}";"";"2020-03-25 15:17:59"
1465;116;"Swift";"class Solution {
    func numTilings(_ N: Int) -> Int {
        
    }
}";"";"2020-03-25 15:17:59"
1466;116;"Ruby";"# @param {Integer} n
# @return {Integer}
def num_tilings(n)
 
end";"";"2020-03-25 15:17:59"
1467;116;"Python";"class Solution(object):
    def numTilings(self, N):
        """"""
        :type N: int
        :rtype: int
        """"""";"";"2020-03-25 15:17:59"
1468;117;"C#";"public class Solution {
    public int GetMaximumGold(int[][] grid) {
 
    }
}";"";"2020-03-25 15:17:59"
1469;117;"Java";"class Solution {
    public int getMaximumGold(int[][] grid) {
 
    }
}";"";"2020-03-25 15:17:59"
1470;117;"C";"int getMaximumGold(int** grid, int gridSize, int* 
gridColSize){
 
}";"";"2020-03-25 15:17:59"
1471;117;"Rust";"impl Solution {
    pub fn get_maximum_gold(grid: Vec<Vec<i32>>) -> 
i32 {
 
    }
}";"";"2020-03-25 15:17:59"
1472;117;"Scala";"object Solution {
    def getMaximumGold(grid: Array[Array[Int]]): 
Int = {
 
    }
}";"";"2020-03-25 15:17:59"
1473;117;"Go";"func getMaximumGold(grid [][]int) int {
 
}";"";"2020-03-25 15:17:59"
1474;117;"Kotlin";"class Solution {
    fun getMaximumGold(grid: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:17:59"
1475;117;"Python3";"class Solution:
    def getMaximumGold(self, grid: List[List[int]]) 
-> int:";"";"2020-03-25 15:17:59"
1476;117;"JavaScript";"/**
 * @param {number[][]} grid
 * @return {number}
 */
var getMaximumGold = function(grid) {
 
};";"";"2020-03-25 15:17:59"
1477;117;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $grid
     * @return Integer
     */
    function getMaximumGold($grid) {
 
    }
}";"";"2020-03-25 15:17:59"
1478;117;"Swift";"class Solution {
    func getMaximumGold(_ grid: [[Int]]) -> Int {
 
    }
}";"";"2020-03-25 15:17:59"
1479;117;"Ruby";"# @param {Integer[][]} grid
# @return {Integer}
def get_maximum_gold(grid)
 
end";"";"2020-03-25 15:17:59"
1480;117;"Python";"class Solution(object):
    def getMaximumGold(self, grid):
        """"""
        :type grid: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:17:59"
1481;118;"C#";"public class Solution {
    public int FindShortestSubArray(int[] nums) {
 
    }
}";"";"2020-03-25 15:17:59"
1482;118;"Java";"class Solution {
    public int findShortestSubArray(int[] nums) {
 
    }
}";"";"2020-03-25 15:17:59"
1483;118;"Rust";"impl Solution {
    pub fn find_shortest_sub_array(nums: Vec<i32>) 
-> i32 {
        
    }
}";"";"2020-03-25 15:17:59"
1484;118;"Scala";"object Solution {
    def findShortestSubArray(nums: Array[Int]): Int 
= {
 
    }
}";"";"2020-03-25 15:17:59"
1485;118;"Python3";"class Solution:
    def findShortestSubArray(self, nums: List[int]) 
-> int:";"";"2020-03-25 15:17:59"
1486;118;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var findShortestSubArray = function(nums) {
 
};";"";"2020-03-25 15:17:59"
1487;118;"Go";"func findShortestSubArray(nums []int) int {
 
}";"";"2020-03-25 15:17:59"
1488;118;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function findShortestSubArray($nums) {
        
    }
}";"";"2020-03-25 15:17:59"
1489;118;"Swift";"class Solution {
    func findShortestSubArray(_ nums: [Int]) -> Int 
{
        
    }
}";"";"2020-03-25 15:17:59"
1490;118;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:17:59"
1491;118;"Python";"class Solution(object):
    def findShortestSubArray(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:17:59"
1492;118;"Kotlin";"class Solution {
    fun findShortestSubArray(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:17:59"
1493;119;"C#";"public class MyCalendarTwo {
 
    public MyCalendarTwo() {
 
    }
    
    public bool Book(int start, int end) {
 
    }
}
 
/**
 * Your MyCalendarTwo object will be instantiated 
and called as such:
 * MyCalendarTwo obj = new MyCalendarTwo();
 * bool param_1 = obj.Book(start,end);
 */";"";"2020-03-25 15:17:59"
1494;119;"Java";"class MyCalendarTwo {
 
    public MyCalendarTwo() {
 
    }
    
    public boolean book(int start, int end) {
 
    }
}
 
/**
 * Your MyCalendarTwo object will be instantiated 
and called as such:
 * MyCalendarTwo obj = new MyCalendarTwo();
 * boolean param_1 = obj.book(start,end);
 */";"";"2020-03-25 15:17:59"
1495;119;"Rust";"struct MyCalendarTwo {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl MyCalendarTwo {
 
    fn new() -> Self {
        
    }
    
    fn book(&self, start: i32, end: i32) -> bool {
        
    }
}
 
/**
 * Your MyCalendarTwo object will be instantiated 
and called as such:
 * let obj = MyCalendarTwo::new();";"";"2020-03-25 15:17:59"
1496;119;"C";"typedef struct {
    
} MyCalendarTwo;
 
 
MyCalendarTwo* myCalendarTwoCreate() {
    
}
 
bool myCalendarTwoBook(MyCalendarTwo* obj, int 
start, int end) {
  
}
 
void myCalendarTwoFree(MyCalendarTwo* obj) {
    
}
 
/**
 * Your MyCalendarTwo struct will be instantiated 
and called as such:
 * MyCalendarTwo* obj = myCalendarTwoCreate();
 * bool param_1 = myCalendarTwoBook(obj, start, end)
;
 
 * myCalendarTwoFree(obj);";"";"2020-03-25 15:17:59"
1497;119;"Scala";"class MyCalendarTwo() {
 
    def book(start: Int, end: Int): Boolean = {
 
    }
 
}
 
/**
 * Your MyCalendarTwo object will be instantiated 
and called as such:
 * var obj = new MyCalendarTwo()
 * var param_1 = obj.book(start,end)
 */";"";"2020-03-25 15:17:59"
1498;119;"Go";"type MyCalendarTwo struct {
 
}
 
 
func Constructor() MyCalendarTwo {
 
}
 
 
func (this *MyCalendarTwo) Book(start int, end int) 
bool {
 
}
 
 
/**
 * Your MyCalendarTwo object will be instantiated 
and called as such:
 * obj := Constructor();
 * param_1 := obj.Book(start,end);
 */";"";"2020-03-25 15:17:59"
1499;119;"Kotlin";"class MyCalendarTwo() {
 
    fun book(start: Int, end: Int): Boolean {
 
    }
 
}
 
/**
 * Your MyCalendarTwo object will be instantiated 
and called as such:
 * var obj = MyCalendarTwo()
 * var param_1 = obj.book(start,end)
 */";"";"2020-03-25 15:17:59"
1500;119;"Python3";"class MyCalendarTwo:
 
    def __init__(self):
        
 
    def book(self, start: int, end: int) -> bool:
        
 
 
# Your MyCalendarTwo object will be instantiated 
and called as such:
# obj = MyCalendarTwo()
# param_1 = obj.book(start,end)";"";"2020-03-25 15:17:59"
1501;119;"JavaScript";"var MyCalendarTwo = function() {
 
};
 
/** 
 * @param {number} start 
 * @param {number} end
 * @return {boolean}
 */
MyCalendarTwo.prototype.book = function(start, end) 
{
 
};
 
/**
 * Your MyCalendarTwo object will be instantiated 
and called as such:
 * var obj = new MyCalendarTwo()
 * var param_1 = obj.book(start,end)
 */";"";"2020-03-25 15:17:59"
1502;119;"PHP";"class MyCalendarTwo {
    /**
     */
    function __construct() {
        
    }
  
    /**
     * @param Integer $start
     * @param Integer $end
     * @return Boolean
     */
    function book($start, $end) {
        
    }
}
 
/**
 * Your MyCalendarTwo object will be instantiated 
and called as such:
 * $obj = MyCalendarTwo();
 * $ret_1 = $obj->book($start, $end);
 */";"";"2020-03-25 15:17:59"
1503;119;"Swift";"class MyCalendarTwo {
 
    init() {
        
    }
    
    func book(_ start: Int, _ end: Int) -> Bool {
        
    }
}
 
/**
 * Your MyCalendarTwo object will be instantiated 
and called as such:
 * let obj = MyCalendarTwo()
 * let ret_1: Bool = obj.book(start, end)
 */";"";"2020-03-25 15:17:59"
1504;119;"Ruby";"class MyCalendarTwo
    def initialize()
 
    end
 
 
=begin
    :type start: Integer
    :type end: Integer
    :rtype: Boolean
=end
    def book(start, end)
 
    end
 
 
end
 
# Your MyCalendarTwo object will be instantiated 
and called as such:
# obj = MyCalendarTwo.new()
# param_1 = obj.book(start, end)";"";"2020-03-25 15:17:59"
1505;119;"Python";"class MyCalendarTwo(object):
 
    def __init__(self):
        
 
    def book(self, start, end):
        """"""
        :type start: int
        :type end: int
        :rtype: bool
        """"""
        
 
 
# Your MyCalendarTwo object will be instantiated 
and called as such:
# obj = MyCalendarTwo()
# param_1 = obj.book(start,end)";"";"2020-03-25 15:17:59"
1506;120;"C#";"public class Solution {
    public int DeleteAndEarn(int[] nums) {
 
    }
}";"";"2020-03-25 15:17:59"
1507;120;"Java";"class Solution {
    public int deleteAndEarn(int[] nums) {
 
    }
}";"";"2020-03-25 15:17:59"
1508;120;"C";"int deleteAndEarn(int* nums, int numsSize){
 
}";"";"2020-03-25 15:17:59"
1509;120;"Rust";"impl Solution {
    pub fn delete_and_earn(nums: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:17:59"
1510;120;"Scala";"object Solution {
    def deleteAndEarn(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:17:59"
1511;120;"Go";"func deleteAndEarn(nums []int) int {
 
}";"";"2020-03-25 15:17:59"
1512;120;"Kotlin";"class Solution {
    fun deleteAndEarn(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:17:59"
1513;120;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var deleteAndEarn = function(nums) {
 
};";"";"2020-03-25 15:17:59"
1514;120;"Python3";"class Solution:
    def deleteAndEarn(self, nums: List[int]) -> int:";"";"2020-03-25 15:17:59"
1515;120;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function deleteAndEarn($nums) {
        
    }
}";"";"2020-03-25 15:17:59"
1516;120;"Swift";"class Solution {
    func deleteAndEarn(_ nums: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:17:59"
1517;120;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def delete_and_earn(nums)
 
end";"";"2020-03-25 15:17:59"
1518;120;"Python";"class Solution(object):
    def deleteAndEarn(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:17:59"
1519;121;"C#";"public class Solution {
    public void ReverseString(char[] s) {
 
    }
}";"";"2020-03-25 15:17:59"
1520;121;"Java";"class Solution {
    public void reverseString(char[] s) {
 
    }
}";"";"2020-03-25 15:17:59"
1521;121;"C";"void reverseString(char* s, int sSize){
 
}";"";"2020-03-25 15:17:59"
1522;121;"Rust";"impl Solution {
    pub fn reverse_string(s: &mut Vec<char>) {
 
    }
}";"";"2020-03-25 15:17:59"
1523;121;"Scala";"object Solution {
    def reverseString(s: Array[Char]): Unit = {
 
    }
}";"";"2020-03-25 15:17:59"
1524;121;"Go";"func reverseString(s []byte)  {
 
}";"";"2020-03-25 15:17:59"
1525;121;"Kotlin";"class Solution {
    fun reverseString(s: CharArray): Unit {
 
    }
}";"";"2020-03-25 15:17:59"
1526;121;"Python3";"class Solution:
    def reverseString(self, s: List[str]) -> None:
        """"""
        Do not return anything, modify s in-place 
instead.
        """"""";"";"2020-03-25 15:17:59"
1527;121;"JavaScript";"/**
 * @param {character[]} s
 * @return {void} Do not return anything, modify s 
in-place instead.
 */
var reverseString = function(s) {
 
};";"";"2020-03-25 15:17:59"
1528;121;"PHP";"class Solution {
 
    /**
     * @param String[] $s
     * @return NULL
     */
    function reverseString(&$s) {
 
    }
}";"";"2020-03-25 15:17:59"
1529;121;"Swift";"class Solution {
    func reverseString(_ s: inout [Character]) {
 
    }
}";"";"2020-03-25 15:17:59"
1530;121;"Ruby";"# @param {Character[]} s
# @return {Void} Do not return anything, modify s 
in-place instead.
def reverse_string(s)
 
end";"";"2020-03-25 15:17:59"
1531;121;"Python";"class Solution(object):
    def reverseString(self, s):
        """"""
        :type s: List[str]
        :rtype: None Do not return anything, modify 
s in-place instead.
        """"""";"";"2020-03-25 15:17:59"
1532;122;"C#";"public class Solution {
    public string ConvertToTitle(int n) {
 
    }
}";"";"2020-03-25 15:17:59"
1533;122;"Java";"class Solution {
    public String convertToTitle(int n) {
 
    }
}";"";"2020-03-25 15:17:59"
1534;122;"C";"char * convertToTitle(int n){
 
}";"";"2020-03-25 15:17:59"
1535;122;"Rust";"impl Solution {
    pub fn convert_to_title(n: i32) -> String {
 
    }
}";"";"2020-03-25 15:17:59"
1536;122;"Scala";"object Solution {
    def convertToTitle(n: Int): String = {
 
    }
}";"";"2020-03-25 15:17:59"
1537;122;"Go";"func convertToTitle(n int) string {
 
}";"";"2020-03-25 15:17:59"
1538;122;"Kotlin";"class Solution {
    fun convertToTitle(n: Int): String {
 
    }
}";"";"2020-03-25 15:17:59"
1539;122;"Python3";"class Solution:
    def convertToTitle(self, n: int) -> str:";"";"2020-03-25 15:17:59"
1540;122;"JavaScript";"/**
 * @param {number} n
 * @return {string}
 */
var convertToTitle = function(n) {
 
};";"";"2020-03-25 15:17:59"
1541;122;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return String
     */
    function convertToTitle($n) {
 
    }
}";"";"2020-03-25 15:17:59"
1542;122;"Swift";"class Solution {
    func convertToTitle(_ n: Int) -> String {
 
    }
}";"";"2020-03-25 15:17:59"
1543;122;"Ruby";"# @param {Integer} n";"";"2020-03-25 15:17:59"
1544;122;"Python";"class Solution(object):
    def convertToTitle(self, n):
        """"""
        :type n: int
        :rtype: str
        """"""";"";"2020-03-25 15:17:59"
1545;123;"C#";"public class Solution {
    public int NumTimesAllBlue(int[] light) {
 
    }
}";"";"2020-03-25 15:17:59"
1546;123;"Java";"class Solution {
    public int numTimesAllBlue(int[] light) {
 
    }
}";"";"2020-03-25 15:17:59"
1547;123;"Rust";"impl Solution {
    pub fn num_times_all_blue(light: Vec<i32>) -> 
i32 {
 
    }
}";"";"2020-03-25 15:17:59"
1548;123;"C";"int numTimesAllBlue(int* light, int lightSize){
 
}";"";"2020-03-25 15:17:59"
1549;123;"Scala";"object Solution {
    def numTimesAllBlue(light: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:17:59"
1550;123;"Go";"func numTimesAllBlue(light []int) int {
 
}";"";"2020-03-25 15:17:59"
1551;123;"Kotlin";"class Solution {
    fun numTimesAllBlue(light: IntArray): Int {
 
    }
}";"";"2020-03-25 15:17:59"
1552;123;"Python3";"class Solution:
    def numTimesAllBlue(self, light: List[int]) -> 
int:";"";"2020-03-25 15:17:59"
1553;123;"JavaScript";"/**
 * @param {number[]} light
 * @return {number}
 */
var numTimesAllBlue = function(light) {
 
};";"";"2020-03-25 15:17:59"
1554;123;"PHP";"class Solution {";"";"2020-03-25 15:17:59"
1555;123;"Swift";"class Solution {
    func numTimesAllBlue(_ light: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:17:59"
1556;123;"Ruby";"# @param {Integer[]} light
# @return {Integer}
def num_times_all_blue(light)
 
end";"";"2020-03-25 15:17:59"
1557;123;"Python";"class Solution(object):
    def numTimesAllBlue(self, light):
        """"""
        :type light: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:17:59"
1558;124;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode MiddleNode(ListNode head) {
 
    }
}";"";"2020-03-25 15:17:59"
1559;124;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode middleNode(ListNode head) {
 
    }
}";"";"2020-03-25 15:17:59"
1560;124;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn middle_node(head: Option<Box<ListNode>>) 
-> Option<Box<ListNode>> {
        
    }
}";"";"2020-03-25 15:17:59"
1561;124;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
struct ListNode* middleNode(struct ListNode* head){
 
}";"";"2020-03-25 15:17:59"
1562;124;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def middleNode(head: ListNode): ListNode = {
 
    }
}";"";"2020-03-25 15:17:59"
1563;124;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func middleNode(head *ListNode) *ListNode {
 
}";"";"2020-03-25 15:17:59"
1564;124;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun middleNode(head: ListNode?): ListNode? {
 
    }
}";"";"2020-03-25 15:17:59"
1565;124;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def middleNode(self, head: ListNode) -> 
ListNode:";"";"2020-03-25 15:17:59"
1566;124;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var middleNode = function(head) {
 
};";"";"2020-03-25 15:17:59"
1567;124;"PHP";"/**";"";"2020-03-25 15:17:59"
1568;124;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func middleNode(_ head: ListNode?) -> ListNode? 
{
        
    }
}";"";"2020-03-25 15:17:59"
1569;124;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# @param {ListNode} head
# @return {ListNode}
def middle_node(head)
 
end";"";"2020-03-25 15:17:59"
1570;124;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def middleNode(self, head):
        """"""
        :type head: ListNode
        :rtype: ListNode
        """"""";"";"2020-03-25 15:17:59"
1571;125;"C#";"public class Solution {
    public string NumberToWords(int num) {
 
    }
}";"";"2020-03-25 15:18:00"
1572;125;"Java";"class Solution {
    public String numberToWords(int num) {
 
    }
}";"";"2020-03-25 15:18:00"
1573;125;"Rust";"impl Solution {
    pub fn number_to_words(num: i32) -> String {
 
    }
}";"";"2020-03-25 15:18:00"
1574;125;"C";"char* numberToWords(int num){
 
}";"";"2020-03-25 15:18:00"
1575;125;"Scala";"object Solution {
    def numberToWords(num: Int): String = {
 
    }
}";"";"2020-03-25 15:18:00"
1576;125;"Go";"func numberToWords(num int) string {
 
}";"";"2020-03-25 15:18:00"
1577;125;"Kotlin";"class Solution {
    fun numberToWords(num: Int): String {
 
    }
}";"";"2020-03-25 15:18:00"
1578;125;"Python3";"class Solution:
    def numberToWords(self, num: int) -> str:";"";"2020-03-25 15:18:00"
1579;125;"JavaScript";"/**
 * @param {number} num
 * @return {string}
 */
var numberToWords = function(num) {
 
};";"";"2020-03-25 15:18:00"
1580;125;"PHP";"class Solution {";"";"2020-03-25 15:18:00"
1581;125;"Swift";"class Solution {
    func numberToWords(_ num: Int) -> String {
 
    }
}";"";"2020-03-25 15:18:00"
1582;125;"Ruby";"# @param {Integer} num
# @return {String}
def number_to_words(num)
 
end";"";"2020-03-25 15:18:00"
1583;125;"Python";"class Solution(object):
    def numberToWords(self, num):
        """"""
        :type num: int
        :rtype: str
        """"""";"";"2020-03-25 15:18:00"
1584;126;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public string SmallestFromLeaf(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:00"
1585;126;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public String smallestFromLeaf(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:00"
1586;126;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
char * smallestFromLeaf(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:00"
1587;126;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn smallest_from_leaf(root: 
Option<Rc<RefCell<TreeNode>>>) -> String {
        
    }
}";"";"2020-03-25 15:18:00"
1588;126;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def smallestFromLeaf(root: TreeNode): String = {
 
    }
}";"";"2020-03-25 15:18:00"
1589;126;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func smallestFromLeaf(root *TreeNode) string {
 
}";"";"2020-03-25 15:18:00"
1590;126;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun smallestFromLeaf(root: TreeNode?): String {
 
    }
}";"";"2020-03-25 15:18:00"
1591;126;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def smallestFromLeaf(self, root: TreeNode) -> 
str:";"";"2020-03-25 15:18:00"
1592;126;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {string}
 */
var smallestFromLeaf = function(root) {
 
};";"";"2020-03-25 15:18:00"
1593;126;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return String
     */
    function smallestFromLeaf($root) {
        
    }
}";"";"2020-03-25 15:18:00"
1594;126;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func smallestFromLeaf(_ root: TreeNode?) -> 
String {
        
    }
}";"";"2020-03-25 15:18:00"
1595;126;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:00"
1596;126;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def smallestFromLeaf(self, root):
        """"""
        :type root: TreeNode
        :rtype: str
        """"""";"";"2020-03-25 15:18:00"
1597;127;"C#";"public class Solution {
    public int FindRotateSteps(string ring, string 
key) {
 
    }
}";"";"2020-03-25 15:18:00"
1598;127;"Java";"class Solution {
    public int findRotateSteps(String ring, String 
key) {
 
    }
}";"";"2020-03-25 15:18:00"
1599;127;"C";"int findRotateSteps(char * ring, char * key){
 
}";"";"2020-03-25 15:18:00"
1600;127;"Rust";"impl Solution {
    pub fn find_rotate_steps(ring: String, key: 
String) -> i32 {
        
    }
}";"";"2020-03-25 15:18:00"
1601;127;"Scala";"object Solution {
    def findRotateSteps(ring: String, key: String): 
Int = {
 
    }
}";"";"2020-03-25 15:18:00"
1602;127;"Go";"func findRotateSteps(ring string, key string) int {
 
}";"";"2020-03-25 15:18:00"
1603;127;"Kotlin";"class Solution {
    fun findRotateSteps(ring: String, key: String): 
Int {
 
    }
}";"";"2020-03-25 15:18:00"
1604;127;"Python3";"class Solution:
    def findRotateSteps(self, ring: str, key: str) 
-> int:";"";"2020-03-25 15:18:00"
1605;127;"JavaScript";"/**
 * @param {string} ring
 * @param {string} key
 * @return {number}
 */
var findRotateSteps = function(ring, key) {
 
};";"";"2020-03-25 15:18:00"
1606;127;"PHP";"class Solution {
 
    /**
     * @param String $ring
     * @param String $key
     * @return Integer
     */
    function findRotateSteps($ring, $key) {
        
    }
}";"";"2020-03-25 15:18:00"
1607;127;"Swift";"class Solution {
    func findRotateSteps(_ ring: String, _ key: 
String) -> Int {
        
    }
}";"";"2020-03-25 15:18:00"
1608;127;"Ruby";"# @param {String} ring";"";"2020-03-25 15:18:00"
1609;127;"Python";"class Solution(object):
    def findRotateSteps(self, ring, key):
        """"""
        :type ring: str
        :type key: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:00"
1610;128;"C#";"public class Solution {
    public bool XorGame(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:00"
1611;128;"Java";"class Solution {
    public boolean xorGame(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:00"
1612;128;"C";"bool xorGame(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:00"
1613;128;"Python3";"class Solution:
    def xorGame(self, nums: List[int]) -> bool:";"";"2020-03-25 15:18:00"
1614;128;"JavaScript";"/**
 * @param {number[]} nums
 * @return {boolean}
 */
var xorGame = function(nums) {
 
};";"";"2020-03-25 15:18:00"
1615;128;"Ruby";"# @param {Integer[]} nums
# @return {Boolean}
def xor_game(nums)
 
end";"";"2020-03-25 15:18:00"
1616;128;"Python";"class Solution(object):
    def xorGame(self, nums):
        """"""
        :type nums: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:00"
1617;129;"C#";"public class Solution {
    public int LargestPerimeter(int[] A) {
 
    }
}";"";"2020-03-25 15:18:00"
1618;129;"Java";"class Solution {
    public int largestPerimeter(int[] A) {
 
    }
}";"";"2020-03-25 15:18:00"
1619;129;"C";"int largestPerimeter(int* A, int ASize){
 
}";"";"2020-03-25 15:18:00"
1620;129;"Rust";"impl Solution {
    pub fn largest_perimeter(a: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:00"
1621;129;"Scala";"object Solution {
    def largestPerimeter(A: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:00"
1622;129;"Go";"func largestPerimeter(A []int) int {
 
}";"";"2020-03-25 15:18:00"
1623;129;"Kotlin";"class Solution {
    fun largestPerimeter(A: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:00"
1624;129;"Python3";"class Solution:
    def largestPerimeter(self, A: List[int]) -> int:";"";"2020-03-25 15:18:00"
1625;129;"JavaScript";"/**
 * @param {number[]} A
 * @return {number}
 */
var largestPerimeter = function(A) {
 
};";"";"2020-03-25 15:18:00"
1626;129;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @return Integer
     */
    function largestPerimeter($A) {
        
    }
}";"";"2020-03-25 15:18:00"
1627;129;"Swift";"class Solution {
    func largestPerimeter(_ A: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:00"
1628;129;"Ruby";"";"";"2020-03-25 15:18:00"
1629;129;"Python";"class Solution(object):
    def largestPerimeter(self, A):
        """"""
        :type A: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:00"
1630;130;"C#";"public class Solution {
    public int FindNthDigit(int n) {
 
    }
}";"";"2020-03-25 15:18:00"
1631;130;"Java";"class Solution {
    public int findNthDigit(int n) {
 
    }
}";"";"2020-03-25 15:18:00"
1632;130;"C";"int findNthDigit(int n){
 
}";"";"2020-03-25 15:18:00"
1633;130;"Rust";"impl Solution {
    pub fn find_nth_digit(n: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:00"
1634;130;"Scala";"object Solution {
    def findNthDigit(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:00"
1635;130;"Go";"func findNthDigit(n int) int {
 
}";"";"2020-03-25 15:18:00"
1636;130;"Kotlin";"class Solution {
    fun findNthDigit(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:00"
1637;130;"Python3";"class Solution:
    def findNthDigit(self, n: int) -> int:";"";"2020-03-25 15:18:00"
1638;130;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var findNthDigit = function(n) {
 
};";"";"2020-03-25 15:18:00"
1639;130;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function findNthDigit($n) {
 
    }
}";"";"2020-03-25 15:18:00"
1640;130;"Swift";"class Solution {
    func findNthDigit(_ n: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:00"
1641;130;"Ruby";"# @param {Integer} n
# @return {Integer}
def find_nth_digit(n)
 
end";"";"2020-03-25 15:18:00"
1642;130;"Python";"class Solution(object):
    def findNthDigit(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:00"
1643;131;"C#";"public class Solution {
    public string OptimalDivision(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:00"
1644;131;"Java";"class Solution {
    public String optimalDivision(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:00"
1645;131;"Rust";"impl Solution {
    pub fn optimal_division(nums: Vec<i32>) -> 
String {
        
    }
}";"";"2020-03-25 15:18:00"
1646;131;"C";"char * optimalDivision(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:00"
1647;131;"Scala";"object Solution {
    def optimalDivision(nums: Array[Int]): String = 
{
 
    }
}";"";"2020-03-25 15:18:00"
1648;131;"Go";"func optimalDivision(nums []int) string {
 
}";"";"2020-03-25 15:18:00"
1649;131;"Kotlin";"class Solution {
    fun optimalDivision(nums: IntArray): String {
 
    }
}";"";"2020-03-25 15:18:00"
1650;131;"Python3";"class Solution:
    def optimalDivision(self, nums: List[int]) -> 
str:";"";"2020-03-25 15:18:00"
1651;131;"JavaScript";"/**
 * @param {number[]} nums
 * @return {string}
 */
var optimalDivision = function(nums) {
 
};";"";"2020-03-25 15:18:00"
1652;131;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return String
     */
    function optimalDivision($nums) {
        
    }
}";"";"2020-03-25 15:18:00"
1653;131;"Swift";"class Solution {
    func optimalDivision(_ nums: [Int]) -> String {
        
    }
}";"";"2020-03-25 15:18:00"
1654;131;"Ruby";"# @param {Integer[]} nums
# @return {String}
def optimal_division(nums)
 
end";"";"2020-03-25 15:18:00"
1655;131;"Python";"class Solution(object):
    def optimalDivision(self, nums):
        """"""
        :type nums: List[int]
        :rtype: str
        """"""";"";"2020-03-25 15:18:00"
1656;132;"C#";"public class Solution {
    public int RemovePalindromeSub(string s) {
        
    }
}";"";"2020-03-25 15:18:00"
1657;132;"Java";"class Solution {
    public int removePalindromeSub(String s) {
 
    }
}";"";"2020-03-25 15:18:00"
1658;132;"C";"int removePalindromeSub(char * s){
 
}";"";"2020-03-25 15:18:00"
1659;132;"Rust";"impl Solution {
    pub fn remove_palindrome_sub(s: String) -> i32 {
 
    }
}";"";"2020-03-25 15:18:00"
1660;132;"Scala";"object Solution {
    def removePalindromeSub(s: String): Int = {
 
    }
}";"";"2020-03-25 15:18:00"
1661;132;"Go";"func removePalindromeSub(s string) int {
 
}";"";"2020-03-25 15:18:00"
1662;132;"Kotlin";"class Solution {
    fun removePalindromeSub(s: String): Int {
 
    }
}";"";"2020-03-25 15:18:00"
1663;132;"Python3";"class Solution:
    def removePalindromeSub(self, s: str) -> int:";"";"2020-03-25 15:18:00"
1664;132;"JavaScript";"/**
 * @param {string} s
 * @return {number}
 */
var removePalindromeSub = function(s) {
    
};";"";"2020-03-25 15:18:00"
1665;132;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return Integer
     */
    function removePalindromeSub($s) {
 
    }
}";"";"2020-03-25 15:18:00"
1666;132;"Swift";"class Solution {
    func removePalindromeSub(_ s: String) -> Int {
 
    }
}";"";"2020-03-25 15:18:00"
1667;132;"Ruby";"# @param {String} s
# @return {Integer}
def remove_palindrome_sub(s)
    
end";"";"2020-03-25 15:18:00"
1668;132;"Python";"class Solution(object):
    def removePalindromeSub(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:00"
1669;133;"C#";"public class Solution {
    public IList<IList<int>> Permute(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:00"
1670;133;"Java";"class Solution {
    public List<List<Integer>> permute(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:00"
1671;133;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** permute(int* nums, int numsSize, int* 
returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:00"
1672;133;"Rust";"impl Solution {
    pub fn permute(nums: Vec<i32>) -> Vec<Vec<i32>> 
{
        
    }
}";"";"2020-03-25 15:18:00"
1673;133;"Scala";"object Solution {
    def permute(nums: Array[Int]): List[List[Int]] 
= {
 
    }
}";"";"2020-03-25 15:18:00"
1674;133;"Go";"func permute(nums []int) [][]int {
 
}";"";"2020-03-25 15:18:00"
1675;133;"Kotlin";"class Solution {
    fun permute(nums: IntArray): List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:00"
1676;133;"Python3";"class Solution:
    def permute(self, nums: List[int]) -> List[List
[int]]:";"";"2020-03-25 15:18:00"
1677;133;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number[][]}
 */
var permute = function(nums) {
 
};";"";"2020-03-25 15:18:00"
1678;133;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer[][]
     */
    function permute($nums) {
        
    }
}";"";"2020-03-25 15:18:00"
1679;133;"Swift";"class Solution {
    func permute(_ nums: [Int]) -> [[Int]] {
        
    }
}";"";"2020-03-25 15:18:00"
1680;133;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:18:00"
1681;133;"Python";"class Solution(object):
    def permute(self, nums):
        """"""
        :type nums: List[int]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:00"
1682;134;"C#";"public class Solution {
    public double[] TwoSum(int n) {
 
    }
}";"";"2020-03-25 15:18:00"
1683;134;"Java";"class Solution {
    public double[] twoSum(int n) {
 
    }
}";"";"2020-03-25 15:18:00"
1684;134;"Rust";"impl Solution {
    pub fn two_sum(n: i32) -> Vec<f64> {
 
    }
}";"";"2020-03-25 15:18:00"
1685;134;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
double* twoSum(int n, int* returnSize){
 
}";"";"2020-03-25 15:18:00"
1686;134;"Scala";"object Solution {
    def twoSum(n: Int): Array[Double] = {
 
    }
}";"";"2020-03-25 15:18:00"
1687;134;"Go";"func twoSum(n int) []float64 {
 
}";"";"2020-03-25 15:18:00"
1688;134;"Kotlin";"class Solution {
    fun twoSum(n: Int): DoubleArray {
 
    }
}";"";"2020-03-25 15:18:00"
1689;134;"Python3";"class Solution:
    def twoSum(self, n: int) -> List[float]:";"";"2020-03-25 15:18:00"
1690;134;"JavaScript";"/**
 * @param {number} n
 * @return {number[]}
 */
var twoSum = function(n) {
 
};";"";"2020-03-25 15:18:00"
1691;134;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Float[]
     */
    function twoSum($n) {
 
    }
}";"";"2020-03-25 15:18:00"
1692;134;"Swift";"class Solution {
    func twoSum(_ n: Int) -> [Double] {
 
    }
}";"";"2020-03-25 15:18:00"
1693;134;"Ruby";"# @param {Integer} n
# @return {Float[]}
def two_sum(n)
 
end";"";"2020-03-25 15:18:00"
1694;134;"Python";"class Solution(object):
    def twoSum(self, n):
        """"""
        :type n: int
        :rtype: List[float]
        """"""";"";"2020-03-25 15:18:00"
1695;135;"C#";"public class Solution {
    public bool CarPooling(int[][] trips, int 
capacity) {
 
    }
}";"";"2020-03-25 15:18:00"
1696;135;"Java";"class Solution {
    public boolean carPooling(int[][] trips, int 
capacity) {
 
    }
}";"";"2020-03-25 15:18:00"
1697;135;"Rust";"impl Solution {
    pub fn car_pooling(trips: Vec<Vec<i32>>, 
capacity: i32) -> bool {
        
    }
}";"";"2020-03-25 15:18:00"
1698;135;"C";"bool carPooling(int** trips, int tripsSize, int* 
tripsColSize, int capacity){
 
}";"";"2020-03-25 15:18:00"
1699;135;"Scala";"object Solution {
    def carPooling(trips: Array[Array[Int]], 
capacity: Int): Boolean = {
 
    }
}";"";"2020-03-25 15:18:00"
1700;135;"Go";"func carPooling(trips [][]int, capacity int) bool {
 
}";"";"2020-03-25 15:18:00"
1701;135;"Kotlin";"class Solution {
    fun carPooling(trips: Array<IntArray>, 
capacity: Int): Boolean {
 
    }
}";"";"2020-03-25 15:18:00"
1702;135;"Python3";"class Solution:
    def carPooling(self, trips: List[List[int]], 
capacity: int) -> bool:";"";"2020-03-25 15:18:00"
1703;135;"JavaScript";"/**
 * @param {number[][]} trips
 * @param {number} capacity
 * @return {boolean}
 */
var carPooling = function(trips, capacity) {
 
};";"";"2020-03-25 15:18:00"
1704;135;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $trips
     * @param Integer $capacity
     * @return Boolean
     */
    function carPooling($trips, $capacity) {
        
    }
}";"";"2020-03-25 15:18:00"
1705;135;"Swift";"class Solution {
    func carPooling(_ trips: [[Int]], _ capacity: 
Int) -> Bool {
        
    }
}";"";"2020-03-25 15:18:00"
1706;135;"Ruby";"# @param {Integer[][]} trips
# @param {Integer} capacity
# @return {Boolean}
def car_pooling(trips, capacity)
 
end";"";"2020-03-25 15:18:00"
1707;135;"Python";"class Solution(object):
    def carPooling(self, trips, capacity):
        """"""
        :type trips: List[List[int]]
        :type capacity: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:00"
1708;136;"C#";"public class Solution {
    public bool BuddyStrings(string A, string B) {
 
    }
}";"";"2020-03-25 15:18:00"
1709;136;"Java";"class Solution {
    public boolean buddyStrings(String A, String B) 
{
 
    }
}";"";"2020-03-25 15:18:00"
1710;136;"Rust";"impl Solution {
    pub fn buddy_strings(a: String, b: String) -> 
bool {
        
    }
}";"";"2020-03-25 15:18:00"
1711;136;"C";"bool buddyStrings(char * A, char * B){
 
}";"";"2020-03-25 15:18:00"
1712;136;"Scala";"object Solution {
    def buddyStrings(A: String, B: String): Boolean 
= {
 
    }
}";"";"2020-03-25 15:18:00"
1713;136;"Go";"func buddyStrings(A string, B string) bool {
 
}";"";"2020-03-25 15:18:00"
1714;136;"Kotlin";"class Solution {
    fun buddyStrings(A: String, B: String): Boolean 
{
 
    }
}";"";"2020-03-25 15:18:00"
1715;136;"Python3";"class Solution:
    def buddyStrings(self, A: str, B: str) -> bool:";"";"2020-03-25 15:18:00"
1716;136;"JavaScript";"/**
 * @param {string} A
 * @param {string} B
 * @return {boolean}
 */
var buddyStrings = function(A, B) {
 
};";"";"2020-03-25 15:18:00"
1717;136;"PHP";"class Solution {";"";"2020-03-25 15:18:00"
1718;136;"Swift";"class Solution {
    func buddyStrings(_ A: String, _ B: String) -> 
Bool {
        
    }
}";"";"2020-03-25 15:18:00"
1719;136;"Ruby";"# @param {String} a
# @param {String} b
# @return {Boolean}
def buddy_strings(a, b)
 
end";"";"2020-03-25 15:18:00"
1720;136;"Python";"class Solution(object):
    def buddyStrings(self, A, B):
        """"""
        :type A: str
        :type B: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:00"
1721;137;"C#";"public class Solution {
    public string RemoveDuplicates(string s, int k) 
{
 
    }
}";"";"2020-03-25 15:18:00"
1722;137;"Java";"class Solution {
    public String removeDuplicates(String s, int k) 
{
 
    }
}";"";"2020-03-25 15:18:00"
1723;137;"C";"char * removeDuplicates(char * s, int k){
 
}";"";"2020-03-25 15:18:00"
1724;137;"Rust";"impl Solution {
    pub fn remove_duplicates(s: String, k: i32) -> 
String {
 
    }
}";"";"2020-03-25 15:18:00"
1725;137;"Scala";"object Solution {
    def removeDuplicates(s: String, k: Int): String 
= {
 
    }
}";"";"2020-03-25 15:18:00"
1726;137;"Go";"func removeDuplicates(s string, k int) string {
 
}";"";"2020-03-25 15:18:00"
1727;137;"Kotlin";"class Solution {
    fun removeDuplicates(s: String, k: Int): String 
{
 
    }
}";"";"2020-03-25 15:18:00"
1728;137;"Python3";"class Solution:
    def removeDuplicates(self, s: str, k: int) -> 
str:";"";"2020-03-25 15:18:00"
1729;137;"JavaScript";"/**
 * @param {string} s
 * @param {number} k
 * @return {string}
 */
var removeDuplicates = function(s, k) {
 
};";"";"2020-03-25 15:18:00"
1730;137;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @param Integer $k
     * @return String
     */
    function removeDuplicates($s, $k) {
 
    }
}";"";"2020-03-25 15:18:00"
1731;137;"Swift";"class Solution {
    func removeDuplicates(_ s: String, _ k: Int) -> 
String {
 
    }
}";"";"2020-03-25 15:18:00"
1732;137;"Ruby";"# @param {String} s
# @param {Integer} k
# @return {String}
def remove_duplicates(s, k)
 
end";"";"2020-03-25 15:18:00"
1733;137;"Python";"class Solution(object):
    def removeDuplicates(self, s, k):
        """"""
        :type s: str
        :type k: int
        :rtype: str
        """"""";"";"2020-03-25 15:18:00"
1734;138;"C#";"public class Solution {
    public int TallestBillboard(int[] rods) {
 
    }
}";"";"2020-03-25 15:18:00"
1735;138;"Java";"class Solution {
    public int tallestBillboard(int[] rods) {
 
    }
}";"";"2020-03-25 15:18:00"
1736;138;"Rust";"impl Solution {
    pub fn tallest_billboard(rods: Vec<i32>) -> i32 
{
        
    }
}";"";"2020-03-25 15:18:00"
1737;138;"C";"int tallestBillboard(int* rods, int rodsSize){
 
}";"";"2020-03-25 15:18:00"
1738;138;"Scala";"object Solution {
    def tallestBillboard(rods: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:00"
1739;138;"Go";"func tallestBillboard(rods []int) int {
 
}";"";"2020-03-25 15:18:00"
1740;138;"Kotlin";"class Solution {
    fun tallestBillboard(rods: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:00"
1741;138;"Python3";"class Solution:
    def tallestBillboard(self, rods: List[int]) -> 
int:";"";"2020-03-25 15:18:00"
1742;138;"JavaScript";"/**
 * @param {number[]} rods
 * @return {number}
 */
var tallestBillboard = function(rods) {
 
};";"";"2020-03-25 15:18:00"
1743;138;"PHP";"class Solution {";"";"2020-03-25 15:18:00"
1744;138;"Swift";"class Solution {
    func tallestBillboard(_ rods: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:00"
1745;138;"Ruby";"# @param {Integer[]} rods
# @return {Integer}
def tallest_billboard(rods)
 
end";"";"2020-03-25 15:18:00"
1746;138;"Python";"class Solution(object):
    def tallestBillboard(self, rods):
        """"""
        :type rods: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:00"
1747;139;"C#";"public class Solution {
    public int FlipLights(int n, int m) {
 
    }
}";"";"2020-03-25 15:18:00"
1748;139;"Java";"class Solution {
    public int flipLights(int n, int m) {
 
    }
}";"";"2020-03-25 15:18:00"
1749;139;"Rust";"impl Solution {
    pub fn flip_lights(n: i32, m: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:00"
1750;139;"C";"int flipLights(int n, int m){
 
}";"";"2020-03-25 15:18:00"
1751;139;"Scala";"object Solution {
    def flipLights(n: Int, m: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:00"
1752;139;"Go";"func flipLights(n int, m int) int {
 
}";"";"2020-03-25 15:18:00"
1753;139;"Kotlin";"class Solution {
    fun flipLights(n: Int, m: Int): Int {
 
    }
}";"";"2020-03-25 15:18:00"
1754;139;"Python3";"class Solution:
    def flipLights(self, n: int, m: int) -> int:";"";"2020-03-25 15:18:00"
1755;139;"JavaScript";"/**
 * @param {number} n
 * @param {number} m
 * @return {number}
 */
var flipLights = function(n, m) {
 
};";"";"2020-03-25 15:18:00"
1756;139;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @param Integer $m
     * @return Integer
     */
    function flipLights($n, $m) {
        
    }
}";"";"2020-03-25 15:18:00"
1757;139;"Swift";"class Solution {
    func flipLights(_ n: Int, _ m: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:00"
1758;139;"Ruby";"# @param {Integer} n
# @param {Integer} m
# @return {Integer}
def flip_lights(n, m)
 
end";"";"2020-03-25 15:18:00"
1759;139;"Python";"class Solution(object):
    def flipLights(self, n, m):
        """"""
        :type n: int
        :type m: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:00"
1760;140;"C#";"public class Solution {
    public int[] KWeakestRows(int[][] mat, int k) {
        
    }
}";"";"2020-03-25 15:18:00"
1761;140;"Java";"class Solution {
    public int[] kWeakestRows(int[][] mat, int k) {
 
    }
}";"";"2020-03-25 15:18:00"
1762;140;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* kWeakestRows(int** mat, int matSize, int* 
matColSize, int k, int* returnSize){
 
}";"";"2020-03-25 15:18:00"
1763;140;"Rust";"impl Solution {
    pub fn k_weakest_rows(mat: Vec<Vec<i32>>, k: 
i32) -> Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:00"
1764;140;"Scala";"object Solution {
    def kWeakestRows(mat: Array[Array[Int]], k: Int)
: Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:00"
1765;140;"Go";"func kWeakestRows(mat [][]int, k int) []int {
 
}";"";"2020-03-25 15:18:00"
1766;140;"Kotlin";"class Solution {
    fun kWeakestRows(mat: Array<IntArray>, k: Int): 
IntArray {
 
    }
}";"";"2020-03-25 15:18:00"
1767;140;"Python3";"class Solution:
    def kWeakestRows(self, mat: List[List[int]], k: 
int) -> List[int]:";"";"2020-03-25 15:18:00"
1768;140;"JavaScript";"/**
 * @param {number[][]} mat
 * @param {number} k
 * @return {number[]}
 */
var kWeakestRows = function(mat, k) {
    
};";"";"2020-03-25 15:18:00"
1769;140;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $mat
     * @param Integer $k
     * @return Integer[]
     */
    function kWeakestRows($mat, $k) {
 
    }
}";"";"2020-03-25 15:18:00"
1770;140;"Swift";"class Solution {
    func kWeakestRows(_ mat: [[Int]], _ k: Int) -> 
[Int] {
 
    }
}";"";"2020-03-25 15:18:00"
1771;140;"Ruby";"# @param {Integer[][]} mat
# @param {Integer} k
# @return {Integer[]}
def k_weakest_rows(mat, k)
    
end";"";"2020-03-25 15:18:00"
1772;140;"Python";"class Solution(object):
    def kWeakestRows(self, mat, k):
        """"""
        :type mat: List[List[int]]
        :type k: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:00"
1773;141;"C#";"public class Solution {
    public int[] DecompressRLElist(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:00"
1774;141;"Java";"class Solution {
    public int[] decompressRLElist(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:00"
1775;141;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* decompressRLElist(int* nums, int numsSize, 
int* returnSize){
 
}";"";"2020-03-25 15:18:00"
1776;141;"Rust";"impl Solution {
    pub fn decompress_rl_elist(nums: Vec<i32>) -> 
Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:00"
1777;141;"Scala";"object Solution {
    def decompressRLElist(nums: Array[Int]): Array
[Int] = {
 
    }
}";"";"2020-03-25 15:18:00"
1778;141;"Go";"func decompressRLElist(nums []int) []int {
 
}";"";"2020-03-25 15:18:00"
1779;141;"Kotlin";"class Solution {
    fun decompressRLElist(nums: IntArray): IntArray 
{
 
    }
}";"";"2020-03-25 15:18:00"
1780;141;"Python3";"class Solution:
    def decompressRLElist(self, nums: List[int]) -> 
List[int]:";"";"2020-03-25 15:18:00"
1781;141;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number[]}
 */
var decompressRLElist = function(nums) {
 
};";"";"2020-03-25 15:18:00"
1782;141;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer[]
     */
    function decompressRLElist($nums) {
        
    }
}";"";"2020-03-25 15:18:00"
1783;141;"Swift";"class Solution {
    func decompressRLElist(_ nums: [Int]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:00"
1784;141;"Ruby";"# @param {Integer[]} nums
# @return {Integer[]}
def decompress_rl_elist(nums)
 
end";"";"2020-03-25 15:18:00"
1785;141;"Python";"class Solution(object):
    def decompressRLElist(self, nums):
        """"""
        :type nums: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:00"
1786;142;"C#";"public class Solution {
    public int SubtractProductAndSum(int n) {
 
    }
}";"";"2020-03-25 15:18:00"
1787;142;"Java";"class Solution {
    public int subtractProductAndSum(int n) {
 
    }
}";"";"2020-03-25 15:18:00"
1788;142;"C";"int subtractProductAndSum(int n){
 
}";"";"2020-03-25 15:18:00"
1789;142;"Rust";"impl Solution {
    pub fn subtract_product_and_sum(n: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:00"
1790;142;"Scala";"object Solution {
    def subtractProductAndSum(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:00"
1791;142;"Go";"func subtractProductAndSum(n int) int {
 
}";"";"2020-03-25 15:18:00"
1792;142;"Kotlin";"class Solution {
    fun subtractProductAndSum(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:00"
1793;142;"Python3";"class Solution:
    def subtractProductAndSum(self, n: int) -> int:";"";"2020-03-25 15:18:00"
1794;142;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var subtractProductAndSum = function(n) {
 
};";"";"2020-03-25 15:18:00"
1795;142;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function subtractProductAndSum($n) {
 
    }
}";"";"2020-03-25 15:18:00"
1796;142;"Swift";"class Solution {
    func subtractProductAndSum(_ n: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:00"
1797;142;"Ruby";"# @param {Integer} n";"";"2020-03-25 15:18:00"
1798;142;"Python";"class Solution(object):
    def subtractProductAndSum(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:00"
1799;143;"C#";"public class Solution {
    public int CalculateMinimumHP(int[][] dungeon) {
 
    }
}";"";"2020-03-25 15:18:00"
1800;143;"Java";"class Solution {
    public int calculateMinimumHP(int[][] dungeon) {
 
    }
}";"";"2020-03-25 15:18:00"
1801;143;"Rust";"impl Solution {
    pub fn calculate_minimum_hp(dungeon: 
Vec<Vec<i32>>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:00"
1802;143;"C";"int calculateMinimumHP(int** dungeon, int 
dungeonSize, int* dungeonColSize){
 
}";"";"2020-03-25 15:18:00"
1803;143;"Scala";"object Solution {
    def calculateMinimumHP(dungeon: Array[Array[Int]
]): Int = {
 
    }
}";"";"2020-03-25 15:18:00"
1804;143;"Go";"func calculateMinimumHP(dungeon [][]int) int {
 
}";"";"2020-03-25 15:18:00"
1805;143;"Kotlin";"class Solution {
    fun calculateMinimumHP(dungeon: Array<IntArray>)
: Int {
 
    }
}";"";"2020-03-25 15:18:00"
1806;143;"Python3";"class Solution:
    def calculateMinimumHP(self, dungeon: List[List
[int]]) -> int:";"";"2020-03-25 15:18:00"
1807;143;"JavaScript";"/**
 * @param {number[][]} dungeon
 * @return {number}
 */
var calculateMinimumHP = function(dungeon) {
 
};";"";"2020-03-25 15:18:00"
1808;143;"PHP";"class Solution {";"";"2020-03-25 15:18:00"
1809;143;"Swift";"class Solution {
    func calculateMinimumHP(_ dungeon: [[Int]]) -> 
Int {
 
    }
}";"";"2020-03-25 15:18:00"
1810;143;"Ruby";"# @param {Integer[][]} dungeon
# @return {Integer}
def calculate_minimum_hp(dungeon)
 
end";"";"2020-03-25 15:18:00"
1811;143;"Python";"class Solution(object):
    def calculateMinimumHP(self, dungeon):
        """"""
        :type dungeon: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:00"
1812;144;"C#";"public class Solution {
    public bool JudgePoint24(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:01"
1813;144;"Java";"class Solution {
    public boolean judgePoint24(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:01"
1814;144;"C";"bool judgePoint24(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:01"
1815;144;"Rust";"impl Solution {
    pub fn judge_point24(nums: Vec<i32>) -> bool {
        
    }
}";"";"2020-03-25 15:18:01"
1816;144;"Scala";"object Solution {
    def judgePoint24(nums: Array[Int]): Boolean = {
 
    }
}";"";"2020-03-25 15:18:01"
1817;144;"Python3";"class Solution:
    def judgePoint24(self, nums: List[int]) -> bool:";"";"2020-03-25 15:18:01"
1818;144;"JavaScript";"/**
 * @param {number[]} nums
 * @return {boolean}
 */
var judgePoint24 = function(nums) {
 
};";"";"2020-03-25 15:18:01"
1819;144;"Go";"func judgePoint24(nums []int) bool {
 
}";"";"2020-03-25 15:18:01"
1820;144;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Boolean
     */
    function judgePoint24($nums) {
        
    }
}";"";"2020-03-25 15:18:01"
1821;144;"Swift";"class Solution {
    func judgePoint24(_ nums: [Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:01"
1822;144;"Ruby";"# @param {Integer[]} nums
# @return {Boolean}
def judge_point24(nums)
 
end";"";"2020-03-25 15:18:01"
1823;144;"Python";"class Solution(object):
    def judgePoint24(self, nums):
        """"""
        :type nums: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:01"
1824;145;"C#";"public class Solution {
    public int SingleNumber(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:01"
1825;145;"Java";"class Solution {
    public int singleNumber(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:01"
1826;145;"C";"int singleNumber(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:01"
1827;145;"Rust";"impl Solution {
    pub fn single_number(nums: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:01"
1828;145;"Scala";"object Solution {
    def singleNumber(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:01"
1829;145;"Go";"func singleNumber(nums []int) int {
 
}";"";"2020-03-25 15:18:01"
1830;145;"Kotlin";"class Solution {
    fun singleNumber(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:01"
1831;145;"Python3";"class Solution:
    def singleNumber(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:01"
1832;145;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var singleNumber = function(nums) {
 
};";"";"2020-03-25 15:18:01"
1833;145;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function singleNumber($nums) {
 
    }
}";"";"2020-03-25 15:18:01"
1834;145;"Swift";"class Solution {
    func singleNumber(_ nums: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:01"
1835;145;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:18:01"
1836;145;"Python";"class Solution(object):
    def singleNumber(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:01"
1837;146;"C#";"/**
 * // This is the interface that allows for 
creating nested lists.
 * // You should not implement it, or speculate 
about its implementation
 * interface NestedInteger {
 *
 *     // Constructor initializes an empty nested 
list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds 
a single integer, rather than a nested list.
 *     bool IsInteger();
 *
 *     // @return the single integer that this 
NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a 
nested list
 *     int GetInteger();
 *
 *     // Set this NestedInteger to hold a single 
integer.";"";"2020-03-25 15:18:01"
1838;146;"Java";"/**
 * // This is the interface that allows for 
creating nested lists.
 * // You should not implement it, or speculate 
about its implementation
 * public interface NestedInteger {
 *     // Constructor initializes an empty nested 
list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds 
a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this 
NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a 
nested list
 *     public Integer getInteger();
 *
 *     // Set this NestedInteger to hold a single 
integer.
 *     public void setInteger(int value);";"";"2020-03-25 15:18:01"
1839;146;"C";"/**
 * 
****************************************************
*****************
 * // This is the interface that allows for 
creating nested lists.
 * // You should not implement it, or speculate 
about its implementation
 * 
****************************************************
*****************
 *
 * // Initializes an empty nested list and return a 
reference to the nested integer.
 * struct NestedInteger *NestedIntegerInit();
 *
 * // Return true if this NestedInteger holds a 
single integer, rather than a nested list.
 * bool NestedIntegerIsInteger(struct NestedInteger 
*);
 *
 * // Return the single integer that this 
NestedInteger holds, if it holds a single integer
 * // The result is undefined if this NestedInteger 
holds a nested list
 * int NestedIntegerGetInteger(struct NestedInteger ";"";"2020-03-25 15:18:01"
1840;146;"Rust";"// #[derive(Debug, PartialEq, Eq)]
// pub enum NestedInteger {
//   Int(i32),
//   List(Vec<NestedInteger>)
// }
impl Solution {
    pub fn deserialize(s: String) -> NestedInteger {
        
    }
}";"";"2020-03-25 15:18:01"
1841;146;"Scala";"/**
 * // This is the interface that allows for 
creating nested lists.
 * // You should not implement it, or speculate 
about its implementation
 * class NestedInteger {
 *
 *   // Return true if this NestedInteger holds a 
single integer, rather than a nested list.
 *   def isInteger: Boolean = {}
 *
 *   // Return the single integer that this 
NestedInteger holds, if it holds a single integer
 *   def getInteger: Int = {}
 *
 *   // Set this NestedInteger to hold a single 
integer.
 *   def setInteger(i: Int) = {}
 *
 *   // Return the nested list that this 
NestedInteger holds, if it holds a nested list
 *   def getList = {}
 *
 *   // Set this NestedInteger to hold a nested 
list and adds a nested integer to it.
 *   def add(ni: NestedInteger) = {}";"";"2020-03-25 15:18:01"
1842;146;"Go";"/**
 * // This is the interface that allows for 
creating nested lists.
 * // You should not implement it, or speculate 
about its implementation
 * type NestedInteger struct {
 * }
 *
 * // Return true if this NestedInteger holds a 
single integer, rather than a nested list.
 * func (n NestedInteger) IsInteger() bool {}
 *
 * // Return the single integer that this 
NestedInteger holds, if it holds a single integer
 * // The result is undefined if this NestedInteger 
holds a nested list
 * // So before calling this method, you should 
have a check
 * func (n NestedInteger) GetInteger() int {}
 *
 * // Set this NestedInteger to hold a single 
integer.
 * func (n *NestedInteger) SetInteger(value int) {}
 *
 * // Set this NestedInteger to hold a nested list 
and adds a nested integer to it.";"";"2020-03-25 15:18:01"
1843;146;"Kotlin";"/**
 * // This is the interface that allows for 
creating nested lists.
 * // You should not implement it, or speculate 
about its implementation
 * class NestedInteger {
 *     // Constructor initializes an empty nested 
list.
 *     constructor()
 *
 *     // Constructor initializes a single integer.
 *     constructor(value: Int)
 *
 *     // @return true if this NestedInteger holds 
a single integer, rather than a nested list.
 *     fun isInteger(): Boolean
 *
 *     // @return the single integer that this 
NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a 
nested list
 *     fun getInteger(): Int?
 *
 *     // Set this NestedInteger to hold a single 
integer.
 *     fun setInteger(value: Int): Unit";"";"2020-03-25 15:18:01"
1844;146;"Python3";"# """"""
# This is the interface that allows for creating 
nested lists.
# You should not implement it, or speculate about 
its implementation
# """"""
#class NestedInteger:
#    def __init__(self, value=None):
#        """"""
#        If value is not specified, initializes an 
empty list.
#        Otherwise initializes a single integer 
equal to value.
#        """"""
#
#    def isInteger(self):
#        """"""
#        @return True if this NestedInteger holds a 
single integer, rather than a nested list.
#        :rtype bool
#        """"""
#
#    def add(self, elem):
#        """"""
#        Set this NestedInteger to hold a nested 
list and adds a nested integer elem to it.";"";"2020-03-25 15:18:01"
1845;146;"JavaScript";"/**
 * // This is the interface that allows for 
creating nested lists.
 * // You should not implement it, or speculate 
about its implementation
 * function NestedInteger() {
 *
 *     Return true if this NestedInteger holds a 
single integer, rather than a nested list.
 *     @return {boolean}
 *     this.isInteger = function() {
 *         ...
 *     };
 *
 *     Return the single integer that this 
NestedInteger holds, if it holds a single integer
 *     Return null if this NestedInteger holds a 
nested list
 *     @return {integer}
 *     this.getInteger = function() {
 *         ...
 *     };
 *
 *     Set this NestedInteger to hold a single 
integer equal to value.
 *     @return {void}";"";"2020-03-25 15:18:01"
1846;146;"PHP";"/**
 * // This is the interface that allows for 
creating nested lists.
 * // You should not implement it, or speculate 
about its implementation
 * class NestedInteger {
 
 *     // if value is not specified, initializes an 
empty list.
 *     // Otherwise initializes a single integer 
equal to value.
 *     function __construct($value = null)
 
 *     // Return true if this NestedInteger holds a 
single integer, rather than a nested list.
 *     function isInteger() : bool
 *
 *     // Return the single integer that this 
NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this 
NestedInteger holds a nested list
 *     function getInteger()
 *
 *     // Set this NestedInteger to hold a single 
integer.
 *     function setInteger($i) : void";"";"2020-03-25 15:18:01"
1847;146;"Swift";"/**
 * // This is the interface that allows for 
creating nested lists.
 * // You should not implement it, or speculate 
about its implementation
 * class NestedInteger {
 *     // Return true if this NestedInteger holds a 
single integer, rather than a nested list.
 *     public func isInteger() -> Bool
 *
 *     // Return the single integer that this 
NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this 
NestedInteger holds a nested list
 *     public func getInteger() -> Int
 *
 *     // Set this NestedInteger to hold a single 
integer.
 *     public func setInteger(value: Int)
 *
 *     // Set this NestedInteger to hold a nested 
list and adds a nested integer to it.
 *     public func add(elem: NestedInteger)
 *
 *     // Return the nested list that this 
NestedInteger holds, if it holds a nested list";"";"2020-03-25 15:18:01"
1848;146;"Ruby";"# This is the interface that allows for creating 
nested lists.
# You should not implement it, or speculate about 
its implementation
#
#class NestedInteger
#    def is_integer()
#        """"""
#        Return true if this NestedInteger holds a 
single integer, rather than a nested list.
#        @return {Boolean}
#        """"""
#
#    def get_integer()
#        """"""
#        Return the single integer that this 
NestedInteger holds, if it holds a single integer
#        Return nil if this NestedInteger holds a 
nested list
#        @return {Integer}
#        """"""
#
#    def set_integer(value)
#        """"""
#        Set this NestedInteger to hold a single 
integer equal to value.";"";"2020-03-25 15:18:01"
1849;146;"Python";"# """"""
# This is the interface that allows for creating 
nested lists.
# You should not implement it, or speculate about 
its implementation
# """"""
#class NestedInteger(object):
#    def __init__(self, value=None):
#        """"""
#        If value is not specified, initializes an 
empty list.
#        Otherwise initializes a single integer 
equal to value.
#        """"""
#
#    def isInteger(self):
#        """"""
#        @return True if this NestedInteger holds a 
single integer, rather than a nested list.
#        :rtype bool
#        """"""
#
#    def add(self, elem):
#        """"""
#        Set this NestedInteger to hold a nested 
list and adds a nested integer elem to it.";"";"2020-03-25 15:18:01"
1850;147;"C#";"public class Solution {
    public int[] PathsWithMaxScore(IList<string> 
board) {
 
    }
}";"";"2020-03-25 15:18:01"
1851;147;"Java";"class Solution {
    public int[] pathsWithMaxScore(List<String> 
board) {
 
    }
}";"";"2020-03-25 15:18:01"
1852;147;"Rust";"impl Solution {
    pub fn paths_with_max_score(board: Vec<String>) 
-> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:01"
1853;147;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* pathsWithMaxScore(char ** board, int boardSize,
 int* returnSize){
 
}";"";"2020-03-25 15:18:01"
1854;147;"Scala";"object Solution {
    def pathsWithMaxScore(board: List[String]): 
Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:01"
1855;147;"Go";"func pathsWithMaxScore(board []string) []int {
 
}";"";"2020-03-25 15:18:01"
1856;147;"Kotlin";"class Solution {
    fun pathsWithMaxScore(board: List<String>): 
IntArray {
 
    }
}";"";"2020-03-25 15:18:01"
1857;147;"Python3";"class Solution:
    def pathsWithMaxScore(self, board: List[str]) 
-> List[int]:";"";"2020-03-25 15:18:01"
1858;147;"JavaScript";"/**
 * @param {string[]} board
 * @return {number[]}
 */
var pathsWithMaxScore = function(board) {
 
};";"";"2020-03-25 15:18:01"
1859;147;"PHP";"class Solution {
 
    /**
     * @param String[] $board
     * @return Integer[]
     */
    function pathsWithMaxScore($board) {
        
    }
}";"";"2020-03-25 15:18:01"
1860;147;"Swift";"class Solution {
    func pathsWithMaxScore(_ board: [String]) -> 
[Int] {
        
    }
}";"";"2020-03-25 15:18:01"
1861;147;"Ruby";"# @param {String[]} board
# @return {Integer[]}
def paths_with_max_score(board)
 
end";"";"2020-03-25 15:18:01"
1862;147;"Python";"class Solution(object):
    def pathsWithMaxScore(self, board):
        """"""
        :type board: List[str]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:01"
1863;148;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode SwapPairs(ListNode head) {
 
    }
}";"";"2020-03-25 15:18:01"
1864;148;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode swapPairs(ListNode head) {
 
    }
}";"";"2020-03-25 15:18:01"
1865;148;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn swap_pairs(head: Option<Box<ListNode>>) 
-> Option<Box<ListNode>> {
        
    }
}";"";"2020-03-25 15:18:01"
1866;148;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
struct ListNode* swapPairs(struct ListNode* head){
 
}";"";"2020-03-25 15:18:01"
1867;148;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def swapPairs(head: ListNode): ListNode = {
 
    }
}";"";"2020-03-25 15:18:01"
1868;148;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func swapPairs(head *ListNode) *ListNode {
 
}";"";"2020-03-25 15:18:01"
1869;148;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun swapPairs(head: ListNode?): ListNode? {
 
    }
}";"";"2020-03-25 15:18:01"
1870;148;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def swapPairs(self, head: ListNode) -> ListNode:";"";"2020-03-25 15:18:01"
1871;148;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var swapPairs = function(head) {
 
};";"";"2020-03-25 15:18:01"
1872;148;"PHP";"/**";"";"2020-03-25 15:18:01"
1873;148;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func swapPairs(_ head: ListNode?) -> ListNode? {
        
    }
}";"";"2020-03-25 15:18:01"
1874;148;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# @param {ListNode} head
# @return {ListNode}
def swap_pairs(head)
 
end";"";"2020-03-25 15:18:01"
1875;148;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def swapPairs(self, head):
        """"""
        :type head: ListNode
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:01"
1876;149;"C#";"public class Solution {
    public int TrailingZeroes(int n) {
 
    }
}";"";"2020-03-25 15:18:01"
1877;149;"Java";"class Solution {
    public int trailingZeroes(int n) {
 
    }
}";"";"2020-03-25 15:18:01"
1878;149;"C";"int trailingZeroes(int n){
 
}";"";"2020-03-25 15:18:01"
1879;149;"Rust";"impl Solution {
    pub fn trailing_zeroes(n: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:01"
1880;149;"Scala";"object Solution {
    def trailingZeroes(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:01"
1881;149;"Go";"func trailingZeroes(n int) int {
 
}";"";"2020-03-25 15:18:01"
1882;149;"Kotlin";"class Solution {
    fun trailingZeroes(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:01"
1883;149;"Python3";"class Solution:
    def trailingZeroes(self, n: int) -> int:";"";"2020-03-25 15:18:01"
1884;149;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var trailingZeroes = function(n) {
 
};";"";"2020-03-25 15:18:01"
1885;149;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function trailingZeroes($n) {
 
    }
}";"";"2020-03-25 15:18:01"
1886;149;"Swift";"class Solution {
    func trailingZeroes(_ n: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:01"
1887;149;"Ruby";"# @param {Integer} n";"";"2020-03-25 15:18:01"
1888;149;"Python";"class Solution(object):
    def trailingZeroes(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:01"
1889;150;"C#";"public class Solution {
    public bool Makesquare(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:01"
1890;150;"Java";"class Solution {
    public boolean makesquare(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:01"
1891;150;"C";"bool makesquare(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:01"
1892;150;"Rust";"impl Solution {
    pub fn makesquare(nums: Vec<i32>) -> bool {
        
    }
}";"";"2020-03-25 15:18:01"
1893;150;"Scala";"object Solution {
    def makesquare(nums: Array[Int]): Boolean = {
 
    }
}";"";"2020-03-25 15:18:01"
1894;150;"Go";"func makesquare(nums []int) bool {
 
}";"";"2020-03-25 15:18:01"
1895;150;"Kotlin";"class Solution {
    fun makesquare(nums: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:01"
1896;150;"Python3";"class Solution:
    def makesquare(self, nums: List[int]) -> bool:";"";"2020-03-25 15:18:01"
1897;150;"JavaScript";"/**
 * @param {number[]} nums
 * @return {boolean}
 */
var makesquare = function(nums) {
 
};";"";"2020-03-25 15:18:01"
1898;150;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Boolean
     */
    function makesquare($nums) {
        
    }
}";"";"2020-03-25 15:18:01"
1899;150;"Swift";"class Solution {
    func makesquare(_ nums: [Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:01"
1900;150;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:18:01"
1901;150;"Python";"class Solution(object):
    def makesquare(self, nums):
        """"""
        :type nums: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:01"
1902;151;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode RecoverFromPreorder(string S) {
 
    }
}";"";"2020-03-25 15:18:01"
1903;151;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode recoverFromPreorder(String S) {
 
    }
}";"";"2020-03-25 15:18:01"
1904;151;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* recoverFromPreorder(char * S){
 
}";"";"2020-03-25 15:18:01"
1905;151;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn recover_from_preorder(s: String) -> 
Option<Rc<RefCell<TreeNode>>> {
        
    }
}";"";"2020-03-25 15:18:01"
1906;151;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def recoverFromPreorder(S: String): TreeNode = {
 
    }
}";"";"2020-03-25 15:18:01"
1907;151;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func recoverFromPreorder(S string) *TreeNode {
 
}";"";"2020-03-25 15:18:01"
1908;151;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun recoverFromPreorder(S: String): TreeNode? {
 
    }
}";"";"2020-03-25 15:18:01"
1909;151;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def recoverFromPreorder(self, S: str) -> 
TreeNode:";"";"2020-03-25 15:18:01"
1910;151;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {string} S
 * @return {TreeNode}
 */
var recoverFromPreorder = function(S) {
 
};";"";"2020-03-25 15:18:01"
1911;151;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param String $S
     * @return TreeNode
     */
    function recoverFromPreorder($S) {
        
    }
}";"";"2020-03-25 15:18:01"
1912;151;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func recoverFromPreorder(_ S: String) -> 
TreeNode? {
        
    }
}";"";"2020-03-25 15:18:01"
1913;151;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:01"
1914;151;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def recoverFromPreorder(self, S):
        """"""
        :type S: str
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:01"
1915;152;"C#";"public class Solution {
    public double FindMedianSortedArrays(int[] 
nums1, int[] nums2) {
 
    }
}";"";"2020-03-25 15:18:01"
1916;152;"Java";"class Solution {
    public double findMedianSortedArrays(int[] 
nums1, int[] nums2) {
 
    }
}";"";"2020-03-25 15:18:01"
1917;152;"Rust";"impl Solution {";"";"2020-03-25 15:18:01"
1918;152;"C";"double findMedianSortedArrays(int* nums1, int 
nums1Size, int* nums2, int nums2Size){
 
}";"";"2020-03-25 15:18:01"
1919;152;"Scala";"object Solution {
    def findMedianSortedArrays(nums1: Array[Int], 
nums2: Array[Int]): Double = {
 
    }
}";"";"2020-03-25 15:18:01"
1920;152;"JavaScript";"/**
 * @param {number[]} nums1
 * @param {number[]} nums2
 * @return {number}
 */
var findMedianSortedArrays = function(nums1, nums2) 
{
 
};";"";"2020-03-25 15:18:01"
1921;152;"Python3";"class Solution:
    def findMedianSortedArrays(self, nums1: List
[int], nums2: List[int]) -> float:";"";"2020-03-25 15:18:01"
1922;152;"Go";"func findMedianSortedArrays(nums1 []int, nums2 []
int) float64 {
 
}";"";"2020-03-25 15:18:01"
1923;152;"Swift";"class Solution {
    func findMedianSortedArrays(_ nums1: [Int], _ 
nums2: [Int]) -> Double {
        
    }
}";"";"2020-03-25 15:18:01"
1924;152;"Ruby";"# @param {Integer[]} nums1
# @param {Integer[]} nums2
# @return {Float}
def find_median_sorted_arrays(nums1, nums2)
 
end";"";"2020-03-25 15:18:01"
1925;152;"Kotlin";"class Solution {
    fun findMedianSortedArrays(nums1: IntArray, 
nums2: IntArray): Double {
 
    }
}";"";"2020-03-25 15:18:01"
1926;152;"Python";"class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """"""
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """"""";"";"2020-03-25 15:18:01"
1927;153;"C#";"public class RangeModule {
 
    public RangeModule() {
 
    }
    
    public void AddRange(int left, int right) {
 
    }
    
    public bool QueryRange(int left, int right) {
 
    }
    
    public void RemoveRange(int left, int right) {
 
    }
}
 
/**
 * Your RangeModule object will be instantiated and 
called as such:
 * RangeModule obj = new RangeModule();
 * obj.AddRange(left,right);
 * bool param_2 = obj.QueryRange(left,right);
 * obj.RemoveRange(left,right);";"";"2020-03-25 15:18:01"
1928;153;"Java";"class RangeModule {
 
    public RangeModule() {
 
    }
    
    public void addRange(int left, int right) {
 
    }
    
    public boolean queryRange(int left, int right) {
 
    }
    
    public void removeRange(int left, int right) {
 
    }
}
 
/**
 * Your RangeModule object will be instantiated and 
called as such:
 * RangeModule obj = new RangeModule();
 * obj.addRange(left,right);
 * boolean param_2 = obj.queryRange(left,right);
 * obj.removeRange(left,right);";"";"2020-03-25 15:18:01"
1929;153;"C";"typedef struct {
    
} RangeModule;
 
 
RangeModule* rangeModuleCreate() {
    
}
 
void rangeModuleAddRange(RangeModule* obj, int left,
 int right) {
  
}
 
bool rangeModuleQueryRange(RangeModule* obj, int 
left, int right) {
  
}
 
void rangeModuleRemoveRange(RangeModule* obj, int 
left, int right) {
  
}
 
void rangeModuleFree(RangeModule* obj) {
    ";"";"2020-03-25 15:18:01"
1930;153;"Rust";"struct RangeModule {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl RangeModule {
 
    fn new() -> Self {
        
    }
    
    fn add_range(&self, left: i32, right: i32) {
        
    }
    
    fn query_range(&self, left: i32, right: i32) -> 
bool {
        
    }
    ";"";"2020-03-25 15:18:01"
1931;153;"Scala";"class RangeModule() {
 
    def addRange(left: Int, right: Int) {
 
    }
 
    def queryRange(left: Int, right: Int): Boolean 
= {
 
    }
 
    def removeRange(left: Int, right: Int) {
 
    }
 
}
 
/**
 * Your RangeModule object will be instantiated and 
called as such:
 * var obj = new RangeModule()
 * obj.addRange(left,right)
 * var param_2 = obj.queryRange(left,right)
 * obj.removeRange(left,right)
 */";"";"2020-03-25 15:18:01"
1932;153;"Go";"type RangeModule struct {
 
}
 
 
func Constructor() RangeModule {
 
}
 
 
func (this *RangeModule) AddRange(left int, right 
int)  {
 
}
 
 
func (this *RangeModule) QueryRange(left int, right 
int) bool {
 
}
 
 
func (this *RangeModule) RemoveRange(left int, 
right int)  {
 
}";"";"2020-03-25 15:18:01"
1933;153;"Kotlin";"class RangeModule() {
 
    fun addRange(left: Int, right: Int) {
 
    }
 
    fun queryRange(left: Int, right: Int): Boolean {
 
    }
 
    fun removeRange(left: Int, right: Int) {
 
    }
 
}
 
/**
 * Your RangeModule object will be instantiated and 
called as such:
 * var obj = RangeModule()
 * obj.addRange(left,right)
 * var param_2 = obj.queryRange(left,right)
 * obj.removeRange(left,right)
 */";"";"2020-03-25 15:18:01"
1934;153;"Python3";"class RangeModule:
 
    def __init__(self):
        
 
    def addRange(self, left: int, right: int) -> 
None:
        
 
    def queryRange(self, left: int, right: int) -> 
bool:
        
 
    def removeRange(self, left: int, right: int) -> 
None:
        
 
 
# Your RangeModule object will be instantiated and 
called as such:
# obj = RangeModule()
# obj.addRange(left,right)
# param_2 = obj.queryRange(left,right)
# obj.removeRange(left,right)";"";"2020-03-25 15:18:01"
1935;153;"JavaScript";"var RangeModule = function() {
 
};
 
/** 
 * @param {number} left 
 * @param {number} right
 * @return {void}
 */
RangeModule.prototype.addRange = function(left, 
right) {
 
};
 
/** 
 * @param {number} left 
 * @param {number} right
 * @return {boolean}
 */
RangeModule.prototype.queryRange = function(left, 
right) {
 
};
 
/** 
 * @param {number} left ";"";"2020-03-25 15:18:01"
1936;153;"PHP";"class RangeModule {
    /**
     */
    function __construct() {
        
    }
  
    /**
     * @param Integer $left
     * @param Integer $right
     * @return NULL
     */
    function addRange($left, $right) {
        
    }
  
    /**
     * @param Integer $left
     * @param Integer $right
     * @return Boolean
     */
    function queryRange($left, $right) {
        
    }
  
    /**";"";"2020-03-25 15:18:01"
1937;153;"Swift";"class RangeModule {
 
    init() {
        
    }
    
    func addRange(_ left: Int, _ right: Int) {
        
    }
    
    func queryRange(_ left: Int, _ right: Int) -> 
Bool {
        
    }
    
    func removeRange(_ left: Int, _ right: Int) {
        
    }
}
 
/**
 * Your RangeModule object will be instantiated and 
called as such:
 * let obj = RangeModule()
 * obj.addRange(left, right)
 * let ret_2: Bool = obj.queryRange(left, right)";"";"2020-03-25 15:18:01"
1938;153;"Ruby";"class RangeModule";"";"2020-03-25 15:18:01"
1939;153;"Python";"class RangeModule(object):
 
    def __init__(self):
        
 
    def addRange(self, left, right):
        """"""
        :type left: int
        :type right: int
        :rtype: None
        """"""
        
 
    def queryRange(self, left, right):
        """"""
        :type left: int
        :type right: int
        :rtype: bool
        """"""
        
 
    def removeRange(self, left, right):
        """"""
        :type left: int
        :type right: int
        :rtype: None";"";"2020-03-25 15:18:01"
1940;154;"C#";"public class SummaryRanges {
 
    /** Initialize your data structure here. */
    public SummaryRanges() {
 
    }
    
    public void AddNum(int val) {
 
    }
    
    public int[][] GetIntervals() {
 
    }
}
 
/**
 * Your SummaryRanges object will be instantiated 
and called as such:
 * SummaryRanges obj = new SummaryRanges();
 * obj.AddNum(val);
 * int[][] param_2 = obj.GetIntervals();
 */";"";"2020-03-25 15:18:01"
1941;154;"Java";"class SummaryRanges {
 
    /** Initialize your data structure here. */
    public SummaryRanges() {
 
    }
    
    public void addNum(int val) {
 
    }
    
    public int[][] getIntervals() {
 
    }
}
 
/**
 * Your SummaryRanges object will be instantiated 
and called as such:
 * SummaryRanges obj = new SummaryRanges();
 * obj.addNum(val);
 * int[][] param_2 = obj.getIntervals();
 */";"";"2020-03-25 15:18:01"
1942;154;"Rust";"struct SummaryRanges {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl SummaryRanges {
 
    /** Initialize your data structure here. */
    fn new() -> Self {
        
    }
    
    fn add_num(&self, val: i32) {
        
    }
    
    fn get_intervals(&self) -> Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:01"
1943;154;"C";"typedef struct {
    
} SummaryRanges;
 
/** Initialize your data structure here. */
 
SummaryRanges* summaryRangesCreate() {
    
}
 
void summaryRangesAddNum(SummaryRanges* obj, int 
val) {
  
}
 
int** summaryRangesGetIntervals(SummaryRanges* obj, 
int* retSize, int** retColSize) {
  
}
 
void summaryRangesFree(SummaryRanges* obj) {
    
}
 
/**
 * Your SummaryRanges struct will be instantiated ";"";"2020-03-25 15:18:01"
1944;154;"Scala";"class SummaryRanges() {
 
    /** Initialize your data structure here. */
 
 
    def addNum(`val`: Int) {
 
    }
 
    def getIntervals(): Array[Array[Int]] = {
 
    }
 
}
 
/**
 * Your SummaryRanges object will be instantiated 
and called as such:
 * var obj = new SummaryRanges()
 * obj.addNum(`val`)
 * var param_2 = obj.getIntervals()
 */";"";"2020-03-25 15:18:01"
1945;154;"Go";"type SummaryRanges struct {
 
}
 
 
/** Initialize your data structure here. */
func Constructor() SummaryRanges {
 
}
 
 
func (this *SummaryRanges) AddNum(val int)  {
 
}
 
 
func (this *SummaryRanges) GetIntervals() [][]int {
 
}
 
 
/**
 * Your SummaryRanges object will be instantiated 
and called as such:
 * obj := Constructor();
 * obj.AddNum(val);";"";"2020-03-25 15:18:01"
1946;154;"Kotlin";"class SummaryRanges() {
 
    /** Initialize your data structure here. */
 
 
    fun addNum(`val`: Int) {
 
    }
 
    fun getIntervals(): Array<IntArray> {
 
    }
 
}
 
/**
 * Your SummaryRanges object will be instantiated 
and called as such:
 * var obj = SummaryRanges()
 * obj.addNum(`val`)
 * var param_2 = obj.getIntervals()
 */";"";"2020-03-25 15:18:01"
1947;154;"Python3";"class SummaryRanges:
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
        
 
    def addNum(self, val: int) -> None:
        
 
    def getIntervals(self) -> List[List[int]]:
        
 
 
# Your SummaryRanges object will be instantiated 
and called as such:
# obj = SummaryRanges()
# obj.addNum(val)
# param_2 = obj.getIntervals()";"";"2020-03-25 15:18:01"
1948;154;"JavaScript";"/**
 * Initialize your data structure here.
 */
var SummaryRanges = function() {
 
};
 
/** 
 * @param {number} val
 * @return {void}
 */
SummaryRanges.prototype.addNum = function(val) {
 
};
 
/**
 * @return {number[][]}
 */
SummaryRanges.prototype.getIntervals = function() {
 
};
 
/**
 * Your SummaryRanges object will be instantiated 
and called as such:
 * var obj = new SummaryRanges()";"";"2020-03-25 15:18:01"
1949;154;"PHP";"class SummaryRanges {
    /**
     * Initialize your data structure here.
     */
    function __construct() {
        
    }
  
    /**
     * @param Integer $val
     * @return NULL
     */
    function addNum($val) {
        
    }
  
    /**
     * @return Integer[][]
     */
    function getIntervals() {
        
    }
}
 
/**
 * Your SummaryRanges object will be instantiated ";"";"2020-03-25 15:18:01"
1950;154;"Swift";"class SummaryRanges {
 
    /** Initialize your data structure here. */
    init() {
        
    }
    
    func addNum(_ val: Int) {
        
    }
    
    func getIntervals() -> [[Int]] {
        
    }
}
 
/**
 * Your SummaryRanges object will be instantiated 
and called as such:
 * let obj = SummaryRanges()
 * obj.addNum(val)
 * let ret_2: [[Int]] = obj.getIntervals()
 */";"";"2020-03-25 15:18:01"
1951;154;"Ruby";"class SummaryRanges
 
=begin
    Initialize your data structure here.
=end
    def initialize()
 
    end
 
 
=begin
    :type val: Integer
    :rtype: Void
=end
    def add_num(val)
 
    end
 
 
=begin
    :rtype: Integer[][]
=end
    def get_intervals()
 
    end
 ";"";"2020-03-25 15:18:01"
1952;154;"Python";"class SummaryRanges(object):
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
        
 
    def addNum(self, val):
        """"""
        :type val: int
        :rtype: None
        """"""
        
 
    def getIntervals(self):
        """"""
        :rtype: List[List[int]]
        """"""
        
 
 
# Your SummaryRanges object will be instantiated 
and called as such:
# obj = SummaryRanges()
# obj.addNum(val)";"";"2020-03-25 15:18:01"
1953;155;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode InsertIntoBST(TreeNode root, 
int val) {
 
    }
}";"";"2020-03-25 15:18:01"
1954;155;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode insertIntoBST(TreeNode root, 
int val) {
 
    }
}";"";"2020-03-25 15:18:01"
1955;155;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn insert_into_bst(root: 
Option<Rc<RefCell<TreeNode>>>, val: i32) -> 
Option<Rc<RefCell<TreeNode>>> {
        
    }";"";"2020-03-25 15:18:01"
1956;155;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* insertIntoBST(struct TreeNode* 
root, int val){
 
}";"";"2020-03-25 15:18:01"
1957;155;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def insertIntoBST(root: TreeNode, `val`: Int): 
TreeNode = {
 
    }
}";"";"2020-03-25 15:18:01"
1958;155;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func insertIntoBST(root *TreeNode, val int) 
*TreeNode {
 
}";"";"2020-03-25 15:18:01"
1959;155;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun insertIntoBST(root: TreeNode?, `val`: Int): 
TreeNode? {
 
    }
}";"";"2020-03-25 15:18:01"
1960;155;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def insertIntoBST(self, root: TreeNode, val: 
int) -> TreeNode:";"";"2020-03-25 15:18:01"
1961;155;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} val
 * @return {TreeNode}
 */
var insertIntoBST = function(root, val) {
 
};";"";"2020-03-25 15:18:01"
1962;155;"PHP";"/**";"";"2020-03-25 15:18:01"
1963;155;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func insertIntoBST(_ root: TreeNode?, _ val: 
Int) -> TreeNode? {
        
    }
}";"";"2020-03-25 15:18:01"
1964;155;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @param {Integer} val
# @return {TreeNode}
def insert_into_bst(root, val)
 
end";"";"2020-03-25 15:18:01"
1965;155;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def insertIntoBST(self, root, val):
        """"""
        :type root: TreeNode
        :type val: int
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:01"
1966;156;"C#";"public class Solution {
    public bool HasValidPath(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:01"
1967;156;"Java";"class Solution {
    public boolean hasValidPath(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:01"
1968;156;"Rust";"impl Solution {
    pub fn has_valid_path(grid: Vec<Vec<i32>>) -> 
bool {
 
    }
}";"";"2020-03-25 15:18:01"
1969;156;"C";"bool hasValidPath(int** grid, int gridSize, int* 
gridColSize){
 
}";"";"2020-03-25 15:18:01"
1970;156;"Scala";"object Solution {
    def hasValidPath(grid: Array[Array[Int]]): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:01"
1971;156;"Go";"func hasValidPath(grid [][]int) bool {
 
}";"";"2020-03-25 15:18:01"
1972;156;"Kotlin";"class Solution {
    fun hasValidPath(grid: Array<IntArray>): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:01"
1973;156;"Python3";"class Solution:
    def hasValidPath(self, grid: List[List[int]]) 
-> bool:";"";"2020-03-25 15:18:01"
1974;156;"JavaScript";"/**
 * @param {number[][]} grid
 * @return {boolean}
 */
var hasValidPath = function(grid) {
 
};";"";"2020-03-25 15:18:01"
1975;156;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $grid
     * @return Boolean
     */
    function hasValidPath($grid) {
 
    }
}";"";"2020-03-25 15:18:01"
1976;156;"Swift";"class Solution {
    func hasValidPath(_ grid: [[Int]]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:01"
1977;156;"Ruby";"# @param {Integer[][]} grid
# @return {Boolean}
def has_valid_path(grid)
 
end";"";"2020-03-25 15:18:01"
1978;156;"Python";"class Solution(object):
    def hasValidPath(self, grid):
        """"""
        :type grid: List[List[int]]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:01"
1979;157;"C#";"public class Solution {
    public string CountAndSay(int n) {
 
    }
}";"";"2020-03-25 15:18:01"
1980;157;"Java";"class Solution {
    public String countAndSay(int n) {
 
    }
}";"";"2020-03-25 15:18:01"
1981;157;"C";"char * countAndSay(int n){
 
}";"";"2020-03-25 15:18:01"
1982;157;"Rust";"impl Solution {
    pub fn count_and_say(n: i32) -> String {
        
    }
}";"";"2020-03-25 15:18:01"
1983;157;"Scala";"object Solution {
    def countAndSay(n: Int): String = {
 
    }
}";"";"2020-03-25 15:18:01"
1984;157;"Go";"func countAndSay(n int) string {
 
}";"";"2020-03-25 15:18:01"
1985;157;"Kotlin";"class Solution {
    fun countAndSay(n: Int): String {
 
    }
}";"";"2020-03-25 15:18:01"
1986;157;"Python3";"class Solution:
    def countAndSay(self, n: int) -> str:";"";"2020-03-25 15:18:01"
1987;157;"JavaScript";"/**
 * @param {number} n
 * @return {string}
 */
var countAndSay = function(n) {
 
};";"";"2020-03-25 15:18:01"
1988;157;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return String
     */
    function countAndSay($n) {
        
    }
}";"";"2020-03-25 15:18:01"
1989;157;"Swift";"class Solution {
    func countAndSay(_ n: Int) -> String {
        
    }
}";"";"2020-03-25 15:18:01"
1990;157;"Ruby";"# @param {Integer} n";"";"2020-03-25 15:18:01"
1991;157;"Python";"class Solution(object):
    def countAndSay(self, n):
        """"""
        :type n: int
        :rtype: str
        """"""";"";"2020-03-25 15:18:01"
1992;158;"C#";"public class Solution {
    public int NumRabbits(int[] answers) {
 
    }
}";"";"2020-03-25 15:18:01"
1993;158;"Java";"class Solution {
    public int numRabbits(int[] answers) {
 
    }
}";"";"2020-03-25 15:18:01"
1994;158;"C";"int numRabbits(int* answers, int answersSize){
 
}";"";"2020-03-25 15:18:01"
1995;158;"Rust";"impl Solution {
    pub fn num_rabbits(answers: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:01"
1996;158;"Scala";"object Solution {
    def numRabbits(answers: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:01"
1997;158;"Python3";"class Solution:
    def numRabbits(self, answers: List[int]) -> int:";"";"2020-03-25 15:18:01"
1998;158;"Go";"func numRabbits(answers []int) int {
 
}";"";"2020-03-25 15:18:01"
1999;158;"PHP";"class Solution {
 
    /**
     * @param Integer[] $answers
     * @return Integer
     */
    function numRabbits($answers) {
        
    }
}";"";"2020-03-25 15:18:01"
2000;158;"Swift";"class Solution {
    func numRabbits(_ answers: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:01"
2001;158;"Ruby";"# @param {Integer[]} answers
# @return {Integer}
def num_rabbits(answers)
 
end";"";"2020-03-25 15:18:01"
2002;158;"Python";"class Solution(object):
    def numRabbits(self, answers):
        """"""
        :type answers: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:01"
2003;158;"Kotlin";"class Solution {
    fun numRabbits(answers: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:01"
2004;159;"C#";"public class Solution {
    public int FindTheDistanceValue(int[] arr1, int
[] arr2, int d) {
 
    }
}";"";"2020-03-25 15:18:01"
2005;159;"Java";"class Solution {
    public int findTheDistanceValue(int[] arr1, int
[] arr2, int d) {
 
    }
}";"";"2020-03-25 15:18:01"
2006;159;"C";"int findTheDistanceValue(int* arr1, int arr1Size, 
int* arr2, int arr2Size, int d){
 
}";"";"2020-03-25 15:18:01"
2007;159;"Rust";"impl Solution {
    pub fn find_the_distance_value(arr1: Vec<i32>, 
arr2: Vec<i32>, d: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:01"
2008;159;"Scala";"object Solution {
    def findTheDistanceValue(arr1: Array[Int], 
arr2: Array[Int], d: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:01"
2009;159;"Go";"func findTheDistanceValue(arr1 []int, arr2 []int, d 
int) int {
 
}";"";"2020-03-25 15:18:01"
2010;159;"Kotlin";"class Solution {
    fun findTheDistanceValue(arr1: IntArray, arr2: 
IntArray, d: Int): Int {
 
    }
}";"";"2020-03-25 15:18:01"
2011;159;"Python3";"class Solution:
    def findTheDistanceValue(self, arr1: List[int], 
arr2: List[int], d: int) -> int:";"";"2020-03-25 15:18:01"
2012;159;"JavaScript";"/**
 * @param {number[]} arr1
 * @param {number[]} arr2
 * @param {number} d
 * @return {number}
 */
var findTheDistanceValue = function(arr1, arr2, d) {
 
};";"";"2020-03-25 15:18:01"
2013;159;"PHP";"class Solution {
 
    /**
     * @param Integer[] $arr1
     * @param Integer[] $arr2
     * @param Integer $d
     * @return Integer
     */
    function findTheDistanceValue($arr1, $arr2, $d) 
{
 
    }
}";"";"2020-03-25 15:18:01"
2014;159;"Swift";"class Solution {
    func findTheDistanceValue(_ arr1: [Int], _ 
arr2: [Int], _ d: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:01"
2015;159;"Ruby";"# @param {Integer[]} arr1";"";"2020-03-25 15:18:01"
2016;159;"Python";"class Solution(object):
    def findTheDistanceValue(self, arr1, arr2, d):
        """"""
        :type arr1: List[int]
        :type arr2: List[int]
        :type d: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:01"
2017;160;"C#";"public class Solution {
    public void SetZeroes(int[][] matrix) {
 
    }
}";"";"2020-03-25 15:18:01"
2018;160;"Java";"class Solution {
    public void setZeroes(int[][] matrix) {
 
    }
}";"";"2020-03-25 15:18:01"
2019;160;"C";"void setZeroes(int** matrix, int matrixSize, int* 
matrixColSize){
 
}";"";"2020-03-25 15:18:01"
2020;160;"Rust";"impl Solution {
    pub fn set_zeroes(matrix: &mut Vec<Vec<i32>>) {
        
    }
}";"";"2020-03-25 15:18:01"
2021;160;"Scala";"object Solution {
    def setZeroes(matrix: Array[Array[Int]]): Unit 
= {
 
    }
}";"";"2020-03-25 15:18:01"
2022;160;"Go";"func setZeroes(matrix [][]int)  {
 
}";"";"2020-03-25 15:18:01"
2023;160;"Kotlin";"class Solution {
    fun setZeroes(matrix: Array<IntArray>): Unit {
 
    }
}";"";"2020-03-25 15:18:01"
2024;160;"Python3";"class Solution:
    def setZeroes(self, matrix: List[List[int]]) -> 
None:
        """"""
        Do not return anything, modify matrix 
in-place instead.
        """"""";"";"2020-03-25 15:18:01"
2025;160;"JavaScript";"/**
 * @param {number[][]} matrix
 * @return {void} Do not return anything, modify 
matrix in-place instead.
 */
var setZeroes = function(matrix) {
 
};";"";"2020-03-25 15:18:01"
2026;160;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $matrix
     * @return NULL
     */
    function setZeroes(&$matrix) {
        
    }
}";"";"2020-03-25 15:18:01"
2027;160;"Swift";"class Solution {
    func setZeroes(_ matrix: inout [[Int]]) {
        
    }
}";"";"2020-03-25 15:18:01"
2028;160;"Ruby";"# @param {Integer[][]} matrix";"";"2020-03-25 15:18:01"
2029;160;"Python";"class Solution(object):
    def setZeroes(self, matrix):
        """"""
        :type matrix: List[List[int]]
        :rtype: None Do not return anything, modify 
matrix in-place instead.
        """"""";"";"2020-03-25 15:18:01"
2030;161;"C#";"public class Solution {
    public int NumSubmatrixSumTarget(int[][] matrix,
 int target) {
 
    }
}";"";"2020-03-25 15:18:01"
2031;161;"Java";"class Solution {
    public int numSubmatrixSumTarget(int[][] matrix,
 int target) {
 
    }
}";"";"2020-03-25 15:18:01"
2032;161;"Rust";"impl Solution {
    pub fn num_submatrix_sum_target(matrix: 
Vec<Vec<i32>>, target: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:01"
2033;161;"C";"int numSubmatrixSumTarget(int** matrix, int 
matrixSize, int* matrixColSize, int target){
 
}";"";"2020-03-25 15:18:01"
2034;161;"Scala";"object Solution {
    def numSubmatrixSumTarget(matrix: Array[Array
[Int]], target: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:01"
2035;161;"Go";"func numSubmatrixSumTarget(matrix [][]int, target 
int) int {
 
}";"";"2020-03-25 15:18:01"
2036;161;"Kotlin";"class Solution {
    fun numSubmatrixSumTarget(matrix: 
Array<IntArray>, target: Int): Int {
 
    }
}";"";"2020-03-25 15:18:01"
2037;161;"Python3";"class Solution:
    def numSubmatrixSumTarget(self, matrix: List
[List[int]], target: int) -> int:";"";"2020-03-25 15:18:01"
2038;161;"JavaScript";"/**
 * @param {number[][]} matrix
 * @param {number} target
 * @return {number}
 */
var numSubmatrixSumTarget = function(matrix, target)
 {
 
};";"";"2020-03-25 15:18:01"
2039;161;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $matrix
     * @param Integer $target
     * @return Integer
     */
    function numSubmatrixSumTarget($matrix, $target)
 {
 
    }
}";"";"2020-03-25 15:18:01"
2040;161;"Swift";"class Solution {
    func numSubmatrixSumTarget(_ matrix: [[Int]], _ 
target: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:01"
2041;161;"Ruby";"# @param {Integer[][]} matrix
# @param {Integer} target
# @return {Integer}
def num_submatrix_sum_target(matrix, target)
 
end";"";"2020-03-25 15:18:01"
2042;161;"Python";"class Solution(object):
    def numSubmatrixSumTarget(self, matrix, target):
        """"""
        :type matrix: List[List[int]]
        :type target: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:01"
2043;162;"C#";"public class Solution {
    public int HIndex(int[] citations) {
 
    }
}";"";"2020-03-25 15:18:02"
2044;162;"Java";"class Solution {
    public int hIndex(int[] citations) {
 
    }
}";"";"2020-03-25 15:18:02"
2045;162;"C";"int hIndex(int* citations, int citationsSize){
 
}";"";"2020-03-25 15:18:02"
2046;162;"Rust";"impl Solution {
    pub fn h_index(citations: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:02"
2047;162;"Scala";"object Solution {
    def hIndex(citations: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:02"
2048;162;"Go";"func hIndex(citations []int) int {
 
}";"";"2020-03-25 15:18:02"
2049;162;"Kotlin";"class Solution {
    fun hIndex(citations: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:02"
2050;162;"Python3";"class Solution:
    def hIndex(self, citations: List[int]) -> int:";"";"2020-03-25 15:18:02"
2051;162;"JavaScript";"/**
 * @param {number[]} citations
 * @return {number}
 */
var hIndex = function(citations) {
 
};";"";"2020-03-25 15:18:02"
2052;162;"PHP";"class Solution {
 
    /**
     * @param Integer[] $citations
     * @return Integer
     */
    function hIndex($citations) {
 
    }
}";"";"2020-03-25 15:18:02"
2053;162;"Swift";"class Solution {
    func hIndex(_ citations: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:02"
2054;162;"Ruby";"# @param {Integer[]} citations";"";"2020-03-25 15:18:02"
2055;162;"Python";"class Solution(object):
    def hIndex(self, citations):
        """"""
        :type citations: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:02"
2056;163;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<IList<int>> ZigzagLevelOrder
(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:02"
2057;163;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder
(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:02"
2058;163;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn zigzag_level_order(root: 
Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:02"
2059;163;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** zigzagLevelOrder(struct TreeNode* root, int* 
returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:02"
2060;163;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def zigzagLevelOrder(root: TreeNode): List[List
[Int]] = {
 
    }
}";"";"2020-03-25 15:18:02"
2061;163;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func zigzagLevelOrder(root *TreeNode) [][]int {
 
}";"";"2020-03-25 15:18:02"
2062;163;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun zigzagLevelOrder(root: TreeNode?): 
List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:02"
2063;163;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def zigzagLevelOrder(self, root: TreeNode) -> 
List[List[int]]:";"";"2020-03-25 15:18:02"
2064;163;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[][]}
 */
var zigzagLevelOrder = function(root) {
 
};";"";"2020-03-25 15:18:02"
2065;163;"PHP";"/**";"";"2020-03-25 15:18:02"
2066;163;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func zigzagLevelOrder(_ root: TreeNode?) -> [
[Int]] {
        
    }
}";"";"2020-03-25 15:18:02"
2067;163;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer[][]}
def zigzag_level_order(root)
 
end";"";"2020-03-25 15:18:02"
2068;163;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def zigzagLevelOrder(self, root):
        """"""
        :type root: TreeNode
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:02"
2069;164;"C#";"public class Solution {
    public int[] ArrayRankTransform(int[] arr) {
        
    }
}";"";"2020-03-25 15:18:02"
2070;164;"Java";"class Solution {
    public int[] arrayRankTransform(int[] arr) {
 
    }
}";"";"2020-03-25 15:18:02"
2071;164;"Rust";"impl Solution {
    pub fn array_rank_transform(arr: Vec<i32>) -> 
Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:02"
2072;164;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* arrayRankTransform(int* arr, int arrSize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:02"
2073;164;"Scala";"object Solution {
    def arrayRankTransform(arr: Array[Int]): Array
[Int] = {
 
    }
}";"";"2020-03-25 15:18:02"
2074;164;"Go";"func arrayRankTransform(arr []int) []int {
 
}";"";"2020-03-25 15:18:02"
2075;164;"Kotlin";"class Solution {
    fun arrayRankTransform(arr: IntArray): IntArray 
{
 
    }
}";"";"2020-03-25 15:18:02"
2076;164;"Python3";"class Solution:
    def arrayRankTransform(self, arr: List[int]) -> 
List[int]:";"";"2020-03-25 15:18:02"
2077;164;"JavaScript";"/**
 * @param {number[]} arr
 * @return {number[]}
 */
var arrayRankTransform = function(arr) {
    
};";"";"2020-03-25 15:18:02"
2078;164;"PHP";"class Solution {
 
    /**
     * @param Integer[] $arr
     * @return Integer[]
     */
    function arrayRankTransform($arr) {
 
    }
}";"";"2020-03-25 15:18:02"
2079;164;"Swift";"class Solution {
    func arrayRankTransform(_ arr: [Int]) -> [Int] {
 
    }
}";"";"2020-03-25 15:18:02"
2080;164;"Ruby";"# @param {Integer[]} arr
# @return {Integer[]}
def array_rank_transform(arr)
    
end";"";"2020-03-25 15:18:02"
2081;164;"Python";"class Solution(object):
    def arrayRankTransform(self, arr):
        """"""
        :type arr: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:02"
2082;165;"C#";"public class Solution {
    public int[] AsteroidCollision(int[] asteroids) 
{
 
    }
}";"";"2020-03-25 15:18:02"
2083;165;"Java";"class Solution {
    public int[] asteroidCollision(int[] asteroids) 
{
 
    }
}";"";"2020-03-25 15:18:02"
2084;165;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* asteroidCollision(int* asteroids, int 
asteroidsSize, int* returnSize){
 
}";"";"2020-03-25 15:18:02"
2085;165;"Rust";"impl Solution {
    pub fn asteroid_collision(asteroids: Vec<i32>) 
-> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:02"
2086;165;"Scala";"object Solution {
    def asteroidCollision(asteroids: Array[Int]): 
Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:02"
2087;165;"Go";"func asteroidCollision(asteroids []int) []int {
 
}";"";"2020-03-25 15:18:02"
2088;165;"Kotlin";"class Solution {
    fun asteroidCollision(asteroids: IntArray): 
IntArray {
 
    }
}";"";"2020-03-25 15:18:02"
2089;165;"Python3";"class Solution:
    def asteroidCollision(self, asteroids: List[int]
) -> List[int]:";"";"2020-03-25 15:18:02"
2090;165;"JavaScript";"/**
 * @param {number[]} asteroids
 * @return {number[]}
 */
var asteroidCollision = function(asteroids) {
 
};";"";"2020-03-25 15:18:02"
2091;165;"PHP";"class Solution {
 
    /**
     * @param Integer[] $asteroids
     * @return Integer[]
     */
    function asteroidCollision($asteroids) {
        
    }
}";"";"2020-03-25 15:18:02"
2092;165;"Swift";"class Solution {
    func asteroidCollision(_ asteroids: [Int]) -> 
[Int] {
        
    }
}";"";"2020-03-25 15:18:02"
2093;165;"Ruby";"# @param {Integer[]} asteroids";"";"2020-03-25 15:18:02"
2094;165;"Python";"class Solution(object):
    def asteroidCollision(self, asteroids):
        """"""
        :type asteroids: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:02"
2095;166;"C#";"public class Solution {
    public int MinSwapsCouples(int[] row) {
 
    }
}";"";"2020-03-25 15:18:02"
2096;166;"Java";"class Solution {
    public int minSwapsCouples(int[] row) {
 
    }
}";"";"2020-03-25 15:18:02"
2097;166;"C";"int minSwapsCouples(int* row, int rowSize){
 
}";"";"2020-03-25 15:18:02"
2098;166;"Rust";"impl Solution {
    pub fn min_swaps_couples(row: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:02"
2099;166;"Scala";"object Solution {
    def minSwapsCouples(row: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:02"
2100;166;"Go";"func minSwapsCouples(row []int) int {
 
}";"";"2020-03-25 15:18:02"
2101;166;"Kotlin";"class Solution {
    fun minSwapsCouples(row: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:02"
2102;166;"Python3";"class Solution:
    def minSwapsCouples(self, row: List[int]) -> 
int:";"";"2020-03-25 15:18:02"
2103;166;"JavaScript";"/**
 * @param {number[]} row
 * @return {number}
 */
var minSwapsCouples = function(row) {
 
};";"";"2020-03-25 15:18:02"
2104;166;"PHP";"class Solution {
 
    /**
     * @param Integer[] $row
     * @return Integer
     */
    function minSwapsCouples($row) {
        
    }
}";"";"2020-03-25 15:18:02"
2105;166;"Swift";"class Solution {
    func minSwapsCouples(_ row: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:02"
2106;166;"Ruby";"# @param {Integer[]} row
# @return {Integer}
def min_swaps_couples(row)
 
end";"";"2020-03-25 15:18:02"
2107;166;"Python";"class Solution(object):
    def minSwapsCouples(self, row):
        """"""
        :type row: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:02"
2108;167;"C#";"public class Solution {
    public int MaxRepOpt1(string text) {
 
    }
}";"";"2020-03-25 15:18:02"
2109;167;"Java";"class Solution {
    public int maxRepOpt1(String text) {
 
    }
}";"";"2020-03-25 15:18:02"
2110;167;"C";"int maxRepOpt1(char * text){
 
}";"";"2020-03-25 15:18:02"
2111;167;"Rust";"impl Solution {
    pub fn max_rep_opt1(text: String) -> i32 {
        
    }
}";"";"2020-03-25 15:18:02"
2112;167;"Scala";"object Solution {
    def maxRepOpt1(text: String): Int = {
 
    }
}";"";"2020-03-25 15:18:02"
2113;167;"Go";"func maxRepOpt1(text string) int {
 
}";"";"2020-03-25 15:18:02"
2114;167;"Kotlin";"class Solution {
    fun maxRepOpt1(text: String): Int {
 
    }
}";"";"2020-03-25 15:18:02"
2115;167;"Python3";"class Solution:
    def maxRepOpt1(self, text: str) -> int:";"";"2020-03-25 15:18:02"
2116;167;"JavaScript";"/**
 * @param {string} text
 * @return {number}
 */
var maxRepOpt1 = function(text) {
 
};";"";"2020-03-25 15:18:02"
2117;167;"PHP";"class Solution {
 
    /**
     * @param String $text
     * @return Integer
     */
    function maxRepOpt1($text) {
        
    }
}";"";"2020-03-25 15:18:02"
2118;167;"Swift";"class Solution {
    func maxRepOpt1(_ text: String) -> Int {
        
    }
}";"";"2020-03-25 15:18:02"
2119;167;"Ruby";"# @param {String} text";"";"2020-03-25 15:18:02"
2120;167;"Python";"class Solution(object):
    def maxRepOpt1(self, text):
        """"""
        :type text: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:02"
2121;168;"C#";"public class Solution {
    public int MaxPoints(int[][] points) {
 
    }
}";"";"2020-03-25 15:18:02"
2122;168;"Java";"class Solution {
    public int maxPoints(int[][] points) {
 
    }
}";"";"2020-03-25 15:18:02"
2123;168;"C";"int maxPoints(int** points, int pointsSize, int* 
pointsColSize){
 
}";"";"2020-03-25 15:18:02"
2124;168;"Rust";"impl Solution {
    pub fn max_points(points: Vec<Vec<i32>>) -> i32 
{
 
    }
}";"";"2020-03-25 15:18:02"
2125;168;"Scala";"object Solution {
    def maxPoints(points: Array[Array[Int]]): Int = 
{
 
    }
}";"";"2020-03-25 15:18:02"
2126;168;"Go";"func maxPoints(points [][]int) int {
 
}";"";"2020-03-25 15:18:02"
2127;168;"Kotlin";"class Solution {
    fun maxPoints(points: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:02"
2128;168;"Python3";"class Solution:
    def maxPoints(self, points: List[List[int]]) -> 
int:";"";"2020-03-25 15:18:02"
2129;168;"JavaScript";"/**
 * @param {number[][]} points
 * @return {number}
 */
var maxPoints = function(points) {
 
};";"";"2020-03-25 15:18:02"
2130;168;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $points
     * @return Integer
     */
    function maxPoints($points) {
 
    }
}";"";"2020-03-25 15:18:02"
2131;168;"Swift";"class Solution {
    func maxPoints(_ points: [[Int]]) -> Int {
 
    }
}";"";"2020-03-25 15:18:02"
2132;168;"Ruby";"# @param {Integer[][]} points
# @return {Integer}
def max_points(points)
 
end";"";"2020-03-25 15:18:02"
2133;168;"Python";"class Solution(object):
    def maxPoints(self, points):
        """"""
        :type points: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:02"
2134;169;"C#";"public class Solution {
    public int[][] MatrixReshape(int[][] nums, int 
r, int c) {
 
    }
}";"";"2020-03-25 15:18:02"
2135;169;"Java";"class Solution {
    public int[][] matrixReshape(int[][] nums, int 
r, int c) {
 
    }
}";"";"2020-03-25 15:18:02"
2136;169;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** matrixReshape(int** nums, int numsSize, int* 
numsColSize, int r, int c, int* returnSize, int** 
returnColumnSizes){
 
}";"";"2020-03-25 15:18:02"
2137;169;"Rust";"impl Solution {
    pub fn matrix_reshape(nums: Vec<Vec<i32>>, r: 
i32, c: i32) -> Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:02"
2138;169;"Scala";"object Solution {
    def matrixReshape(nums: Array[Array[Int]], r: 
Int, c: Int): Array[Array[Int]] = {
 
    }
}";"";"2020-03-25 15:18:02"
2139;169;"Go";"func matrixReshape(nums [][]int, r int, c int) [][]
int {
 
}";"";"2020-03-25 15:18:02"
2140;169;"Kotlin";"class Solution {
    fun matrixReshape(nums: Array<IntArray>, r: Int,
 c: Int): Array<IntArray> {
 
    }
}";"";"2020-03-25 15:18:02"
2141;169;"Python3";"class Solution:
    def matrixReshape(self, nums: List[List[int]], 
r: int, c: int) -> List[List[int]]:";"";"2020-03-25 15:18:02"
2142;169;"JavaScript";"/**
 * @param {number[][]} nums
 * @param {number} r
 * @param {number} c
 * @return {number[][]}
 */
var matrixReshape = function(nums, r, c) {
 
};";"";"2020-03-25 15:18:02"
2143;169;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $nums
     * @param Integer $r
     * @param Integer $c
     * @return Integer[][]
     */
    function matrixReshape($nums, $r, $c) {
        
    }
}";"";"2020-03-25 15:18:02"
2144;169;"Swift";"class Solution {
    func matrixReshape(_ nums: [[Int]], _ r: Int, _ 
c: Int) -> [[Int]] {
        
    }
}";"";"2020-03-25 15:18:02"
2145;169;"Ruby";"# @param {Integer[][]} nums
# @param {Integer} r
# @param {Integer} c
# @return {Integer[][]}
def matrix_reshape(nums, r, c)
 
end";"";"2020-03-25 15:18:02"
2146;169;"Python";"class Solution(object):
    def matrixReshape(self, nums, r, c):
        """"""
        :type nums: List[List[int]]
        :type r: int
        :type c: int
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:02"
2147;170;"C#";"public class Solution {
    public int GetKthMagicNumber(int k) {
 
    }
}";"";"2020-03-25 15:18:02"
2148;170;"Java";"class Solution {
    public int getKthMagicNumber(int k) {
 
    }
}";"";"2020-03-25 15:18:02"
2149;170;"Rust";"impl Solution {
    pub fn get_kth_magic_number(k: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:02"
2150;170;"C";"int getKthMagicNumber(int k){
 
}";"";"2020-03-25 15:18:02"
2151;170;"Scala";"object Solution {
    def getKthMagicNumber(k: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:02"
2152;170;"Go";"func getKthMagicNumber(k int) int {
 
}";"";"2020-03-25 15:18:02"
2153;170;"Kotlin";"class Solution {
    fun getKthMagicNumber(k: Int): Int {
 
    }
}";"";"2020-03-25 15:18:02"
2154;170;"Python3";"class Solution:
    def getKthMagicNumber(self, k: int) -> int:";"";"2020-03-25 15:18:02"
2155;170;"JavaScript";"/**
 * @param {number} k
 * @return {number}
 */
var getKthMagicNumber = function(k) {
 
};";"";"2020-03-25 15:18:02"
2156;170;"PHP";"class Solution {
 
    /**
     * @param Integer $k
     * @return Integer
     */
    function getKthMagicNumber($k) {
 
    }
}";"";"2020-03-25 15:18:02"
2157;170;"Swift";"class Solution {
    func getKthMagicNumber(_ k: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:02"
2158;170;"Ruby";"# @param {Integer} k
# @return {Integer}
def get_kth_magic_number(k)
 
end";"";"2020-03-25 15:18:02"
2159;170;"Python";"class Solution(object):
    def getKthMagicNumber(self, k):
        """"""
        :type k: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:02"
2160;171;"C#";"public class Solution {
    public int MaximalRectangle(char[][] matrix) {
 
    }
}";"";"2020-03-25 15:18:02"
2161;171;"Java";"class Solution {
    public int maximalRectangle(char[][] matrix) {
 
    }
}";"";"2020-03-25 15:18:02"
2162;171;"C";"int maximalRectangle(char** matrix, int matrixSize, 
int* matrixColSize){
 
}";"";"2020-03-25 15:18:02"
2163;171;"Rust";"impl Solution {
    pub fn maximal_rectangle(matrix: Vec<Vec<char>>)
 -> i32 {
        
    }
}";"";"2020-03-25 15:18:02"
2164;171;"Scala";"object Solution {
    def maximalRectangle(matrix: Array[Array[Char]])
: Int = {
 
    }
}";"";"2020-03-25 15:18:02"
2165;171;"Go";"func maximalRectangle(matrix [][]byte) int {
 
}";"";"2020-03-25 15:18:02"
2166;171;"Kotlin";"class Solution {
    fun maximalRectangle(matrix: Array<CharArray>): 
Int {
 
    }
}";"";"2020-03-25 15:18:02"
2167;171;"Python3";"class Solution:
    def maximalRectangle(self, matrix: List[List
[str]]) -> int:";"";"2020-03-25 15:18:02"
2168;171;"JavaScript";"/**
 * @param {character[][]} matrix
 * @return {number}
 */
var maximalRectangle = function(matrix) {
 
};";"";"2020-03-25 15:18:02"
2169;171;"PHP";"class Solution {
 
    /**
     * @param String[][] $matrix
     * @return Integer
     */
    function maximalRectangle($matrix) {
        
    }
}";"";"2020-03-25 15:18:02"
2170;171;"Swift";"class Solution {
    func maximalRectangle(_ matrix: [[Character]]) 
-> Int {
        
    }
}";"";"2020-03-25 15:18:02"
2171;171;"Ruby";"# @param {Character[][]} matrix";"";"2020-03-25 15:18:02"
2172;171;"Python";"class Solution(object):
    def maximalRectangle(self, matrix):
        """"""
        :type matrix: List[List[str]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:02"
2173;172;"C#";"public class Solution {
    public int CalPoints(string[] ops) {
 
    }
}";"";"2020-03-25 15:18:02"
2174;172;"Java";"class Solution {
    public int calPoints(String[] ops) {
 
    }
}";"";"2020-03-25 15:18:02"
2175;172;"C";"int calPoints(char ** ops, int opsSize){
 
}";"";"2020-03-25 15:18:02"
2176;172;"Rust";"impl Solution {
    pub fn cal_points(ops: Vec<String>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:02"
2177;172;"Scala";"object Solution {
    def calPoints(ops: Array[String]): Int = {
 
    }
}";"";"2020-03-25 15:18:02"
2178;172;"Go";"func calPoints(ops []string) int {
 
}";"";"2020-03-25 15:18:02"
2179;172;"Kotlin";"class Solution {
    fun calPoints(ops: Array<String>): Int {
 
    }
}";"";"2020-03-25 15:18:02"
2180;172;"Python3";"class Solution:
    def calPoints(self, ops: List[str]) -> int:";"";"2020-03-25 15:18:02"
2181;172;"JavaScript";"/**
 * @param {string[]} ops
 * @return {number}
 */
var calPoints = function(ops) {
 
};";"";"2020-03-25 15:18:02"
2182;172;"PHP";"class Solution {
 
    /**
     * @param String[] $ops
     * @return Integer
     */
    function calPoints($ops) {
        
    }
}";"";"2020-03-25 15:18:02"
2183;172;"Swift";"class Solution {
    func calPoints(_ ops: [String]) -> Int {
        
    }
}";"";"2020-03-25 15:18:02"
2184;172;"Ruby";"# @param {String[]} ops";"";"2020-03-25 15:18:02"
2185;172;"Python";"class Solution(object):
    def calPoints(self, ops):
        """"""
        :type ops: List[str]
        :rtype: int
        """"""";"";"2020-03-25 15:18:02"
2186;173;"C#";"public class Solution {
    public IList<string> FindItinerary
(IList<IList<string>> tickets) {
 
    }
}";"";"2020-03-25 15:18:02"
2187;173;"Java";"class Solution {
    public List<String> findItinerary
(List<List<String>> tickets) {
 
    }
}";"";"2020-03-25 15:18:02"
2188;173;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** findItinerary(char *** tickets, int 
ticketsSize, int* ticketsColSize, int* returnSize){
 
}";"";"2020-03-25 15:18:02"
2189;173;"Rust";"impl Solution {
    pub fn find_itinerary(tickets: Vec<Vec<String>>)
 -> Vec<String> {
        
    }
}";"";"2020-03-25 15:18:02"
2190;173;"Scala";"object Solution {
    def findItinerary(tickets: List[List[String]]): 
List[String] = {
 
    }
}";"";"2020-03-25 15:18:02"
2191;173;"Go";"func findItinerary(tickets [][]string) []string {
 
}";"";"2020-03-25 15:18:02"
2192;173;"Kotlin";"class Solution {
    fun findItinerary(tickets: List<List<String>>): 
List<String> {
 
    }
}";"";"2020-03-25 15:18:02"
2193;173;"Python3";"class Solution:
    def findItinerary(self, tickets: List[List[str]]
) -> List[str]:";"";"2020-03-25 15:18:02"
2194;173;"JavaScript";"/**
 * @param {string[][]} tickets
 * @return {string[]}
 */
var findItinerary = function(tickets) {
 
};";"";"2020-03-25 15:18:02"
2195;173;"PHP";"class Solution {
 
    /**
     * @param String[][] $tickets
     * @return String[]
     */
    function findItinerary($tickets) {
        
    }
}";"";"2020-03-25 15:18:02"
2196;173;"Swift";"class Solution {
    func findItinerary(_ tickets: [[String]]) -> 
[String] {
        
    }
}";"";"2020-03-25 15:18:02"
2197;173;"Ruby";"# @param {String[][]} tickets";"";"2020-03-25 15:18:02"
2198;173;"Python";"class Solution(object):
    def findItinerary(self, tickets):
        """"""
        :type tickets: List[List[str]]
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:02"
2199;174;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode MirrorTree(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:02"
2200;174;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode mirrorTree(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:02"
2201;174;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn mirror_tree(root: 
Option<Rc<RefCell<TreeNode>>>) -> 
Option<Rc<RefCell<TreeNode>>> {
 
    }";"";"2020-03-25 15:18:02"
2202;174;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* mirrorTree(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:02"
2203;174;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def mirrorTree(root: TreeNode): TreeNode = {
 
    }
}";"";"2020-03-25 15:18:02"
2204;174;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func mirrorTree(root *TreeNode) *TreeNode {
 
}";"";"2020-03-25 15:18:02"
2205;174;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun mirrorTree(root: TreeNode?): TreeNode? {
 
    }
}";"";"2020-03-25 15:18:02"
2206;174;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def mirrorTree(self, root: TreeNode) -> 
TreeNode:";"";"2020-03-25 15:18:02"
2207;174;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {TreeNode}
 */
var mirrorTree = function(root) {
 
};";"";"2020-03-25 15:18:02"
2208;174;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return TreeNode
     */
    function mirrorTree($root) {
 
    }
}";"";"2020-03-25 15:18:02"
2209;174;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func mirrorTree(_ root: TreeNode?) -> TreeNode? 
{
 
    }
}";"";"2020-03-25 15:18:02"
2210;174;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {TreeNode}
def mirror_tree(root)
 
end";"";"2020-03-25 15:18:02"
2211;174;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def mirrorTree(self, root):
        """"""
        :type root: TreeNode
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:02"
2212;175;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int MinDepth(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:02"
2213;175;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int minDepth(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:02"
2214;175;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn min_depth(root: 
Option<Rc<RefCell<TreeNode>>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:02"
2215;175;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int minDepth(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:02"
2216;175;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def minDepth(root: TreeNode): Int = {
 
    }
}";"";"2020-03-25 15:18:02"
2217;175;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func minDepth(root *TreeNode) int {
 
}";"";"2020-03-25 15:18:02"
2218;175;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun minDepth(root: TreeNode?): Int {
 
    }
}";"";"2020-03-25 15:18:02"
2219;175;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def minDepth(self, root: TreeNode) -> int:";"";"2020-03-25 15:18:02"
2220;175;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var minDepth = function(root) {
 
};";"";"2020-03-25 15:18:02"
2221;175;"PHP";"/**";"";"2020-03-25 15:18:02"
2222;175;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func minDepth(_ root: TreeNode?) -> Int {
        
    }
}";"";"2020-03-25 15:18:02"
2223;175;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer}
def min_depth(root)
 
end";"";"2020-03-25 15:18:02"
2224;175;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def minDepth(self, root):
        """"""
        :type root: TreeNode
        :rtype: int
        """"""";"";"2020-03-25 15:18:02"
2225;176;"C#";"public class Solution {
    public int[][] FlipAndInvertImage(int[][] A) {
 
    }
}";"";"2020-03-25 15:18:02"
2226;176;"Java";"class Solution {
    public int[][] flipAndInvertImage(int[][] A) {
 
    }
}";"";"2020-03-25 15:18:02"
2227;176;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** flipAndInvertImage(int** A, int ASize, int* 
AColSize, int* returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:02"
2228;176;"Rust";"impl Solution {
    pub fn flip_and_invert_image(a: Vec<Vec<i32>>) 
-> Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:02"
2229;176;"Scala";"object Solution {
    def flipAndInvertImage(A: Array[Array[Int]]): 
Array[Array[Int]] = {
 
    }
}";"";"2020-03-25 15:18:02"
2230;176;"Go";"func flipAndInvertImage(A [][]int) [][]int {
 
}";"";"2020-03-25 15:18:02"
2231;176;"Kotlin";"class Solution {
    fun flipAndInvertImage(A: Array<IntArray>): 
Array<IntArray> {
 
    }
}";"";"2020-03-25 15:18:02"
2232;176;"Python3";"class Solution:
    def flipAndInvertImage(self, A: List[List[int]])
 -> List[List[int]]:";"";"2020-03-25 15:18:02"
2233;176;"JavaScript";"/**
 * @param {number[][]} A
 * @return {number[][]}
 */
var flipAndInvertImage = function(A) {
 
};";"";"2020-03-25 15:18:02"
2234;176;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $A
     * @return Integer[][]
     */
    function flipAndInvertImage($A) {
        
    }
}";"";"2020-03-25 15:18:02"
2235;176;"Swift";"class Solution {
    func flipAndInvertImage(_ A: [[Int]]) -> [[Int]]
 {
        
    }
}";"";"2020-03-25 15:18:02"
2236;176;"Ruby";"";"";"2020-03-25 15:18:02"
2237;176;"Python";"class Solution(object):
    def flipAndInvertImage(self, A):
        """"""
        :type A: List[List[int]]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:02"
2238;177;"C#";"public class Solution {
    public bool SearchMatrix(int[,] matrix, int 
target) {
        
    }
}";"";"2020-03-25 15:18:02"
2239;177;"Java";"class Solution {
    public boolean searchMatrix(int[][] matrix, int 
target) {
        
    }
}";"";"2020-03-25 15:18:02"
2240;177;"C";"bool searchMatrix(int** matrix, int matrixRowSize, 
int matrixColSize, int target) {
    
}";"";"2020-03-25 15:18:02"
2241;177;"Python3";"class Solution:
    def searchMatrix(self, matrix, target):
        """"""
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:02"
2242;177;"JavaScript";"/**
 * @param {number[][]} matrix
 * @param {number} target
 * @return {boolean}
 */
var searchMatrix = function(matrix, target) {
    
};";"";"2020-03-25 15:18:02"
2243;177;"Ruby";"# @param {Integer[][]} matrix
# @param {Integer} target
# @return {Boolean}
def search_matrix(matrix, target)
    
end";"";"2020-03-25 15:18:02"
2244;177;"Python";"class Solution(object):
    def searchMatrix(self, matrix, target):
        """"""
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:02"
2245;178;"C#";"public class Solution {
    public bool CheckRecord(string s) {
 
    }
}";"";"2020-03-25 15:18:02"
2246;178;"Java";"class Solution {
    public boolean checkRecord(String s) {
 
    }
}";"";"2020-03-25 15:18:02"
2247;178;"C";"bool checkRecord(char * s){
 
}";"";"2020-03-25 15:18:02"
2248;178;"Rust";"impl Solution {
    pub fn check_record(s: String) -> bool {
        
    }
}";"";"2020-03-25 15:18:02"
2249;178;"Scala";"object Solution {
    def checkRecord(s: String): Boolean = {
 
    }
}";"";"2020-03-25 15:18:02"
2250;178;"Go";"func checkRecord(s string) bool {
 
}";"";"2020-03-25 15:18:02"
2251;178;"Kotlin";"class Solution {
    fun checkRecord(s: String): Boolean {
 
    }
}";"";"2020-03-25 15:18:02"
2252;178;"Python3";"class Solution:
    def checkRecord(self, s: str) -> bool:";"";"2020-03-25 15:18:02"
2253;178;"JavaScript";"/**
 * @param {string} s
 * @return {boolean}
 */
var checkRecord = function(s) {
 
};";"";"2020-03-25 15:18:02"
2254;178;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return Boolean
     */
    function checkRecord($s) {
        
    }
}";"";"2020-03-25 15:18:02"
2255;178;"Swift";"class Solution {
    func checkRecord(_ s: String) -> Bool {
        
    }
}";"";"2020-03-25 15:18:02"
2256;178;"Ruby";"# @param {String} s";"";"2020-03-25 15:18:02"
2257;178;"Python";"class Solution(object):
    def checkRecord(self, s):
        """"""
        :type s: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:02"
2258;179;"C#";"public class Solution {
    public int FindNthDigit(int n) {
 
    }
}";"";"2020-03-25 15:18:03"
2259;179;"Java";"class Solution {
    public int findNthDigit(int n) {
 
    }
}";"";"2020-03-25 15:18:03"
2260;179;"Rust";"impl Solution {
    pub fn find_nth_digit(n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:03"
2261;179;"C";"int findNthDigit(int n){
 
}";"";"2020-03-25 15:18:03"
2262;179;"Scala";"object Solution {
    def findNthDigit(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:03"
2263;179;"Go";"func findNthDigit(n int) int {
 
}";"";"2020-03-25 15:18:03"
2264;179;"Kotlin";"class Solution {
    fun findNthDigit(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:03"
2265;179;"Python3";"class Solution:
    def findNthDigit(self, n: int) -> int:";"";"2020-03-25 15:18:03"
2266;179;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var findNthDigit = function(n) {
 
};";"";"2020-03-25 15:18:03"
2267;179;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function findNthDigit($n) {
        
    }
}";"";"2020-03-25 15:18:03"
2268;179;"Swift";"class Solution {
    func findNthDigit(_ n: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:03"
2269;179;"Ruby";"# @param {Integer} n
# @return {Integer}
def find_nth_digit(n)
 
end";"";"2020-03-25 15:18:03"
2270;179;"Python";"class Solution(object):
    def findNthDigit(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:03"
2271;180;"C#";"public class Solution {
    public int FindContentChildren(int[] g, int[] s)
 {
 
    }
}";"";"2020-03-25 15:18:03"
2272;180;"Java";"class Solution {
    public int findContentChildren(int[] g, int[] s)
 {
 
    }
}";"";"2020-03-25 15:18:03"
2273;180;"Rust";"impl Solution {
    pub fn find_content_children(g: Vec<i32>, s: 
Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:03"
2274;180;"C";"int findContentChildren(int* g, int gSize, int* s, 
int sSize){
 
}";"";"2020-03-25 15:18:03"
2275;180;"Scala";"object Solution {
    def findContentChildren(g: Array[Int], s: Array
[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:03"
2276;180;"Go";"func findContentChildren(g []int, s []int) int {
 
}";"";"2020-03-25 15:18:03"
2277;180;"Kotlin";"class Solution {
    fun findContentChildren(g: IntArray, s: 
IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:03"
2278;180;"Python3";"class Solution:
    def findContentChildren(self, g: List[int], s: 
List[int]) -> int:";"";"2020-03-25 15:18:03"
2279;180;"JavaScript";"/**
 * @param {number[]} g
 * @param {number[]} s
 * @return {number}
 */
var findContentChildren = function(g, s) {
 
};";"";"2020-03-25 15:18:03"
2280;180;"PHP";"class Solution {
 
    /**
     * @param Integer[] $g
     * @param Integer[] $s
     * @return Integer
     */
    function findContentChildren($g, $s) {
        
    }
}";"";"2020-03-25 15:18:03"
2281;180;"Swift";"class Solution {
    func findContentChildren(_ g: [Int], _ s: [Int])
 -> Int {
        
    }
}";"";"2020-03-25 15:18:03"
2282;180;"Ruby";"# @param {Integer[]} g
# @param {Integer[]} s
# @return {Integer}
def find_content_children(g, s)
 
end";"";"2020-03-25 15:18:03"
2283;180;"Python";"class Solution(object):
    def findContentChildren(self, g, s):
        """"""
        :type g: List[int]
        :type s: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:03"
2284;181;"C#";"public class Solution {
    public string LongestWord(string[] words) {
 
    }
}";"";"2020-03-25 15:18:03"
2285;181;"Java";"class Solution {
    public String longestWord(String[] words) {
 
    }
}";"";"2020-03-25 15:18:03"
2286;181;"C";"char * longestWord(char ** words, int wordsSize){
 
}";"";"2020-03-25 15:18:03"
2287;181;"Rust";"impl Solution {
    pub fn longest_word(words: Vec<String>) -> 
String {
        
    }
}";"";"2020-03-25 15:18:03"
2288;181;"Scala";"object Solution {
    def longestWord(words: Array[String]): String = 
{
 
    }
}";"";"2020-03-25 15:18:03"
2289;181;"Python3";"class Solution:
    def longestWord(self, words: List[str]) -> str:";"";"2020-03-25 15:18:03"
2290;181;"JavaScript";"/**
 * @param {string[]} words
 * @return {string}
 */
var longestWord = function(words) {
 
};";"";"2020-03-25 15:18:03"
2291;181;"Go";"func longestWord(words []string) string {
 
}";"";"2020-03-25 15:18:03"
2292;181;"PHP";"class Solution {
 
    /**
     * @param String[] $words
     * @return String
     */
    function longestWord($words) {
        
    }
}";"";"2020-03-25 15:18:03"
2293;181;"Ruby";"# @param {String[]} words
# @return {String}
def longest_word(words)
 
end";"";"2020-03-25 15:18:03"
2294;181;"Python";"class Solution(object):
    def longestWord(self, words):
        """"""
        :type words: List[str]
        :rtype: str
        """"""";"";"2020-03-25 15:18:03"
2295;181;"Kotlin";"class Solution {
    fun longestWord(words: Array<String>): String {
 
    }
}";"";"2020-03-25 15:18:03"
2296;182;"C#";"public class Solution {
    public int HammingDistance(int x, int y) {
 
    }
}";"";"2020-03-25 15:18:03"
2297;182;"Java";"class Solution {
    public int hammingDistance(int x, int y) {
 
    }
}";"";"2020-03-25 15:18:03"
2298;182;"C";"int hammingDistance(int x, int y){
 
}";"";"2020-03-25 15:18:03"
2299;182;"Rust";"impl Solution {
    pub fn hamming_distance(x: i32, y: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:03"
2300;182;"Scala";"object Solution {
    def hammingDistance(x: Int, y: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:03"
2301;182;"Go";"func hammingDistance(x int, y int) int {
 
}";"";"2020-03-25 15:18:03"
2302;182;"Kotlin";"class Solution {
    fun hammingDistance(x: Int, y: Int): Int {
 
    }
}";"";"2020-03-25 15:18:03"
2303;182;"Python3";"class Solution:
    def hammingDistance(self, x: int, y: int) -> 
int:";"";"2020-03-25 15:18:03"
2304;182;"JavaScript";"/**
 * @param {number} x
 * @param {number} y
 * @return {number}
 */
var hammingDistance = function(x, y) {
 
};";"";"2020-03-25 15:18:03"
2305;182;"PHP";"class Solution {
 
    /**
     * @param Integer $x
     * @param Integer $y
     * @return Integer
     */
    function hammingDistance($x, $y) {
        
    }
}";"";"2020-03-25 15:18:03"
2306;182;"Swift";"class Solution {
    func hammingDistance(_ x: Int, _ y: Int) -> Int 
{
        
    }
}";"";"2020-03-25 15:18:03"
2307;182;"Ruby";"# @param {Integer} x
# @param {Integer} y
# @return {Integer}
def hamming_distance(x, y)
 
end";"";"2020-03-25 15:18:03"
2308;182;"Python";"class Solution(object):
    def hammingDistance(self, x, y):
        """"""
        :type x: int
        :type y: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:03"
2309;183;"C#";"public class Solution {
    public int CuttingRope(int n) {
 
    }
}";"";"2020-03-25 15:18:03"
2310;183;"Java";"class Solution {
    public int cuttingRope(int n) {
 
    }
}";"";"2020-03-25 15:18:03"
2311;183;"C";"int cuttingRope(int n){
 
}";"";"2020-03-25 15:18:03"
2312;183;"Rust";"impl Solution {
    pub fn cutting_rope(n: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:03"
2313;183;"Scala";"object Solution {
    def cuttingRope(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:03"
2314;183;"Go";"func cuttingRope(n int) int {
 
}";"";"2020-03-25 15:18:03"
2315;183;"Kotlin";"class Solution {
    fun cuttingRope(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:03"
2316;183;"Python3";"class Solution:
    def cuttingRope(self, n: int) -> int:";"";"2020-03-25 15:18:03"
2317;183;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var cuttingRope = function(n) {
 
};";"";"2020-03-25 15:18:03"
2318;183;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function cuttingRope($n) {
 
    }
}";"";"2020-03-25 15:18:03"
2319;183;"Swift";"class Solution {
    func cuttingRope(_ n: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:03"
2320;183;"Ruby";"# @param {Integer} n
# @return {Integer}
def cutting_rope(n)
 
end";"";"2020-03-25 15:18:03"
2321;183;"Python";"class Solution(object):
    def cuttingRope(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:03"
2322;184;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int LongestUnivaluePath(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:03"
2323;184;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int longestUnivaluePath(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:03"
2324;184;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int longestUnivaluePath(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:03"
2325;184;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def longestUnivaluePath(self, root: TreeNode) 
-> int:";"";"2020-03-25 15:18:03"
2326;184;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var longestUnivaluePath = function(root) {
 
};";"";"2020-03-25 15:18:03"
2327;184;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer}
def longest_univalue_path(root)
 
end";"";"2020-03-25 15:18:03"
2328;184;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def longestUnivaluePath(self, root):
        """"""
        :type root: TreeNode
        :rtype: int
        """"""";"";"2020-03-25 15:18:03"
2329;185;"C#";"public class Solution {
    public string AlphabetBoardPath(string target) {
 
    }
}";"";"2020-03-25 15:18:03"
2330;185;"Java";"class Solution {
    public String alphabetBoardPath(String target) {
 
    }
}";"";"2020-03-25 15:18:03"
2331;185;"C";"char * alphabetBoardPath(char * target){
 
}";"";"2020-03-25 15:18:03"
2332;185;"Rust";"impl Solution {
    pub fn alphabet_board_path(target: String) -> 
String {
        
    }
}";"";"2020-03-25 15:18:03"
2333;185;"Scala";"object Solution {
    def alphabetBoardPath(target: String): String = 
{
 
    }
}";"";"2020-03-25 15:18:03"
2334;185;"Go";"func alphabetBoardPath(target string) string {
 
}";"";"2020-03-25 15:18:03"
2335;185;"Kotlin";"class Solution {
    fun alphabetBoardPath(target: String): String {
 
    }
}";"";"2020-03-25 15:18:03"
2336;185;"Python3";"class Solution:
    def alphabetBoardPath(self, target: str) -> str:";"";"2020-03-25 15:18:03"
2337;185;"JavaScript";"/**
 * @param {string} target
 * @return {string}
 */
var alphabetBoardPath = function(target) {
 
};";"";"2020-03-25 15:18:03"
2338;185;"PHP";"class Solution {
 
    /**
     * @param String $target
     * @return String
     */
    function alphabetBoardPath($target) {
        
    }
}";"";"2020-03-25 15:18:03"
2339;185;"Swift";"class Solution {
    func alphabetBoardPath(_ target: String) -> 
String {
        
    }
}";"";"2020-03-25 15:18:03"
2340;185;"Ruby";"# @param {String} target";"";"2020-03-25 15:18:03"
2341;185;"Python";"class Solution(object):
    def alphabetBoardPath(self, target):
        """"""
        :type target: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:03"
2342;186;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode 
root, TreeNode p, TreeNode q) {
        
    }
}";"";"2020-03-25 15:18:03"
2343;186;"C++";"/**";"";"2020-03-25 15:18:03"
2344;186;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
struct TreeNode* lowestCommonAncestor(struct 
TreeNode* root, struct TreeNode* p, struct 
TreeNode* q) {
    
}";"";"2020-03-25 15:18:03"
2345;186;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode',
 p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':";"";"2020-03-25 15:18:03"
2346;186;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        """"""
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:03"
2347;187;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public bool LeafSimilar(TreeNode root1, 
TreeNode root2) {
 
    }
}";"";"2020-03-25 15:18:03"
2348;187;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean leafSimilar(TreeNode root1, 
TreeNode root2) {
 
    }
}";"";"2020-03-25 15:18:03"
2349;187;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn leaf_similar(root1: 
Option<Rc<RefCell<TreeNode>>>, root2: 
Option<Rc<RefCell<TreeNode>>>) -> bool {
        
    }";"";"2020-03-25 15:18:03"
2350;187;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
bool leafSimilar(struct TreeNode* root1, struct 
TreeNode* root2){
 
}";"";"2020-03-25 15:18:03"
2351;187;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def leafSimilar(root1: TreeNode, root2: 
TreeNode): Boolean = {
 
    }
}";"";"2020-03-25 15:18:03"
2352;187;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func leafSimilar(root1 *TreeNode, root2 *TreeNode) 
bool {
 
}";"";"2020-03-25 15:18:03"
2353;187;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun leafSimilar(root1: TreeNode?, root2: 
TreeNode?): Boolean {
 
    }
}";"";"2020-03-25 15:18:03"
2354;187;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def leafSimilar(self, root1: TreeNode, root2: 
TreeNode) -> bool:";"";"2020-03-25 15:18:03"
2355;187;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root1
 * @param {TreeNode} root2
 * @return {boolean}
 */
var leafSimilar = function(root1, root2) {
 
};";"";"2020-03-25 15:18:03"
2356;187;"PHP";"/**";"";"2020-03-25 15:18:03"
2357;187;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func leafSimilar(_ root1: TreeNode?, _ root2: 
TreeNode?) -> Bool {
        
    }
}";"";"2020-03-25 15:18:03"
2358;187;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root1
# @param {TreeNode} root2
# @return {Boolean}
def leaf_similar(root1, root2)
 
end";"";"2020-03-25 15:18:03"
2359;187;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def leafSimilar(self, root1, root2):
        """"""
        :type root1: TreeNode
        :type root2: TreeNode
        :rtype: bool
        """"""";"";"2020-03-25 15:18:03"
2360;188;"C#";"public class Solution {
    public IList<string> WordSubsets(string[] A, 
string[] B) {
 
    }
}";"";"2020-03-25 15:18:03"
2361;188;"Java";"class Solution {
    public List<String> wordSubsets(String[] A, 
String[] B) {
 
    }
}";"";"2020-03-25 15:18:03"
2362;188;"Rust";"impl Solution {
    pub fn word_subsets(a: Vec<String>, b: 
Vec<String>) -> Vec<String> {
        
    }
}";"";"2020-03-25 15:18:03"
2363;188;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** wordSubsets(char ** A, int ASize, char ** B,
 int BSize, int* returnSize){
 
}";"";"2020-03-25 15:18:03"
2364;188;"Scala";"object Solution {
    def wordSubsets(A: Array[String], B: Array
[String]): List[String] = {
 
    }
}";"";"2020-03-25 15:18:03"
2365;188;"Go";"func wordSubsets(A []string, B []string) []string {
 
}";"";"2020-03-25 15:18:03"
2366;188;"Kotlin";"class Solution {
    fun wordSubsets(A: Array<String>, B: 
Array<String>): List<String> {
 
    }
}";"";"2020-03-25 15:18:03"
2367;188;"Python3";"class Solution:
    def wordSubsets(self, A: List[str], B: List[str]
) -> List[str]:";"";"2020-03-25 15:18:03"
2368;188;"JavaScript";"/**
 * @param {string[]} A
 * @param {string[]} B
 * @return {string[]}
 */
var wordSubsets = function(A, B) {
 
};";"";"2020-03-25 15:18:03"
2369;188;"PHP";"class Solution {";"";"2020-03-25 15:18:03"
2370;188;"Swift";"class Solution {
    func wordSubsets(_ A: [String], _ B: [String]) 
-> [String] {
        
    }
}";"";"2020-03-25 15:18:03"
2371;188;"Ruby";"# @param {String[]} a
# @param {String[]} b
# @return {String[]}
def word_subsets(a, b)
 
end";"";"2020-03-25 15:18:03"
2372;188;"Python";"class Solution(object):
    def wordSubsets(self, A, B):
        """"""
        :type A: List[str]
        :type B: List[str]
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:03"
2373;189;"C#";"public class MinStack {
 
    /** initialize your data structure here. */
    public MinStack() {
 
    }
    
    public void Push(int x) {
 
    }
    
    public void Pop() {
 
    }
    
    public int Top() {
 
    }
    
    public int GetMin() {
 
    }
}
 
/**
 * Your MinStack object will be instantiated and ";"";"2020-03-25 15:18:03"
2374;189;"Java";"class MinStack {
 
    /** initialize your data structure here. */
    public MinStack() {
 
    }
    
    public void push(int x) {
 
    }
    
    public void pop() {
 
    }
    
    public int top() {
 
    }
    
    public int getMin() {
 
    }
}
 
/**
 * Your MinStack object will be instantiated and ";"";"2020-03-25 15:18:03"
2375;189;"C";"typedef struct {
 
} MinStack;
 
/** initialize your data structure here. */
 
MinStack* minStackCreate() {
 
}
 
void minStackPush(MinStack* obj, int x) {
 
}
 
void minStackPop(MinStack* obj) {
 
}
 
int minStackTop(MinStack* obj) {
 
}
 
int minStackGetMin(MinStack* obj) {
 
}
 ";"";"2020-03-25 15:18:03"
2376;189;"Rust";"struct MinStack {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl MinStack {
 
    /** initialize your data structure here. */
    fn new() -> Self {
 
    }
    
    fn push(&self, x: i32) {
 
    }
    
    fn pop(&self) {
 
    }
    ";"";"2020-03-25 15:18:03"
2377;189;"Scala";"class MinStack() {
 
    /** initialize your data structure here. */
 
 
    def push(x: Int) {
 
    }
 
    def pop() {
 
    }
 
    def top(): Int = {
 
    }
 
    def getMin(): Int = {
 
    }
 
}
 
/**
 * Your MinStack object will be instantiated and 
called as such:";"";"2020-03-25 15:18:03"
2378;189;"Go";"type MinStack struct {
 
}
 
 
/** initialize your data structure here. */
func Constructor() MinStack {
 
}
 
 
func (this *MinStack) Push(x int)  {
 
}
 
 
func (this *MinStack) Pop()  {
 
}
 
 
func (this *MinStack) Top() int {
 
}
 
 ";"";"2020-03-25 15:18:03"
2379;189;"Kotlin";"class MinStack() {
 
    /** initialize your data structure here. */
 
 
    fun push(x: Int) {
 
    }
 
    fun pop() {
 
    }
 
    fun top(): Int {
 
    }
 
    fun getMin(): Int {
 
    }
 
}
 
/**
 * Your MinStack object will be instantiated and 
called as such:";"";"2020-03-25 15:18:03"
2380;189;"Python3";"class MinStack:
 
    def __init__(self):
        """"""
        initialize your data structure here.
        """"""
 
 
    def push(self, x: int) -> None:
 
 
    def pop(self) -> None:
 
 
    def top(self) -> int:
 
 
    def getMin(self) -> int:
 
 
 
# Your MinStack object will be instantiated and 
called as such:
# obj = MinStack()
# obj.push(x)
# obj.pop()";"";"2020-03-25 15:18:03"
2381;189;"JavaScript";"/**
 * initialize your data structure here.
 */
var MinStack = function() {
 
};
 
/** 
 * @param {number} x
 * @return {void}
 */
MinStack.prototype.push = function(x) {
 
};
 
/**
 * @return {void}
 */
MinStack.prototype.pop = function() {
 
};
 
/**
 * @return {number}
 */
MinStack.prototype.top = function() {";"";"2020-03-25 15:18:03"
2382;189;"PHP";"class MinStack {
    /**
     * initialize your data structure here.
     */
    function __construct() {
 
    }
 
    /**
     * @param Integer $x
     * @return NULL
     */
    function push($x) {
 
    }
 
    /**
     * @return NULL
     */
    function pop() {
 
    }
 
    /**
     * @return Integer
     */";"";"2020-03-25 15:18:03"
2383;189;"Swift";"class MinStack {
 
    /** initialize your data structure here. */
    init() {
 
    }
    
    func push(_ x: Int) {
 
    }
    
    func pop() {
 
    }
    
    func top() -> Int {
 
    }
    
    func getMin() -> Int {
 
    }
}
 
/**
 * Your MinStack object will be instantiated and ";"";"2020-03-25 15:18:03"
2384;189;"Ruby";"class MinStack";"";"2020-03-25 15:18:03"
2385;189;"Python";"class MinStack(object):
 
    def __init__(self):
        """"""
        initialize your data structure here.
        """"""
 
 
    def push(self, x):
        """"""
        :type x: int
        :rtype: None
        """"""
 
 
    def pop(self):
        """"""
        :rtype: None
        """"""
 
 
    def top(self):
        """"""
        :rtype: int
        """"""
 ";"";"2020-03-25 15:18:03"
2386;190;"C#";"public class Solution {
    public int[][] FloodFill(int[][] image, int sr, 
int sc, int newColor) {
 
    }
}";"";"2020-03-25 15:18:03"
2387;190;"Java";"class Solution {
    public int[][] floodFill(int[][] image, int sr, 
int sc, int newColor) {
 
    }
}";"";"2020-03-25 15:18:03"
2388;190;"Rust";"impl Solution {
    pub fn flood_fill(image: Vec<Vec<i32>>, sr: i32,
 sc: i32, new_color: i32) -> Vec<Vec<i32>> {
 
    }
}";"";"2020-03-25 15:18:03"
2389;190;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** floodFill(int** image, int imageSize, int* 
imageColSize, int sr, int sc, int newColor, int* 
returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:03"
2390;190;"Scala";"object Solution {
    def floodFill(image: Array[Array[Int]], sr: Int,
 sc: Int, newColor: Int): Array[Array[Int]] = {
 
    }
}";"";"2020-03-25 15:18:03"
2391;190;"Go";"func floodFill(image [][]int, sr int, sc int, 
newColor int) [][]int {
 
}";"";"2020-03-25 15:18:03"
2392;190;"Kotlin";"class Solution {
    fun floodFill(image: Array<IntArray>, sr: Int, 
sc: Int, newColor: Int): Array<IntArray> {
 
    }
}";"";"2020-03-25 15:18:03"
2393;190;"Python3";"class Solution:
    def floodFill(self, image: List[List[int]], sr: 
int, sc: int, newColor: int) -> List[List[int]]:";"";"2020-03-25 15:18:03"
2394;190;"JavaScript";"/**
 * @param {number[][]} image
 * @param {number} sr
 * @param {number} sc
 * @param {number} newColor
 * @return {number[][]}
 */
var floodFill = function(image, sr, sc, newColor) {
 
};";"";"2020-03-25 15:18:03"
2395;190;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $image
     * @param Integer $sr
     * @param Integer $sc
     * @param Integer $newColor
     * @return Integer[][]
     */
    function floodFill($image, $sr, $sc, $newColor) 
{
 
    }
}";"";"2020-03-25 15:18:03"
2396;190;"Swift";"class Solution {
    func floodFill(_ image: [[Int]], _ sr: Int, _ 
sc: Int, _ newColor: Int) -> [[Int]] {
 
    }
}";"";"2020-03-25 15:18:03"
2397;190;"Ruby";"# @param {Integer[][]} image
# @param {Integer} sr
# @param {Integer} sc
# @param {Integer} new_color
# @return {Integer[][]}
def flood_fill(image, sr, sc, new_color)
 
end";"";"2020-03-25 15:18:03"
2398;190;"Python";"class Solution(object):
    def floodFill(self, image, sr, sc, newColor):
        """"""
        :type image: List[List[int]]
        :type sr: int
        :type sc: int
        :type newColor: int
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:03"
2399;191;"C#";"public class Solution {
    public int MinAreaRect(int[][] points) {
 
    }
}";"";"2020-03-25 15:18:03"
2400;191;"Java";"class Solution {
    public int minAreaRect(int[][] points) {
 
    }
}";"";"2020-03-25 15:18:03"
2401;191;"C";"int minAreaRect(int** points, int pointsSize, int* 
pointsColSize){
 
}";"";"2020-03-25 15:18:03"
2402;191;"Rust";"impl Solution {
    pub fn min_area_rect(points: Vec<Vec<i32>>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:03"
2403;191;"Scala";"object Solution {
    def minAreaRect(points: Array[Array[Int]]): Int 
= {
 
    }
}";"";"2020-03-25 15:18:03"
2404;191;"Go";"func minAreaRect(points [][]int) int {
 
}";"";"2020-03-25 15:18:03"
2405;191;"Kotlin";"class Solution {
    fun minAreaRect(points: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:03"
2406;191;"Python3";"class Solution:
    def minAreaRect(self, points: List[List[int]]) 
-> int:";"";"2020-03-25 15:18:03"
2407;191;"JavaScript";"/**
 * @param {number[][]} points
 * @return {number}
 */
var minAreaRect = function(points) {
 
};";"";"2020-03-25 15:18:03"
2408;191;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $points
     * @return Integer
     */
    function minAreaRect($points) {
        
    }
}";"";"2020-03-25 15:18:03"
2409;191;"Swift";"class Solution {
    func minAreaRect(_ points: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:03"
2410;191;"Ruby";"# @param {Integer[][]} points";"";"2020-03-25 15:18:03"
2411;191;"Python";"class Solution(object):
    def minAreaRect(self, points):
        """"""
        :type points: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:03"
2412;192;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode LowestCommonAncestor(TreeNode 
root, TreeNode p, TreeNode q) {
 
    }
}";"";"2020-03-25 15:18:03"
2413;192;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode 
root, TreeNode p, TreeNode q) {
 
    }
}";"";"2020-03-25 15:18:03"
2414;192;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* lowestCommonAncestor(struct 
TreeNode* root, struct TreeNode* p, struct 
TreeNode* q){
 
}";"";"2020-03-25 15:18:03"
2415;192;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def lowestCommonAncestor(self, root: TreeNode, 
p: TreeNode, q: TreeNode) -> TreeNode:";"";"2020-03-25 15:18:03"
2416;192;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {TreeNode} p
 * @param {TreeNode} q
 * @return {TreeNode}
 */
var lowestCommonAncestor = function(root, p, q) {
 
};";"";"2020-03-25 15:18:03"
2417;192;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:03"
2418;192;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        """"""
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:03"
2419;193;"C#";"public class Solution {
    public IList<IList<int>> Subsets(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:03"
2420;193;"Java";"class Solution {
    public List<List<Integer>> subsets(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:03"
2421;193;"Rust";"impl Solution {
    pub fn subsets(nums: Vec<i32>) -> Vec<Vec<i32>> 
{
 
    }
}";"";"2020-03-25 15:18:03"
2422;193;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** subsets(int* nums, int numsSize, int* 
returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:03"
2423;193;"Scala";"object Solution {
    def subsets(nums: Array[Int]): List[List[Int]] 
= {
 
    }
}";"";"2020-03-25 15:18:03"
2424;193;"Go";"func subsets(nums []int) [][]int {
 
}";"";"2020-03-25 15:18:03"
2425;193;"Kotlin";"class Solution {
    fun subsets(nums: IntArray): List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:03"
2426;193;"Python3";"class Solution:
    def subsets(self, nums: List[int]) -> List[List
[int]]:";"";"2020-03-25 15:18:03"
2427;193;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number[][]}
 */
var subsets = function(nums) {
 
};";"";"2020-03-25 15:18:03"
2428;193;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer[][]
     */
    function subsets($nums) {
 
    }
}";"";"2020-03-25 15:18:03"
2429;193;"Swift";"class Solution {
    func subsets(_ nums: [Int]) -> [[Int]] {
 
    }
}";"";"2020-03-25 15:18:03"
2430;193;"Ruby";"# @param {Integer[]} nums
# @return {Integer[][]}
def subsets(nums)
 
end";"";"2020-03-25 15:18:03"
2431;193;"Python";"class Solution(object):
    def subsets(self, nums):
        """"""
        :type nums: List[int]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:03"
2432;194;"C#";"public class AnimalShelf {
 
    public AnimalShelf() {
 
    }
    
    public void Enqueue(int[] animal) {
 
    }
    
    public int[] DequeueAny() {
 
    }
    
    public int[] DequeueDog() {
 
    }
    
    public int[] DequeueCat() {
 
    }
}
 
/**
 * Your AnimalShelf object will be instantiated and 
called as such:";"";"2020-03-25 15:18:03"
2433;194;"Java";"class AnimalShelf {
 
    public AnimalShelf() {
 
    }
    
    public void enqueue(int[] animal) {
 
    }
    
    public int[] dequeueAny() {
 
    }
    
    public int[] dequeueDog() {
 
    }
    
    public int[] dequeueCat() {
 
    }
}
 
/**
 * Your AnimalShelf object will be instantiated and 
called as such:";"";"2020-03-25 15:18:03"
2434;194;"C";"typedef struct {
 
} AnimalShelf;
 
 
AnimalShelf* animalShelfCreate() {
 
}
 
void animalShelfEnqueue(AnimalShelf* obj, int* 
animal, int animalSize) {
 
}
 
int* animalShelfDequeueAny(AnimalShelf* obj, int* 
retSize) {
 
}
 
int* animalShelfDequeueDog(AnimalShelf* obj, int* 
retSize) {
 
}
 
int* animalShelfDequeueCat(AnimalShelf* obj, int* 
retSize) {";"";"2020-03-25 15:18:03"
2435;194;"Rust";"struct AnimalShelf {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl AnimalShelf {
 
    fn new() -> Self {
 
    }
    
    fn enqueue(&self, animal: Vec<i32>) {
 
    }
    
    fn dequeue_any(&self) -> Vec<i32> {
 
    }
    
    fn dequeue_dog(&self) -> Vec<i32> {";"";"2020-03-25 15:18:03"
2436;194;"Scala";"class AnimalShelf() {
 
    def enqueue(animal: Array[Int]) {
 
    }
 
    def dequeueAny(): Array[Int] = {
 
    }
 
    def dequeueDog(): Array[Int] = {
 
    }
 
    def dequeueCat(): Array[Int] = {
 
    }
 
}
 
/**
 * Your AnimalShelf object will be instantiated and 
called as such:
 * var obj = new AnimalShelf()
 * obj.enqueue(animal)
 * var param_2 = obj.dequeueAny()";"";"2020-03-25 15:18:03"
2437;194;"Go";"type AnimalShelf struct {
 
}
 
 
func Constructor() AnimalShelf {
 
}
 
 
func (this *AnimalShelf) Enqueue(animal []int)  {
 
}
 
 
func (this *AnimalShelf) DequeueAny() []int {
 
}
 
 
func (this *AnimalShelf) DequeueDog() []int {
 
}
 
 
func (this *AnimalShelf) DequeueCat() []int {";"";"2020-03-25 15:18:03"
2438;194;"Kotlin";"class AnimalShelf() {
 
    fun enqueue(animal: IntArray) {
 
    }
 
    fun dequeueAny(): IntArray {
 
    }
 
    fun dequeueDog(): IntArray {
 
    }
 
    fun dequeueCat(): IntArray {
 
    }
 
}
 
/**
 * Your AnimalShelf object will be instantiated and 
called as such:
 * var obj = AnimalShelf()
 * obj.enqueue(animal)
 * var param_2 = obj.dequeueAny()";"";"2020-03-25 15:18:03"
2439;194;"Python3";"class AnimalShelf:
 
    def __init__(self):
 
 
    def enqueue(self, animal: List[int]) -> None:
 
 
    def dequeueAny(self) -> List[int]:
 
 
    def dequeueDog(self) -> List[int]:
 
 
    def dequeueCat(self) -> List[int]:
 
 
 
# Your AnimalShelf object will be instantiated and 
called as such:
# obj = AnimalShelf()
# obj.enqueue(animal)
# param_2 = obj.dequeueAny()
# param_3 = obj.dequeueDog()
# param_4 = obj.dequeueCat()";"";"2020-03-25 15:18:03"
2440;194;"JavaScript";"var AnimalShelf = function() {
 
};
 
/** 
 * @param {number[]} animal
 * @return {void}
 */
AnimalShelf.prototype.enqueue = function(animal) {
 
};
 
/**
 * @return {number[]}
 */
AnimalShelf.prototype.dequeueAny = function() {
 
};
 
/**
 * @return {number[]}
 */
AnimalShelf.prototype.dequeueDog = function() {
 
};
 ";"";"2020-03-25 15:18:03"
2441;194;"PHP";"class AnimalShelf {
    /**
     */
    function __construct() {
 
    }
 
    /**
     * @param Integer[] $animal
     * @return NULL
     */
    function enqueue($animal) {
 
    }
 
    /**
     * @return Integer[]
     */
    function dequeueAny() {
 
    }
 
    /**
     * @return Integer[]
     */
    function dequeueDog() {";"";"2020-03-25 15:18:03"
2442;194;"Swift";"class AnimalShelf {
 
    init() {
 
    }
    
    func enqueue(_ animal: [Int]) {
 
    }
    
    func dequeueAny() -> [Int] {
 
    }
    
    func dequeueDog() -> [Int] {
 
    }
    
    func dequeueCat() -> [Int] {
 
    }
}
 
/**
 * Your AnimalShelf object will be instantiated and 
called as such:";"";"2020-03-25 15:18:03"
2443;194;"Ruby";"class AnimalShelf";"";"2020-03-25 15:18:03"
2444;194;"Python";"class AnimalShelf(object):
 
    def __init__(self):
 
 
    def enqueue(self, animal):
        """"""
        :type animal: List[int]
        :rtype: None
        """"""
 
 
    def dequeueAny(self):
        """"""
        :rtype: List[int]
        """"""
 
 
    def dequeueDog(self):
        """"""
        :rtype: List[int]
        """"""
 
 
    def dequeueCat(self):
        """"""";"";"2020-03-25 15:18:03"
2445;195;"C#";"public class Solution {
    public int MinFlips(int a, int b, int c) {
        
    }
}";"";"2020-03-25 15:18:03"
2446;195;"Java";"class Solution {
    public int minFlips(int a, int b, int c) {
 
    }
}";"";"2020-03-25 15:18:03"
2447;195;"Rust";"impl Solution {
    pub fn min_flips(a: i32, b: i32, c: i32) -> i32 
{
 
    }
}";"";"2020-03-25 15:18:03"
2448;195;"C";"int minFlips(int a, int b, int c){
 
}";"";"2020-03-25 15:18:03"
2449;195;"Scala";"object Solution {
    def minFlips(a: Int, b: Int, c: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:03"
2450;195;"Go";"func minFlips(a int, b int, c int) int {
 
}";"";"2020-03-25 15:18:03"
2451;195;"Kotlin";"class Solution {
    fun minFlips(a: Int, b: Int, c: Int): Int {
 
    }
}";"";"2020-03-25 15:18:03"
2452;195;"Python3";"class Solution:
    def minFlips(self, a: int, b: int, c: int) -> 
int:";"";"2020-03-25 15:18:03"
2453;195;"JavaScript";"/**
 * @param {number} a
 * @param {number} b
 * @param {number} c
 * @return {number}
 */
var minFlips = function(a, b, c) {
    
};";"";"2020-03-25 15:18:03"
2454;195;"PHP";"class Solution {
 
    /**
     * @param Integer $a
     * @param Integer $b
     * @param Integer $c
     * @return Integer
     */
    function minFlips($a, $b, $c) {
 
    }
}";"";"2020-03-25 15:18:03"
2455;195;"Swift";"class Solution {
    func minFlips(_ a: Int, _ b: Int, _ c: Int) -> 
Int {
 
    }
}";"";"2020-03-25 15:18:03"
2456;195;"Ruby";"# @param {Integer} a
# @param {Integer} b
# @param {Integer} c
# @return {Integer}
def min_flips(a, b, c)
    
end";"";"2020-03-25 15:18:03"
2457;195;"Python";"class Solution(object):
    def minFlips(self, a, b, c):
        """"""
        :type a: int
        :type b: int
        :type c: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:03"
2458;196;"C#";"public class Solution {
    public int MinDeletionSize(string[] A) {
 
    }
}";"";"2020-03-25 15:18:03"
2459;196;"Java";"class Solution {
    public int minDeletionSize(String[] A) {
 
    }
}";"";"2020-03-25 15:18:03"
2460;196;"Rust";"impl Solution {
    pub fn min_deletion_size(a: Vec<String>) -> i32 
{
        
    }
}";"";"2020-03-25 15:18:03"
2461;196;"C";"int minDeletionSize(char ** A, int ASize){
 
}";"";"2020-03-25 15:18:03"
2462;196;"Scala";"object Solution {
    def minDeletionSize(A: Array[String]): Int = {
 
    }
}";"";"2020-03-25 15:18:03"
2463;196;"Go";"func minDeletionSize(A []string) int {
 
}";"";"2020-03-25 15:18:03"
2464;196;"Kotlin";"class Solution {
    fun minDeletionSize(A: Array<String>): Int {
 
    }
}";"";"2020-03-25 15:18:03"
2465;196;"Python3";"class Solution:
    def minDeletionSize(self, A: List[str]) -> int:";"";"2020-03-25 15:18:03"
2466;196;"JavaScript";"/**
 * @param {string[]} A
 * @return {number}
 */
var minDeletionSize = function(A) {
 
};";"";"2020-03-25 15:18:03"
2467;196;"PHP";"class Solution {";"";"2020-03-25 15:18:03"
2468;196;"Swift";"class Solution {
    func minDeletionSize(_ A: [String]) -> Int {
        
    }
}";"";"2020-03-25 15:18:03"
2469;196;"Ruby";"# @param {String[]} a
# @return {Integer}
def min_deletion_size(a)
 
end";"";"2020-03-25 15:18:03"
2470;196;"Python";"class Solution(object):
    def minDeletionSize(self, A):
        """"""
        :type A: List[str]
        :rtype: int
        """"""";"";"2020-03-25 15:18:03"
2471;197;"C#";"public class H2O {";"";"2020-03-25 15:18:04"
2472;197;"Java";"class H2O {
 
    public H2O() {
        
    }
 
    public void hydrogen(Runnable releaseHydrogen) 
throws InterruptedException {
        
        // releaseHydrogen.run() outputs ""H"". Do 
not change or remove this line.
        releaseHydrogen.run();
    }
 
    public void oxygen(Runnable releaseOxygen) 
throws InterruptedException {
        
        // releaseOxygen.run() outputs ""O"". Do not 
change or remove this line.
        releaseOxygen.run();
    }
}";"";"2020-03-25 15:18:04"
2473;197;"C";"typedef struct {
    // User defined data may be declared here.
    
} H2O;
 
H2O* h2oCreate() {
    H2O* obj = (H2O*) malloc(sizeof(H2O));
    
    // Initialize user defined data here.
    
    return obj;
}
 
void hydrogen(H2O* obj) {
    
    // releaseHydrogen() outputs ""H"". Do not change 
or remove this line.
    releaseHydrogen();
}
 
void oxygen(H2O* obj) {
    
    // releaseOxygen() outputs ""O"". Do not change 
or remove this line.
    releaseOxygen();
}";"";"2020-03-25 15:18:04"
2474;197;"Python3";"class H2O:
    def __init__(self):
        pass
 
 
    def hydrogen(self, releaseHydrogen: 'Callable[[]
, None]') -> None:
        
        # releaseHydrogen() outputs ""H"". Do not 
change or remove this line.
        releaseHydrogen()
 
 
    def oxygen(self, releaseOxygen: 'Callable[[], 
None]') -> None:
        
        # releaseOxygen() outputs ""O"". Do not 
change or remove this line.
        releaseOxygen()";"";"2020-03-25 15:18:04"
2475;197;"Python";"class H2O(object):
    def __init__(self):
        pass
 
 
    def hydrogen(self, releaseHydrogen):
        """"""
        :type releaseHydrogen: method
        :rtype: void
        """"""
        
        # releaseHydrogen() outputs ""H"". Do not 
change or remove this line.
        releaseHydrogen()
 
 
    def oxygen(self, releaseOxygen):
        """"""
        :type releaseOxygen: method
        :rtype: void
        """"""
        
        # releaseOxygen() outputs ""O"". Do not 
change or remove this line.
        releaseOxygen()";"";"2020-03-25 15:18:04"
2476;198;"C#";"public class Solution {
    public int[] GetNoZeroIntegers(int n) {
        
    }
}";"";"2020-03-25 15:18:04"
2477;198;"Java";"class Solution {
    public int[] getNoZeroIntegers(int n) {
 
    }
}";"";"2020-03-25 15:18:04"
2478;198;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* getNoZeroIntegers(int n, int* returnSize){
 
}";"";"2020-03-25 15:18:04"
2479;198;"Rust";"impl Solution {
    pub fn get_no_zero_integers(n: i32) -> Vec<i32> 
{
 
    }
}";"";"2020-03-25 15:18:04"
2480;198;"Scala";"object Solution {
    def getNoZeroIntegers(n: Int): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:04"
2481;198;"Go";"func getNoZeroIntegers(n int) []int {
 
}";"";"2020-03-25 15:18:04"
2482;198;"Kotlin";"class Solution {
    fun getNoZeroIntegers(n: Int): IntArray {
 
    }
}";"";"2020-03-25 15:18:04"
2483;198;"Python3";"class Solution:
    def getNoZeroIntegers(self, n: int) -> List[int]
:";"";"2020-03-25 15:18:04"
2484;198;"JavaScript";"/**
 * @param {number} n
 * @return {number[]}
 */
var getNoZeroIntegers = function(n) {
    
};";"";"2020-03-25 15:18:04"
2485;198;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer[]
     */
    function getNoZeroIntegers($n) {
 
    }
}";"";"2020-03-25 15:18:04"
2486;198;"Swift";"class Solution {
    func getNoZeroIntegers(_ n: Int) -> [Int] {
 
    }
}";"";"2020-03-25 15:18:04"
2487;198;"Ruby";"# @param {Integer} n";"";"2020-03-25 15:18:04"
2488;198;"Python";"class Solution(object):
    def getNoZeroIntegers(self, n):
        """"""
        :type n: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:04"
2489;199;"C#";"public class Solution {
    public int SmallestDivisor(int[] nums, int 
threshold) {
 
    }
}";"";"2020-03-25 15:18:04"
2490;199;"Java";"class Solution {
    public int smallestDivisor(int[] nums, int 
threshold) {
 
    }
}";"";"2020-03-25 15:18:04"
2491;199;"C";"int smallestDivisor(int* nums, int numsSize, int 
threshold){
 
}";"";"2020-03-25 15:18:04"
2492;199;"Rust";"impl Solution {
    pub fn smallest_divisor(nums: Vec<i32>, 
threshold: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:04"
2493;199;"Scala";"object Solution {
    def smallestDivisor(nums: Array[Int], 
threshold: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:04"
2494;199;"Go";"func smallestDivisor(nums []int, threshold int) int 
{
 
}";"";"2020-03-25 15:18:04"
2495;199;"Kotlin";"class Solution {
    fun smallestDivisor(nums: IntArray, threshold: 
Int): Int {
 
    }
}";"";"2020-03-25 15:18:04"
2496;199;"Python3";"class Solution:
    def smallestDivisor(self, nums: List[int], 
threshold: int) -> int:";"";"2020-03-25 15:18:04"
2497;199;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} threshold
 * @return {number}
 */
var smallestDivisor = function(nums, threshold) {
 
};";"";"2020-03-25 15:18:04"
2498;199;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer $threshold
     * @return Integer
     */
    function smallestDivisor($nums, $threshold) {
 
    }
}";"";"2020-03-25 15:18:04"
2499;199;"Swift";"class Solution {
    func smallestDivisor(_ nums: [Int], _ 
threshold: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:04"
2500;199;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:18:04"
2501;199;"Python";"class Solution(object):
    def smallestDivisor(self, nums, threshold):
        """"""
        :type nums: List[int]
        :type threshold: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:04"
2502;200;"C#";"public class Solution {
    public string ReverseWords(string s) {
 
    }
}";"";"2020-03-25 15:18:04"
2503;200;"Java";"class Solution {
    public String reverseWords(String s) {
 
    }
}";"";"2020-03-25 15:18:04"
2504;200;"C";"char* reverseWords(char* s){
 
}";"";"2020-03-25 15:18:04"
2505;200;"Rust";"impl Solution {
    pub fn reverse_words(s: String) -> String {
 
    }
}";"";"2020-03-25 15:18:04"
2506;200;"Scala";"object Solution {
    def reverseWords(s: String): String = {
 
    }
}";"";"2020-03-25 15:18:04"
2507;200;"Go";"func reverseWords(s string) string {
 
}";"";"2020-03-25 15:18:04"
2508;200;"Kotlin";"class Solution {
    fun reverseWords(s: String): String {
 
    }
}";"";"2020-03-25 15:18:04"
2509;200;"Python3";"class Solution:
    def reverseWords(self, s: str) -> str:";"";"2020-03-25 15:18:04"
2510;200;"JavaScript";"/**
 * @param {string} s
 * @return {string}
 */
var reverseWords = function(s) {
 
};";"";"2020-03-25 15:18:04"
2511;200;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return String
     */
    function reverseWords($s) {
 
    }
}";"";"2020-03-25 15:18:04"
2512;200;"Swift";"class Solution {
    func reverseWords(_ s: String) -> String {
 
    }
}";"";"2020-03-25 15:18:04"
2513;200;"Ruby";"# @param {String} s
# @return {String}
def reverse_words(s)
 
end";"";"2020-03-25 15:18:04"
2514;200;"Python";"class Solution(object):
    def reverseWords(self, s):
        """"""
        :type s: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:04"
2515;201;"C#";"public class MapSum {
 
    /** Initialize your data structure here. */
    public MapSum() {
 
    }
    
    public void Insert(string key, int val) {
 
    }
    
    public int Sum(string prefix) {
 
    }
}
 
/**
 * Your MapSum object will be instantiated and 
called as such:
 * MapSum obj = new MapSum();
 * obj.Insert(key,val);
 * int param_2 = obj.Sum(prefix);
 */";"";"2020-03-25 15:18:04"
2516;201;"Java";"class MapSum {
 
    /** Initialize your data structure here. */
    public MapSum() {
 
    }
    
    public void insert(String key, int val) {
 
    }
    
    public int sum(String prefix) {
 
    }
}
 
/**
 * Your MapSum object will be instantiated and 
called as such:
 * MapSum obj = new MapSum();
 * obj.insert(key,val);
 * int param_2 = obj.sum(prefix);
 */";"";"2020-03-25 15:18:04"
2517;201;"C";"typedef struct {
    
} MapSum;
 
/** Initialize your data structure here. */
 
MapSum* mapSumCreate() {
    
}
 
void mapSumInsert(MapSum* obj, char * key, int val) 
{
  
}
 
int mapSumSum(MapSum* obj, char * prefix) {
  
}
 
void mapSumFree(MapSum* obj) {
    
}
 
/**
 * Your MapSum struct will be instantiated and 
called as such:";"";"2020-03-25 15:18:04"
2518;201;"Rust";"struct MapSum {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl MapSum {
 
    /** Initialize your data structure here. */
    fn new() -> Self {
        
    }
    
    fn insert(&self, key: String, val: i32) {
        
    }
    
    fn sum(&self, prefix: String) -> i32 {
        
    }
}";"";"2020-03-25 15:18:04"
2519;201;"Scala";"class MapSum() {
 
    /** Initialize your data structure here. */
 
 
    def insert(key: String, `val`: Int) {
 
    }
 
    def sum(prefix: String): Int = {
 
    }
 
}
 
/**
 * Your MapSum object will be instantiated and 
called as such:
 * var obj = new MapSum()
 * obj.insert(key,`val`)
 * var param_2 = obj.sum(prefix)
 */";"";"2020-03-25 15:18:04"
2520;201;"Python3";"class MapSum:
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
        
 
    def insert(self, key: str, val: int) -> None:
        
 
    def sum(self, prefix: str) -> int:
        
 
 
# Your MapSum object will be instantiated and 
called as such:
# obj = MapSum()
# obj.insert(key,val)
# param_2 = obj.sum(prefix)";"";"2020-03-25 15:18:04"
2521;201;"JavaScript";"/**
 * Initialize your data structure here.
 */
var MapSum = function() {
 
};
 
/** 
 * @param {string} key 
 * @param {number} val
 * @return {void}
 */
MapSum.prototype.insert = function(key, val) {
 
};
 
/** 
 * @param {string} prefix
 * @return {number}
 */
MapSum.prototype.sum = function(prefix) {
 
};
 
/**
 * Your MapSum object will be instantiated and ";"";"2020-03-25 15:18:04"
2522;201;"Go";"type MapSum struct {
 
}
 
 
/** Initialize your data structure here. */
func Constructor() MapSum {
 
}
 
 
func (this *MapSum) Insert(key string, val int)  {
 
}
 
 
func (this *MapSum) Sum(prefix string) int {
 
}
 
 
/**
 * Your MapSum object will be instantiated and 
called as such:
 * obj := Constructor();
 * obj.Insert(key,val);";"";"2020-03-25 15:18:04"
2523;201;"PHP";"class MapSum {
    /**
     * Initialize your data structure here.
     */
    function __construct() {
        
    }
  
    /**
     * @param String $key
     * @param Integer $val
     * @return NULL
     */
    function insert($key, $val) {
        
    }
  
    /**
     * @param String $prefix
     * @return Integer
     */
    function sum($prefix) {
        
    }
}
 ";"";"2020-03-25 15:18:04"
2524;201;"Ruby";"class MapSum
 
=begin
    Initialize your data structure here.
=end
    def initialize()
 
    end
 
 
=begin
    :type key: String
    :type val: Integer
    :rtype: Void
=end
    def insert(key, val)
 
    end
 
 
=begin
    :type prefix: String
    :rtype: Integer
=end
    def sum(prefix)
 ";"";"2020-03-25 15:18:04"
2525;201;"Python";"class MapSum(object):
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
        
 
    def insert(self, key, val):
        """"""
        :type key: str
        :type val: int
        :rtype: None
        """"""
        
 
    def sum(self, prefix):
        """"""
        :type prefix: str
        :rtype: int
        """"""
        
 
 
# Your MapSum object will be instantiated and 
called as such:";"";"2020-03-25 15:18:04"
2526;201;"Kotlin";"class MapSum() {
 
    /** Initialize your data structure here. */
 
 
    fun insert(key: String, `val`: Int) {
 
    }
 
    fun sum(prefix: String): Int {
 
    }
 
}
 
/**
 * Your MapSum object will be instantiated and 
called as such:
 * var obj = MapSum()
 * obj.insert(key,`val`)
 * var param_2 = obj.sum(prefix)
 */";"";"2020-03-25 15:18:04"
2527;202;"C#";"public class FooBar {";"";"2020-03-25 15:18:04"
2528;202;"Java";"class FooBar {
    private int n;
 
    public FooBar(int n) {
        this.n = n;
    }
 
    public void foo(Runnable printFoo) throws 
InterruptedException {
        
        for (int i = 0; i < n; i++) {
            
            // printFoo.run() outputs ""foo"". Do not 
change or remove this line.
            printFoo.run();
        }
    }
 
    public void bar(Runnable printBar) throws 
InterruptedException {
        
        for (int i = 0; i < n; i++) {
            
            // printBar.run() outputs ""bar"". Do not 
change or remove this line.
            printBar.run();";"";"2020-03-25 15:18:04"
2529;202;"C";"typedef struct {
    int n;
} FooBar;
 
FooBar* fooBarCreate(int n) {
    FooBar* obj = (FooBar*) malloc(sizeof(FooBar));
    obj->n = n;
    return obj;
}
 
void foo(FooBar* obj) {
    
    for (int i = 0; i < obj->n; i++) {
        
        // printFoo() outputs ""foo"". Do not change 
or remove this line.
        printFoo();
    }
}
 
void bar(FooBar* obj) {
    
    for (int i = 0; i < obj->n; i++) {
        
        // printBar() outputs ""bar"". Do not change 
or remove this line.";"";"2020-03-25 15:18:04"
2530;202;"Python3";"class FooBar:
    def __init__(self, n):
        self.n = n
 
 
    def foo(self, printFoo: 'Callable[[], None]') 
-> None:
        
        for i in range(self.n):
            
            # printFoo() outputs ""foo"". Do not 
change or remove this line.
            printFoo()
 
 
    def bar(self, printBar: 'Callable[[], None]') 
-> None:
        
        for i in range(self.n):
            
            # printBar() outputs ""bar"". Do not 
change or remove this line.
            printBar()";"";"2020-03-25 15:18:04"
2531;202;"Python";"class FooBar(object):
    def __init__(self, n):
        self.n = n
 
 
    def foo(self, printFoo):
        """"""
        :type printFoo: method
        :rtype: void
        """"""
        for i in xrange(self.n):
            
            # printFoo() outputs ""foo"". Do not 
change or remove this line.
            printFoo()
 
 
    def bar(self, printBar):
        """"""
        :type printBar: method
        :rtype: void
        """"""
        for i in xrange(self.n):
            
            # printBar() outputs ""bar"". Do not 
change or remove this line.";"";"2020-03-25 15:18:04"
2532;203;"C#";"public class Solution {
    public string[] UncommonFromSentences(string A, 
string B) {
 
    }
}";"";"2020-03-25 15:18:04"
2533;203;"Java";"class Solution {
    public String[] uncommonFromSentences(String A, 
String B) {
 
    }
}";"";"2020-03-25 15:18:04"
2534;203;"Rust";"impl Solution {
    pub fn uncommon_from_sentences(a: String, b: 
String) -> Vec<String> {
        
    }
}";"";"2020-03-25 15:18:04"
2535;203;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** uncommonFromSentences(char * A, char * B, 
int* returnSize){
 
}";"";"2020-03-25 15:18:04"
2536;203;"Scala";"object Solution {
    def uncommonFromSentences(A: String, B: String)
: Array[String] = {
 
    }
}";"";"2020-03-25 15:18:04"
2537;203;"Go";"func uncommonFromSentences(A string, B string) []
string {
 
}";"";"2020-03-25 15:18:04"
2538;203;"Kotlin";"class Solution {
    fun uncommonFromSentences(A: String, B: String)
: Array<String> {
 
    }
}";"";"2020-03-25 15:18:04"
2539;203;"Python3";"class Solution:
    def uncommonFromSentences(self, A: str, B: str) 
-> List[str]:";"";"2020-03-25 15:18:04"
2540;203;"JavaScript";"/**
 * @param {string} A
 * @param {string} B
 * @return {string[]}
 */
var uncommonFromSentences = function(A, B) {
 
};";"";"2020-03-25 15:18:04"
2541;203;"PHP";"";"";"2020-03-25 15:18:04"
2542;203;"Swift";"class Solution {
    func uncommonFromSentences(_ A: String, _ B: 
String) -> [String] {
        
    }
}";"";"2020-03-25 15:18:04"
2543;203;"Ruby";"# @param {String} a
# @param {String} b
# @return {String[]}
def uncommon_from_sentences(a, b)
 
end";"";"2020-03-25 15:18:04"
2544;203;"Python";"class Solution(object):
    def uncommonFromSentences(self, A, B):
        """"""
        :type A: str
        :type B: str
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:04"
2545;204;"C#";"public class Solution {
    public int MaxProduct(string[] words) {
 
    }
}";"";"2020-03-25 15:18:04"
2546;204;"Java";"class Solution {
    public int maxProduct(String[] words) {
 
    }
}";"";"2020-03-25 15:18:04"
2547;204;"Rust";"impl Solution {
    pub fn max_product(words: Vec<String>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:04"
2548;204;"C";"int maxProduct(char ** words, int wordsSize){
 
}";"";"2020-03-25 15:18:04"
2549;204;"Scala";"object Solution {
    def maxProduct(words: Array[String]): Int = {
 
    }
}";"";"2020-03-25 15:18:04"
2550;204;"Go";"func maxProduct(words []string) int {
 
}";"";"2020-03-25 15:18:04"
2551;204;"Kotlin";"class Solution {
    fun maxProduct(words: Array<String>): Int {
 
    }
}";"";"2020-03-25 15:18:04"
2552;204;"Python3";"class Solution:
    def maxProduct(self, words: List[str]) -> int:";"";"2020-03-25 15:18:04"
2553;204;"JavaScript";"/**
 * @param {string[]} words
 * @return {number}
 */
var maxProduct = function(words) {
 
};";"";"2020-03-25 15:18:04"
2554;204;"PHP";"class Solution {
 
    /**
     * @param String[] $words
     * @return Integer
     */
    function maxProduct($words) {
        
    }
}";"";"2020-03-25 15:18:04"
2555;204;"Swift";"class Solution {
    func maxProduct(_ words: [String]) -> Int {
        
    }
}";"";"2020-03-25 15:18:04"
2556;204;"Ruby";"# @param {String[]} words
# @return {Integer}
def max_product(words)
 
end";"";"2020-03-25 15:18:04"
2557;204;"Python";"class Solution(object):
    def maxProduct(self, words):
        """"""
        :type words: List[str]
        :rtype: int
        """"""";"";"2020-03-25 15:18:04"
2558;205;"C#";"public class Solution {
    public int ScheduleCourse(int[][] courses) {
 
    }
}";"";"2020-03-25 15:18:04"
2559;205;"Java";"class Solution {
    public int scheduleCourse(int[][] courses) {
 
    }
}";"";"2020-03-25 15:18:04"
2560;205;"C";"int scheduleCourse(int** courses, int coursesSize, 
int* coursesColSize){
 
}";"";"2020-03-25 15:18:04"
2561;205;"Rust";"impl Solution {
    pub fn schedule_course(courses: Vec<Vec<i32>>) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:04"
2562;205;"Scala";"object Solution {
    def scheduleCourse(courses: Array[Array[Int]]): 
Int = {
 
    }
}";"";"2020-03-25 15:18:04"
2563;205;"Go";"func scheduleCourse(courses [][]int) int {
 
}";"";"2020-03-25 15:18:04"
2564;205;"Kotlin";"class Solution {
    fun scheduleCourse(courses: Array<IntArray>): 
Int {
 
    }
}";"";"2020-03-25 15:18:04"
2565;205;"Python3";"class Solution:
    def scheduleCourse(self, courses: List[List[int]
]) -> int:";"";"2020-03-25 15:18:04"
2566;205;"JavaScript";"/**
 * @param {number[][]} courses
 * @return {number}
 */
var scheduleCourse = function(courses) {
 
};";"";"2020-03-25 15:18:04"
2567;205;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $courses
     * @return Integer
     */
    function scheduleCourse($courses) {
        
    }
}";"";"2020-03-25 15:18:04"
2568;205;"Swift";"class Solution {
    func scheduleCourse(_ courses: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:04"
2569;205;"Ruby";"# @param {Integer[][]} courses";"";"2020-03-25 15:18:04"
2570;205;"Python";"class Solution(object):
    def scheduleCourse(self, courses):
        """"""
        :type courses: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:04"
2571;206;"C#";"public class Solution {
    public int MaxUncrossedLines(int[] A, int[] B) {
 
    }
}";"";"2020-03-25 15:18:04"
2572;206;"Java";"class Solution {
    public int maxUncrossedLines(int[] A, int[] B) {
 
    }
}";"";"2020-03-25 15:18:04"
2573;206;"Rust";"impl Solution {
    pub fn max_uncrossed_lines(a: Vec<i32>, b: 
Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:04"
2574;206;"C";"int maxUncrossedLines(int* A, int ASize, int* B, 
int BSize){
 
}";"";"2020-03-25 15:18:04"
2575;206;"Scala";"object Solution {
    def maxUncrossedLines(A: Array[Int], B: Array
[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:04"
2576;206;"Go";"func maxUncrossedLines(A []int, B []int) int {
 
}";"";"2020-03-25 15:18:04"
2577;206;"Kotlin";"class Solution {
    fun maxUncrossedLines(A: IntArray, B: IntArray)
: Int {
 
    }
}";"";"2020-03-25 15:18:04"
2578;206;"Python3";"class Solution:
    def maxUncrossedLines(self, A: List[int], B: 
List[int]) -> int:";"";"2020-03-25 15:18:04"
2579;206;"JavaScript";"/**
 * @param {number[]} A
 * @param {number[]} B
 * @return {number}
 */
var maxUncrossedLines = function(A, B) {
 
};";"";"2020-03-25 15:18:04"
2580;206;"PHP";"class Solution {";"";"2020-03-25 15:18:04"
2581;206;"Swift";"class Solution {
    func maxUncrossedLines(_ A: [Int], _ B: [Int]) 
-> Int {
        
    }
}";"";"2020-03-25 15:18:04"
2582;206;"Ruby";"# @param {Integer[]} a
# @param {Integer[]} b
# @return {Integer}
def max_uncrossed_lines(a, b)
 
end";"";"2020-03-25 15:18:04"
2583;206;"Python";"class Solution(object):
    def maxUncrossedLines(self, A, B):
        """"""
        :type A: List[int]
        :type B: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:04"
2584;207;"C#";"public class Solution {
    public bool ParseBoolExpr(string expression) {
 
    }
}";"";"2020-03-25 15:18:04"
2585;207;"Java";"class Solution {
    public boolean parseBoolExpr(String expression) 
{
 
    }
}";"";"2020-03-25 15:18:04"
2586;207;"Rust";"impl Solution {
    pub fn parse_bool_expr(expression: String) -> 
bool {
        
    }
}";"";"2020-03-25 15:18:04"
2587;207;"C";"bool parseBoolExpr(char * expression){
 
}";"";"2020-03-25 15:18:04"
2588;207;"Scala";"object Solution {
    def parseBoolExpr(expression: String): Boolean 
= {
 
    }
}";"";"2020-03-25 15:18:04"
2589;207;"Go";"func parseBoolExpr(expression string) bool {
 
}";"";"2020-03-25 15:18:04"
2590;207;"Kotlin";"class Solution {
    fun parseBoolExpr(expression: String): Boolean {
 
    }
}";"";"2020-03-25 15:18:04"
2591;207;"Python3";"class Solution:
    def parseBoolExpr(self, expression: str) -> 
bool:";"";"2020-03-25 15:18:04"
2592;207;"JavaScript";"/**
 * @param {string} expression
 * @return {boolean}
 */
var parseBoolExpr = function(expression) {
 
};";"";"2020-03-25 15:18:04"
2593;207;"PHP";"class Solution {";"";"2020-03-25 15:18:04"
2594;207;"Swift";"class Solution {
    func parseBoolExpr(_ expression: String) -> 
Bool {
        
    }
}";"";"2020-03-25 15:18:04"
2595;207;"Ruby";"# @param {String} expression
# @return {Boolean}
def parse_bool_expr(expression)
 
end";"";"2020-03-25 15:18:04"
2596;207;"Python";"class Solution(object):
    def parseBoolExpr(self, expression):
        """"""
        :type expression: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:04"
2597;208;"C#";"public class Solution {
    public int[] ReplaceElements(int[] arr) {
 
    }
}";"";"2020-03-25 15:18:04"
2598;208;"Java";"class Solution {
    public int[] replaceElements(int[] arr) {
 
    }
}";"";"2020-03-25 15:18:04"
2599;208;"Rust";"impl Solution {
    pub fn replace_elements(arr: Vec<i32>) -> 
Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:04"
2600;208;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* replaceElements(int* arr, int arrSize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:04"
2601;208;"Scala";"object Solution {
    def replaceElements(arr: Array[Int]): Array[Int]
 = {
 
    }
}";"";"2020-03-25 15:18:04"
2602;208;"Go";"func replaceElements(arr []int) []int {
 
}";"";"2020-03-25 15:18:04"
2603;208;"Kotlin";"class Solution {
    fun replaceElements(arr: IntArray): IntArray {
 
    }
}";"";"2020-03-25 15:18:04"
2604;208;"Python3";"class Solution:
    def replaceElements(self, arr: List[int]) -> 
List[int]:";"";"2020-03-25 15:18:04"
2605;208;"JavaScript";"/**
 * @param {number[]} arr
 * @return {number[]}
 */
var replaceElements = function(arr) {
    
};";"";"2020-03-25 15:18:04"
2606;208;"PHP";"class Solution {";"";"2020-03-25 15:18:04"
2607;208;"Swift";"class Solution {
    func replaceElements(_ arr: [Int]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:04"
2608;208;"Ruby";"# @param {Integer[]} arr
# @return {Integer[]}
def replace_elements(arr)
 
end";"";"2020-03-25 15:18:04"
2609;208;"Python";"class Solution(object):
    def replaceElements(self, arr):
        """"""
        :type arr: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:04"
2610;209;"C#";"public class Solution {
    public int OpenLock(string[] deadends, string 
target) {
 
    }
}";"";"2020-03-25 15:18:04"
2611;209;"Java";"class Solution {
    public int openLock(String[] deadends, String 
target) {
 
    }
}";"";"2020-03-25 15:18:04"
2612;209;"Rust";"impl Solution {
    pub fn open_lock(deadends: Vec<String>, target: 
String) -> i32 {
        
    }
}";"";"2020-03-25 15:18:04"
2613;209;"C";"int openLock(char ** deadends, int deadendsSize, 
char * target){
 
}";"";"2020-03-25 15:18:04"
2614;209;"Scala";"object Solution {
    def openLock(deadends: Array[String], target: 
String): Int = {
 
    }
}";"";"2020-03-25 15:18:04"
2615;209;"Go";"func openLock(deadends []string, target string) int 
{
 
}";"";"2020-03-25 15:18:04"
2616;209;"Kotlin";"class Solution {
    fun openLock(deadends: Array<String>, target: 
String): Int {
 
    }
}";"";"2020-03-25 15:18:04"
2617;209;"Python3";"class Solution:
    def openLock(self, deadends: List[str], target: 
str) -> int:";"";"2020-03-25 15:18:04"
2618;209;"JavaScript";"/**
 * @param {string[]} deadends
 * @param {string} target
 * @return {number}
 */
var openLock = function(deadends, target) {
 
};";"";"2020-03-25 15:18:04"
2619;209;"PHP";"class Solution {";"";"2020-03-25 15:18:04"
2620;209;"Swift";"class Solution {
    func openLock(_ deadends: [String], _ target: 
String) -> Int {
        
    }
}";"";"2020-03-25 15:18:04"
2621;209;"Ruby";"# @param {String[]} deadends
# @param {String} target
# @return {Integer}
def open_lock(deadends, target)
 
end";"";"2020-03-25 15:18:04"
2622;209;"Python";"class Solution(object):
    def openLock(self, deadends, target):
        """"""
        :type deadends: List[str]
        :type target: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:04"
2623;210;"C#";"public class Solution {
    public int DieSimulator(int n, int[] rollMax) {
 
    }
}";"";"2020-03-25 15:18:04"
2624;210;"Java";"class Solution {
    public int dieSimulator(int n, int[] rollMax) {
 
    }
}";"";"2020-03-25 15:18:04"
2625;210;"C";"int dieSimulator(int n, int* rollMax, int 
rollMaxSize){
 
}";"";"2020-03-25 15:18:04"
2626;210;"Rust";"impl Solution {
    pub fn die_simulator(n: i32, roll_max: Vec<i32>)
 -> i32 {
 
    }
}";"";"2020-03-25 15:18:04"
2627;210;"Scala";"object Solution {
    def dieSimulator(n: Int, rollMax: Array[Int]): 
Int = {
 
    }
}";"";"2020-03-25 15:18:04"
2628;210;"Go";"func dieSimulator(n int, rollMax []int) int {
 
}";"";"2020-03-25 15:18:04"
2629;210;"Kotlin";"class Solution {
    fun dieSimulator(n: Int, rollMax: IntArray): 
Int {
 
    }
}";"";"2020-03-25 15:18:04"
2630;210;"Python3";"class Solution:
    def dieSimulator(self, n: int, rollMax: List
[int]) -> int:";"";"2020-03-25 15:18:04"
2631;210;"JavaScript";"/**
 * @param {number} n
 * @param {number[]} rollMax
 * @return {number}
 */
var dieSimulator = function(n, rollMax) {
 
};";"";"2020-03-25 15:18:04"
2632;210;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @param Integer[] $rollMax
     * @return Integer
     */
    function dieSimulator($n, $rollMax) {
 
    }
}";"";"2020-03-25 15:18:04"
2633;210;"Swift";"class Solution {
    func dieSimulator(_ n: Int, _ rollMax: [Int]) 
-> Int {
 
    }
}";"";"2020-03-25 15:18:04"
2634;210;"Ruby";"# @param {Integer} n
# @param {Integer[]} roll_max
# @return {Integer}
def die_simulator(n, roll_max)
 
end";"";"2020-03-25 15:18:04"
2635;210;"Python";"class Solution(object):
    def dieSimulator(self, n, rollMax):
        """"""
        :type n: int
        :type rollMax: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:04"
2636;211;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode AddTwoNumbers(ListNode l1, 
ListNode l2) {
 
    }
}";"";"2020-03-25 15:18:04"
2637;211;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, 
ListNode l2) {
 
    }
}";"";"2020-03-25 15:18:04"
2638;211;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn add_two_numbers(l1: 
Option<Box<ListNode>>, l2: Option<Box<ListNode>>) 
-> Option<Box<ListNode>> {
 
    }
}";"";"2020-03-25 15:18:04"
2639;211;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
struct ListNode* addTwoNumbers(struct ListNode* l1, 
struct ListNode* l2){
 
}";"";"2020-03-25 15:18:04"
2640;211;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def addTwoNumbers(l1: ListNode, l2: ListNode): 
ListNode = {
 
    }
}";"";"2020-03-25 15:18:04"
2641;211;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func addTwoNumbers(l1 *ListNode, l2 *ListNode) 
*ListNode {
 
}";"";"2020-03-25 15:18:04"
2642;211;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun addTwoNumbers(l1: ListNode?, l2: ListNode?)
: ListNode? {
 
    }
}";"";"2020-03-25 15:18:04"
2643;211;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: 
ListNode) -> ListNode:";"";"2020-03-25 15:18:04"
2644;211;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */
var addTwoNumbers = function(l1, l2) {
 
};";"";"2020-03-25 15:18:04"
2645;211;"PHP";"/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
class Solution {
 
    /**
     * @param ListNode $l1
     * @param ListNode $l2
     * @return ListNode
     */
    function addTwoNumbers($l1, $l2) {
 
    }
}";"";"2020-03-25 15:18:04"
2646;211;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func addTwoNumbers(_ l1: ListNode?, _ l2: 
ListNode?) -> ListNode? {
 
    }
}";"";"2020-03-25 15:18:04"
2647;211;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# @param {ListNode} l1
# @param {ListNode} l2
# @return {ListNode}
def add_two_numbers(l1, l2)
 
end";"";"2020-03-25 15:18:04"
2648;211;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """"""
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:04"
2649;212;"C#";"public class Solution {
    public IList<IList<int>> CriticalConnections
(int n, IList<IList<int>> connections) {
 
    }
}";"";"2020-03-25 15:18:04"
2650;212;"Java";"class Solution {
    public List<List<Integer>> criticalConnections
(int n, List<List<Integer>> connections) {
 
    }
}";"";"2020-03-25 15:18:04"
2651;212;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** criticalConnections(int n, int** connections, 
int connectionsSize, int* connectionsColSize, int* 
returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:04"
2652;212;"Rust";"impl Solution {
    pub fn critical_connections(n: i32, 
connections: Vec<Vec<i32>>) -> Vec<Vec<i32>> {
 
    }
}";"";"2020-03-25 15:18:04"
2653;212;"Scala";"object Solution {
    def criticalConnections(n: Int, connections: 
List[List[Int]]): List[List[Int]] = {
 
    }
}";"";"2020-03-25 15:18:04"
2654;212;"Go";"func criticalConnections(n int, connections [][]int)
 [][]int {
 
}";"";"2020-03-25 15:18:04"
2655;212;"Kotlin";"class Solution {
    fun criticalConnections(n: Int, connections: 
List<List<Int>>): List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:04"
2656;212;"Python3";"class Solution:
    def criticalConnections(self, n: int, 
connections: List[List[int]]) -> List[List[int]]:";"";"2020-03-25 15:18:04"
2657;212;"JavaScript";"/**
 * @param {number} n
 * @param {number[][]} connections
 * @return {number[][]}
 */
var criticalConnections = function(n, connections) {
 
};";"";"2020-03-25 15:18:04"
2658;212;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @param Integer[][] $connections
     * @return Integer[][]
     */
    function criticalConnections($n, $connections) {
 
    }
}";"";"2020-03-25 15:18:04"
2659;212;"Swift";"class Solution {
    func criticalConnections(_ n: Int, _ 
connections: [[Int]]) -> [[Int]] {
 
    }
}";"";"2020-03-25 15:18:04"
2660;212;"Ruby";"# @param {Integer} n";"";"2020-03-25 15:18:04"
2661;212;"Python";"class Solution(object):
    def criticalConnections(self, n, connections):
        """"""
        :type n: int
        :type connections: List[List[int]]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:04"
2662;213;"C#";"public class Solution {
    public int MinIncrementForUnique(int[] A) {
 
    }
}";"";"2020-03-25 15:18:04"
2663;213;"Java";"class Solution {
    public int minIncrementForUnique(int[] A) {
 
    }
}";"";"2020-03-25 15:18:04"
2664;213;"C";"int minIncrementForUnique(int* A, int ASize){
 
}";"";"2020-03-25 15:18:04"
2665;213;"Rust";"impl Solution {
    pub fn min_increment_for_unique(a: Vec<i32>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:04"
2666;213;"Scala";"object Solution {
    def minIncrementForUnique(A: Array[Int]): Int = 
{
 
    }
}";"";"2020-03-25 15:18:04"
2667;213;"Go";"func minIncrementForUnique(A []int) int {
 
}";"";"2020-03-25 15:18:04"
2668;213;"Kotlin";"class Solution {
    fun minIncrementForUnique(A: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:04"
2669;213;"Python3";"class Solution:
    def minIncrementForUnique(self, A: List[int]) 
-> int:";"";"2020-03-25 15:18:04"
2670;213;"JavaScript";"/**
 * @param {number[]} A
 * @return {number}
 */
var minIncrementForUnique = function(A) {
 
};";"";"2020-03-25 15:18:04"
2671;213;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @return Integer
     */
    function minIncrementForUnique($A) {
        
    }
}";"";"2020-03-25 15:18:04"
2672;213;"Swift";"class Solution {
    func minIncrementForUnique(_ A: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:04"
2673;213;"Ruby";"# @param {Integer[]} a";"";"2020-03-25 15:18:04"
2674;213;"Python";"class Solution(object):
    def minIncrementForUnique(self, A):
        """"""
        :type A: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:04"
2675;214;"C#";"public class Solution {
    public string[] Spellchecker(string[] wordlist, 
string[] queries) {
 
    }
}";"";"2020-03-25 15:18:04"
2676;214;"Java";"class Solution {
    public String[] spellchecker(String[] wordlist, 
String[] queries) {
 
    }
}";"";"2020-03-25 15:18:04"
2677;214;"Rust";"impl Solution {
    pub fn spellchecker(wordlist: Vec<String>, 
queries: Vec<String>) -> Vec<String> {
        
    }
}";"";"2020-03-25 15:18:04"
2678;214;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** spellchecker(char ** wordlist, int 
wordlistSize, char ** queries, int queriesSize, 
int* returnSize){
 
}";"";"2020-03-25 15:18:04"
2679;214;"Scala";"object Solution {
    def spellchecker(wordlist: Array[String], 
queries: Array[String]): Array[String] = {
 
    }
}";"";"2020-03-25 15:18:04"
2680;214;"Go";"func spellchecker(wordlist []string, queries []
string) []string {
 
}";"";"2020-03-25 15:18:04"
2681;214;"Kotlin";"class Solution {
    fun spellchecker(wordlist: Array<String>, 
queries: Array<String>): Array<String> {
 
    }
}";"";"2020-03-25 15:18:04"
2682;214;"Python3";"class Solution:
    def spellchecker(self, wordlist: List[str], 
queries: List[str]) -> List[str]:";"";"2020-03-25 15:18:04"
2683;214;"JavaScript";"/**
 * @param {string[]} wordlist
 * @param {string[]} queries
 * @return {string[]}
 */
var spellchecker = function(wordlist, queries) {
 
};";"";"2020-03-25 15:18:04"
2684;214;"PHP";"class Solution {";"";"2020-03-25 15:18:04"
2685;214;"Swift";"class Solution {
    func spellchecker(_ wordlist: [String], _ 
queries: [String]) -> [String] {
        
    }
}";"";"2020-03-25 15:18:04"
2686;214;"Ruby";"# @param {String[]} wordlist
# @param {String[]} queries
# @return {String[]}
def spellchecker(wordlist, queries)
 
end";"";"2020-03-25 15:18:04"
2687;214;"Python";"class Solution(object):
    def spellchecker(self, wordlist, queries):
        """"""
        :type wordlist: List[str]
        :type queries: List[str]
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:04"
2688;215;"C#";"public class Solution {
    public int SumFourDivisors(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:05"
2689;215;"Java";"class Solution {
    public int sumFourDivisors(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:05"
2690;215;"C";"int sumFourDivisors(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:05"
2691;215;"Rust";"impl Solution {
    pub fn sum_four_divisors(nums: Vec<i32>) -> i32 
{
        
    }
}";"";"2020-03-25 15:18:05"
2692;215;"Scala";"object Solution {
    def sumFourDivisors(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:05"
2693;215;"Go";"func sumFourDivisors(nums []int) int {
 
}";"";"2020-03-25 15:18:05"
2694;215;"Kotlin";"class Solution {
    fun sumFourDivisors(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:05"
2695;215;"Python3";"class Solution:
    def sumFourDivisors(self, nums: List[int]) -> 
int:";"";"2020-03-25 15:18:05"
2696;215;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var sumFourDivisors = function(nums) {
 
};";"";"2020-03-25 15:18:05"
2697;215;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function sumFourDivisors($nums) {
        
    }
}";"";"2020-03-25 15:18:05"
2698;215;"Swift";"class Solution {
    func sumFourDivisors(_ nums: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:05"
2699;215;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:18:05"
2700;215;"Python";"class Solution(object):
    def sumFourDivisors(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:05"
2701;216;"C#";"public class Solution {
    public int[] NumMovesStones(int a, int b, int c)
 {
 
    }
}";"";"2020-03-25 15:18:05"
2702;216;"Java";"class Solution {
    public int[] numMovesStones(int a, int b, int c)
 {
 
    }
}";"";"2020-03-25 15:18:05"
2703;216;"Rust";"impl Solution {
    pub fn num_moves_stones(a: i32, b: i32, c: i32) 
-> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:05"
2704;216;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* numMovesStones(int a, int b, int c, int* 
returnSize){
 
}";"";"2020-03-25 15:18:05"
2705;216;"Scala";"object Solution {
    def numMovesStones(a: Int, b: Int, c: Int): 
Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:05"
2706;216;"Go";"func numMovesStones(a int, b int, c int) []int {
 
}";"";"2020-03-25 15:18:05"
2707;216;"Kotlin";"class Solution {
    fun numMovesStones(a: Int, b: Int, c: Int): 
IntArray {
 
    }
}";"";"2020-03-25 15:18:05"
2708;216;"Python3";"class Solution:
    def numMovesStones(self, a: int, b: int, c: int)
 -> List[int]:";"";"2020-03-25 15:18:05"
2709;216;"JavaScript";"/**
 * @param {number} a
 * @param {number} b
 * @param {number} c
 * @return {number[]}
 */
var numMovesStones = function(a, b, c) {
 
};";"";"2020-03-25 15:18:05"
2710;216;"PHP";"class Solution {";"";"2020-03-25 15:18:05"
2711;216;"Swift";"class Solution {
    func numMovesStones(_ a: Int, _ b: Int, _ c: 
Int) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:05"
2712;216;"Ruby";"# @param {Integer} a
# @param {Integer} b
# @param {Integer} c
# @return {Integer[]}
def num_moves_stones(a, b, c)
 
end";"";"2020-03-25 15:18:05"
2713;216;"Python";"class Solution(object):
    def numMovesStones(self, a, b, c):
        """"""
        :type a: int
        :type b: int
        :type c: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:05"
2714;217;"C#";"public class Solution {
    public IList<IList<int>> CombinationSum2(int[] 
candidates, int target) {
 
    }
}";"";"2020-03-25 15:18:05"
2715;217;"Java";"class Solution {
    public List<List<Integer>> combinationSum2(int[]
 candidates, int target) {
 
    }
}";"";"2020-03-25 15:18:05"
2716;217;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** combinationSum2(int* candidates, int 
candidatesSize, int target, int* returnSize, int** 
returnColumnSizes){
 
}";"";"2020-03-25 15:18:05"
2717;217;"Rust";"impl Solution {
    pub fn combination_sum2(candidates: Vec<i32>, 
target: i32) -> Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:05"
2718;217;"Scala";"object Solution {
    def combinationSum2(candidates: Array[Int], 
target: Int): List[List[Int]] = {
 
    }
}";"";"2020-03-25 15:18:05"
2719;217;"Go";"func combinationSum2(candidates []int, target int) 
[][]int {
 
}";"";"2020-03-25 15:18:05"
2720;217;"Kotlin";"class Solution {
    fun combinationSum2(candidates: IntArray, 
target: Int): List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:05"
2721;217;"Python3";"class Solution:
    def combinationSum2(self, candidates: List[int],
 target: int) -> List[List[int]]:";"";"2020-03-25 15:18:05"
2722;217;"JavaScript";"/**
 * @param {number[]} candidates
 * @param {number} target
 * @return {number[][]}
 */
var combinationSum2 = function(candidates, target) {
 
};";"";"2020-03-25 15:18:05"
2723;217;"PHP";"class Solution {
 
    /**
     * @param Integer[] $candidates
     * @param Integer $target
     * @return Integer[][]
     */
    function combinationSum2($candidates, $target) {
        
    }
}";"";"2020-03-25 15:18:05"
2724;217;"Swift";"class Solution {
    func combinationSum2(_ candidates: [Int], _ 
target: Int) -> [[Int]] {
        
    }
}";"";"2020-03-25 15:18:05"
2725;217;"Ruby";"# @param {Integer[]} candidates";"";"2020-03-25 15:18:05"
2726;217;"Python";"class Solution(object):
    def combinationSum2(self, candidates, target):
        """"""
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:05"
2727;218;"C#";"public class Solution {
    public int ReversePairs(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:05"
2728;218;"Java";"class Solution {
    public int reversePairs(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:05"
2729;218;"Rust";"impl Solution {
    pub fn reverse_pairs(nums: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:05"
2730;218;"C";"int reversePairs(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:05"
2731;218;"Scala";"object Solution {
    def reversePairs(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:05"
2732;218;"Go";"func reversePairs(nums []int) int {
 
}";"";"2020-03-25 15:18:05"
2733;218;"Kotlin";"class Solution {
    fun reversePairs(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:05"
2734;218;"Python3";"class Solution:
    def reversePairs(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:05"
2735;218;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var reversePairs = function(nums) {
 
};";"";"2020-03-25 15:18:05"
2736;218;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function reversePairs($nums) {
 
    }
}";"";"2020-03-25 15:18:05"
2737;218;"Swift";"class Solution {
    func reversePairs(_ nums: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:05"
2738;218;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def reverse_pairs(nums)
 
end";"";"2020-03-25 15:18:05"
2739;218;"Python";"class Solution(object):
    def reversePairs(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:05"
2740;219;"C#";"public class Solution {
    public bool IsSolvable(string[] words, string 
result) {
 
    }
}";"";"2020-03-25 15:18:05"
2741;219;"Java";"class Solution {
    public boolean isSolvable(String[] words, 
String result) {
 
    }
}";"";"2020-03-25 15:18:05"
2742;219;"Rust";"impl Solution {
    pub fn is_solvable(words: Vec<String>, result: 
String) -> bool {
 
    }
}";"";"2020-03-25 15:18:05"
2743;219;"C";"bool isSolvable(char ** words, int wordsSize, char 
* result){
 
}";"";"2020-03-25 15:18:05"
2744;219;"Scala";"object Solution {
    def isSolvable(words: Array[String], result: 
String): Boolean = {
 
    }
}";"";"2020-03-25 15:18:05"
2745;219;"Go";"func isSolvable(words []string, result string) bool 
{
 
}";"";"2020-03-25 15:18:05"
2746;219;"Kotlin";"class Solution {
    fun isSolvable(words: Array<String>, result: 
String): Boolean {
 
    }
}";"";"2020-03-25 15:18:05"
2747;219;"Python3";"class Solution:
    def isSolvable(self, words: List[str], result: 
str) -> bool:";"";"2020-03-25 15:18:05"
2748;219;"JavaScript";"/**
 * @param {string[]} words
 * @param {string} result
 * @return {boolean}
 */
var isSolvable = function(words, result) {
 
};";"";"2020-03-25 15:18:05"
2749;219;"PHP";"class Solution {
 
    /**
     * @param String[] $words
     * @param String $result
     * @return Boolean
     */
    function isSolvable($words, $result) {
 
    }
}";"";"2020-03-25 15:18:05"
2750;219;"Swift";"class Solution {
    func isSolvable(_ words: [String], _ result: 
String) -> Bool {
 
    }
}";"";"2020-03-25 15:18:05"
2751;219;"Ruby";"# @param {String[]} words
# @param {String} result
# @return {Boolean}
def is_solvable(words, result)
 
end";"";"2020-03-25 15:18:05"
2752;219;"Python";"class Solution(object):
    def isSolvable(self, words, result):
        """"""
        :type words: List[str]
        :type result: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:05"
2753;220;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public bool IsSameTree(TreeNode p, TreeNode q) {
 
    }
}";"";"2020-03-25 15:18:05"
2754;220;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode 
q) {
 
    }
}";"";"2020-03-25 15:18:05"
2755;220;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
bool isSameTree(struct TreeNode* p, struct 
TreeNode* q){
 
}";"";"2020-03-25 15:18:05"
2756;220;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn is_same_tree(p: 
Option<Rc<RefCell<TreeNode>>>, q: 
Option<Rc<RefCell<TreeNode>>>) -> bool {
        
    }";"";"2020-03-25 15:18:05"
2757;220;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def isSameTree(p: TreeNode, q: TreeNode): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:05"
2758;220;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func isSameTree(p *TreeNode, q *TreeNode) bool {
 
}";"";"2020-03-25 15:18:05"
2759;220;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun isSameTree(p: TreeNode?, q: TreeNode?): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:05"
2760;220;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def isSameTree(self, p: TreeNode, q: TreeNode) 
-> bool:";"";"2020-03-25 15:18:05"
2761;220;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} p
 * @param {TreeNode} q
 * @return {boolean}
 */
var isSameTree = function(p, q) {
 
};";"";"2020-03-25 15:18:05"
2762;220;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $p
     * @param TreeNode $q
     * @return Boolean
     */
    function isSameTree($p, $q) {
        
    }
}";"";"2020-03-25 15:18:05"
2763;220;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func isSameTree(_ p: TreeNode?, _ q: TreeNode?) 
-> Bool {
        
    }
}";"";"2020-03-25 15:18:05"
2764;220;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:05"
2765;220;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def isSameTree(self, p, q):
        """"""
        :type p: TreeNode
        :type q: TreeNode
        :rtype: bool
        """"""";"";"2020-03-25 15:18:05"
2766;221;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode[] SplitListToParts(ListNode 
root, int k) {
 
    }
}";"";"2020-03-25 15:18:05"
2767;221;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode[] splitListToParts(ListNode 
root, int k) {
 
    }
}";"";"2020-03-25 15:18:05"
2768;221;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
struct ListNode** splitListToParts(struct ListNode* 
root, int k, int* returnSize){
 
}";"";"2020-03-25 15:18:05"
2769;221;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn split_list_to_parts(root: 
Option<Box<ListNode>>, k: i32) -> 
Vec<Option<Box<ListNode>>> {
        
    }
}";"";"2020-03-25 15:18:05"
2770;221;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def splitListToParts(root: ListNode, k: Int): 
Array[ListNode] = {
 
    }
}";"";"2020-03-25 15:18:05"
2771;221;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func splitListToParts(root *ListNode, k int) []
*ListNode {
 
}";"";"2020-03-25 15:18:05"
2772;221;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun splitListToParts(root: ListNode?, k: Int): 
Array<ListNode?> {
 
    }
}";"";"2020-03-25 15:18:05"
2773;221;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def splitListToParts(self, root: ListNode, k: 
int) -> List[ListNode]:";"";"2020-03-25 15:18:05"
2774;221;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} root
 * @param {number} k
 * @return {ListNode[]}
 */
var splitListToParts = function(root, k) {
 
};";"";"2020-03-25 15:18:05"
2775;221;"PHP";"/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
class Solution {
 
    /**
     * @param ListNode $root
     * @param Integer $k
     * @return ListNode[]
     */
    function splitListToParts($root, $k) {
        
    }
}";"";"2020-03-25 15:18:05"
2776;221;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func splitListToParts(_ root: ListNode?, _ k: 
Int) -> [ListNode?] {
        
    }
}";"";"2020-03-25 15:18:05"
2777;221;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# @param {ListNode} root
# @param {Integer} k
# @return {ListNode[]}
def split_list_to_parts(root, k)
 
end";"";"2020-03-25 15:18:05"
2778;221;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def splitListToParts(self, root, k):
        """"""
        :type root: ListNode
        :type k: int
        :rtype: List[ListNode]
        """"""";"";"2020-03-25 15:18:05"
2779;222;"C#";"public class Solution {
    public bool IsValidSudoku(char[][] board) {
 
    }
}";"";"2020-03-25 15:18:05"
2780;222;"Java";"class Solution {
    public boolean isValidSudoku(char[][] board) {
 
    }
}";"";"2020-03-25 15:18:05"
2781;222;"Rust";"impl Solution {
    pub fn is_valid_sudoku(board: Vec<Vec<char>>) 
-> bool {
        
    }
}";"";"2020-03-25 15:18:05"
2782;222;"C";"bool isValidSudoku(char** board, int boardSize, 
int* boardColSize){
 
}";"";"2020-03-25 15:18:05"
2783;222;"Scala";"object Solution {
    def isValidSudoku(board: Array[Array[Char]]): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:05"
2784;222;"Go";"func isValidSudoku(board [][]byte) bool {
 
}";"";"2020-03-25 15:18:05"
2785;222;"Kotlin";"class Solution {
    fun isValidSudoku(board: Array<CharArray>): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:05"
2786;222;"Python3";"class Solution:
    def isValidSudoku(self, board: List[List[str]]) 
-> bool:";"";"2020-03-25 15:18:05"
2787;222;"JavaScript";"/**
 * @param {character[][]} board
 * @return {boolean}
 */
var isValidSudoku = function(board) {
 
};";"";"2020-03-25 15:18:05"
2788;222;"PHP";"class Solution {";"";"2020-03-25 15:18:05"
2789;222;"Swift";"class Solution {
    func isValidSudoku(_ board: [[Character]]) -> 
Bool {
        
    }
}";"";"2020-03-25 15:18:05"
2790;222;"Ruby";"# @param {Character[][]} board
# @return {Boolean}
def is_valid_sudoku(board)
 
end";"";"2020-03-25 15:18:05"
2791;222;"Python";"class Solution(object):
    def isValidSudoku(self, board):
        """"""
        :type board: List[List[str]]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:05"
2792;223;"C#";"/*
// Definition for a QuadTree node.
public class Node {
    public bool val;
    public bool isLeaf;
    public Node topLeft;
    public Node topRight;
    public Node bottomLeft;
    public Node bottomRight;
 
    public Node(){}
    public Node(bool _val,bool _isLeaf,Node 
_topLeft,Node _topRight,Node _bottomLeft,Node 
_bottomRight) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = _topLeft;
        topRight = _topRight;
        bottomLeft = _bottomLeft;
        bottomRight = _bottomRight;
    }
}
*/
public class Solution {
    public Node Intersect(Node quadTree1, Node 
quadTree2) {";"";"2020-03-25 15:18:05"
2793;223;"Java";"/*
// Definition for a QuadTree node.
class Node {
    public boolean val;
    public boolean isLeaf;
    public Node topLeft;
    public Node topRight;
    public Node bottomLeft;
    public Node bottomRight;
 
    public Node() {}
 
    public Node(boolean _val,boolean _isLeaf,Node 
_topLeft,Node _topRight,Node _bottomLeft,Node 
_bottomRight) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = _topLeft;
        topRight = _topRight;
        bottomLeft = _bottomLeft;
        bottomRight = _bottomRight;
    }
};
*/
class Solution {
    public Node intersect(Node quadTree1, Node ";"";"2020-03-25 15:18:05"
2794;223;"Python3";"""""""
# Definition for a QuadTree node.
class Node:
    def __init__(self, val, isLeaf, topLeft, 
topRight, bottomLeft, bottomRight):
        self.val = val
        self.isLeaf = isLeaf
        self.topLeft = topLeft
        self.topRight = topRight
        self.bottomLeft = bottomLeft
        self.bottomRight = bottomRight
""""""
class Solution:
    def intersect(self, quadTree1: 'Node', 
quadTree2: 'Node') -> 'Node':";"";"2020-03-25 15:18:05"
2795;223;"JavaScript";"/**
 * // Definition for a QuadTree node.
 * function Node(val,isLeaf,topLeft,topRight,
bottomLeft,bottomRight) {
 *    this.val = val;
 *    this.isLeaf = isLeaf;
 *    this.topLeft = topLeft;
 *    this.topRight = topRight;
 *    this.bottomLeft = bottomLeft;
 *    this.bottomRight = bottomRight;
 * };
 */
/**
 * @param {Node} quadTree1
 * @param {Node} quadTree2
 * @return {Node}
 */
var intersect = function(quadTree1, quadTree2) {
    
};";"";"2020-03-25 15:18:05"
2796;223;"PHP";"";"";"2020-03-25 15:18:05"
2797;223;"Python";"""""""
# Definition for a QuadTree node.
class Node(object):
    def __init__(self, val, isLeaf, topLeft, 
topRight, bottomLeft, bottomRight):
        self.val = val
        self.isLeaf = isLeaf
        self.topLeft = topLeft
        self.topRight = topRight
        self.bottomLeft = bottomLeft
        self.bottomRight = bottomRight
""""""
class Solution(object):
    def intersect(self, quadTree1, quadTree2):
        """"""
        :type quadTree1: Node
        :type quadTree2: Node
        :rtype: Node
        """"""";"";"2020-03-25 15:18:05"
2798;224;"C#";"public class Solution {
    public int FindTargetSumWays(int[] nums, int S) 
{
 
    }
}";"";"2020-03-25 15:18:05"
2799;224;"Java";"class Solution {
    public int findTargetSumWays(int[] nums, int S) 
{
 
    }
}";"";"2020-03-25 15:18:05"
2800;224;"C";"int findTargetSumWays(int* nums, int numsSize, int 
S){
 
}";"";"2020-03-25 15:18:05"
2801;224;"Rust";"impl Solution {
    pub fn find_target_sum_ways(nums: Vec<i32>, s: 
i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:05"
2802;224;"Scala";"object Solution {
    def findTargetSumWays(nums: Array[Int], S: Int)
: Int = {
 
    }
}";"";"2020-03-25 15:18:05"
2803;224;"Go";"func findTargetSumWays(nums []int, S int) int {
 
}";"";"2020-03-25 15:18:05"
2804;224;"Kotlin";"class Solution {
    fun findTargetSumWays(nums: IntArray, S: Int): 
Int {
 
    }
}";"";"2020-03-25 15:18:05"
2805;224;"Python3";"class Solution:
    def findTargetSumWays(self, nums: List[int], S: 
int) -> int:";"";"2020-03-25 15:18:05"
2806;224;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} S
 * @return {number}
 */
var findTargetSumWays = function(nums, S) {
 
};";"";"2020-03-25 15:18:05"
2807;224;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer $S
     * @return Integer
     */
    function findTargetSumWays($nums, $S) {
        
    }
}";"";"2020-03-25 15:18:05"
2808;224;"Swift";"class Solution {
    func findTargetSumWays(_ nums: [Int], _ S: Int) 
-> Int {
        
    }
}";"";"2020-03-25 15:18:05"
2809;224;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:18:05"
2810;224;"Python";"class Solution(object):
    def findTargetSumWays(self, nums, S):
        """"""
        :type nums: List[int]
        :type S: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:05"
2811;225;"C#";"public class Solution {
    public char FindTheDifference(string s, string 
t) {
 
    }
}";"";"2020-03-25 15:18:05"
2812;225;"Java";"class Solution {
    public char findTheDifference(String s, String 
t) {
 
    }
}";"";"2020-03-25 15:18:05"
2813;225;"C";"char findTheDifference(char * s, char * t){
 
}";"";"2020-03-25 15:18:05"
2814;225;"Rust";"impl Solution {
    pub fn find_the_difference(s: String, t: String)
 -> char {
        
    }
}";"";"2020-03-25 15:18:05"
2815;225;"Scala";"object Solution {
    def findTheDifference(s: String, t: String): 
Char = {
 
    }
}";"";"2020-03-25 15:18:05"
2816;225;"Go";"func findTheDifference(s string, t string) byte {
 
}";"";"2020-03-25 15:18:05"
2817;225;"Kotlin";"class Solution {
    fun findTheDifference(s: String, t: String): 
Char {
 
    }
}";"";"2020-03-25 15:18:05"
2818;225;"Python3";"class Solution:
    def findTheDifference(self, s: str, t: str) -> 
str:";"";"2020-03-25 15:18:05"
2819;225;"JavaScript";"/**
 * @param {string} s
 * @param {string} t
 * @return {character}
 */
var findTheDifference = function(s, t) {
 
};";"";"2020-03-25 15:18:05"
2820;225;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @param String $t
     * @return String
     */
    function findTheDifference($s, $t) {
        
    }
}";"";"2020-03-25 15:18:05"
2821;225;"Swift";"class Solution {
    func findTheDifference(_ s: String, _ t: String)
 -> Character {
        
    }
}";"";"2020-03-25 15:18:05"
2822;225;"Ruby";"# @param {String} s
# @param {String} t
# @return {Character}
def find_the_difference(s, t)
 
end";"";"2020-03-25 15:18:05"
2823;225;"Python";"class Solution(object):
    def findTheDifference(self, s, t):
        """"""
        :type s: str
        :type t: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:05"
2824;226;"C#";"public class Solution {
    public int MaxEqualFreq(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:05"
2825;226;"Java";"class Solution {
    public int maxEqualFreq(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:05"
2826;226;"Rust";"impl Solution {
    pub fn max_equal_freq(nums: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:05"
2827;226;"C";"int maxEqualFreq(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:05"
2828;226;"Scala";"object Solution {
    def maxEqualFreq(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:05"
2829;226;"Go";"func maxEqualFreq(nums []int) int {
 
}";"";"2020-03-25 15:18:05"
2830;226;"Kotlin";"class Solution {
    fun maxEqualFreq(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:05"
2831;226;"Python3";"class Solution:
    def maxEqualFreq(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:05"
2832;226;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var maxEqualFreq = function(nums) {
 
};";"";"2020-03-25 15:18:05"
2833;226;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function maxEqualFreq($nums) {
 
    }
}";"";"2020-03-25 15:18:05"
2834;226;"Swift";"class Solution {
    func maxEqualFreq(_ nums: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:05"
2835;226;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def max_equal_freq(nums)
 
end";"";"2020-03-25 15:18:05"
2836;226;"Python";"class Solution(object):
    def maxEqualFreq(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:05"
2837;227;"C#";"public class Solution {
    public int VideoStitching(int[][] clips, int T) 
{
 
    }
}";"";"2020-03-25 15:18:05"
2838;227;"Java";"class Solution {
    public int videoStitching(int[][] clips, int T) 
{
 
    }
}";"";"2020-03-25 15:18:05"
2839;227;"C";"int videoStitching(int** clips, int clipsSize, int* 
clipsColSize, int T){
 
}";"";"2020-03-25 15:18:05"
2840;227;"Rust";"impl Solution {
    pub fn video_stitching(clips: Vec<Vec<i32>>, t: 
i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:05"
2841;227;"Scala";"object Solution {
    def videoStitching(clips: Array[Array[Int]], T: 
Int): Int = {
 
    }
}";"";"2020-03-25 15:18:05"
2842;227;"Go";"func videoStitching(clips [][]int, T int) int {
 
}";"";"2020-03-25 15:18:05"
2843;227;"Kotlin";"class Solution {
    fun videoStitching(clips: Array<IntArray>, T: 
Int): Int {
 
    }
}";"";"2020-03-25 15:18:05"
2844;227;"Python3";"class Solution:
    def videoStitching(self, clips: List[List[int]],
 T: int) -> int:";"";"2020-03-25 15:18:05"
2845;227;"JavaScript";"/**
 * @param {number[][]} clips
 * @param {number} T
 * @return {number}
 */
var videoStitching = function(clips, T) {
 
};";"";"2020-03-25 15:18:05"
2846;227;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $clips
     * @param Integer $T
     * @return Integer
     */
    function videoStitching($clips, $T) {
        
    }
}";"";"2020-03-25 15:18:05"
2847;227;"Swift";"class Solution {
    func videoStitching(_ clips: [[Int]], _ T: Int) 
-> Int {
        
    }
}";"";"2020-03-25 15:18:05"
2848;227;"Ruby";"# @param {Integer[][]} clips";"";"2020-03-25 15:18:05"
2849;227;"Python";"class Solution(object):
    def videoStitching(self, clips, T):
        """"""
        :type clips: List[List[int]]
        :type T: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:05"
2850;228;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int SumRootToLeaf(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:05"
2851;228;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int sumRootToLeaf(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:05"
2852;228;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int sumRootToLeaf(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:05"
2853;228;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn sum_root_to_leaf(root: 
Option<Rc<RefCell<TreeNode>>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:05"
2854;228;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def sumRootToLeaf(root: TreeNode): Int = {
 
    }
}";"";"2020-03-25 15:18:05"
2855;228;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func sumRootToLeaf(root *TreeNode) int {
 
}";"";"2020-03-25 15:18:05"
2856;228;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun sumRootToLeaf(root: TreeNode?): Int {
 
    }
}";"";"2020-03-25 15:18:05"
2857;228;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def sumRootToLeaf(self, root: TreeNode) -> int:";"";"2020-03-25 15:18:05"
2858;228;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var sumRootToLeaf = function(root) {
 
};";"";"2020-03-25 15:18:05"
2859;228;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer
     */
    function sumRootToLeaf($root) {
        
    }
}";"";"2020-03-25 15:18:05"
2860;228;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func sumRootToLeaf(_ root: TreeNode?) -> Int {
        
    }
}";"";"2020-03-25 15:18:05"
2861;228;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer}
def sum_root_to_leaf(root)
 
end";"";"2020-03-25 15:18:05"
2862;228;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def sumRootToLeaf(self, root):
        """"""
        :type root: TreeNode
        :rtype: int
        """"""";"";"2020-03-25 15:18:05"
2863;229;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void DeleteNode(ListNode node) {
        
    }
}";"";"2020-03-25 15:18:05"
2864;229;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public void deleteNode(ListNode node) {
        
    }
}";"";"2020-03-25 15:18:05"
2865;229;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
void deleteNode(struct ListNode* node) {
    
}";"";"2020-03-25 15:18:05"
2866;229;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def deleteNode(self, node):
        """"""
        :type node: ListNode
        :rtype: void Do not return anything, modify 
node in-place instead.
        """"""";"";"2020-03-25 15:18:05"
2867;229;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} node
 * @return {void} Do not return anything, modify 
node in-place instead.
 */
var deleteNode = function(node) {
    
};";"";"2020-03-25 15:18:05"
2868;229;"Ruby";"# Definition for singly-linked list.";"";"2020-03-25 15:18:05"
2869;229;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def deleteNode(self, node):
        """"""
        :type node: ListNode
        :rtype: void Do not return anything, modify 
node in-place instead.
        """"""";"";"2020-03-25 15:18:05"
2870;230;"MS SQL Server";"/* Write your T-SQL query statement below */";"";"2020-03-25 15:18:05"
2871;230;"Oracle";"/* Write your PL/SQL query statement below */";"";"2020-03-25 15:18:05"
2872;231;"C#";"public class Solution {
    public int ReachableNodes(int[][] edges, int M, 
int N) {
 
    }
}";"";"2020-03-25 15:18:05"
2873;231;"Java";"class Solution {
    public int reachableNodes(int[][] edges, int M, 
int N) {
 
    }
}";"";"2020-03-25 15:18:05"
2874;231;"Rust";"impl Solution {
    pub fn reachable_nodes(edges: Vec<Vec<i32>>, m: 
i32, n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:05"
2875;231;"C";"int reachableNodes(int** edges, int edgesSize, int* 
edgesColSize, int M, int N){
 
}";"";"2020-03-25 15:18:05"
2876;231;"Scala";"object Solution {
    def reachableNodes(edges: Array[Array[Int]], M: 
Int, N: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:05"
2877;231;"Go";"func reachableNodes(edges [][]int, M int, N int) 
int {
 
}";"";"2020-03-25 15:18:05"
2878;231;"Kotlin";"class Solution {
    fun reachableNodes(edges: Array<IntArray>, M: 
Int, N: Int): Int {
 
    }
}";"";"2020-03-25 15:18:05"
2879;231;"Python3";"class Solution:
    def reachableNodes(self, edges: List[List[int]],
 M: int, N: int) -> int:";"";"2020-03-25 15:18:05"
2880;231;"JavaScript";"/**
 * @param {number[][]} edges
 * @param {number} M
 * @param {number} N
 * @return {number}
 */
var reachableNodes = function(edges, M, N) {
 
};";"";"2020-03-25 15:18:05"
2881;231;"PHP";"class Solution {";"";"2020-03-25 15:18:05"
2882;231;"Swift";"class Solution {
    func reachableNodes(_ edges: [[Int]], _ M: Int, 
_ N: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:05"
2883;231;"Ruby";"# @param {Integer[][]} edges
# @param {Integer} m
# @param {Integer} n
# @return {Integer}
def reachable_nodes(edges, m, n)
 
end";"";"2020-03-25 15:18:05"
2884;231;"Python";"class Solution(object):
    def reachableNodes(self, edges, M, N):
        """"""
        :type edges: List[List[int]]
        :type M: int
        :type N: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:05"
2885;232;"C#";"public class Solution {
    public int SuperpalindromesInRange(string L, 
string R) {
 
    }
}";"";"2020-03-25 15:18:05"
2886;232;"Java";"class Solution {
    public int superpalindromesInRange(String L, 
String R) {
 
    }
}";"";"2020-03-25 15:18:05"
2887;232;"C";"int superpalindromesInRange(char * L, char * R){
 
}";"";"2020-03-25 15:18:05"
2888;232;"Rust";"impl Solution {
    pub fn superpalindromes_in_range(l: String, r: 
String) -> i32 {
        
    }
}";"";"2020-03-25 15:18:05"
2889;232;"Scala";"object Solution {
    def superpalindromesInRange(L: String, R: 
String): Int = {
 
    }
}";"";"2020-03-25 15:18:05"
2890;232;"Go";"func superpalindromesInRange(L string, R string) 
int {
 
}";"";"2020-03-25 15:18:05"
2891;232;"Kotlin";"class Solution {
    fun superpalindromesInRange(L: String, R: 
String): Int {
 
    }
}";"";"2020-03-25 15:18:05"
2892;232;"Python3";"class Solution:
    def superpalindromesInRange(self, L: str, R: 
str) -> int:";"";"2020-03-25 15:18:05"
2893;232;"JavaScript";"/**
 * @param {string} L
 * @param {string} R
 * @return {number}
 */
var superpalindromesInRange = function(L, R) {
 
};";"";"2020-03-25 15:18:05"
2894;232;"PHP";"class Solution {
 
    /**
     * @param String $L
     * @param String $R
     * @return Integer
     */
    function superpalindromesInRange($L, $R) {
        
    }
}";"";"2020-03-25 15:18:05"
2895;232;"Swift";"class Solution {
    func superpalindromesInRange(_ L: String, _ R: 
String) -> Int {
        
    }
}";"";"2020-03-25 15:18:05"
2896;232;"Ruby";"# @param {String} l";"";"2020-03-25 15:18:05"
2897;232;"Python";"class Solution(object):
    def superpalindromesInRange(self, L, R):
        """"""
        :type L: str
        :type R: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:05"
2898;233;"C#";"public class Solution {
    public int FindMinMoves(int[] machines) {
 
    }
}";"";"2020-03-25 15:18:05"
2899;233;"Java";"class Solution {
    public int findMinMoves(int[] machines) {
 
    }
}";"";"2020-03-25 15:18:05"
2900;233;"Rust";"impl Solution {
    pub fn find_min_moves(machines: Vec<i32>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:05"
2901;233;"C";"int findMinMoves(int* machines, int machinesSize){
 
}";"";"2020-03-25 15:18:05"
2902;233;"Scala";"object Solution {
    def findMinMoves(machines: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:05"
2903;233;"Go";"func findMinMoves(machines []int) int {
 
}";"";"2020-03-25 15:18:05"
2904;233;"Kotlin";"class Solution {
    fun findMinMoves(machines: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:05"
2905;233;"Python3";"class Solution:
    def findMinMoves(self, machines: List[int]) -> 
int:";"";"2020-03-25 15:18:05"
2906;233;"JavaScript";"/**
 * @param {number[]} machines
 * @return {number}
 */
var findMinMoves = function(machines) {
 
};";"";"2020-03-25 15:18:05"
2907;233;"PHP";"class Solution {
 
    /**
     * @param Integer[] $machines
     * @return Integer
     */
    function findMinMoves($machines) {
        
    }
}";"";"2020-03-25 15:18:05"
2908;233;"Swift";"class Solution {
    func findMinMoves(_ machines: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:05"
2909;233;"Ruby";"# @param {Integer[]} machines
# @return {Integer}
def find_min_moves(machines)
 
end";"";"2020-03-25 15:18:05"
2910;233;"Python";"class Solution(object):
    def findMinMoves(self, machines):
        """"""
        :type machines: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:05"
2911;234;"C#";"public class Solution {
 
    public Solution(int[] nums) {
 
    }
    
    public int Pick(int target) {
 
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * Solution obj = new Solution(nums);
 * int param_1 = obj.Pick(target);
 */";"";"2020-03-25 15:18:05"
2912;234;"Java";"class Solution {
 
    public Solution(int[] nums) {
 
    }
    
    public int pick(int target) {
 
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * Solution obj = new Solution(nums);
 * int param_1 = obj.pick(target);
 */";"";"2020-03-25 15:18:05"
2913;234;"Rust";"struct Solution {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl Solution {
 
    fn new(nums: Vec<i32>) -> Self {
        
    }
    
    fn pick(&self, target: i32) -> i32 {
        
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * let obj = Solution::new(nums);";"";"2020-03-25 15:18:05"
2914;234;"C";"typedef struct {
    
} Solution;
 
 
Solution* solutionCreate(int* nums, int numsSize) {
    
}
 
int solutionPick(Solution* obj, int target) {
  
}
 
void solutionFree(Solution* obj) {
    
}
 
/**
 * Your Solution struct will be instantiated and 
called as such:
 * Solution* obj = solutionCreate(nums, numsSize);
 * int param_1 = solutionPick(obj, target);
 
 * solutionFree(obj);
*/";"";"2020-03-25 15:18:05"
2915;234;"Scala";"class Solution(_nums: Array[Int]) {
 
    def pick(target: Int): Int = {
 
    }
 
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * var obj = new Solution(nums)
 * var param_1 = obj.pick(target)
 */";"";"2020-03-25 15:18:05"
2916;234;"Go";"type Solution struct {
 
}
 
 
func Constructor(nums []int) Solution {
 
}
 
 
func (this *Solution) Pick(target int) int {
 
}
 
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * obj := Constructor(nums);
 * param_1 := obj.Pick(target);
 */";"";"2020-03-25 15:18:05"
2917;234;"Kotlin";"class Solution(nums: IntArray) {
 
    fun pick(target: Int): Int {
 
    }
 
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * var obj = Solution(nums)
 * var param_1 = obj.pick(target)
 */";"";"2020-03-25 15:18:05"
2918;234;"Python3";"class Solution:
 
    def __init__(self, nums: List[int]):
        
 
    def pick(self, target: int) -> int:
        
 
 
# Your Solution object will be instantiated and 
called as such:
# obj = Solution(nums)
# param_1 = obj.pick(target)";"";"2020-03-25 15:18:05"
2919;234;"JavaScript";"/**
 * @param {number[]} nums
 */
var Solution = function(nums) {
 
};
 
/** 
 * @param {number} target
 * @return {number}
 */
Solution.prototype.pick = function(target) {
 
};
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * var obj = new Solution(nums)
 * var param_1 = obj.pick(target)
 */";"";"2020-03-25 15:18:05"
2920;234;"PHP";"class Solution {";"";"2020-03-25 15:18:05"
2921;234;"Swift";"class Solution {
 
    init(_ nums: [Int]) {
        
    }
    
    func pick(_ target: Int) -> Int {
        
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * let obj = Solution(nums)
 * let ret_1: Int = obj.pick(target)
 */";"";"2020-03-25 15:18:05"
2922;234;"Ruby";"class Solution
 
=begin
    :type nums: Integer[]
=end
    def initialize(nums)
 
    end
 
 
=begin
    :type target: Integer
    :rtype: Integer
=end
    def pick(target)
 
    end
 
 
end
 
# Your Solution object will be instantiated and 
called as such:
# obj = Solution.new(nums)
# param_1 = obj.pick(target)";"";"2020-03-25 15:18:05"
2923;234;"Python";"class Solution(object):
 
    def __init__(self, nums):
        """"""
        :type nums: List[int]
        """"""
        
 
    def pick(self, target):
        """"""
        :type target: int
        :rtype: int
        """"""
        
 
 
# Your Solution object will be instantiated and 
called as such:
# obj = Solution(nums)
# param_1 = obj.pick(target)";"";"2020-03-25 15:18:05"
2924;235;"C#";"public class Solution {
    public int[] XorQueries(int[] arr, int[][] 
queries) {
 
    }
}";"";"2020-03-25 15:18:05"
2925;235;"Java";"class Solution {
    public int[] xorQueries(int[] arr, int[][] 
queries) {
 
    }
}";"";"2020-03-25 15:18:05"
2926;235;"Rust";"impl Solution {
    pub fn xor_queries(arr: Vec<i32>, queries: 
Vec<Vec<i32>>) -> Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:05"
2927;235;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* xorQueries(int* arr, int arrSize, int** 
queries, int queriesSize, int* queriesColSize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:05"
2928;235;"Scala";"object Solution {
    def xorQueries(arr: Array[Int], queries: Array
[Array[Int]]): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:05"
2929;235;"Go";"func xorQueries(arr []int, queries [][]int) []int {
 
}";"";"2020-03-25 15:18:05"
2930;235;"Kotlin";"class Solution {
    fun xorQueries(arr: IntArray, queries: 
Array<IntArray>): IntArray {
 
    }
}";"";"2020-03-25 15:18:05"
2931;235;"Python3";"class Solution:
    def xorQueries(self, arr: List[int], queries: 
List[List[int]]) -> List[int]:";"";"2020-03-25 15:18:05"
2932;235;"JavaScript";"/**
 * @param {number[]} arr
 * @param {number[][]} queries
 * @return {number[]}
 */
var xorQueries = function(arr, queries) {
 
};";"";"2020-03-25 15:18:05"
2933;235;"PHP";"class Solution {";"";"2020-03-25 15:18:05"
2934;235;"Swift";"class Solution {
    func xorQueries(_ arr: [Int], _ queries: [[Int]]
) -> [Int] {
 
    }
}";"";"2020-03-25 15:18:05"
2935;235;"Ruby";"# @param {Integer[]} arr
# @param {Integer[][]} queries
# @return {Integer[]}
def xor_queries(arr, queries)
 
end";"";"2020-03-25 15:18:05"
2936;235;"Python";"class Solution(object):
    def xorQueries(self, arr, queries):
        """"""
        :type arr: List[int]
        :type queries: List[List[int]]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:05"
2937;236;"C#";"public class Solution {
    public int UniquePaths(int m, int n) {
 
    }
}";"";"2020-03-25 15:18:06"
2938;236;"Java";"class Solution {
    public int uniquePaths(int m, int n) {
 
    }
}";"";"2020-03-25 15:18:06"
2939;236;"Rust";"impl Solution {
    pub fn unique_paths(m: i32, n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:06"
2940;236;"C";"int uniquePaths(int m, int n){
 
}";"";"2020-03-25 15:18:06"
2941;236;"Scala";"object Solution {
    def uniquePaths(m: Int, n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:06"
2942;236;"Go";"func uniquePaths(m int, n int) int {
 
}";"";"2020-03-25 15:18:06"
2943;236;"Kotlin";"class Solution {
    fun uniquePaths(m: Int, n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:06"
2944;236;"Python3";"class Solution:
    def uniquePaths(self, m: int, n: int) -> int:";"";"2020-03-25 15:18:06"
2945;236;"JavaScript";"/**
 * @param {number} m
 * @param {number} n
 * @return {number}
 */
var uniquePaths = function(m, n) {
 
};";"";"2020-03-25 15:18:06"
2946;236;"PHP";"class Solution {";"";"2020-03-25 15:18:06"
2947;236;"Swift";"class Solution {
    func uniquePaths(_ m: Int, _ n: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:06"
2948;236;"Ruby";"# @param {Integer} m
# @param {Integer} n
# @return {Integer}
def unique_paths(m, n)
 
end";"";"2020-03-25 15:18:06"
2949;236;"Python";"class Solution(object):
    def uniquePaths(self, m, n):
        """"""
        :type m: int
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:06"
2950;237;"C#";"public class Solution {
    public string[] Permutation(string S) {
 
    }
}";"";"2020-03-25 15:18:06"
2951;237;"Java";"class Solution {
    public String[] permutation(String S) {
 
    }
}";"";"2020-03-25 15:18:06"
2952;237;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char** permutation(char* S, int* returnSize){
 
}";"";"2020-03-25 15:18:06"
2953;237;"Rust";"impl Solution {
    pub fn permutation(s: String) -> Vec<String> {
 
    }
}";"";"2020-03-25 15:18:06"
2954;237;"Scala";"object Solution {
    def permutation(S: String): Array[String] = {
 
    }
}";"";"2020-03-25 15:18:06"
2955;237;"Go";"func permutation(S string) []string {
 
}";"";"2020-03-25 15:18:06"
2956;237;"Kotlin";"class Solution {
    fun permutation(S: String): Array<String> {
 
    }
}";"";"2020-03-25 15:18:06"
2957;237;"Python3";"class Solution:
    def permutation(self, S: str) -> List[str]:";"";"2020-03-25 15:18:06"
2958;237;"JavaScript";"/**
 * @param {string} S
 * @return {string[]}
 */
var permutation = function(S) {
 
};";"";"2020-03-25 15:18:06"
2959;237;"PHP";"class Solution {
 
    /**
     * @param String $S
     * @return String[]
     */
    function permutation($S) {
 
    }
}";"";"2020-03-25 15:18:06"
2960;237;"Swift";"class Solution {
    func permutation(_ S: String) -> [String] {
 
    }
}";"";"2020-03-25 15:18:06"
2961;237;"Ruby";"# @param {String} s";"";"2020-03-25 15:18:06"
2962;237;"Python";"class Solution(object):
    def permutation(self, S):
        """"""
        :type S: str
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:06"
2963;238;"C#";"public class RLEIterator {
 
    public RLEIterator(int[] A) {
 
    }
    
    public int Next(int n) {
 
    }
}
 
/**
 * Your RLEIterator object will be instantiated and 
called as such:
 * RLEIterator obj = new RLEIterator(A);
 * int param_1 = obj.Next(n);
 */";"";"2020-03-25 15:18:06"
2964;238;"Java";"class RLEIterator {
 
    public RLEIterator(int[] A) {
 
    }
    
    public int next(int n) {
 
    }
}
 
/**
 * Your RLEIterator object will be instantiated and 
called as such:
 * RLEIterator obj = new RLEIterator(A);
 * int param_1 = obj.next(n);
 */";"";"2020-03-25 15:18:06"
2965;238;"Rust";"struct RLEIterator {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl RLEIterator {
 
    fn new(A: Vec<i32>) -> Self {
        
    }
    
    fn next(&self, n: i32) -> i32 {
        
    }
}
 
/**
 * Your RLEIterator object will be instantiated and 
called as such:
 * let obj = RLEIterator::new(A);";"";"2020-03-25 15:18:06"
2966;238;"C";"typedef struct {
    
} RLEIterator;
 
 
RLEIterator* rLEIteratorCreate(int* A, int ASize) {
    
}
 
int rLEIteratorNext(RLEIterator* obj, int n) {
  
}
 
void rLEIteratorFree(RLEIterator* obj) {
    
}
 
/**
 * Your RLEIterator struct will be instantiated and 
called as such:
 * RLEIterator* obj = rLEIteratorCreate(A, ASize);
 * int param_1 = rLEIteratorNext(obj, n);
 
 * rLEIteratorFree(obj);
*/";"";"2020-03-25 15:18:06"
2967;238;"Scala";"class RLEIterator(_A: Array[Int]) {
 
    def next(n: Int): Int = {
 
    }
 
}
 
/**
 * Your RLEIterator object will be instantiated and 
called as such:
 * var obj = new RLEIterator(A)
 * var param_1 = obj.next(n)
 */";"";"2020-03-25 15:18:06"
2968;238;"Go";"type RLEIterator struct {
 
}
 
 
func Constructor(A []int) RLEIterator {
 
}
 
 
func (this *RLEIterator) Next(n int) int {
 
}
 
 
/**
 * Your RLEIterator object will be instantiated and 
called as such:
 * obj := Constructor(A);
 * param_1 := obj.Next(n);
 */";"";"2020-03-25 15:18:06"
2969;238;"Kotlin";"class RLEIterator(A: IntArray) {
 
    fun next(n: Int): Int {
 
    }
 
}
 
/**
 * Your RLEIterator object will be instantiated and 
called as such:
 * var obj = RLEIterator(A)
 * var param_1 = obj.next(n)
 */";"";"2020-03-25 15:18:06"
2970;238;"Python3";"class RLEIterator:
 
    def __init__(self, A: List[int]):
        
 
    def next(self, n: int) -> int:
        
 
 
# Your RLEIterator object will be instantiated and 
called as such:
# obj = RLEIterator(A)
# param_1 = obj.next(n)";"";"2020-03-25 15:18:06"
2971;238;"JavaScript";"/**
 * @param {number[]} A
 */
var RLEIterator = function(A) {
 
};
 
/** 
 * @param {number} n
 * @return {number}
 */
RLEIterator.prototype.next = function(n) {
 
};
 
/**
 * Your RLEIterator object will be instantiated and 
called as such:
 * var obj = new RLEIterator(A)
 * var param_1 = obj.next(n)
 */";"";"2020-03-25 15:18:06"
2972;238;"PHP";"class RLEIterator {";"";"2020-03-25 15:18:06"
2973;238;"Swift";"class RLEIterator {
 
    init(_ A: [Int]) {
        
    }
    
    func next(_ n: Int) -> Int {
        
    }
}
 
/**
 * Your RLEIterator object will be instantiated and 
called as such:
 * let obj = RLEIterator(A)
 * let ret_1: Int = obj.next(n)
 */";"";"2020-03-25 15:18:06"
2974;238;"Ruby";"class RLEIterator
 
=begin
    :type a: Integer[]
=end
    def initialize(a)
 
    end
 
 
=begin
    :type n: Integer
    :rtype: Integer
=end
    def next(n)
 
    end
 
 
end
 
# Your RLEIterator object will be instantiated and 
called as such:
# obj = RLEIterator.new(a)
# param_1 = obj.next(n)";"";"2020-03-25 15:18:06"
2975;238;"Python";"class RLEIterator(object):
 
    def __init__(self, A):
        """"""
        :type A: List[int]
        """"""
        
 
    def next(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""
        
 
 
# Your RLEIterator object will be instantiated and 
called as such:
# obj = RLEIterator(A)
# param_1 = obj.next(n)";"";"2020-03-25 15:18:06"
2976;239;"C#";"public class Solution {
    public string ToHex(int num) {
 
    }
}";"";"2020-03-25 15:18:06"
2977;239;"Java";"class Solution {
    public String toHex(int num) {
 
    }
}";"";"2020-03-25 15:18:06"
2978;239;"C";"char * toHex(int num){
 
}";"";"2020-03-25 15:18:06"
2979;239;"Rust";"impl Solution {
    pub fn to_hex(num: i32) -> String {
        
    }
}";"";"2020-03-25 15:18:06"
2980;239;"Scala";"object Solution {
    def toHex(num: Int): String = {
 
    }
}";"";"2020-03-25 15:18:06"
2981;239;"Go";"func toHex(num int) string {
 
}";"";"2020-03-25 15:18:06"
2982;239;"Kotlin";"class Solution {
    fun toHex(num: Int): String {
 
    }
}";"";"2020-03-25 15:18:06"
2983;239;"Python3";"class Solution:
    def toHex(self, num: int) -> str:";"";"2020-03-25 15:18:06"
2984;239;"JavaScript";"/**
 * @param {number} num
 * @return {string}
 */
var toHex = function(num) {
 
};";"";"2020-03-25 15:18:06"
2985;239;"PHP";"class Solution {
 
    /**
     * @param Integer $num
     * @return String
     */
    function toHex($num) {
        
    }
}";"";"2020-03-25 15:18:06"
2986;239;"Swift";"class Solution {
    func toHex(_ num: Int) -> String {
        
    }
}";"";"2020-03-25 15:18:06"
2987;239;"Ruby";"# @param {Integer} num
# @return {String}
def to_hex(num)
 
end";"";"2020-03-25 15:18:06"
2988;239;"Python";"class Solution(object):
    def toHex(self, num):
        """"""
        :type num: int
        :rtype: str
        """"""";"";"2020-03-25 15:18:06"
2989;240;"C#";"public class Solution {
    public int CountOrders(int n) {
 
    }
}";"";"2020-03-25 15:18:06"
2990;240;"Java";"class Solution {
    public int countOrders(int n) {
 
    }
}";"";"2020-03-25 15:18:06"
2991;240;"Rust";"impl Solution {
    pub fn count_orders(n: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:06"
2992;240;"C";"int countOrders(int n){
 
}";"";"2020-03-25 15:18:06"
2993;240;"Scala";"object Solution {
    def countOrders(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:06"
2994;240;"Go";"func countOrders(n int) int {
 
}";"";"2020-03-25 15:18:06"
2995;240;"Kotlin";"class Solution {
    fun countOrders(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:06"
2996;240;"Python3";"class Solution:
    def countOrders(self, n: int) -> int:";"";"2020-03-25 15:18:06"
2997;240;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var countOrders = function(n) {
 
};";"";"2020-03-25 15:18:06"
2998;240;"PHP";"class Solution {";"";"2020-03-25 15:18:06"
2999;240;"Swift";"class Solution {
    func countOrders(_ n: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:06"
3000;240;"Ruby";"# @param {Integer} n
# @return {Integer}
def count_orders(n)
 
end";"";"2020-03-25 15:18:06"
3001;240;"Python";"class Solution(object):
    def countOrders(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:06"
3002;241;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode DetectCycle(ListNode head) {
        
    }
}";"";"2020-03-25 15:18:06"
3003;241;"Java";"/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        
    }
}";"";"2020-03-25 15:18:06"
3004;241;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode *detectCycle(struct ListNode *head) 
{
    
}";"";"2020-03-25 15:18:06"
3005;241;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
 
object Solution {
    def detectCycle(head: ListNode): ListNode = {
        
    }
}";"";"2020-03-25 15:18:06"
3006;241;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def detectCycle(self, head: ListNode) -> 
ListNode:";"";"2020-03-25 15:18:06"
3007;241;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
 
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var detectCycle = function(head) {
    
};";"";"2020-03-25 15:18:06"
3008;241;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func detectCycle(head *ListNode) *ListNode {
    
}";"";"2020-03-25 15:18:06"
3009;241;"PHP";"/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
 
class Solution {
    /**
     * @param ListNode $head
     * @return ListNode
     */
    function detectCycle($head) {
        
    }
}";"";"2020-03-25 15:18:06"
3010;241;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
 
class Solution {
    func detectCycle(_ head: ListNode?) -> ListNode?
 {
        
    }
}";"";"2020-03-25 15:18:06"
3011;241;"Ruby";"# Definition for singly-linked list.";"";"2020-03-25 15:18:06"
3012;241;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def detectCycle(self, head):
        """"""
        :type head: ListNode
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:06"
3013;241;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
 
class Solution {
    fun detectCycle(head: ListNode?): ListNode? {
        
    }
}";"";"2020-03-25 15:18:06"
3014;242;"C#";"public class Solution {
    public int MaxValueAfterReverse(int[] nums) {
        
    }
}";"";"2020-03-25 15:18:06"
3015;242;"Java";"class Solution {
    public int maxValueAfterReverse(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:06"
3016;242;"C";"int maxValueAfterReverse(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:06"
3017;242;"Rust";"impl Solution {
    pub fn max_value_after_reverse(nums: Vec<i32>) 
-> i32 {
 
    }
}";"";"2020-03-25 15:18:06"
3018;242;"Scala";"object Solution {
    def maxValueAfterReverse(nums: Array[Int]): Int 
= {
 
    }
}";"";"2020-03-25 15:18:06"
3019;242;"Go";"func maxValueAfterReverse(nums []int) int {
 
}";"";"2020-03-25 15:18:06"
3020;242;"Kotlin";"class Solution {
    fun maxValueAfterReverse(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:06"
3021;242;"Python3";"class Solution:
    def maxValueAfterReverse(self, nums: List[int]) 
-> int:";"";"2020-03-25 15:18:06"
3022;242;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var maxValueAfterReverse = function(nums) {
    
};";"";"2020-03-25 15:18:06"
3023;242;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function maxValueAfterReverse($nums) {
 
    }
}";"";"2020-03-25 15:18:06"
3024;242;"Swift";"class Solution {
    func maxValueAfterReverse(_ nums: [Int]) -> Int 
{
 
    }
}";"";"2020-03-25 15:18:06"
3025;242;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:18:06"
3026;242;"Python";"class Solution(object):
    def maxValueAfterReverse(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:06"
3027;243;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int FindBottomLeftValue(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:06"
3028;243;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int findBottomLeftValue(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:06"
3029;243;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn find_bottom_left_value(root: 
Option<Rc<RefCell<TreeNode>>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:06"
3030;243;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int findBottomLeftValue(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:06"
3031;243;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def findBottomLeftValue(root: TreeNode): Int = {
 
    }
}";"";"2020-03-25 15:18:06"
3032;243;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func findBottomLeftValue(root *TreeNode) int {
 
}";"";"2020-03-25 15:18:06"
3033;243;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun findBottomLeftValue(root: TreeNode?): Int {
 
    }
}";"";"2020-03-25 15:18:06"
3034;243;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def findBottomLeftValue(self, root: TreeNode) 
-> int:";"";"2020-03-25 15:18:06"
3035;243;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var findBottomLeftValue = function(root) {
 
};";"";"2020-03-25 15:18:06"
3036;243;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer
     */
    function findBottomLeftValue($root) {
        
    }
}";"";"2020-03-25 15:18:06"
3037;243;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func findBottomLeftValue(_ root: TreeNode?) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:06"
3038;243;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer}
def find_bottom_left_value(root)
 
end";"";"2020-03-25 15:18:06"
3039;243;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def findBottomLeftValue(self, root):
        """"""
        :type root: TreeNode
        :rtype: int
        """"""";"";"2020-03-25 15:18:06"
3040;244;"C#";"public class Solution {
    public int[] DiStringMatch(string S) {
 
    }
}";"";"2020-03-25 15:18:06"
3041;244;"Java";"class Solution {
    public int[] diStringMatch(String S) {
 
    }
}";"";"2020-03-25 15:18:06"
3042;244;"Rust";"impl Solution {
    pub fn di_string_match(s: String) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:06"
3043;244;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* diStringMatch(char * S, int* returnSize){
 
}";"";"2020-03-25 15:18:06"
3044;244;"Scala";"object Solution {
    def diStringMatch(S: String): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:06"
3045;244;"Go";"func diStringMatch(S string) []int {
 
}";"";"2020-03-25 15:18:06"
3046;244;"Kotlin";"class Solution {
    fun diStringMatch(S: String): IntArray {
 
    }
}";"";"2020-03-25 15:18:06"
3047;244;"Python3";"class Solution:
    def diStringMatch(self, S: str) -> List[int]:";"";"2020-03-25 15:18:06"
3048;244;"JavaScript";"/**
 * @param {string} S
 * @return {number[]}
 */
var diStringMatch = function(S) {
 
};";"";"2020-03-25 15:18:06"
3049;244;"PHP";"class Solution {";"";"2020-03-25 15:18:06"
3050;244;"Swift";"class Solution {
    func diStringMatch(_ S: String) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:06"
3051;244;"Ruby";"# @param {String} s
# @return {Integer[]}
def di_string_match(s)
 
end";"";"2020-03-25 15:18:06"
3052;244;"Python";"class Solution(object):
    def diStringMatch(self, S):
        """"""
        :type S: str
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:06"
3053;245;"C#";"public class Solution {
    public double MyPow(double x, int n) {
 
    }
}";"";"2020-03-25 15:18:06"
3054;245;"Java";"class Solution {
    public double myPow(double x, int n) {
 
    }
}";"";"2020-03-25 15:18:06"
3055;245;"C";"double myPow(double x, int n){
 
}";"";"2020-03-25 15:18:06"
3056;245;"Rust";"impl Solution {
    pub fn my_pow(x: f64, n: i32) -> f64 {
        
    }
}";"";"2020-03-25 15:18:06"
3057;245;"Scala";"object Solution {
    def myPow(x: Double, n: Int): Double = {
 
    }
}";"";"2020-03-25 15:18:06"
3058;245;"Go";"func myPow(x float64, n int) float64 {
 
}";"";"2020-03-25 15:18:06"
3059;245;"Kotlin";"class Solution {
    fun myPow(x: Double, n: Int): Double {
 
    }
}";"";"2020-03-25 15:18:06"
3060;245;"Python3";"class Solution:
    def myPow(self, x: float, n: int) -> float:";"";"2020-03-25 15:18:06"
3061;245;"JavaScript";"/**
 * @param {number} x
 * @param {number} n
 * @return {number}
 */
var myPow = function(x, n) {
 
};";"";"2020-03-25 15:18:06"
3062;245;"PHP";"class Solution {
 
    /**
     * @param Float $x
     * @param Integer $n
     * @return Float
     */
    function myPow($x, $n) {
        
    }
}";"";"2020-03-25 15:18:06"
3063;245;"Swift";"class Solution {
    func myPow(_ x: Double, _ n: Int) -> Double {
        
    }
}";"";"2020-03-25 15:18:06"
3064;245;"Ruby";"# @param {Float} x";"";"2020-03-25 15:18:06"
3065;245;"Python";"class Solution(object):
    def myPow(self, x, n):
        """"""
        :type x: float
        :type n: int
        :rtype: float
        """"""";"";"2020-03-25 15:18:06"
3066;246;"C#";"public class Solution {
    public IList<IList<int>> GroupThePeople(int[] 
groupSizes) {
 
    }
}";"";"2020-03-25 15:18:06"
3067;246;"Java";"class Solution {
    public List<List<Integer>> groupThePeople(int[] 
groupSizes) {
 
    }
}";"";"2020-03-25 15:18:06"
3068;246;"Rust";"impl Solution {
    pub fn group_the_people(group_sizes: Vec<i32>) 
-> Vec<Vec<i32>> {
 
    }
}";"";"2020-03-25 15:18:06"
3069;246;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** groupThePeople(int* groupSizes, int 
groupSizesSize, int* returnSize, int** 
returnColumnSizes){
 
}";"";"2020-03-25 15:18:06"
3070;246;"Scala";"object Solution {
    def groupThePeople(groupSizes: Array[Int]): List
[List[Int]] = {
 
    }
}";"";"2020-03-25 15:18:06"
3071;246;"Go";"func groupThePeople(groupSizes []int) [][]int {
 
}";"";"2020-03-25 15:18:06"
3072;246;"Kotlin";"class Solution {
    fun groupThePeople(groupSizes: IntArray): 
List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:06"
3073;246;"Python3";"class Solution:
    def groupThePeople(self, groupSizes: List[int]) 
-> List[List[int]]:";"";"2020-03-25 15:18:06"
3074;246;"JavaScript";"/**
 * @param {number[]} groupSizes
 * @return {number[][]}
 */
var groupThePeople = function(groupSizes) {
 
};";"";"2020-03-25 15:18:06"
3075;246;"PHP";"class Solution {
 
    /**
     * @param Integer[] $groupSizes
     * @return Integer[][]
     */
    function groupThePeople($groupSizes) {
 
    }
}";"";"2020-03-25 15:18:06"
3076;246;"Swift";"class Solution {
    func groupThePeople(_ groupSizes: [Int]) -> [
[Int]] {
 
    }
}";"";"2020-03-25 15:18:06"
3077;246;"Ruby";"# @param {Integer[]} group_sizes
# @return {Integer[][]}
def group_the_people(group_sizes)
 
end";"";"2020-03-25 15:18:06"
3078;246;"Python";"class Solution(object):
    def groupThePeople(self, groupSizes):
        """"""
        :type groupSizes: List[int]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:06"
3079;247;"C#";"public class Solution {
    public int KthSmallest(int[][] matrix, int k) {
 
    }
}";"";"2020-03-25 15:18:06"
3080;247;"Java";"class Solution {
    public int kthSmallest(int[][] matrix, int k) {
 
    }
}";"";"2020-03-25 15:18:06"
3081;247;"C";"int kthSmallest(int** matrix, int matrixSize, int* 
matrixColSize, int k){
 
}";"";"2020-03-25 15:18:06"
3082;247;"Rust";"impl Solution {
    pub fn kth_smallest(matrix: Vec<Vec<i32>>, k: 
i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:06"
3083;247;"Scala";"object Solution {
    def kthSmallest(matrix: Array[Array[Int]], k: 
Int): Int = {
 
    }
}";"";"2020-03-25 15:18:06"
3084;247;"Go";"func kthSmallest(matrix [][]int, k int) int {
 
}";"";"2020-03-25 15:18:06"
3085;247;"Kotlin";"class Solution {
    fun kthSmallest(matrix: Array<IntArray>, k: Int)
: Int {
 
    }
}";"";"2020-03-25 15:18:06"
3086;247;"Python3";"class Solution:
    def kthSmallest(self, matrix: List[List[int]], 
k: int) -> int:";"";"2020-03-25 15:18:06"
3087;247;"JavaScript";"/**
 * @param {number[][]} matrix
 * @param {number} k
 * @return {number}
 */
var kthSmallest = function(matrix, k) {
 
};";"";"2020-03-25 15:18:06"
3088;247;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $matrix
     * @param Integer $k
     * @return Integer
     */
    function kthSmallest($matrix, $k) {
        
    }
}";"";"2020-03-25 15:18:06"
3089;247;"Swift";"class Solution {
    func kthSmallest(_ matrix: [[Int]], _ k: Int) 
-> Int {
        
    }
}";"";"2020-03-25 15:18:06"
3090;247;"Ruby";"# @param {Integer[][]} matrix
# @param {Integer} k
# @return {Integer}
def kth_smallest(matrix, k)
 
end";"";"2020-03-25 15:18:06"
3091;247;"Python";"class Solution(object):
    def kthSmallest(self, matrix, k):
        """"""
        :type matrix: List[List[int]]
        :type k: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:06"
3092;248;"C#";"public class ExamRoom {
 
    public ExamRoom(int N) {
 
    }
    
    public int Seat() {
 
    }
    
    public void Leave(int p) {
 
    }
}
 
/**
 * Your ExamRoom object will be instantiated and 
called as such:
 * ExamRoom obj = new ExamRoom(N);
 * int param_1 = obj.Seat();
 * obj.Leave(p);
 */";"";"2020-03-25 15:18:06"
3093;248;"Java";"class ExamRoom {
 
    public ExamRoom(int N) {
 
    }
    
    public int seat() {
 
    }
    
    public void leave(int p) {
 
    }
}
 
/**
 * Your ExamRoom object will be instantiated and 
called as such:
 * ExamRoom obj = new ExamRoom(N);
 * int param_1 = obj.seat();
 * obj.leave(p);
 */";"";"2020-03-25 15:18:06"
3094;248;"Rust";"struct ExamRoom {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl ExamRoom {
 
    fn new(N: i32) -> Self {
        
    }
    
    fn seat(&self) -> i32 {
        
    }
    
    fn leave(&self, p: i32) {
        
    }
}
 ";"";"2020-03-25 15:18:06"
3095;248;"C";"typedef struct {
    
} ExamRoom;
 
 
ExamRoom* examRoomCreate(int N) {
    
}
 
int examRoomSeat(ExamRoom* obj) {
  
}
 
void examRoomLeave(ExamRoom* obj, int p) {
  
}
 
void examRoomFree(ExamRoom* obj) {
    
}
 
/**
 * Your ExamRoom struct will be instantiated and 
called as such:
 * ExamRoom* obj = examRoomCreate(N);
 * int param_1 = examRoomSeat(obj);";"";"2020-03-25 15:18:06"
3096;248;"Scala";"class ExamRoom(_N: Int) {
 
    def seat(): Int = {
 
    }
 
    def leave(p: Int) {
 
    }
 
}
 
/**
 * Your ExamRoom object will be instantiated and 
called as such:
 * var obj = new ExamRoom(N)
 * var param_1 = obj.seat()
 * obj.leave(p)
 */";"";"2020-03-25 15:18:06"
3097;248;"Python3";"class ExamRoom:
 
    def __init__(self, N: int):
        
 
    def seat(self) -> int:
        
 
    def leave(self, p: int) -> None:
        
 
 
# Your ExamRoom object will be instantiated and 
called as such:
# obj = ExamRoom(N)
# param_1 = obj.seat()
# obj.leave(p)";"";"2020-03-25 15:18:06"
3098;248;"JavaScript";"/**
 * @param {number} N
 */
var ExamRoom = function(N) {
 
};
 
/**
 * @return {number}
 */
ExamRoom.prototype.seat = function() {
 
};
 
/** 
 * @param {number} p
 * @return {void}
 */
ExamRoom.prototype.leave = function(p) {
 
};
 
/**
 * Your ExamRoom object will be instantiated and 
called as such:
 * var obj = new ExamRoom(N)";"";"2020-03-25 15:18:06"
3099;248;"Go";"type ExamRoom struct {
 
}
 
 
func Constructor(N int) ExamRoom {
 
}
 
 
func (this *ExamRoom) Seat() int {
 
}
 
 
func (this *ExamRoom) Leave(p int)  {
 
}
 
 
/**
 * Your ExamRoom object will be instantiated and 
called as such:
 * obj := Constructor(N);
 * param_1 := obj.Seat();
 * obj.Leave(p);";"";"2020-03-25 15:18:06"
3100;248;"PHP";"";"";"2020-03-25 15:18:06"
3101;248;"Swift";"class ExamRoom {
 
    init(_ N: Int) {
        
    }
    
    func seat() -> Int {
        
    }
    
    func leave(_ p: Int) {
        
    }
}
 
/**
 * Your ExamRoom object will be instantiated and 
called as such:
 * let obj = ExamRoom(N)
 * let ret_1: Int = obj.seat()
 * obj.leave(p)
 */";"";"2020-03-25 15:18:06"
3102;248;"Ruby";"class ExamRoom
 
=begin
    :type n: Integer
=end
    def initialize(n)
 
    end
 
 
=begin
    :rtype: Integer
=end
    def seat()
 
    end
 
 
=begin
    :type p: Integer
    :rtype: Void
=end
    def leave(p)
 
    end
 ";"";"2020-03-25 15:18:06"
3103;248;"Kotlin";"class ExamRoom(N: Int) {
 
    fun seat(): Int {
 
    }
 
    fun leave(p: Int) {
 
    }
 
}
 
/**
 * Your ExamRoom object will be instantiated and 
called as such:
 * var obj = ExamRoom(N)
 * var param_1 = obj.seat()
 * obj.leave(p)
 */";"";"2020-03-25 15:18:06"
3104;249;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int PathSum(TreeNode root, int sum) {
 
    }
}";"";"2020-03-25 15:18:06"
3105;249;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int pathSum(TreeNode root, int sum) {
 
    }
}";"";"2020-03-25 15:18:06"
3106;249;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn path_sum(root: 
Option<Rc<RefCell<TreeNode>>>, sum: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:06"
3107;249;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int pathSum(struct TreeNode* root, int sum){
 
}";"";"2020-03-25 15:18:06"
3108;249;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def pathSum(root: TreeNode, sum: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:06"
3109;249;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func pathSum(root *TreeNode, sum int) int {
 
}";"";"2020-03-25 15:18:06"
3110;249;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun pathSum(root: TreeNode?, sum: Int): Int {
 
    }
}";"";"2020-03-25 15:18:06"
3111;249;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def pathSum(self, root: TreeNode, sum: int) -> 
int:";"";"2020-03-25 15:18:06"
3112;249;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} sum
 * @return {number}
 */
var pathSum = function(root, sum) {
 
};";"";"2020-03-25 15:18:06"
3113;249;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @param Integer $sum
     * @return Integer
     */
    function pathSum($root, $sum) {
        
    }
}";"";"2020-03-25 15:18:06"
3114;249;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func pathSum(_ root: TreeNode?, _ sum: Int) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:06"
3115;249;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @param {Integer} sum
# @return {Integer}
def path_sum(root, sum)
 
end";"";"2020-03-25 15:18:06"
3116;249;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def pathSum(self, root, sum):
        """"""
        :type root: TreeNode
        :type sum: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:06"
3117;250;"C#";"public class Solution {
    public double New21Game(int N, int K, int W) {
 
    }
}";"";"2020-03-25 15:18:06"
3118;250;"Java";"class Solution {
    public double new21Game(int N, int K, int W) {
 
    }
}";"";"2020-03-25 15:18:06"
3119;250;"Rust";"impl Solution {
    pub fn new21_game(n: i32, k: i32, w: i32) -> 
f64 {
        
    }
}";"";"2020-03-25 15:18:06"
3120;250;"C";"double new21Game(int N, int K, int W){
 
}";"";"2020-03-25 15:18:06"
3121;250;"Scala";"object Solution {
    def new21Game(N: Int, K: Int, W: Int): Double = 
{
 
    }
}";"";"2020-03-25 15:18:06"
3122;250;"Go";"func new21Game(N int, K int, W int) float64 {
 
}";"";"2020-03-25 15:18:06"
3123;250;"Kotlin";"class Solution {
    fun new21Game(N: Int, K: Int, W: Int): Double {
 
    }
}";"";"2020-03-25 15:18:06"
3124;250;"Python3";"class Solution:
    def new21Game(self, N: int, K: int, W: int) -> 
float:";"";"2020-03-25 15:18:06"
3125;250;"JavaScript";"/**
 * @param {number} N
 * @param {number} K
 * @param {number} W
 * @return {number}
 */
var new21Game = function(N, K, W) {
 
};";"";"2020-03-25 15:18:06"
3126;250;"PHP";"class Solution {";"";"2020-03-25 15:18:06"
3127;250;"Swift";"class Solution {
    func new21Game(_ N: Int, _ K: Int, _ W: Int) -> 
Double {
        
    }
}";"";"2020-03-25 15:18:06"
3128;250;"Ruby";"# @param {Integer} n
# @param {Integer} k
# @param {Integer} w
# @return {Float}
def new21_game(n, k, w)
 
end";"";"2020-03-25 15:18:06"
3129;250;"Python";"class Solution(object):
    def new21Game(self, N, K, W):
        """"""
        :type N: int
        :type K: int
        :type W: int
        :rtype: float
        """"""";"";"2020-03-25 15:18:06"
3130;251;"C#";"public class Solution {
    public int ProjectionArea(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:06"
3131;251;"Java";"class Solution {
    public int projectionArea(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:06"
3132;251;"C";"int projectionArea(int** grid, int gridSize, int* 
gridColSize){
 
}";"";"2020-03-25 15:18:06"
3133;251;"Rust";"impl Solution {
    pub fn projection_area(grid: Vec<Vec<i32>>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:06"
3134;251;"Scala";"object Solution {
    def projectionArea(grid: Array[Array[Int]]): 
Int = {
 
    }
}";"";"2020-03-25 15:18:06"
3135;251;"Go";"func projectionArea(grid [][]int) int {
 
}";"";"2020-03-25 15:18:06"
3136;251;"Kotlin";"class Solution {
    fun projectionArea(grid: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:06"
3137;251;"Python3";"class Solution:
    def projectionArea(self, grid: List[List[int]]) 
-> int:";"";"2020-03-25 15:18:06"
3138;251;"JavaScript";"/**
 * @param {number[][]} grid
 * @return {number}
 */
var projectionArea = function(grid) {
 
};";"";"2020-03-25 15:18:06"
3139;251;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $grid
     * @return Integer
     */
    function projectionArea($grid) {
        
    }
}";"";"2020-03-25 15:18:06"
3140;251;"Swift";"class Solution {
    func projectionArea(_ grid: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:06"
3141;251;"Ruby";"# @param {Integer[][]} grid";"";"2020-03-25 15:18:06"
3142;251;"Python";"class Solution(object):
    def projectionArea(self, grid):
        """"""
        :type grid: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:06"
3143;252;"C#";"public class Solution {
    public void Merge(int[] A, int m, int[] B, int 
n) {
 
    }
}";"";"2020-03-25 15:18:06"
3144;252;"Java";"class Solution {
    public void merge(int[] A, int m, int[] B, int 
n) {
 
    }
}";"";"2020-03-25 15:18:06"
3145;252;"C";"void merge(int* A, int ASize, int m, int* B, int 
BSize, int n){
 
}";"";"2020-03-25 15:18:06"
3146;252;"Rust";"impl Solution {
    pub fn merge(a: &mut Vec<i32>, m: i32, b: &mut 
Vec<i32>, n: i32) {
 
    }
}";"";"2020-03-25 15:18:06"
3147;252;"Scala";"object Solution {
    def merge(A: Array[Int], m: Int, B: Array[Int], 
n: Int): Unit = {
 
    }
}";"";"2020-03-25 15:18:06"
3148;252;"Go";"func merge(A []int, m int, B []int, n int)  {
 
}";"";"2020-03-25 15:18:06"
3149;252;"Kotlin";"class Solution {
    fun merge(A: IntArray, m: Int, B: IntArray, n: 
Int): Unit {
 
    }
}";"";"2020-03-25 15:18:06"
3150;252;"Python3";"class Solution:
    def merge(self, A: List[int], m: int, B: List
[int], n: int) -> None:
        """"""
        Do not return anything, modify A in-place 
instead.
        """"""";"";"2020-03-25 15:18:06"
3151;252;"JavaScript";"/**
 * @param {number[]} A
 * @param {number} m
 * @param {number[]} B
 * @param {number} n
 * @return {void} Do not return anything, modify A 
in-place instead.
 */
var merge = function(A, m, B, n) {
 
};";"";"2020-03-25 15:18:06"
3152;252;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @param Integer $m
     * @param Integer[] $B
     * @param Integer $n
     * @return NULL
     */
    function merge(&$A, $m, $B, $n) {
 
    }
}";"";"2020-03-25 15:18:06"
3153;252;"Swift";"class Solution {
    func merge(_ A: inout [Int], _ m: Int, _ B: 
[Int], _ n: Int) {
 
    }
}";"";"2020-03-25 15:18:06"
3154;252;"Ruby";"# @param {Integer[]} a
# @param {Integer} m
# @param {Integer[]} b
# @param {Integer} n
# @return {Void} Do not return anything, modify A 
in-place instead.
def merge(a, m, b, n)
 
end";"";"2020-03-25 15:18:06"
3155;252;"Python";"class Solution(object):
    def merge(self, A, m, B, n):
        """"""
        :type A: List[int]
        :type m: int
        :type B: List[int]
        :type n: int
        :rtype: None Do not return anything, modify 
A in-place instead.
        """"""";"";"2020-03-25 15:18:06"
3156;253;"C#";"public class Solution {
    public bool SearchMatrix(int[][] matrix, int 
target) {
 
    }
}";"";"2020-03-25 15:18:06"
3157;253;"Java";"class Solution {
    public boolean searchMatrix(int[][] matrix, int 
target) {
 
    }
}";"";"2020-03-25 15:18:06"
3158;253;"C";"bool searchMatrix(int** matrix, int matrixSize, 
int* matrixColSize, int target){
 
}";"";"2020-03-25 15:18:06"
3159;253;"Python3";"class Solution:
    def searchMatrix(self, matrix: List[List[int]], 
target: int) -> bool:";"";"2020-03-25 15:18:06"
3160;253;"JavaScript";"/**
 * @param {number[][]} matrix
 * @param {number} target
 * @return {boolean}
 */
var searchMatrix = function(matrix, target) {
 
};";"";"2020-03-25 15:18:06"
3161;253;"Ruby";"# @param {Integer[][]} matrix
# @param {Integer} target
# @return {Boolean}
def search_matrix(matrix, target)
 
end";"";"2020-03-25 15:18:06"
3162;253;"Python";"class Solution(object):
    def searchMatrix(self, matrix, target):
        """"""
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:06"
3163;254;"C#";"public class Solution {
    public int BitwiseComplement(int N) {
 
    }
}";"";"2020-03-25 15:18:06"
3164;254;"Java";"class Solution {
    public int bitwiseComplement(int N) {
 
    }
}";"";"2020-03-25 15:18:06"
3165;254;"Rust";"impl Solution {
    pub fn bitwise_complement(n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:06"
3166;254;"C";"int bitwiseComplement(int N){
 
}";"";"2020-03-25 15:18:06"
3167;254;"Scala";"object Solution {
    def bitwiseComplement(N: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:06"
3168;254;"Go";"func bitwiseComplement(N int) int {
 
}";"";"2020-03-25 15:18:06"
3169;254;"Kotlin";"class Solution {
    fun bitwiseComplement(N: Int): Int {
 
    }
}";"";"2020-03-25 15:18:06"
3170;254;"Python3";"class Solution:
    def bitwiseComplement(self, N: int) -> int:";"";"2020-03-25 15:18:06"
3171;254;"JavaScript";"/**
 * @param {number} N
 * @return {number}
 */
var bitwiseComplement = function(N) {
 
};";"";"2020-03-25 15:18:06"
3172;254;"PHP";"class Solution {";"";"2020-03-25 15:18:06"
3173;254;"Swift";"class Solution {
    func bitwiseComplement(_ N: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:06"
3174;254;"Ruby";"# @param {Integer} n
# @return {Integer}
def bitwise_complement(n)
 
end";"";"2020-03-25 15:18:06"
3175;254;"Python";"class Solution(object):
    def bitwiseComplement(self, N):
        """"""
        :type N: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:06"
3176;255;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public bool IsBalanced(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:07"
3177;255;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isBalanced(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:07"
3178;255;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
bool isBalanced(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:07"
3179;255;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn is_balanced(root: 
Option<Rc<RefCell<TreeNode>>>) -> bool {
        
    }
}";"";"2020-03-25 15:18:07"
3180;255;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def isBalanced(root: TreeNode): Boolean = {
 
    }
}";"";"2020-03-25 15:18:07"
3181;255;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func isBalanced(root *TreeNode) bool {
 
}";"";"2020-03-25 15:18:07"
3182;255;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun isBalanced(root: TreeNode?): Boolean {
 
    }
}";"";"2020-03-25 15:18:07"
3183;255;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def isBalanced(self, root: TreeNode) -> bool:";"";"2020-03-25 15:18:07"
3184;255;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isBalanced = function(root) {
 
};";"";"2020-03-25 15:18:07"
3185;255;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Boolean
     */
    function isBalanced($root) {
        
    }
}";"";"2020-03-25 15:18:07"
3186;255;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func isBalanced(_ root: TreeNode?) -> Bool {
        
    }
}";"";"2020-03-25 15:18:07"
3187;255;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:07"
3188;255;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def isBalanced(self, root):
        """"""
        :type root: TreeNode
        :rtype: bool
        """"""";"";"2020-03-25 15:18:07"
3189;256;"C#";"public class Solution {
    public int Racecar(int target) {
 
    }
}";"";"2020-03-25 15:18:07"
3190;256;"Java";"class Solution {
    public int racecar(int target) {
 
    }
}";"";"2020-03-25 15:18:07"
3191;256;"C";"int racecar(int target){
 
}";"";"2020-03-25 15:18:07"
3192;256;"Rust";"impl Solution {
    pub fn racecar(target: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:07"
3193;256;"Scala";"object Solution {
    def racecar(target: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:07"
3194;256;"JavaScript";"/**
 * @param {number} target
 * @return {number}
 */
var racecar = function(target) {
 
};";"";"2020-03-25 15:18:07"
3195;256;"Go";"func racecar(target int) int {
 
}";"";"2020-03-25 15:18:07"
3196;256;"PHP";"class Solution {
 
    /**
     * @param Integer $target
     * @return Integer
     */
    function racecar($target) {
        
    }
}";"";"2020-03-25 15:18:07"
3197;256;"Swift";"class Solution {
    func racecar(_ target: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:07"
3198;256;"Ruby";"# @param {Integer} target
# @return {Integer}
def racecar(target)
 
end";"";"2020-03-25 15:18:07"
3199;256;"Python";"class Solution(object):
    def racecar(self, target):
        """"""
        :type target: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:07"
3200;256;"Kotlin";"class Solution {
    fun racecar(target: Int): Int {
 
    }
}";"";"2020-03-25 15:18:07"
3201;257;"C#";"public class Solution {
    public int MinTimeToVisitAllPoints(int[][] 
points) {
 
    }
}";"";"2020-03-25 15:18:07"
3202;257;"Java";"class Solution {
    public int minTimeToVisitAllPoints(int[][] 
points) {
 
    }
}";"";"2020-03-25 15:18:07"
3203;257;"C";"int minTimeToVisitAllPoints(int** points, int 
pointsSize, int* pointsColSize){
 
}";"";"2020-03-25 15:18:07"
3204;257;"Rust";"impl Solution {
    pub fn min_time_to_visit_all_points(points: 
Vec<Vec<i32>>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:07"
3205;257;"Scala";"object Solution {
    def minTimeToVisitAllPoints(points: Array[Array
[Int]]): Int = {
 
    }
}";"";"2020-03-25 15:18:07"
3206;257;"Go";"func minTimeToVisitAllPoints(points [][]int) int {
 
}";"";"2020-03-25 15:18:07"
3207;257;"Kotlin";"class Solution {
    fun minTimeToVisitAllPoints(points: 
Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:07"
3208;257;"Python3";"class Solution:
    def minTimeToVisitAllPoints(self, points: List
[List[int]]) -> int:";"";"2020-03-25 15:18:07"
3209;257;"JavaScript";"/**
 * @param {number[][]} points
 * @return {number}
 */
var minTimeToVisitAllPoints = function(points) {
 
};";"";"2020-03-25 15:18:07"
3210;257;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $points
     * @return Integer
     */
    function minTimeToVisitAllPoints($points) {
 
    }
}";"";"2020-03-25 15:18:07"
3211;257;"Swift";"class Solution {
    func minTimeToVisitAllPoints(_ points: [[Int]]) 
-> Int {
 
    }
}";"";"2020-03-25 15:18:07"
3212;257;"Ruby";"# @param {Integer[][]} points
# @return {Integer}
def min_time_to_visit_all_points(points)
 
end";"";"2020-03-25 15:18:07"
3213;257;"Python";"class Solution(object):
    def minTimeToVisitAllPoints(self, points):
        """"""
        :type points: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:07"
3214;258;"C#";"public class Solution {
    public int[][] ReconstructQueue(int[][] people) 
{
 
    }
}";"";"2020-03-25 15:18:07"
3215;258;"Java";"class Solution {
    public int[][] reconstructQueue(int[][] people) 
{
 
    }
}";"";"2020-03-25 15:18:07"
3216;258;"Rust";"impl Solution {
    pub fn reconstruct_queue(people: Vec<Vec<i32>>) 
-> Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:07"
3217;258;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** reconstructQueue(int** people, int peopleSize,
 int* peopleColSize, int* returnSize, int** 
returnColumnSizes){
 
}";"";"2020-03-25 15:18:07"
3218;258;"Scala";"object Solution {
    def reconstructQueue(people: Array[Array[Int]])
: Array[Array[Int]] = {
 
    }
}";"";"2020-03-25 15:18:07"
3219;258;"Go";"func reconstructQueue(people [][]int) [][]int {
 
}";"";"2020-03-25 15:18:07"
3220;258;"Kotlin";"class Solution {
    fun reconstructQueue(people: Array<IntArray>): 
Array<IntArray> {
 
    }
}";"";"2020-03-25 15:18:07"
3221;258;"Python3";"class Solution:
    def reconstructQueue(self, people: List[List
[int]]) -> List[List[int]]:";"";"2020-03-25 15:18:07"
3222;258;"JavaScript";"/**
 * @param {number[][]} people
 * @return {number[][]}
 */
var reconstructQueue = function(people) {
 
};";"";"2020-03-25 15:18:07"
3223;258;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $people
     * @return Integer[][]
     */
    function reconstructQueue($people) {
        
    }
}";"";"2020-03-25 15:18:07"
3224;258;"Swift";"class Solution {
    func reconstructQueue(_ people: [[Int]]) -> [
[Int]] {
        
    }
}";"";"2020-03-25 15:18:07"
3225;258;"Ruby";"# @param {Integer[][]} people
# @return {Integer[][]}
def reconstruct_queue(people)
 
end";"";"2020-03-25 15:18:07"
3226;258;"Python";"class Solution(object):
    def reconstructQueue(self, people):
        """"""
        :type people: List[List[int]]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:07"
3227;259;"C#";"public class Solution {
    public int[] ShortestAlternatingPaths(int n, int
[][] red_edges, int[][] blue_edges) {
 
    }
}";"";"2020-03-25 15:18:07"
3228;259;"Java";"class Solution {
    public int[] shortestAlternatingPaths(int n, int
[][] red_edges, int[][] blue_edges) {
 
    }
}";"";"2020-03-25 15:18:07"
3229;259;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* shortestAlternatingPaths(int n, int** 
red_edges, int red_edgesSize, int* red_edgesColSize,
 int** blue_edges, int blue_edgesSize, int* 
blue_edgesColSize, int* returnSize){
 
}";"";"2020-03-25 15:18:07"
3230;259;"Rust";"impl Solution {
    pub fn shortest_alternating_paths(n: i32, 
red_edges: Vec<Vec<i32>>, blue_edges: Vec<Vec<i32>>)
 -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:07"
3231;259;"Scala";"object Solution {
    def shortestAlternatingPaths(n: Int, red_edges: 
Array[Array[Int]], blue_edges: Array[Array[Int]]): 
Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:07"
3232;259;"Go";"func shortestAlternatingPaths(n int, red_edges [][]
int, blue_edges [][]int) []int {
 
}";"";"2020-03-25 15:18:07"
3233;259;"Kotlin";"class Solution {
    fun shortestAlternatingPaths(n: Int, red_edges: 
Array<IntArray>, blue_edges: Array<IntArray>): 
IntArray {
 
    }
}";"";"2020-03-25 15:18:07"
3234;259;"Python3";"class Solution:
    def shortestAlternatingPaths(self, n: int, 
red_edges: List[List[int]], blue_edges: List[List
[int]]) -> List[int]:";"";"2020-03-25 15:18:07"
3235;259;"JavaScript";"/**
 * @param {number} n
 * @param {number[][]} red_edges
 * @param {number[][]} blue_edges
 * @return {number[]}
 */
var shortestAlternatingPaths = function(n, 
red_edges, blue_edges) {
 
};";"";"2020-03-25 15:18:07"
3236;259;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @param Integer[][] $red_edges
     * @param Integer[][] $blue_edges
     * @return Integer[]
     */
    function shortestAlternatingPaths($n, 
$red_edges, $blue_edges) {
        
    }
}";"";"2020-03-25 15:18:07"
3237;259;"Swift";"class Solution {
    func shortestAlternatingPaths(_ n: Int, _ 
red_edges: [[Int]], _ blue_edges: [[Int]]) -> [Int] 
{
        
    }
}";"";"2020-03-25 15:18:07"
3238;259;"Ruby";"# @param {Integer} n
# @param {Integer[][]} red_edges
# @param {Integer[][]} blue_edges
# @return {Integer[]}
def shortest_alternating_paths(n, red_edges, 
blue_edges)
 
end";"";"2020-03-25 15:18:07"
3239;259;"Python";"class Solution(object):
    def shortestAlternatingPaths(self, n, red_edges,
 blue_edges):
        """"""
        :type n: int
        :type red_edges: List[List[int]]
        :type blue_edges: List[List[int]]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:07"
3240;260;"C#";"public class Solution {
    public bool IsSubsequence(string s, string t) {
 
    }
}";"";"2020-03-25 15:18:07"
3241;260;"Java";"class Solution {
    public boolean isSubsequence(String s, String t)
 {
 
    }
}";"";"2020-03-25 15:18:07"
3242;260;"Rust";"impl Solution {
    pub fn is_subsequence(s: String, t: String) -> 
bool {
        
    }
}";"";"2020-03-25 15:18:07"
3243;260;"C";"bool isSubsequence(char * s, char * t){
 
}";"";"2020-03-25 15:18:07"
3244;260;"Scala";"object Solution {
    def isSubsequence(s: String, t: String): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:07"
3245;260;"Go";"func isSubsequence(s string, t string) bool {
 
}";"";"2020-03-25 15:18:07"
3246;260;"Kotlin";"class Solution {
    fun isSubsequence(s: String, t: String): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:07"
3247;260;"Python3";"class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:";"";"2020-03-25 15:18:07"
3248;260;"JavaScript";"/**
 * @param {string} s
 * @param {string} t
 * @return {boolean}
 */
var isSubsequence = function(s, t) {
 
};";"";"2020-03-25 15:18:07"
3249;260;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @param String $t
     * @return Boolean
     */
    function isSubsequence($s, $t) {
        
    }
}";"";"2020-03-25 15:18:07"
3250;260;"Swift";"class Solution {
    func isSubsequence(_ s: String, _ t: String) -> 
Bool {
        
    }
}";"";"2020-03-25 15:18:07"
3251;260;"Ruby";"# @param {String} s
# @param {String} t
# @return {Boolean}
def is_subsequence(s, t)
 
end";"";"2020-03-25 15:18:07"
3252;260;"Python";"class Solution(object):
    def isSubsequence(self, s, t):
        """"""
        :type s: str
        :type t: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:07"
3253;261;"C#";"public class Solution {
    public IList<IList<int>> ReconstructMatrix(int 
upper, int lower, int[] colsum) {
 
    }
}";"";"2020-03-25 15:18:07"
3254;261;"Java";"class Solution {
    public List<List<Integer>> reconstructMatrix
(int upper, int lower, int[] colsum) {
 
    }
}";"";"2020-03-25 15:18:07"
3255;261;"Rust";"impl Solution {
    pub fn reconstruct_matrix(upper: i32, lower: 
i32, colsum: Vec<i32>) -> Vec<Vec<i32>> {
 
    }
}";"";"2020-03-25 15:18:07"
3256;261;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** reconstructMatrix(int upper, int lower, int* 
colsum, int colsumSize, int* returnSize, int** 
returnColumnSizes){
 
}";"";"2020-03-25 15:18:07"
3257;261;"Scala";"object Solution {
    def reconstructMatrix(upper: Int, lower: Int, 
colsum: Array[Int]): List[List[Int]] = {
 
    }
}";"";"2020-03-25 15:18:07"
3258;261;"Go";"func reconstructMatrix(upper int, lower int, colsum 
[]int) [][]int {
 
}";"";"2020-03-25 15:18:07"
3259;261;"Kotlin";"class Solution {
    fun reconstructMatrix(upper: Int, lower: Int, 
colsum: IntArray): List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:07"
3260;261;"Python3";"class Solution:
    def reconstructMatrix(self, upper: int, lower: 
int, colsum: List[int]) -> List[List[int]]:";"";"2020-03-25 15:18:07"
3261;261;"JavaScript";"/**
 * @param {number} upper
 * @param {number} lower
 * @param {number[]} colsum
 * @return {number[][]}
 */
var reconstructMatrix = function(upper, lower, 
colsum) {
 
};";"";"2020-03-25 15:18:07"
3262;261;"PHP";"class Solution {
 
    /**
     * @param Integer $upper
     * @param Integer $lower
     * @param Integer[] $colsum
     * @return Integer[][]
     */
    function reconstructMatrix($upper, $lower, 
$colsum) {
 
    }
}";"";"2020-03-25 15:18:07"
3263;261;"Swift";"class Solution {
    func reconstructMatrix(_ upper: Int, _ lower: 
Int, _ colsum: [Int]) -> [[Int]] {
 
    }
}";"";"2020-03-25 15:18:07"
3264;261;"Ruby";"# @param {Integer} upper
# @param {Integer} lower
# @param {Integer[]} colsum
# @return {Integer[][]}
def reconstruct_matrix(upper, lower, colsum)
 
end";"";"2020-03-25 15:18:07"
3265;261;"Python";"class Solution(object):
    def reconstructMatrix(self, upper, lower, 
colsum):
        """"""
        :type upper: int
        :type lower: int
        :type colsum: List[int]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:07"
3266;262;"C#";"public class Solution {
    public int MaximumSum(int[] arr) {
 
    }
}";"";"2020-03-25 15:18:07"
3267;262;"Java";"class Solution {
    public int maximumSum(int[] arr) {
 
    }
}";"";"2020-03-25 15:18:07"
3268;262;"C";"int maximumSum(int* arr, int arrSize){
 
}";"";"2020-03-25 15:18:07"
3269;262;"Rust";"impl Solution {
    pub fn maximum_sum(arr: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:07"
3270;262;"Scala";"object Solution {
    def maximumSum(arr: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:07"
3271;262;"Go";"func maximumSum(arr []int) int {
 
}";"";"2020-03-25 15:18:07"
3272;262;"Kotlin";"class Solution {
    fun maximumSum(arr: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:07"
3273;262;"Python3";"class Solution:
    def maximumSum(self, arr: List[int]) -> int:";"";"2020-03-25 15:18:07"
3274;262;"JavaScript";"/**
 * @param {number[]} arr
 * @return {number}
 */
var maximumSum = function(arr) {
 
};";"";"2020-03-25 15:18:07"
3275;262;"PHP";"class Solution {
 
    /**
     * @param Integer[] $arr
     * @return Integer
     */
    function maximumSum($arr) {
        
    }
}";"";"2020-03-25 15:18:07"
3276;262;"Swift";"class Solution {
    func maximumSum(_ arr: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:07"
3277;262;"Ruby";"# @param {Integer[]} arr";"";"2020-03-25 15:18:07"
3278;262;"Python";"class Solution(object):
    def maximumSum(self, arr):
        """"""
        :type arr: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:07"
3279;263;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode[] ListOfDepth(TreeNode tree) {
 
    }
}";"";"2020-03-25 15:18:07"
3280;263;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode[] listOfDepth(TreeNode tree) {
 
    }
}";"";"2020-03-25 15:18:07"
3281;263;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {";"";"2020-03-25 15:18:07"
3282;263;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
struct ListNode** listOfDepth(struct TreeNode* tree,
 int* returnSize){
 
}";"";"2020-03-25 15:18:07"
3283;263;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def listOfDepth(tree: TreeNode): Array[ListNode]
 = {
 
    }
}";"";"2020-03-25 15:18:07"
3284;263;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func listOfDepth(tree *TreeNode) []*ListNode {
 
}";"";"2020-03-25 15:18:07"
3285;263;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun listOfDepth(tree: TreeNode?): 
Array<ListNode?> {
 
    }
}";"";"2020-03-25 15:18:07"
3286;263;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def listOfDepth(self, tree: TreeNode) -> List
[ListNode]:";"";"2020-03-25 15:18:07"
3287;263;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {TreeNode} tree
 * @return {ListNode[]}
 */
var listOfDepth = function(tree) {
 
};";"";"2020-03-25 15:18:07"
3288;263;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $tree
     * @return ListNode[]
     */
    function listOfDepth($tree) {";"";"2020-03-25 15:18:07"
3289;263;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func listOfDepth(_ tree: TreeNode?) -> ";"";"2020-03-25 15:18:07"
3290;263;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# @param {TreeNode} tree
# @return {ListNode[]}
def list_of_depth(tree)
 
end";"";"2020-03-25 15:18:07"
3291;263;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def listOfDepth(self, tree):
        """"""
        :type tree: TreeNode
        :rtype: List[ListNode]
        """"""";"";"2020-03-25 15:18:07"
3292;264;"C#";"public class Solution {
    public int ExpressiveWords(string S, string[] 
words) {
 
    }
}";"";"2020-03-25 15:18:07"
3293;264;"Java";"class Solution {
    public int expressiveWords(String S, String[] 
words) {
 
    }
}";"";"2020-03-25 15:18:07"
3294;264;"Rust";"impl Solution {
    pub fn expressive_words(s: String, words: 
Vec<String>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:07"
3295;264;"C";"int expressiveWords(char * S, char ** words, int 
wordsSize){
 
}";"";"2020-03-25 15:18:07"
3296;264;"Scala";"object Solution {
    def expressiveWords(S: String, words: Array
[String]): Int = {
 
    }
}";"";"2020-03-25 15:18:07"
3297;264;"Go";"func expressiveWords(S string, words []string) int {
 
}";"";"2020-03-25 15:18:07"
3298;264;"Kotlin";"class Solution {
    fun expressiveWords(S: String, words: 
Array<String>): Int {
 
    }
}";"";"2020-03-25 15:18:07"
3299;264;"Python3";"class Solution:
    def expressiveWords(self, S: str, words: List
[str]) -> int:";"";"2020-03-25 15:18:07"
3300;264;"JavaScript";"/**
 * @param {string} S
 * @param {string[]} words
 * @return {number}
 */
var expressiveWords = function(S, words) {
 
};";"";"2020-03-25 15:18:07"
3301;264;"PHP";"class Solution {";"";"2020-03-25 15:18:07"
3302;264;"Swift";"class Solution {
    func expressiveWords(_ S: String, _ words: 
[String]) -> Int {
        
    }
}";"";"2020-03-25 15:18:07"
3303;264;"Ruby";"# @param {String} s
# @param {String[]} words
# @return {Integer}
def expressive_words(s, words)
 
end";"";"2020-03-25 15:18:07"
3304;264;"Python";"class Solution(object):
    def expressiveWords(self, S, words):
        """"""
        :type S: str
        :type words: List[str]
        :rtype: int
        """"""";"";"2020-03-25 15:18:07"
3305;265;"C#";"public class Solution {
    public int KthGrammar(int N, int K) {
 
    }
}";"";"2020-03-25 15:18:07"
3306;265;"Java";"class Solution {
    public int kthGrammar(int N, int K) {
 
    }
}";"";"2020-03-25 15:18:07"
3307;265;"C";"int kthGrammar(int N, int K){
 
}";"";"2020-03-25 15:18:07"
3308;265;"Rust";"impl Solution {
    pub fn kth_grammar(n: i32, k: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:07"
3309;265;"Scala";"object Solution {
    def kthGrammar(N: Int, K: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:07"
3310;265;"Go";"func kthGrammar(N int, K int) int {
 
}";"";"2020-03-25 15:18:07"
3311;265;"Kotlin";"class Solution {
    fun kthGrammar(N: Int, K: Int): Int {
 
    }
}";"";"2020-03-25 15:18:07"
3312;265;"Python3";"class Solution:
    def kthGrammar(self, N: int, K: int) -> int:";"";"2020-03-25 15:18:07"
3313;265;"JavaScript";"/**
 * @param {number} N
 * @param {number} K
 * @return {number}
 */
var kthGrammar = function(N, K) {
 
};";"";"2020-03-25 15:18:07"
3314;265;"PHP";"class Solution {
 
    /**
     * @param Integer $N
     * @param Integer $K
     * @return Integer
     */
    function kthGrammar($N, $K) {
        
    }
}";"";"2020-03-25 15:18:07"
3315;265;"Swift";"class Solution {
    func kthGrammar(_ N: Int, _ K: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:07"
3316;265;"Ruby";"# @param {Integer} n
# @param {Integer} k
# @return {Integer}
def kth_grammar(n, k)
 
end";"";"2020-03-25 15:18:07"
3317;265;"Python";"class Solution(object):
    def kthGrammar(self, N, K):
        """"""
        :type N: int
        :type K: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:07"
3318;266;"C#";"public class Solution {
    public IList<IList<string>> GroupAnagrams(string
[] strs) {
 
    }
}";"";"2020-03-25 15:18:07"
3319;266;"Java";"class Solution {
    public List<List<String>> groupAnagrams(String[]
 strs) {
 
    }
}";"";"2020-03-25 15:18:07"
3320;266;"Rust";"impl Solution {
    pub fn group_anagrams(strs: Vec<String>) -> 
Vec<Vec<String>> {
 
    }
}";"";"2020-03-25 15:18:07"
3321;266;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
char*** groupAnagrams(char** strs, int strsSize, 
int* returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:07"
3322;266;"Scala";"object Solution {
    def groupAnagrams(strs: Array[String]): List
[List[String]] = {
 
    }
}";"";"2020-03-25 15:18:07"
3323;266;"Go";"func groupAnagrams(strs []string) [][]string {
 
}";"";"2020-03-25 15:18:07"
3324;266;"Kotlin";"class Solution {
    fun groupAnagrams(strs: Array<String>): 
List<List<String>> {
 
    }
}";"";"2020-03-25 15:18:07"
3325;266;"Python3";"class Solution:
    def groupAnagrams(self, strs: List[str]) -> List
[List[str]]:";"";"2020-03-25 15:18:07"
3326;266;"JavaScript";"/**
 * @param {string[]} strs
 * @return {string[][]}
 */
var groupAnagrams = function(strs) {
 
};";"";"2020-03-25 15:18:07"
3327;266;"PHP";"class Solution {
 
    /**
     * @param String[] $strs
     * @return String[][]
     */
    function groupAnagrams($strs) {
 
    }
}";"";"2020-03-25 15:18:07"
3328;266;"Swift";"class Solution {
    func groupAnagrams(_ strs: [String]) -> [
[String]] {
 
    }
}";"";"2020-03-25 15:18:07"
3329;266;"Ruby";"# @param {String[]} strs
# @return {String[][]}
def group_anagrams(strs)
 
end";"";"2020-03-25 15:18:07"
3330;266;"Python";"class Solution(object):
    def groupAnagrams(self, strs):
        """"""
        :type strs: List[str]
        :rtype: List[List[str]]
        """"""";"";"2020-03-25 15:18:07"
3331;267;"C#";"public class Solution {
    public int ConvertInteger(int A, int B) {
 
    }
}";"";"2020-03-25 15:18:07"
3332;267;"Java";"class Solution {
    public int convertInteger(int A, int B) {
 
    }
}";"";"2020-03-25 15:18:07"
3333;267;"Rust";"impl Solution {
    pub fn convert_integer(a: i32, b: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:07"
3334;267;"C";"int convertInteger(int A, int B){
 
}";"";"2020-03-25 15:18:07"
3335;267;"Scala";"object Solution {
    def convertInteger(A: Int, B: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:07"
3336;267;"Go";"func convertInteger(A int, B int) int {
 
}";"";"2020-03-25 15:18:07"
3337;267;"Kotlin";"class Solution {
    fun convertInteger(A: Int, B: Int): Int {
 
    }
}";"";"2020-03-25 15:18:07"
3338;267;"Python3";"class Solution:
    def convertInteger(self, A: int, B: int) -> int:";"";"2020-03-25 15:18:07"
3339;267;"JavaScript";"/**
 * @param {number} A
 * @param {number} B
 * @return {number}
 */
var convertInteger = function(A, B) {
 
};";"";"2020-03-25 15:18:07"
3340;267;"PHP";"class Solution {
 
    /**
     * @param Integer $A
     * @param Integer $B
     * @return Integer
     */
    function convertInteger($A, $B) {
 
    }
}";"";"2020-03-25 15:18:07"
3341;267;"Swift";"class Solution {
    func convertInteger(_ A: Int, _ B: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:07"
3342;267;"Ruby";"# @param {Integer} a
# @param {Integer} b
# @return {Integer}
def convert_integer(a, b)
 
end";"";"2020-03-25 15:18:07"
3343;267;"Python";"class Solution(object):
    def convertInteger(self, A, B):
        """"""
        :type A: int
        :type B: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:07"
3344;268;"C#";"public class Solution {
    public int MinMalwareSpread(int[][] graph, int[]
 initial) {
 
    }
}";"";"2020-03-25 15:18:07"
3345;268;"Java";"class Solution {
    public int minMalwareSpread(int[][] graph, int[]
 initial) {
 
    }
}";"";"2020-03-25 15:18:07"
3346;268;"C";"int minMalwareSpread(int** graph, int graphSize, 
int* graphColSize, int* initial, int initialSize){
 
}";"";"2020-03-25 15:18:07"
3347;268;"Rust";"impl Solution {
    pub fn min_malware_spread(graph: Vec<Vec<i32>>, 
initial: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:07"
3348;268;"Scala";"object Solution {
    def minMalwareSpread(graph: Array[Array[Int]], 
initial: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:07"
3349;268;"Go";"func minMalwareSpread(graph [][]int, initial []int) 
int {
 
}";"";"2020-03-25 15:18:07"
3350;268;"Kotlin";"class Solution {
    fun minMalwareSpread(graph: Array<IntArray>, 
initial: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:07"
3351;268;"Python3";"class Solution:
    def minMalwareSpread(self, graph: List[List[int]
], initial: List[int]) -> int:";"";"2020-03-25 15:18:07"
3352;268;"JavaScript";"/**
 * @param {number[][]} graph
 * @param {number[]} initial
 * @return {number}
 */
var minMalwareSpread = function(graph, initial) {
 
};";"";"2020-03-25 15:18:07"
3353;268;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $graph
     * @param Integer[] $initial
     * @return Integer
     */
    function minMalwareSpread($graph, $initial) {
        
    }
}";"";"2020-03-25 15:18:07"
3354;268;"Swift";"class Solution {
    func minMalwareSpread(_ graph: [[Int]], _ 
initial: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:07"
3355;268;"Ruby";"# @param {Integer[][]} graph";"";"2020-03-25 15:18:07"
3356;268;"Python";"class Solution(object):
    def minMalwareSpread(self, graph, initial):
        """"""
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:07"
3357;269;"C#";"public class Solution {
    public bool CheckIfExist(int[] arr) {
 
    }
}";"";"2020-03-25 15:18:07"
3358;269;"Java";"class Solution {
    public boolean checkIfExist(int[] arr) {
 
    }
}";"";"2020-03-25 15:18:07"
3359;269;"Rust";"impl Solution {
    pub fn check_if_exist(arr: Vec<i32>) -> bool {
 
    }
}";"";"2020-03-25 15:18:07"
3360;269;"C";"bool checkIfExist(int* arr, int arrSize){
 
}";"";"2020-03-25 15:18:07"
3361;269;"Scala";"object Solution {
    def checkIfExist(arr: Array[Int]): Boolean = {
 
    }
}";"";"2020-03-25 15:18:07"
3362;269;"Go";"func checkIfExist(arr []int) bool {
 
}";"";"2020-03-25 15:18:07"
3363;269;"Kotlin";"class Solution {
    fun checkIfExist(arr: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:07"
3364;269;"Python3";"class Solution:
    def checkIfExist(self, arr: List[int]) -> bool:";"";"2020-03-25 15:18:07"
3365;269;"JavaScript";"/**
 * @param {number[]} arr
 * @return {boolean}
 */
var checkIfExist = function(arr) {
 
};";"";"2020-03-25 15:18:07"
3366;269;"PHP";"class Solution {
 
    /**
     * @param Integer[] $arr
     * @return Boolean
     */
    function checkIfExist($arr) {
 
    }
}";"";"2020-03-25 15:18:07"
3367;269;"Swift";"class Solution {
    func checkIfExist(_ arr: [Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:07"
3368;269;"Ruby";"# @param {Integer[]} arr
# @return {Boolean}
def check_if_exist(arr)
 
end";"";"2020-03-25 15:18:07"
3369;269;"Python";"class Solution(object):
    def checkIfExist(self, arr):
        """"""
        :type arr: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:07"
3370;270;"C#";"public class Solution {
    public int MinDeletionSize(string[] A) {
 
    }
}";"";"2020-03-25 15:18:07"
3371;270;"Java";"class Solution {
    public int minDeletionSize(String[] A) {
 
    }
}";"";"2020-03-25 15:18:07"
3372;270;"Rust";"impl Solution {
    pub fn min_deletion_size(a: Vec<String>) -> i32 
{
        
    }
}";"";"2020-03-25 15:18:07"
3373;270;"C";"int minDeletionSize(char ** A, int ASize){
 
}";"";"2020-03-25 15:18:07"
3374;270;"Scala";"object Solution {
    def minDeletionSize(A: Array[String]): Int = {
 
    }
}";"";"2020-03-25 15:18:07"
3375;270;"Go";"func minDeletionSize(A []string) int {
 
}";"";"2020-03-25 15:18:07"
3376;270;"Kotlin";"class Solution {
    fun minDeletionSize(A: Array<String>): Int {
 
    }
}";"";"2020-03-25 15:18:07"
3377;270;"Python3";"class Solution:
    def minDeletionSize(self, A: List[str]) -> int:";"";"2020-03-25 15:18:07"
3378;270;"JavaScript";"/**
 * @param {string[]} A
 * @return {number}
 */
var minDeletionSize = function(A) {
 
};";"";"2020-03-25 15:18:07"
3379;270;"PHP";"class Solution {";"";"2020-03-25 15:18:07"
3380;270;"Swift";"class Solution {
    func minDeletionSize(_ A: [String]) -> Int {
        
    }
}";"";"2020-03-25 15:18:07"
3381;270;"Ruby";"# @param {String[]} a
# @return {Integer}
def min_deletion_size(a)
 
end";"";"2020-03-25 15:18:07"
3382;270;"Python";"class Solution(object):
    def minDeletionSize(self, A):
        """"""
        :type A: List[str]
        :rtype: int
        """"""";"";"2020-03-25 15:18:07"
3383;271;"C#";"public class Solution {
    public string MinNumber(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:07"
3384;271;"Java";"class Solution {
    public String minNumber(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:07"
3385;271;"Rust";"impl Solution {
    pub fn min_number(nums: Vec<i32>) -> String {
 
    }
}";"";"2020-03-25 15:18:07"
3386;271;"C";"char* minNumber(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:07"
3387;271;"Scala";"object Solution {
    def minNumber(nums: Array[Int]): String = {
 
    }
}";"";"2020-03-25 15:18:07"
3388;271;"Go";"func minNumber(nums []int) string {
 
}";"";"2020-03-25 15:18:07"
3389;271;"Kotlin";"class Solution {
    fun minNumber(nums: IntArray): String {
 
    }
}";"";"2020-03-25 15:18:07"
3390;271;"Python3";"class Solution:
    def minNumber(self, nums: List[int]) -> str:";"";"2020-03-25 15:18:07"
3391;271;"JavaScript";"/**
 * @param {number[]} nums
 * @return {string}
 */
var minNumber = function(nums) {
 
};";"";"2020-03-25 15:18:07"
3392;271;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return String
     */
    function minNumber($nums) {
 
    }
}";"";"2020-03-25 15:18:07"
3393;271;"Swift";"class Solution {
    func minNumber(_ nums: [Int]) -> String {
 
    }
}";"";"2020-03-25 15:18:07"
3394;271;"Ruby";"# @param {Integer[]} nums
# @return {String}
def min_number(nums)
 
end";"";"2020-03-25 15:18:07"
3395;271;"Python";"class Solution(object):
    def minNumber(self, nums):
        """"""
        :type nums: List[int]
        :rtype: str
        """"""";"";"2020-03-25 15:18:07"
3396;272;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
 
    /** @param head The linked list's head.
        Note that the head is guaranteed to be not 
null, so it contains at least one node. */
    public Solution(ListNode head) {
 
    }
    
    /** Returns a random node's value. */
    public int GetRandom() {
 
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:";"";"2020-03-25 15:18:07"
3397;272;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
 
    /** @param head The linked list's head.
        Note that the head is guaranteed to be not 
null, so it contains at least one node. */
    public Solution(ListNode head) {
 
    }
    
    /** Returns a random node's value. */
    public int getRandom() {
 
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:";"";"2020-03-25 15:18:07"
3398;272;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
struct Solution {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.";"";"2020-03-25 15:18:07"
3399;272;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
 
typedef struct {
    
} Solution;
 
/** @param head The linked list's head.
        Note that the head is guaranteed to be not 
null, so it contains at least one node. */
 
Solution* solutionCreate(struct ListNode* head) {
    
}
 
/** Returns a random node's value. */
int solutionGetRandom(Solution* obj) {
  
}";"";"2020-03-25 15:18:07"
3400;272;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
class Solution(_head: ListNode) {
 
    /** @param head The linked list's head.
        Note that the head is guaranteed to be not 
null, so it contains at least one node. */
 
 
    /** Returns a random node's value. */
    def getRandom(): Int = {
 
    }
 
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * var obj = new Solution(head)
 * var param_1 = obj.getRandom()";"";"2020-03-25 15:18:07"
3401;272;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
type Solution struct {
 
}
 
 
/** @param head The linked list's head.
        Note that the head is guaranteed to be not 
null, so it contains at least one node. */
func Constructor(head *ListNode) Solution {
 
}
 
 
/** Returns a random node's value. */
func (this *Solution) GetRandom() int {
 
}
 
 ";"";"2020-03-25 15:18:07"
3402;272;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution(head: ListNode?) {
 
    /** @param head The linked list's head.
        Note that the head is guaranteed to be not 
null, so it contains at least one node. */
 
 
    /** Returns a random node's value. */
    fun getRandom(): Int {
 
    }
 
}
 
/**
 * Your Solution object will be instantiated and 
called as such:";"";"2020-03-25 15:18:07"
3403;272;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
 
    def __init__(self, head: ListNode):
        """"""
        @param head The linked list's head.
        Note that the head is guaranteed to be not 
null, so it contains at least one node.
        """"""
        
 
    def getRandom(self) -> int:
        """"""
        Returns a random node's value.
        """"""
        
 
 
# Your Solution object will be instantiated and 
called as such:
# obj = Solution(head)";"";"2020-03-25 15:18:07"
3404;272;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param head The linked list's head.
        Note that the head is guaranteed to be not 
null, so it contains at least one node.
 * @param {ListNode} head
 */
var Solution = function(head) {
 
};
 
/**
 * Returns a random node's value.
 * @return {number}
 */
Solution.prototype.getRandom = function() {
 
};
 
/**";"";"2020-03-25 15:18:07"
3405;272;"PHP";"/**";"";"2020-03-25 15:18:07"
3406;272;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
 
class Solution {
 
    /** @param head The linked list's head.
        Note that the head is guaranteed to be not 
null, so it contains at least one node. */
    init(_ head: ListNode?) {
        
    }
    
    /** Returns a random node's value. */
    func getRandom() -> Int {
        
    }
}";"";"2020-03-25 15:18:07"
3407;272;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
class Solution
 
=begin
    @param head The linked list's head.
        Note that the head is guaranteed to be not 
null, so it contains at least one node.
    :type head: ListNode
=end
    def initialize(head)
 
    end
 
 
=begin
    Returns a random node's value.
    :rtype: Integer
=end";"";"2020-03-25 15:18:07"
3408;272;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
 
    def __init__(self, head):
        """"""
        @param head The linked list's head.
        Note that the head is guaranteed to be not 
null, so it contains at least one node.
        :type head: ListNode
        """"""
        
 
    def getRandom(self):
        """"""
        Returns a random node's value.
        :rtype: int
        """"""
        
 
 
# Your Solution object will be instantiated and ";"";"2020-03-25 15:18:07"
3409;273;"C#";"public class Solution {
    public string SmallestSubsequence(string text) {
 
    }
}";"";"2020-03-25 15:18:07"
3410;273;"Java";"class Solution {
    public String smallestSubsequence(String text) {
 
    }
}";"";"2020-03-25 15:18:07"
3411;273;"Rust";"impl Solution {
    pub fn smallest_subsequence(text: String) -> 
String {
        
    }
}";"";"2020-03-25 15:18:07"
3412;273;"C";"char * smallestSubsequence(char * text){
 
}";"";"2020-03-25 15:18:07"
3413;273;"Scala";"object Solution {
    def smallestSubsequence(text: String): String = 
{
 
    }
}";"";"2020-03-25 15:18:07"
3414;273;"Go";"func smallestSubsequence(text string) string {
 
}";"";"2020-03-25 15:18:07"
3415;273;"Kotlin";"class Solution {
    fun smallestSubsequence(text: String): String {
 
    }
}";"";"2020-03-25 15:18:07"
3416;273;"Python3";"class Solution:
    def smallestSubsequence(self, text: str) -> str:";"";"2020-03-25 15:18:07"
3417;273;"JavaScript";"/**
 * @param {string} text
 * @return {string}
 */
var smallestSubsequence = function(text) {
 
};";"";"2020-03-25 15:18:07"
3418;273;"PHP";"class Solution {
 
    /**
     * @param String $text
     * @return String
     */
    function smallestSubsequence($text) {
        
    }
}";"";"2020-03-25 15:18:07"
3419;273;"Swift";"class Solution {
    func smallestSubsequence(_ text: String) -> 
String {
        
    }
}";"";"2020-03-25 15:18:07"
3420;273;"Ruby";"# @param {String} text
# @return {String}
def smallest_subsequence(text)
 
end";"";"2020-03-25 15:18:07"
3421;273;"Python";"class Solution(object):
    def smallestSubsequence(self, text):
        """"""
        :type text: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:07"
3422;274;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<IList<int>> PathSum(TreeNode root, 
int sum) {
 
    }
}";"";"2020-03-25 15:18:07"
3423;274;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode 
root, int sum) {
 
    }
}";"";"2020-03-25 15:18:07"
3424;274;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** pathSum(struct TreeNode* root, int sum, int* 
returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:07"
3425;274;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn path_sum(root: 
Option<Rc<RefCell<TreeNode>>>, sum: i32) -> 
Vec<Vec<i32>> {
 
    }";"";"2020-03-25 15:18:07"
3426;274;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def pathSum(root: TreeNode, sum: Int): List[List
[Int]] = {
 
    }
}";"";"2020-03-25 15:18:07"
3427;274;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func pathSum(root *TreeNode, sum int) [][]int {
 
}";"";"2020-03-25 15:18:07"
3428;274;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun pathSum(root: TreeNode?, sum: Int): 
List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:07"
3429;274;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def pathSum(self, root: TreeNode, sum: int) -> 
List[List[int]]:";"";"2020-03-25 15:18:07"
3430;274;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} sum
 * @return {number[][]}
 */
var pathSum = function(root, sum) {
 
};";"";"2020-03-25 15:18:07"
3431;274;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @param Integer $sum
     * @return Integer[][]
     */
    function pathSum($root, $sum) {
 
    }
}";"";"2020-03-25 15:18:07"
3432;274;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func pathSum(_ root: TreeNode?, _ sum: Int) -> [
[Int]] {
 
    }
}";"";"2020-03-25 15:18:07"
3433;274;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @param {Integer} sum
# @return {Integer[][]}
def path_sum(root, sum)
 
end";"";"2020-03-25 15:18:07"
3434;274;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def pathSum(self, root, sum):
        """"""
        :type root: TreeNode
        :type sum: int
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:07"
3435;275;"C#";"public class Solution {
    public int MonotoneIncreasingDigits(int N) {
 
    }
}";"";"2020-03-25 15:18:08"
3436;275;"Java";"class Solution {
    public int monotoneIncreasingDigits(int N) {
 
    }
}";"";"2020-03-25 15:18:08"
3437;275;"C";"int monotoneIncreasingDigits(int N){
 
}";"";"2020-03-25 15:18:08"
3438;275;"Rust";"impl Solution {
    pub fn monotone_increasing_digits(n: i32) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:08"
3439;275;"Scala";"object Solution {
    def monotoneIncreasingDigits(N: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:08"
3440;275;"Go";"func monotoneIncreasingDigits(N int) int {
 
}";"";"2020-03-25 15:18:08"
3441;275;"Kotlin";"class Solution {
    fun monotoneIncreasingDigits(N: Int): Int {
 
    }
}";"";"2020-03-25 15:18:08"
3442;275;"Python3";"class Solution:
    def monotoneIncreasingDigits(self, N: int) -> 
int:";"";"2020-03-25 15:18:08"
3443;275;"JavaScript";"/**
 * @param {number} N
 * @return {number}
 */
var monotoneIncreasingDigits = function(N) {
 
};";"";"2020-03-25 15:18:08"
3444;275;"PHP";"class Solution {
 
    /**
     * @param Integer $N
     * @return Integer
     */
    function monotoneIncreasingDigits($N) {
        
    }
}";"";"2020-03-25 15:18:08"
3445;275;"Swift";"class Solution {
    func monotoneIncreasingDigits(_ N: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:08"
3446;275;"Ruby";"# @param {Integer} n
# @return {Integer}
def monotone_increasing_digits(n)
 
end";"";"2020-03-25 15:18:08"
3447;275;"Python";"class Solution(object):
    def monotoneIncreasingDigits(self, N):
        """"""
        :type N: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:08"
3448;276;"MS SQL Server";"/* Write your T-SQL query statement below */";"";"2020-03-25 15:18:08"
3449;276;"Oracle";"/* Write your PL/SQL query statement below */";"";"2020-03-25 15:18:08"
3450;277;"C#";"public class Solution {
    public bool IsMonotonic(int[] A) {
 
    }
}";"";"2020-03-25 15:18:08"
3451;277;"Java";"class Solution {
    public boolean isMonotonic(int[] A) {
 
    }
}";"";"2020-03-25 15:18:08"
3452;277;"Rust";"impl Solution {
    pub fn is_monotonic(a: Vec<i32>) -> bool {
        
    }
}";"";"2020-03-25 15:18:08"
3453;277;"C";"bool isMonotonic(int* A, int ASize){
 
}";"";"2020-03-25 15:18:08"
3454;277;"Scala";"object Solution {
    def isMonotonic(A: Array[Int]): Boolean = {
 
    }
}";"";"2020-03-25 15:18:08"
3455;277;"Go";"func isMonotonic(A []int) bool {
 
}";"";"2020-03-25 15:18:08"
3456;277;"Kotlin";"class Solution {
    fun isMonotonic(A: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:08"
3457;277;"Python3";"class Solution:
    def isMonotonic(self, A: List[int]) -> bool:";"";"2020-03-25 15:18:08"
3458;277;"JavaScript";"/**
 * @param {number[]} A
 * @return {boolean}
 */
var isMonotonic = function(A) {
 
};";"";"2020-03-25 15:18:08"
3459;277;"PHP";"class Solution {";"";"2020-03-25 15:18:08"
3460;277;"Swift";"class Solution {
    func isMonotonic(_ A: [Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:08"
3461;277;"Ruby";"# @param {Integer[]} a
# @return {Boolean}
def is_monotonic(a)
 
end";"";"2020-03-25 15:18:08"
3462;277;"Python";"class Solution(object):
    def isMonotonic(self, A):
        """"""
        :type A: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:08"
3463;278;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode InvertTree(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:08"
3464;278;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:08"
3465;278;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn invert_tree(root: 
Option<Rc<RefCell<TreeNode>>>) -> 
Option<Rc<RefCell<TreeNode>>> {
 
    }";"";"2020-03-25 15:18:08"
3466;278;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* invertTree(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:08"
3467;278;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def invertTree(root: TreeNode): TreeNode = {
 
    }
}";"";"2020-03-25 15:18:08"
3468;278;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func invertTree(root *TreeNode) *TreeNode {
 
}";"";"2020-03-25 15:18:08"
3469;278;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun invertTree(root: TreeNode?): TreeNode? {
 
    }
}";"";"2020-03-25 15:18:08"
3470;278;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def invertTree(self, root: TreeNode) -> 
TreeNode:";"";"2020-03-25 15:18:08"
3471;278;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {TreeNode}
 */
var invertTree = function(root) {
 
};";"";"2020-03-25 15:18:08"
3472;278;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return TreeNode
     */
    function invertTree($root) {
 
    }
}";"";"2020-03-25 15:18:08"
3473;278;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func invertTree(_ root: TreeNode?) -> TreeNode? 
{
 
    }
}";"";"2020-03-25 15:18:08"
3474;278;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {TreeNode}
def invert_tree(root)
 
end";"";"2020-03-25 15:18:08"
3475;278;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def invertTree(self, root):
        """"""
        :type root: TreeNode
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:08"
3476;279;"C#";"public class Solution {
    public int[] PlusOne(int[] digits) {
 
    }
}";"";"2020-03-25 15:18:08"
3477;279;"Java";"class Solution {
    public int[] plusOne(int[] digits) {
 
    }
}";"";"2020-03-25 15:18:08"
3478;279;"Rust";"impl Solution {
    pub fn plus_one(digits: Vec<i32>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:08"
3479;279;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* plusOne(int* digits, int digitsSize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:08"
3480;279;"Scala";"object Solution {
    def plusOne(digits: Array[Int]): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:08"
3481;279;"Go";"func plusOne(digits []int) []int {
 
}";"";"2020-03-25 15:18:08"
3482;279;"Kotlin";"class Solution {
    fun plusOne(digits: IntArray): IntArray {
 
    }
}";"";"2020-03-25 15:18:08"
3483;279;"Python3";"class Solution:
    def plusOne(self, digits: List[int]) -> List
[int]:";"";"2020-03-25 15:18:08"
3484;279;"JavaScript";"/**
 * @param {number[]} digits
 * @return {number[]}
 */
var plusOne = function(digits) {
 
};";"";"2020-03-25 15:18:08"
3485;279;"PHP";"class Solution {";"";"2020-03-25 15:18:08"
3486;279;"Swift";"class Solution {
    func plusOne(_ digits: [Int]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:08"
3487;279;"Ruby";"# @param {Integer[]} digits
# @return {Integer[]}
def plus_one(digits)
 
end";"";"2020-03-25 15:18:08"
3488;279;"Python";"class Solution(object):
    def plusOne(self, digits):
        """"""
        :type digits: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:08"
3489;280;"C#";"public class Solution {
    public int MinDeletionSize(string[] A) {
 
    }
}";"";"2020-03-25 15:18:08"
3490;280;"Java";"class Solution {
    public int minDeletionSize(String[] A) {
 
    }
}";"";"2020-03-25 15:18:08"
3491;280;"C";"int minDeletionSize(char ** A, int ASize){
 
}";"";"2020-03-25 15:18:08"
3492;280;"Rust";"impl Solution {
    pub fn min_deletion_size(a: Vec<String>) -> i32 
{
        
    }
}";"";"2020-03-25 15:18:08"
3493;280;"Scala";"object Solution {
    def minDeletionSize(A: Array[String]): Int = {
 
    }
}";"";"2020-03-25 15:18:08"
3494;280;"Go";"func minDeletionSize(A []string) int {
 
}";"";"2020-03-25 15:18:08"
3495;280;"Kotlin";"class Solution {
    fun minDeletionSize(A: Array<String>): Int {
 
    }
}";"";"2020-03-25 15:18:08"
3496;280;"Python3";"class Solution:
    def minDeletionSize(self, A: List[str]) -> int:";"";"2020-03-25 15:18:08"
3497;280;"JavaScript";"/**
 * @param {string[]} A
 * @return {number}
 */
var minDeletionSize = function(A) {
 
};";"";"2020-03-25 15:18:08"
3498;280;"PHP";"class Solution {
 
    /**
     * @param String[] $A
     * @return Integer
     */
    function minDeletionSize($A) {
        
    }
}";"";"2020-03-25 15:18:08"
3499;280;"Swift";"class Solution {
    func minDeletionSize(_ A: [String]) -> Int {
        
    }
}";"";"2020-03-25 15:18:08"
3500;280;"Ruby";"# @param {String[]} a";"";"2020-03-25 15:18:08"
3501;280;"Python";"class Solution(object):
    def minDeletionSize(self, A):
        """"""
        :type A: List[str]
        :rtype: int
        """"""";"";"2020-03-25 15:18:08"
3502;281;"C#";"public class Solution {
    public string[] Permutation(string s) {
 
    }
}";"";"2020-03-25 15:18:08"
3503;281;"Java";"class Solution {
    public String[] permutation(String s) {
 
    }
}";"";"2020-03-25 15:18:08"
3504;281;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char** permutation(char* s, int* returnSize){
 
}";"";"2020-03-25 15:18:08"
3505;281;"Rust";"impl Solution {
    pub fn permutation(s: String) -> Vec<String> {
 
    }
}";"";"2020-03-25 15:18:08"
3506;281;"Scala";"object Solution {
    def permutation(s: String): Array[String] = {
 
    }
}";"";"2020-03-25 15:18:08"
3507;281;"Go";"func permutation(s string) []string {
 
}";"";"2020-03-25 15:18:08"
3508;281;"Kotlin";"class Solution {
    fun permutation(s: String): Array<String> {
 
    }
}";"";"2020-03-25 15:18:08"
3509;281;"Python3";"class Solution:
    def permutation(self, s: str) -> List[str]:";"";"2020-03-25 15:18:08"
3510;281;"JavaScript";"/**
 * @param {string} s
 * @return {string[]}
 */
var permutation = function(s) {
 
};";"";"2020-03-25 15:18:08"
3511;281;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return String[]
     */
    function permutation($s) {
 
    }
}";"";"2020-03-25 15:18:08"
3512;281;"Swift";"class Solution {
    func permutation(_ s: String) -> [String] {
 
    }
}";"";"2020-03-25 15:18:08"
3513;281;"Ruby";"# @param {String} s
# @return {String[]}
def permutation(s)
 
end";"";"2020-03-25 15:18:08"
3514;281;"Python";"class Solution(object):
    def permutation(self, s):
        """"""
        :type s: str
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:08"
3515;282;"C#";"public class Solution {
    public bool CanThreePartsEqualSum(int[] A) {
 
    }
}";"";"2020-03-25 15:18:08"
3516;282;"Java";"class Solution {
    public boolean canThreePartsEqualSum(int[] A) {
 
    }
}";"";"2020-03-25 15:18:08"
3517;282;"Rust";"impl Solution {
    pub fn can_three_parts_equal_sum(a: Vec<i32>) 
-> bool {
        
    }
}";"";"2020-03-25 15:18:08"
3518;282;"C";"bool canThreePartsEqualSum(int* A, int ASize){
 
}";"";"2020-03-25 15:18:08"
3519;282;"Scala";"object Solution {
    def canThreePartsEqualSum(A: Array[Int]): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:08"
3520;282;"Go";"func canThreePartsEqualSum(A []int) bool {
 
}";"";"2020-03-25 15:18:08"
3521;282;"Kotlin";"class Solution {
    fun canThreePartsEqualSum(A: IntArray): Boolean 
{
 
    }
}";"";"2020-03-25 15:18:08"
3522;282;"Python3";"class Solution:
    def canThreePartsEqualSum(self, A: List[int]) 
-> bool:";"";"2020-03-25 15:18:08"
3523;282;"JavaScript";"/**
 * @param {number[]} A
 * @return {boolean}
 */
var canThreePartsEqualSum = function(A) {
 
};";"";"2020-03-25 15:18:08"
3524;282;"PHP";"class Solution {";"";"2020-03-25 15:18:08"
3525;282;"Swift";"class Solution {
    func canThreePartsEqualSum(_ A: [Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:08"
3526;282;"Ruby";"# @param {Integer[]} a
# @return {Boolean}
def can_three_parts_equal_sum(a)
 
end";"";"2020-03-25 15:18:08"
3527;282;"Python";"class Solution(object):
    def canThreePartsEqualSum(self, A):
        """"""
        :type A: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:08"
3528;283;"C#";"public class Solution {
    public bool CheckValidString(string s) {
 
    }
}";"";"2020-03-25 15:18:08"
3529;283;"Java";"class Solution {
    public boolean checkValidString(String s) {
 
    }
}";"";"2020-03-25 15:18:08"
3530;283;"Rust";"impl Solution {
    pub fn check_valid_string(s: String) -> bool {
        
    }
}";"";"2020-03-25 15:18:08"
3531;283;"C";"bool checkValidString(char * s){
 
}";"";"2020-03-25 15:18:08"
3532;283;"Scala";"object Solution {
    def checkValidString(s: String): Boolean = {
 
    }
}";"";"2020-03-25 15:18:08"
3533;283;"Go";"func checkValidString(s string) bool {
 
}";"";"2020-03-25 15:18:08"
3534;283;"Kotlin";"class Solution {
    fun checkValidString(s: String): Boolean {
 
    }
}";"";"2020-03-25 15:18:08"
3535;283;"Python3";"class Solution:
    def checkValidString(self, s: str) -> bool:";"";"2020-03-25 15:18:08"
3536;283;"JavaScript";"/**
 * @param {string} s
 * @return {boolean}
 */
var checkValidString = function(s) {
 
};";"";"2020-03-25 15:18:08"
3537;283;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return Boolean
     */
    function checkValidString($s) {
        
    }
}";"";"2020-03-25 15:18:08"
3538;283;"Swift";"class Solution {
    func checkValidString(_ s: String) -> Bool {
        
    }
}";"";"2020-03-25 15:18:08"
3539;283;"Ruby";"# @param {String} s
# @return {Boolean}
def check_valid_string(s)
 
end";"";"2020-03-25 15:18:08"
3540;283;"Python";"class Solution(object):
    def checkValidString(self, s):
        """"""
        :type s: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:08"
3541;284;"C#";"public class Solution {
    public int AtMostNGivenDigitSet(string[] D, int 
N) {
 
    }
}";"";"2020-03-25 15:18:08"
3542;284;"Java";"class Solution {
    public int atMostNGivenDigitSet(String[] D, int 
N) {
 
    }
}";"";"2020-03-25 15:18:08"
3543;284;"C";"int atMostNGivenDigitSet(char ** D, int DSize, int 
N){
 
}";"";"2020-03-25 15:18:08"
3544;284;"Rust";"impl Solution {
    pub fn at_most_n_given_digit_set(d: Vec<String>,
 n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:08"
3545;284;"Scala";"object Solution {
    def atMostNGivenDigitSet(D: Array[String], N: 
Int): Int = {
 
    }
}";"";"2020-03-25 15:18:08"
3546;284;"Go";"func atMostNGivenDigitSet(D []string, N int) int {
 
}";"";"2020-03-25 15:18:08"
3547;284;"Kotlin";"class Solution {
    fun atMostNGivenDigitSet(D: Array<String>, N: 
Int): Int {
 
    }
}";"";"2020-03-25 15:18:08"
3548;284;"Python3";"class Solution:
    def atMostNGivenDigitSet(self, D: List[str], N: 
int) -> int:";"";"2020-03-25 15:18:08"
3549;284;"JavaScript";"/**
 * @param {string[]} D
 * @param {number} N
 * @return {number}
 */
var atMostNGivenDigitSet = function(D, N) {
 
};";"";"2020-03-25 15:18:08"
3550;284;"PHP";"class Solution {
 
    /**
     * @param String[] $D
     * @param Integer $N
     * @return Integer
     */
    function atMostNGivenDigitSet($D, $N) {
        
    }
}";"";"2020-03-25 15:18:08"
3551;284;"Swift";"class Solution {
    func atMostNGivenDigitSet(_ D: [String], _ N: 
Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:08"
3552;284;"Ruby";"# @param {String[]} d";"";"2020-03-25 15:18:08"
3553;284;"Python";"class Solution(object):
    def atMostNGivenDigitSet(self, D, N):
        """"""
        :type D: List[str]
        :type N: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:08"
3554;285;"C#";"public class Solution {
    public IList<IList<int>> KSmallestPairs(int[] 
nums1, int[] nums2, int k) {
 
    }
}";"";"2020-03-25 15:18:08"
3555;285;"Java";"class Solution {
    public List<List<Integer>> kSmallestPairs(int[] 
nums1, int[] nums2, int k) {
 
    }
}";"";"2020-03-25 15:18:08"
3556;285;"Rust";"impl Solution {
    pub fn k_smallest_pairs(nums1: Vec<i32>, nums2: 
Vec<i32>, k: i32) -> Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:08"
3557;285;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** kSmallestPairs(int* nums1, int nums1Size, 
int* nums2, int nums2Size, int k, int* returnSize, 
int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:08"
3558;285;"Scala";"object Solution {
    def kSmallestPairs(nums1: Array[Int], nums2: 
Array[Int], k: Int): List[List[Int]] = {
 
    }
}";"";"2020-03-25 15:18:08"
3559;285;"Go";"func kSmallestPairs(nums1 []int, nums2 []int, k int)
 [][]int {
 
}";"";"2020-03-25 15:18:08"
3560;285;"Kotlin";"class Solution {
    fun kSmallestPairs(nums1: IntArray, nums2: 
IntArray, k: Int): List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:08"
3561;285;"Python3";"class Solution:
    def kSmallestPairs(self, nums1: List[int], 
nums2: List[int], k: int) -> List[List[int]]:";"";"2020-03-25 15:18:08"
3562;285;"JavaScript";"/**
 * @param {number[]} nums1
 * @param {number[]} nums2
 * @param {number} k
 * @return {number[][]}
 */
var kSmallestPairs = function(nums1, nums2, k) {
 
};";"";"2020-03-25 15:18:08"
3563;285;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums1
     * @param Integer[] $nums2
     * @param Integer $k
     * @return Integer[][]
     */
    function kSmallestPairs($nums1, $nums2, $k) {
        
    }
}";"";"2020-03-25 15:18:08"
3564;285;"Swift";"class Solution {
    func kSmallestPairs(_ nums1: [Int], _ nums2: 
[Int], _ k: Int) -> [[Int]] {
        
    }
}";"";"2020-03-25 15:18:08"
3565;285;"Ruby";"# @param {Integer[]} nums1
# @param {Integer[]} nums2
# @param {Integer} k
# @return {Integer[][]}
def k_smallest_pairs(nums1, nums2, k)
 
end";"";"2020-03-25 15:18:08"
3566;285;"Python";"class Solution(object):
    def kSmallestPairs(self, nums1, nums2, k):
        """"""
        :type nums1: List[int]
        :type nums2: List[int]
        :type k: int
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:08"
3567;286;"C#";"public class Solution {
    public int[] FairCandySwap(int[] A, int[] B) {
 
    }
}";"";"2020-03-25 15:18:08"
3568;286;"Java";"class Solution {
    public int[] fairCandySwap(int[] A, int[] B) {
 
    }
}";"";"2020-03-25 15:18:08"
3569;286;"Rust";"impl Solution {
    pub fn fair_candy_swap(a: Vec<i32>, b: Vec<i32>)
 -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:08"
3570;286;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* fairCandySwap(int* A, int ASize, int* B, int 
BSize, int* returnSize){
 
}";"";"2020-03-25 15:18:08"
3571;286;"Scala";"object Solution {
    def fairCandySwap(A: Array[Int], B: Array[Int])
: Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:08"
3572;286;"Go";"func fairCandySwap(A []int, B []int) []int {
 
}";"";"2020-03-25 15:18:08"
3573;286;"Kotlin";"class Solution {
    fun fairCandySwap(A: IntArray, B: IntArray): 
IntArray {
 
    }
}";"";"2020-03-25 15:18:08"
3574;286;"Python3";"class Solution:
    def fairCandySwap(self, A: List[int], B: List
[int]) -> List[int]:";"";"2020-03-25 15:18:08"
3575;286;"JavaScript";"/**
 * @param {number[]} A
 * @param {number[]} B
 * @return {number[]}
 */
var fairCandySwap = function(A, B) {
 
};";"";"2020-03-25 15:18:08"
3576;286;"PHP";"class Solution {";"";"2020-03-25 15:18:08"
3577;286;"Swift";"class Solution {
    func fairCandySwap(_ A: [Int], _ B: [Int]) -> 
[Int] {
        
    }
}";"";"2020-03-25 15:18:08"
3578;286;"Ruby";"# @param {Integer[]} a
# @param {Integer[]} b
# @return {Integer[]}
def fair_candy_swap(a, b)
 
end";"";"2020-03-25 15:18:08"
3579;286;"Python";"class Solution(object):
    def fairCandySwap(self, A, B):
        """"""
        :type A: List[int]
        :type B: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:08"
3580;287;"C#";"public class Solution {
    public string RemoveKdigits(string num, int k) {
 
    }
}";"";"2020-03-25 15:18:08"
3581;287;"Java";"class Solution {
    public String removeKdigits(String num, int k) {
 
    }
}";"";"2020-03-25 15:18:08"
3582;287;"Rust";"impl Solution {
    pub fn remove_kdigits(num: String, k: i32) -> 
String {
        
    }
}";"";"2020-03-25 15:18:08"
3583;287;"C";"char * removeKdigits(char * num, int k){
 
}";"";"2020-03-25 15:18:08"
3584;287;"Scala";"object Solution {
    def removeKdigits(num: String, k: Int): String 
= {
 
    }
}";"";"2020-03-25 15:18:08"
3585;287;"Go";"func removeKdigits(num string, k int) string {
 
}";"";"2020-03-25 15:18:08"
3586;287;"Kotlin";"class Solution {
    fun removeKdigits(num: String, k: Int): String {
 
    }
}";"";"2020-03-25 15:18:08"
3587;287;"Python3";"class Solution:
    def removeKdigits(self, num: str, k: int) -> 
str:";"";"2020-03-25 15:18:08"
3588;287;"JavaScript";"/**
 * @param {string} num
 * @param {number} k
 * @return {string}
 */
var removeKdigits = function(num, k) {
 
};";"";"2020-03-25 15:18:08"
3589;287;"PHP";"class Solution {
 
    /**
     * @param String $num
     * @param Integer $k
     * @return String
     */
    function removeKdigits($num, $k) {
        
    }
}";"";"2020-03-25 15:18:08"
3590;287;"Swift";"class Solution {
    func removeKdigits(_ num: String, _ k: Int) -> 
String {
        
    }
}";"";"2020-03-25 15:18:08"
3591;287;"Ruby";"# @param {String} num
# @param {Integer} k
# @return {String}
def remove_kdigits(num, k)
 
end";"";"2020-03-25 15:18:08"
3592;287;"Python";"class Solution(object):
    def removeKdigits(self, num, k):
        """"""
        :type num: str
        :type k: int
        :rtype: str
        """"""";"";"2020-03-25 15:18:08"
3593;288;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode RemoveLeafNodes(TreeNode root, 
int target) {
        
    }
}";"";"2020-03-25 15:18:08"
3594;288;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode removeLeafNodes(TreeNode root, 
int target) {
 
    }
}";"";"2020-03-25 15:18:08"
3595;288;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* removeLeafNodes(struct TreeNode* 
root, int target){
 
}";"";"2020-03-25 15:18:08"
3596;288;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn remove_leaf_nodes(root: 
Option<Rc<RefCell<TreeNode>>>, target: i32) -> 
Option<Rc<RefCell<TreeNode>>> {
 
    }";"";"2020-03-25 15:18:08"
3597;288;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def removeLeafNodes(root: TreeNode, target: Int)
: TreeNode = {
 
    }
}";"";"2020-03-25 15:18:08"
3598;288;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func removeLeafNodes(root *TreeNode, target int) 
*TreeNode {
 
}";"";"2020-03-25 15:18:08"
3599;288;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun removeLeafNodes(root: TreeNode?, target: 
Int): TreeNode? {
 
    }
}";"";"2020-03-25 15:18:08"
3600;288;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def removeLeafNodes(self, root: TreeNode, 
target: int) -> TreeNode:";"";"2020-03-25 15:18:08"
3601;288;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} target
 * @return {TreeNode}
 */
var removeLeafNodes = function(root, target) {
    
};";"";"2020-03-25 15:18:08"
3602;288;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @param Integer $target
     * @return TreeNode
     */
    function removeLeafNodes($root, $target) {
 
    }
}";"";"2020-03-25 15:18:08"
3603;288;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func removeLeafNodes(_ root: TreeNode?, _ 
target: Int) -> TreeNode? {
 
    }
}";"";"2020-03-25 15:18:08"
3604;288;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @param {Integer} target
# @return {TreeNode}
def remove_leaf_nodes(root, target)
    
end";"";"2020-03-25 15:18:08"
3605;288;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def removeLeafNodes(self, root, target):
        """"""
        :type root: TreeNode
        :type target: int
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:08"
3606;289;"C#";"public class NumMatrix {
 
    public NumMatrix(int[][] matrix) {
 
    }
    
    public int SumRegion(int row1, int col1, int 
row2, int col2) {
 
    }
}
 
/**
 * Your NumMatrix object will be instantiated and 
called as such:
 * NumMatrix obj = new NumMatrix(matrix);
 * int param_1 = obj.SumRegion(row1,col1,row2,col2);
 */";"";"2020-03-25 15:18:08"
3607;289;"Java";"class NumMatrix {
 
    public NumMatrix(int[][] matrix) {
 
    }
    
    public int sumRegion(int row1, int col1, int 
row2, int col2) {
 
    }
}
 
/**
 * Your NumMatrix object will be instantiated and 
called as such:
 * NumMatrix obj = new NumMatrix(matrix);
 * int param_1 = obj.sumRegion(row1,col1,row2,col2);
 */";"";"2020-03-25 15:18:08"
3608;289;"C";"typedef struct {
    
} NumMatrix;
 
 
NumMatrix* numMatrixCreate(int** matrix, int 
matrixSize, int* matrixColSize) {
    
}
 
int numMatrixSumRegion(NumMatrix* obj, int row1, 
int col1, int row2, int col2) {
  
}
 
void numMatrixFree(NumMatrix* obj) {
    
}
 
/**
 * Your NumMatrix struct will be instantiated and 
called as such:
 * NumMatrix* obj = numMatrixCreate(matrix, 
matrixSize, matrixColSize);
 * int param_1 = numMatrixSumRegion(obj, row1, col1,
 row2, col2);";"";"2020-03-25 15:18:08"
3609;289;"Rust";"struct NumMatrix {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl NumMatrix {
 
    fn new(matrix: Vec<Vec<i32>>) -> Self {
        
    }
    
    fn sum_region(&self, row1: i32, col1: i32, 
row2: i32, col2: i32) -> i32 {
        
    }
}
 
/**
 * Your NumMatrix object will be instantiated and 
called as such:";"";"2020-03-25 15:18:08"
3610;289;"Scala";"class NumMatrix(_matrix: Array[Array[Int]]) {
 
    def sumRegion(row1: Int, col1: Int, row2: Int, 
col2: Int): Int = {
 
    }
 
}
 
/**
 * Your NumMatrix object will be instantiated and 
called as such:
 * var obj = new NumMatrix(matrix)
 * var param_1 = obj.sumRegion(row1,col1,row2,col2)
 */";"";"2020-03-25 15:18:08"
3611;289;"Go";"type NumMatrix struct {
 
}
 
 
func Constructor(matrix [][]int) NumMatrix {
 
}
 
 
func (this *NumMatrix) SumRegion(row1 int, col1 int,
 row2 int, col2 int) int {
 
}
 
 
/**
 * Your NumMatrix object will be instantiated and 
called as such:
 * obj := Constructor(matrix);
 * param_1 := obj.SumRegion(row1,col1,row2,col2);
 */";"";"2020-03-25 15:18:08"
3612;289;"Kotlin";"class NumMatrix(matrix: Array<IntArray>) {
 
    fun sumRegion(row1: Int, col1: Int, row2: Int, 
col2: Int): Int {
 
    }
 
}
 
/**
 * Your NumMatrix object will be instantiated and 
called as such:
 * var obj = NumMatrix(matrix)
 * var param_1 = obj.sumRegion(row1,col1,row2,col2)
 */";"";"2020-03-25 15:18:08"
3613;289;"Python3";"class NumMatrix:
 
    def __init__(self, matrix: List[List[int]]):
        
 
    def sumRegion(self, row1: int, col1: int, row2: 
int, col2: int) -> int:
        
 
 
# Your NumMatrix object will be instantiated and 
called as such:
# obj = NumMatrix(matrix)
# param_1 = obj.sumRegion(row1,col1,row2,col2)";"";"2020-03-25 15:18:08"
3614;289;"JavaScript";"/**
 * @param {number[][]} matrix
 */
var NumMatrix = function(matrix) {
 
};
 
/** 
 * @param {number} row1 
 * @param {number} col1 
 * @param {number} row2 
 * @param {number} col2
 * @return {number}
 */
NumMatrix.prototype.sumRegion = function(row1, col1,
 row2, col2) {
 
};
 
/**
 * Your NumMatrix object will be instantiated and 
called as such:
 * var obj = new NumMatrix(matrix)
 * var param_1 = obj.sumRegion(row1,col1,row2,col2)
 */";"";"2020-03-25 15:18:08"
3615;289;"PHP";"class NumMatrix {
    /**
     * @param Integer[][] $matrix
     */
    function __construct($matrix) {
        
    }
  
    /**
     * @param Integer $row1
     * @param Integer $col1
     * @param Integer $row2
     * @param Integer $col2
     * @return Integer
     */
    function sumRegion($row1, $col1, $row2, $col2) {
        
    }
}
 
/**
 * Your NumMatrix object will be instantiated and 
called as such:
 * $obj = NumMatrix($matrix);
 * $ret_1 = $obj->sumRegion($row1, $col1, $row2, 
$col2);";"";"2020-03-25 15:18:08"
3616;289;"Swift";"class NumMatrix {
 
    init(_ matrix: [[Int]]) {
        
    }
    
    func sumRegion(_ row1: Int, _ col1: Int, _ 
row2: Int, _ col2: Int) -> Int {
        
    }
}
 
/**
 * Your NumMatrix object will be instantiated and 
called as such:
 * let obj = NumMatrix(matrix)
 * let ret_1: Int = obj.sumRegion(row1, col1, row2, 
col2)
 */";"";"2020-03-25 15:18:08"
3617;289;"Ruby";"class NumMatrix
 
=begin
    :type matrix: Integer[][]
=end
    def initialize(matrix)
 
    end
 
 
=begin
    :type row1: Integer
    :type col1: Integer
    :type row2: Integer
    :type col2: Integer
    :rtype: Integer
=end
    def sum_region(row1, col1, row2, col2)
 
    end
 
 
end
 
# Your NumMatrix object will be instantiated and 
called as such:";"";"2020-03-25 15:18:08"
3618;289;"Python";"class NumMatrix(object):
 
    def __init__(self, matrix):
        """"""
        :type matrix: List[List[int]]
        """"""
        
 
    def sumRegion(self, row1, col1, row2, col2):
        """"""
        :type row1: int
        :type col1: int
        :type row2: int
        :type col2: int
        :rtype: int
        """"""
        
 
 
# Your NumMatrix object will be instantiated and 
called as such:
# obj = NumMatrix(matrix)
# param_1 = obj.sumRegion(row1,col1,row2,col2)";"";"2020-03-25 15:18:08"
3619;290;"C#";"public class Solution {
    public int LeastOpsExpressTarget(int x, int 
target) {
 
    }
}";"";"2020-03-25 15:18:08"
3620;290;"Java";"class Solution {
    public int leastOpsExpressTarget(int x, int 
target) {
 
    }
}";"";"2020-03-25 15:18:08"
3621;290;"Rust";"impl Solution {
    pub fn least_ops_express_target(x: i32, target: 
i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:08"
3622;290;"C";"int leastOpsExpressTarget(int x, int target){
 
}";"";"2020-03-25 15:18:08"
3623;290;"Scala";"object Solution {
    def leastOpsExpressTarget(x: Int, target: Int): 
Int = {
 
    }
}";"";"2020-03-25 15:18:08"
3624;290;"Go";"func leastOpsExpressTarget(x int, target int) int {
 
}";"";"2020-03-25 15:18:08"
3625;290;"Kotlin";"class Solution {
    fun leastOpsExpressTarget(x: Int, target: Int): 
Int {
 
    }
}";"";"2020-03-25 15:18:08"
3626;290;"Python3";"class Solution:
    def leastOpsExpressTarget(self, x: int, target: 
int) -> int:";"";"2020-03-25 15:18:08"
3627;290;"JavaScript";"/**
 * @param {number} x
 * @param {number} target
 * @return {number}
 */
var leastOpsExpressTarget = function(x, target) {
 
};";"";"2020-03-25 15:18:08"
3628;290;"PHP";"class Solution {";"";"2020-03-25 15:18:08"
3629;290;"Swift";"class Solution {
    func leastOpsExpressTarget(_ x: Int, _ target: 
Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:08"
3630;290;"Ruby";"# @param {Integer} x
# @param {Integer} target
# @return {Integer}
def least_ops_express_target(x, target)
 
end";"";"2020-03-25 15:18:08"
3631;290;"Python";"class Solution(object):
    def leastOpsExpressTarget(self, x, target):
        """"""
        :type x: int
        :type target: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:08"
3632;291;"C#";"public class Solution {
    public int SumNums(int n) {
 
    }
}";"";"2020-03-25 15:18:08"
3633;291;"Java";"class Solution {
    public int sumNums(int n) {
 
    }
}";"";"2020-03-25 15:18:08"
3634;291;"Rust";"impl Solution {
    pub fn sum_nums(n: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:08"
3635;291;"C";"int sumNums(int n){
 
}";"";"2020-03-25 15:18:08"
3636;291;"Scala";"object Solution {
    def sumNums(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:08"
3637;291;"Go";"func sumNums(n int) int {
 
}";"";"2020-03-25 15:18:08"
3638;291;"Kotlin";"class Solution {
    fun sumNums(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:08"
3639;291;"Python3";"class Solution:
    def sumNums(self, n: int) -> int:";"";"2020-03-25 15:18:08"
3640;291;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var sumNums = function(n) {
 
};";"";"2020-03-25 15:18:08"
3641;291;"PHP";"class Solution {";"";"2020-03-25 15:18:08"
3642;291;"Swift";"class Solution {
    func sumNums(_ n: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:08"
3643;291;"Ruby";"# @param {Integer} n
# @return {Integer}
def sum_nums(n)
 
end";"";"2020-03-25 15:18:08"
3644;291;"Python";"class Solution(object):
    def sumNums(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:08"
3645;292;"C#";"public class Solution {
    public int NumPermsDISequence(string S) {
 
    }
}";"";"2020-03-25 15:18:08"
3646;292;"Java";"class Solution {
    public int numPermsDISequence(String S) {
 
    }
}";"";"2020-03-25 15:18:08"
3647;292;"Rust";"impl Solution {
    pub fn num_perms_di_sequence(s: String) -> i32 {
        
    }
}";"";"2020-03-25 15:18:08"
3648;292;"C";"int numPermsDISequence(char * S){
 
}";"";"2020-03-25 15:18:08"
3649;292;"Scala";"object Solution {
    def numPermsDISequence(S: String): Int = {
 
    }
}";"";"2020-03-25 15:18:08"
3650;292;"Go";"func numPermsDISequence(S string) int {
 
}";"";"2020-03-25 15:18:08"
3651;292;"Kotlin";"class Solution {
    fun numPermsDISequence(S: String): Int {
 
    }
}";"";"2020-03-25 15:18:08"
3652;292;"Python3";"class Solution:
    def numPermsDISequence(self, S: str) -> int:";"";"2020-03-25 15:18:08"
3653;292;"JavaScript";"/**
 * @param {string} S
 * @return {number}
 */
var numPermsDISequence = function(S) {
 
};";"";"2020-03-25 15:18:08"
3654;292;"PHP";"class Solution {";"";"2020-03-25 15:18:08"
3655;292;"Swift";"class Solution {
    func numPermsDISequence(_ S: String) -> Int {
        
    }
}";"";"2020-03-25 15:18:08"
3656;292;"Ruby";"# @param {String} s
# @return {Integer}
def num_perms_di_sequence(s)
 
end";"";"2020-03-25 15:18:08"
3657;292;"Python";"class Solution(object):
    def numPermsDISequence(self, S):
        """"""
        :type S: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:08"
3658;293;"C#";"public class Solution {
    public int CountSubstrings(string s) {
 
    }
}";"";"2020-03-25 15:18:08"
3659;293;"Java";"class Solution {
    public int countSubstrings(String s) {
 
    }
}";"";"2020-03-25 15:18:08"
3660;293;"C";"int countSubstrings(char * s){
 
}";"";"2020-03-25 15:18:08"
3661;293;"Rust";"impl Solution {
    pub fn count_substrings(s: String) -> i32 {
        
    }
}";"";"2020-03-25 15:18:08"
3662;293;"Scala";"object Solution {
    def countSubstrings(s: String): Int = {
 
    }
}";"";"2020-03-25 15:18:08"
3663;293;"JavaScript";"/**
 * @param {string} s
 * @return {number}
 */
var countSubstrings = function(s) {
 
};";"";"2020-03-25 15:18:08"
3664;293;"Go";"func countSubstrings(s string) int {
 
}";"";"2020-03-25 15:18:08"
3665;293;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return Integer
     */
    function countSubstrings($s) {
        
    }
}";"";"2020-03-25 15:18:08"
3666;293;"Swift";"class Solution {
    func countSubstrings(_ s: String) -> Int {
        
    }
}";"";"2020-03-25 15:18:08"
3667;293;"Ruby";"# @param {String} s";"";"2020-03-25 15:18:08"
3668;293;"Python";"class Solution(object):
    def countSubstrings(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:08"
3669;293;"Kotlin";"class Solution {
    fun countSubstrings(s: String): Int {
 
    }
}";"";"2020-03-25 15:18:08"
3670;294;"C#";"public class Solution {
    public IList<IList<int>> PalindromePairs(string
[] words) {
 
    }
}";"";"2020-03-25 15:18:08"
3671;294;"Java";"class Solution {
    public List<List<Integer>> palindromePairs
(String[] words) {
 
    }
}";"";"2020-03-25 15:18:08"
3672;294;"Rust";"impl Solution {
    pub fn palindrome_pairs(words: Vec<String>) -> 
Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:08"
3673;294;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** palindromePairs(char ** words, int wordsSize, 
int* returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:08"
3674;294;"Scala";"object Solution {
    def palindromePairs(words: Array[String]): List
[List[Int]] = {
 
    }
}";"";"2020-03-25 15:18:08"
3675;294;"Go";"func palindromePairs(words []string) [][]int {
 
}";"";"2020-03-25 15:18:08"
3676;294;"Kotlin";"class Solution {
    fun palindromePairs(words: Array<String>): 
List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:08"
3677;294;"Python3";"class Solution:
    def palindromePairs(self, words: List[str]) -> 
List[List[int]]:";"";"2020-03-25 15:18:08"
3678;294;"JavaScript";"/**
 * @param {string[]} words
 * @return {number[][]}
 */
var palindromePairs = function(words) {
 
};";"";"2020-03-25 15:18:08"
3679;294;"PHP";"class Solution {";"";"2020-03-25 15:18:08"
3680;294;"Swift";"class Solution {
    func palindromePairs(_ words: [String]) -> [
[Int]] {
        
    }
}";"";"2020-03-25 15:18:08"
3681;294;"Ruby";"# @param {String[]} words
# @return {Integer[][]}
def palindrome_pairs(words)
 
end";"";"2020-03-25 15:18:08"
3682;294;"Python";"class Solution(object):
    def palindromePairs(self, words):
        """"""
        :type words: List[str]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:08"
3683;295;"MySQL";"# Write your MySQL query statement below";"";"2020-03-25 15:18:09"
3684;295;"MS SQL Server";"/* Write your T-SQL query statement below */";"";"2020-03-25 15:18:09"
3685;296;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public bool HasPathSum(TreeNode root, int sum) {
 
    }
}";"";"2020-03-25 15:18:09"
3686;296;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean hasPathSum(TreeNode root, int 
sum) {
 
    }
}";"";"2020-03-25 15:18:09"
3687;296;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
bool hasPathSum(struct TreeNode* root, int sum){
 
}";"";"2020-03-25 15:18:09"
3688;296;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn has_path_sum(root: 
Option<Rc<RefCell<TreeNode>>>, sum: i32) -> bool {
        
    }
}";"";"2020-03-25 15:18:09"
3689;296;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def hasPathSum(root: TreeNode, sum: Int): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:09"
3690;296;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func hasPathSum(root *TreeNode, sum int) bool {
 
}";"";"2020-03-25 15:18:09"
3691;296;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun hasPathSum(root: TreeNode?, sum: Int): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:09"
3692;296;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def hasPathSum(self, root: TreeNode, sum: int) 
-> bool:";"";"2020-03-25 15:18:09"
3693;296;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} sum
 * @return {boolean}
 */
var hasPathSum = function(root, sum) {
 
};";"";"2020-03-25 15:18:09"
3694;296;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @param Integer $sum
     * @return Boolean
     */
    function hasPathSum($root, $sum) {
        
    }
}";"";"2020-03-25 15:18:09"
3695;296;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func hasPathSum(_ root: TreeNode?, _ sum: Int) 
-> Bool {
        
    }
}";"";"2020-03-25 15:18:09"
3696;296;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @param {Integer} sum
# @return {Boolean}
def has_path_sum(root, sum)
 
end";"";"2020-03-25 15:18:09"
3697;296;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def hasPathSum(self, root, sum):
        """"""
        :type root: TreeNode
        :type sum: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:09"
3698;297;"C#";"public class Solution {
    public int FindMaximumXOR(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:09"
3699;297;"Java";"class Solution {
    public int findMaximumXOR(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:09"
3700;297;"Rust";"impl Solution {
    pub fn find_maximum_xor(nums: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:09"
3701;297;"C";"int findMaximumXOR(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:09"
3702;297;"Scala";"object Solution {
    def findMaximumXOR(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:09"
3703;297;"Go";"func findMaximumXOR(nums []int) int {
 
}";"";"2020-03-25 15:18:09"
3704;297;"Kotlin";"class Solution {
    fun findMaximumXOR(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:09"
3705;297;"Python3";"class Solution:
    def findMaximumXOR(self, nums: List[int]) -> 
int:";"";"2020-03-25 15:18:09"
3706;297;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var findMaximumXOR = function(nums) {
 
};";"";"2020-03-25 15:18:09"
3707;297;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function findMaximumXOR($nums) {
        
    }
}";"";"2020-03-25 15:18:09"
3708;297;"Swift";"class Solution {
    func findMaximumXOR(_ nums: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:09"
3709;297;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def find_maximum_xor(nums)
 
end";"";"2020-03-25 15:18:09"
3710;297;"Python";"class Solution(object):
    def findMaximumXOR(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:09"
3711;298;"C#";"public class Solution {
    public int[] ConstructRectangle(int area) {
 
    }
}";"";"2020-03-25 15:18:09"
3712;298;"Java";"class Solution {
    public int[] constructRectangle(int area) {
 
    }
}";"";"2020-03-25 15:18:09"
3713;298;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* constructRectangle(int area, int* returnSize){
 
}";"";"2020-03-25 15:18:09"
3714;298;"Rust";"impl Solution {
    pub fn construct_rectangle(area: i32) -> 
Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:09"
3715;298;"Scala";"object Solution {
    def constructRectangle(area: Int): Array[Int] = 
{
 
    }
}";"";"2020-03-25 15:18:09"
3716;298;"Go";"func constructRectangle(area int) []int {
 
}";"";"2020-03-25 15:18:09"
3717;298;"Kotlin";"class Solution {
    fun constructRectangle(area: Int): IntArray {
 
    }
}";"";"2020-03-25 15:18:09"
3718;298;"Python3";"class Solution:
    def constructRectangle(self, area: int) -> List
[int]:";"";"2020-03-25 15:18:09"
3719;298;"JavaScript";"/**
 * @param {number} area
 * @return {number[]}
 */
var constructRectangle = function(area) {
 
};";"";"2020-03-25 15:18:09"
3720;298;"PHP";"class Solution {
 
    /**
     * @param Integer $area
     * @return Integer[]
     */
    function constructRectangle($area) {
        
    }
}";"";"2020-03-25 15:18:09"
3721;298;"Swift";"class Solution {
    func constructRectangle(_ area: Int) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:09"
3722;298;"Ruby";"# @param {Integer} area
# @return {Integer[]}
def construct_rectangle(area)
 
end";"";"2020-03-25 15:18:09"
3723;298;"Python";"class Solution(object):
    def constructRectangle(self, area):
        """"""
        :type area: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:09"
3724;299;"C#";"public class Solution {
    public int MinFlipsMonoIncr(string S) {
 
    }
}";"";"2020-03-25 15:18:09"
3725;299;"Java";"class Solution {
    public int minFlipsMonoIncr(String S) {
 
    }
}";"";"2020-03-25 15:18:09"
3726;299;"C";"int minFlipsMonoIncr(char * S){
 
}";"";"2020-03-25 15:18:09"
3727;299;"Rust";"impl Solution {
    pub fn min_flips_mono_incr(s: String) -> i32 {
        
    }
}";"";"2020-03-25 15:18:09"
3728;299;"Scala";"object Solution {
    def minFlipsMonoIncr(S: String): Int = {
 
    }
}";"";"2020-03-25 15:18:09"
3729;299;"Go";"func minFlipsMonoIncr(S string) int {
 
}";"";"2020-03-25 15:18:09"
3730;299;"Kotlin";"class Solution {
    fun minFlipsMonoIncr(S: String): Int {
 
    }
}";"";"2020-03-25 15:18:09"
3731;299;"Python3";"class Solution:
    def minFlipsMonoIncr(self, S: str) -> int:";"";"2020-03-25 15:18:09"
3732;299;"JavaScript";"/**
 * @param {string} S
 * @return {number}
 */
var minFlipsMonoIncr = function(S) {
 
};";"";"2020-03-25 15:18:09"
3733;299;"PHP";"class Solution {
 
    /**
     * @param String $S
     * @return Integer
     */
    function minFlipsMonoIncr($S) {
        
    }
}";"";"2020-03-25 15:18:09"
3734;299;"Swift";"class Solution {
    func minFlipsMonoIncr(_ S: String) -> Int {
        
    }
}";"";"2020-03-25 15:18:09"
3735;299;"Ruby";"# @param {String} s";"";"2020-03-25 15:18:09"
3736;299;"Python";"class Solution(object):
    def minFlipsMonoIncr(self, S):
        """"""
        :type S: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:09"
3737;300;"C#";"public class Solution {
    public IList<IList<int>> Generate(int numRows) {
 
    }
}";"";"2020-03-25 15:18:09"
3738;300;"Java";"class Solution {
    public List<List<Integer>> generate(int numRows)
 {
 
    }
}";"";"2020-03-25 15:18:09"
3739;300;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** generate(int numRows, int* returnSize, int** 
returnColumnSizes){
 
}";"";"2020-03-25 15:18:09"
3740;300;"Python3";"class Solution:
    def generate(self, numRows: int) -> List[List
[int]]:";"";"2020-03-25 15:18:09"
3741;300;"JavaScript";"/**
 * @param {number} numRows
 * @return {number[][]}
 */
var generate = function(numRows) {
 
};";"";"2020-03-25 15:18:09"
3742;300;"Go";"func generate(numRows int) [][]int {";"";"2020-03-25 15:18:09"
3743;300;"Swift";"class Solution {
    func generate(_ numRows: Int) -> [[Int]] {
        
    }
}";"";"2020-03-25 15:18:09"
3744;300;"Ruby";"# @param {Integer} num_rows
# @return {Integer[][]}
def generate(num_rows)
 
end";"";"2020-03-25 15:18:09"
3745;300;"Python";"class Solution(object):
    def generate(self, numRows):
        """"""
        :type numRows: int
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:09"
3746;301;"C#";"public class Solution {
    public int MinFallingPathSum(int[][] arr) {
 
    }
}";"";"2020-03-25 15:18:09"
3747;301;"Java";"class Solution {
    public int minFallingPathSum(int[][] arr) {
 
    }
}";"";"2020-03-25 15:18:09"
3748;301;"C";"int minFallingPathSum(int** arr, int arrSize, int* 
arrColSize){
 
}";"";"2020-03-25 15:18:09"
3749;301;"Rust";"impl Solution {
    pub fn min_falling_path_sum(arr: Vec<Vec<i32>>) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:09"
3750;301;"Scala";"object Solution {
    def minFallingPathSum(arr: Array[Array[Int]]): 
Int = {
 
    }
}";"";"2020-03-25 15:18:09"
3751;301;"Go";"func minFallingPathSum(arr [][]int) int {
 
}";"";"2020-03-25 15:18:09"
3752;301;"Kotlin";"class Solution {
    fun minFallingPathSum(arr: Array<IntArray>): 
Int {
 
    }
}";"";"2020-03-25 15:18:09"
3753;301;"Python3";"class Solution:
    def minFallingPathSum(self, arr: List[List[int]]
) -> int:";"";"2020-03-25 15:18:09"
3754;301;"JavaScript";"/**
 * @param {number[][]} arr
 * @return {number}
 */
var minFallingPathSum = function(arr) {
 
};";"";"2020-03-25 15:18:09"
3755;301;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $arr
     * @return Integer
     */
    function minFallingPathSum($arr) {
        
    }
}";"";"2020-03-25 15:18:09"
3756;301;"Swift";"class Solution {
    func minFallingPathSum(_ arr: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:09"
3757;301;"Ruby";"# @param {Integer[][]} arr
# @return {Integer}
def min_falling_path_sum(arr)
 
end";"";"2020-03-25 15:18:09"
3758;301;"Python";"class Solution(object):
    def minFallingPathSum(self, arr):
        """"""
        :type arr: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:09"
3759;302;"C#";"public class Solution {
    public int NumWays(int n) {
 
    }
}";"";"2020-03-25 15:18:09"
3760;302;"Java";"class Solution {
    public int numWays(int n) {
 
    }
}";"";"2020-03-25 15:18:09"
3761;302;"C";"int numWays(int n){
 
}";"";"2020-03-25 15:18:09"
3762;302;"Rust";"impl Solution {
    pub fn num_ways(n: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:09"
3763;302;"Scala";"object Solution {
    def numWays(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:09"
3764;302;"Go";"func numWays(n int) int {
 
}";"";"2020-03-25 15:18:09"
3765;302;"Kotlin";"class Solution {
    fun numWays(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:09"
3766;302;"Python3";"class Solution:
    def numWays(self, n: int) -> int:";"";"2020-03-25 15:18:09"
3767;302;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var numWays = function(n) {
 
};";"";"2020-03-25 15:18:09"
3768;302;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function numWays($n) {
 
    }
}";"";"2020-03-25 15:18:09"
3769;302;"Swift";"class Solution {
    func numWays(_ n: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:09"
3770;302;"Ruby";"# @param {Integer} n
# @return {Integer}
def num_ways(n)
 
end";"";"2020-03-25 15:18:09"
3771;302;"Python";"class Solution(object):
    def numWays(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:09"
3772;303;"C#";"public class Solution {
    public int MaximumGap(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:09"
3773;303;"Java";"class Solution {
    public int maximumGap(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:09"
3774;303;"C";"int maximumGap(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:09"
3775;303;"Rust";"impl Solution {
    pub fn maximum_gap(nums: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:09"
3776;303;"Scala";"object Solution {
    def maximumGap(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:09"
3777;303;"Go";"func maximumGap(nums []int) int {
 
}";"";"2020-03-25 15:18:09"
3778;303;"Kotlin";"class Solution {
    fun maximumGap(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:09"
3779;303;"Python3";"class Solution:
    def maximumGap(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:09"
3780;303;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var maximumGap = function(nums) {
 
};";"";"2020-03-25 15:18:09"
3781;303;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function maximumGap($nums) {
 
    }
}";"";"2020-03-25 15:18:09"
3782;303;"Swift";"class Solution {
    func maximumGap(_ nums: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:09"
3783;303;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:18:09"
3784;303;"Python";"class Solution(object):
    def maximumGap(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:09"
3785;304;"C#";"public class Solution {
    public string PrintBin(double num) {
 
    }
}";"";"2020-03-25 15:18:09"
3786;304;"Java";"class Solution {
    public String printBin(double num) {
 
    }
}";"";"2020-03-25 15:18:09"
3787;304;"C";"char* printBin(double num){
 
}";"";"2020-03-25 15:18:09"
3788;304;"Rust";"impl Solution {
    pub fn print_bin(num: f64) -> String {
 
    }
}";"";"2020-03-25 15:18:09"
3789;304;"Scala";"object Solution {
    def printBin(num: Double): String = {
 
    }
}";"";"2020-03-25 15:18:09"
3790;304;"Go";"func printBin(num float64) string {
 
}";"";"2020-03-25 15:18:09"
3791;304;"Kotlin";"class Solution {
    fun printBin(num: Double): String {
 
    }
}";"";"2020-03-25 15:18:09"
3792;304;"Python3";"class Solution:
    def printBin(self, num: float) -> str:";"";"2020-03-25 15:18:09"
3793;304;"JavaScript";"/**
 * @param {number} num
 * @return {string}
 */
var printBin = function(num) {
 
};";"";"2020-03-25 15:18:09"
3794;304;"PHP";"class Solution {
 
    /**
     * @param Float $num
     * @return String
     */
    function printBin($num) {
 
    }
}";"";"2020-03-25 15:18:09"
3795;304;"Swift";"class Solution {
    func printBin(_ num: Double) -> String {
 
    }
}";"";"2020-03-25 15:18:09"
3796;304;"Ruby";"# @param {Float} num
# @return {String}
def print_bin(num)
 
end";"";"2020-03-25 15:18:09"
3797;304;"Python";"class Solution(object):
    def printBin(self, num):
        """"""
        :type num: float
        :rtype: str
        """"""";"";"2020-03-25 15:18:09"
3798;305;"C#";"public class Solution {
    public int MaxSubArray(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:09"
3799;305;"Java";"class Solution {
    public int maxSubArray(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:09"
3800;305;"C";"int maxSubArray(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:09"
3801;305;"Rust";"impl Solution {
    pub fn max_sub_array(nums: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:09"
3802;305;"Scala";"object Solution {
    def maxSubArray(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:09"
3803;305;"Go";"func maxSubArray(nums []int) int {
 
}";"";"2020-03-25 15:18:09"
3804;305;"Kotlin";"class Solution {
    fun maxSubArray(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:09"
3805;305;"Python3";"class Solution:
    def maxSubArray(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:09"
3806;305;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var maxSubArray = function(nums) {
 
};";"";"2020-03-25 15:18:09"
3807;305;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function maxSubArray($nums) {
 
    }
}";"";"2020-03-25 15:18:09"
3808;305;"Swift";"class Solution {
    func maxSubArray(_ nums: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:09"
3809;305;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:18:09"
3810;305;"Python";"class Solution(object):
    def maxSubArray(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:09"
3811;306;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<int> DistanceK(TreeNode root, 
TreeNode target, int K) {
        
    }
}";"";"2020-03-25 15:18:09"
3812;306;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> distanceK(TreeNode root, 
TreeNode target, int K) {
        
    }
}";"";"2020-03-25 15:18:09"
3813;306;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def distanceK(root: TreeNode, target: TreeNode, 
K: Int): List[Int] = {
        
    }
}";"";"2020-03-25 15:18:09"
3814;306;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {TreeNode} target
 * @param {number} K
 * @return {number[]}
 */
var distanceK = function(root, target, K) {
    
};";"";"2020-03-25 15:18:09"
3815;306;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def distanceK(self, root: TreeNode, target: 
TreeNode, K: int) -> List[int]:";"";"2020-03-25 15:18:09"
3816;306;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func distanceK(root *TreeNode, target *TreeNode, K 
int) []int {
    
}";"";"2020-03-25 15:18:09"
3817;306;"PHP";"/**";"";"2020-03-25 15:18:09"
3818;306;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
 
class Solution {
    func distanceK(_ root: TreeNode?, _ target: 
TreeNode?, _ K: Int) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:09"
3819;306;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @param {TreeNode} target
# @param {Integer} k
# @return {Integer[]}
def distance_k(root, target, k)
    
end";"";"2020-03-25 15:18:09"
3820;306;"Kotlin";"/**
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int = 0) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun distanceK(root: TreeNode?, target: TreeNode?
, K: Int): List<Int> {
        
    }
}";"";"2020-03-25 15:18:09"
3821;306;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def distanceK(self, root, target, K):
        """"""
        :type root: TreeNode
        :type target: TreeNode
        :type K: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:09"
3822;307;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int SumOfLeftLeaves(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:09"
3823;307;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int sumOfLeftLeaves(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:09"
3824;307;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn sum_of_left_leaves(root: 
Option<Rc<RefCell<TreeNode>>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:09"
3825;307;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int sumOfLeftLeaves(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:09"
3826;307;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def sumOfLeftLeaves(root: TreeNode): Int = {
 
    }
}";"";"2020-03-25 15:18:09"
3827;307;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func sumOfLeftLeaves(root *TreeNode) int {
 
}";"";"2020-03-25 15:18:09"
3828;307;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun sumOfLeftLeaves(root: TreeNode?): Int {
 
    }
}";"";"2020-03-25 15:18:09"
3829;307;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def sumOfLeftLeaves(self, root: TreeNode) -> 
int:";"";"2020-03-25 15:18:09"
3830;307;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var sumOfLeftLeaves = function(root) {
 
};";"";"2020-03-25 15:18:09"
3831;307;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer
     */
    function sumOfLeftLeaves($root) {
        
    }
}";"";"2020-03-25 15:18:09"
3832;307;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func sumOfLeftLeaves(_ root: TreeNode?) -> Int {
        
    }
}";"";"2020-03-25 15:18:09"
3833;307;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer}
def sum_of_left_leaves(root)
 
end";"";"2020-03-25 15:18:09"
3834;307;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def sumOfLeftLeaves(self, root):
        """"""
        :type root: TreeNode
        :rtype: int
        """"""";"";"2020-03-25 15:18:09"
3835;308;"C#";"public class Solution {
    public string LongestPalindrome(string s) {
 
    }
}";"";"2020-03-25 15:18:09"
3836;308;"Java";"class Solution {
    public String longestPalindrome(String s) {
 
    }
}";"";"2020-03-25 15:18:09"
3837;308;"C";"char * longestPalindrome(char * s){
 
}";"";"2020-03-25 15:18:09"
3838;308;"Rust";"impl Solution {
    pub fn longest_palindrome(s: String) -> String {
        
    }
}";"";"2020-03-25 15:18:09"
3839;308;"Scala";"object Solution {
    def longestPalindrome(s: String): String = {
 
    }
}";"";"2020-03-25 15:18:09"
3840;308;"JavaScript";"/**
 * @param {string} s
 * @return {string}
 */
var longestPalindrome = function(s) {
 
};";"";"2020-03-25 15:18:09"
3841;308;"Python3";"class Solution:
    def longestPalindrome(self, s: str) -> str:";"";"2020-03-25 15:18:09"
3842;308;"Go";"func longestPalindrome(s string) string {
 
}";"";"2020-03-25 15:18:09"
3843;308;"Swift";"class Solution {
    func longestPalindrome(_ s: String) -> String {
        
    }
}";"";"2020-03-25 15:18:09"
3844;308;"Ruby";"# @param {String} s
# @return {String}
def longest_palindrome(s)
 
end";"";"2020-03-25 15:18:09"
3845;308;"Python";"class Solution(object):
    def longestPalindrome(self, s):
        """"""
        :type s: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:09"
3846;308;"Kotlin";"class Solution {
    fun longestPalindrome(s: String): String {
 
    }
}";"";"2020-03-25 15:18:09"
3847;309;"C#";"public class Solution {
    public int MaxDistToClosest(int[] seats) {
 
    }
}";"";"2020-03-25 15:18:09"
3848;309;"Java";"class Solution {
    public int maxDistToClosest(int[] seats) {
 
    }
}";"";"2020-03-25 15:18:09"
3849;309;"C";"int maxDistToClosest(int* seats, int seatsSize){
 
}";"";"2020-03-25 15:18:09"
3850;309;"Scala";"object Solution {
    def maxDistToClosest(seats: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:09"
3851;309;"Python3";"class Solution:
    def maxDistToClosest(self, seats: List[int]) -> 
int:";"";"2020-03-25 15:18:09"
3852;309;"JavaScript";"/**
 * @param {number[]} seats
 * @return {number}
 */
var maxDistToClosest = function(seats) {
 
};";"";"2020-03-25 15:18:09"
3853;309;"Go";"func maxDistToClosest(seats []int) int {
 
}";"";"2020-03-25 15:18:09"
3854;309;"PHP";"class Solution {";"";"2020-03-25 15:18:09"
3855;309;"Swift";"class Solution {
    func maxDistToClosest(_ seats: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:09"
3856;309;"Ruby";"# @param {Integer[]} seats
# @return {Integer}
def max_dist_to_closest(seats)
 
end";"";"2020-03-25 15:18:09"
3857;309;"Kotlin";"class Solution {
    fun maxDistToClosest(seats: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:09"
3858;309;"Python";"class Solution(object):
    def maxDistToClosest(self, seats):
        """"""
        :type seats: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:09"
3859;310;"C#";"public class Solution {
    public void Rotate(int[][] matrix) {
 
    }
}";"";"2020-03-25 15:18:09"
3860;310;"Java";"class Solution {
    public void rotate(int[][] matrix) {
 
    }
}";"";"2020-03-25 15:18:09"
3861;310;"C";"void rotate(int** matrix, int matrixSize, int* 
matrixColSize){
 
}";"";"2020-03-25 15:18:09"
3862;310;"Rust";"impl Solution {
    pub fn rotate(matrix: &mut Vec<Vec<i32>>) {
        
    }
}";"";"2020-03-25 15:18:09"
3863;310;"Scala";"object Solution {
    def rotate(matrix: Array[Array[Int]]): Unit = {
 
    }
}";"";"2020-03-25 15:18:09"
3864;310;"Go";"func rotate(matrix [][]int)  {
 
}";"";"2020-03-25 15:18:09"
3865;310;"Kotlin";"class Solution {
    fun rotate(matrix: Array<IntArray>): Unit {
 
    }
}";"";"2020-03-25 15:18:09"
3866;310;"Python3";"class Solution:
    def rotate(self, matrix: List[List[int]]) -> 
None:
        """"""
        Do not return anything, modify matrix 
in-place instead.
        """"""";"";"2020-03-25 15:18:09"
3867;310;"JavaScript";"/**
 * @param {number[][]} matrix
 * @return {void} Do not return anything, modify 
matrix in-place instead.
 */
var rotate = function(matrix) {
 
};";"";"2020-03-25 15:18:09"
3868;310;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $matrix
     * @return NULL
     */
    function rotate(&$matrix) {
        
    }
}";"";"2020-03-25 15:18:09"
3869;310;"Swift";"class Solution {
    func rotate(_ matrix: inout [[Int]]) {
        
    }
}";"";"2020-03-25 15:18:09"
3870;310;"Ruby";"# @param {Integer[][]} matrix";"";"2020-03-25 15:18:09"
3871;310;"Python";"class Solution(object):
    def rotate(self, matrix):
        """"""
        :type matrix: List[List[int]]
        :rtype: None Do not return anything, modify 
matrix in-place instead.
        """"""";"";"2020-03-25 15:18:09"
3872;311;"C#";"public class Solution {
    public string LargestTimeFromDigits(int[] A) {
 
    }
}";"";"2020-03-25 15:18:09"
3873;311;"Java";"class Solution {
    public String largestTimeFromDigits(int[] A) {
 
    }
}";"";"2020-03-25 15:18:09"
3874;311;"C";"char * largestTimeFromDigits(int* A, int ASize){
 
}";"";"2020-03-25 15:18:09"
3875;311;"Rust";"impl Solution {
    pub fn largest_time_from_digits(a: Vec<i32>) -> 
String {
        
    }
}";"";"2020-03-25 15:18:09"
3876;311;"Scala";"object Solution {
    def largestTimeFromDigits(A: Array[Int]): 
String = {
 
    }
}";"";"2020-03-25 15:18:09"
3877;311;"Go";"func largestTimeFromDigits(A []int) string {
 
}";"";"2020-03-25 15:18:09"
3878;311;"Kotlin";"class Solution {
    fun largestTimeFromDigits(A: IntArray): String {
 
    }
}";"";"2020-03-25 15:18:09"
3879;311;"Python3";"class Solution:
    def largestTimeFromDigits(self, A: List[int]) 
-> str:";"";"2020-03-25 15:18:09"
3880;311;"JavaScript";"/**
 * @param {number[]} A
 * @return {string}
 */
var largestTimeFromDigits = function(A) {
 
};";"";"2020-03-25 15:18:09"
3881;311;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @return String
     */
    function largestTimeFromDigits($A) {
        
    }
}";"";"2020-03-25 15:18:09"
3882;311;"Swift";"class Solution {
    func largestTimeFromDigits(_ A: [Int]) -> 
String {
        
    }
}";"";"2020-03-25 15:18:09"
3883;311;"Ruby";"# @param {Integer[]} a";"";"2020-03-25 15:18:09"
3884;311;"Python";"class Solution(object):
    def largestTimeFromDigits(self, A):
        """"""
        :type A: List[int]
        :rtype: str
        """"""";"";"2020-03-25 15:18:09"
3885;312;"C#";"public class MyQueue {
 
    /** Initialize your data structure here. */
    public MyQueue() {
 
    }
    
    /** Push element x to the back of queue. */
    public void Push(int x) {
 
    }
    
    /** Removes the element from in front of queue 
and returns that element. */
    public int Pop() {
 
    }
    
    /** Get the front element. */
    public int Peek() {
 
    }
    
    /** Returns whether the queue is empty. */
    public bool Empty() {
 ";"";"2020-03-25 15:18:09"
3886;312;"Java";"class MyQueue {
 
    /** Initialize your data structure here. */
    public MyQueue() {
 
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
 
    }
    
    /** Removes the element from in front of queue 
and returns that element. */
    public int pop() {
 
    }
    
    /** Get the front element. */
    public int peek() {
 
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
 ";"";"2020-03-25 15:18:09"
3887;312;"C";"typedef struct {
 
} MyQueue;
 
/** Initialize your data structure here. */
 
MyQueue* myQueueCreate() {
 
}
 
/** Push element x to the back of queue. */
void myQueuePush(MyQueue* obj, int x) {
 
}
 
/** Removes the element from in front of queue and 
returns that element. */
int myQueuePop(MyQueue* obj) {
 
}
 
/** Get the front element. */
int myQueuePeek(MyQueue* obj) {
 
}
 ";"";"2020-03-25 15:18:09"
3888;312;"Rust";"struct MyQueue {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl MyQueue {
 
    /** Initialize your data structure here. */
    fn new() -> Self {
 
    }
    
    /** Push element x to the back of queue. */
    fn push(&self, x: i32) {
 
    }
    
    /** Removes the element from in front of queue 
and returns that element. */
    fn pop(&self) -> i32 {";"";"2020-03-25 15:18:09"
3889;312;"Scala";"class MyQueue() {
 
    /** Initialize your data structure here. */
 
 
    /** Push element x to the back of queue. */
    def push(x: Int) {
 
    }
 
    /** Removes the element from in front of queue 
and returns that element. */
    def pop(): Int = {
 
    }
 
    /** Get the front element. */
    def peek(): Int = {
 
    }
 
    /** Returns whether the queue is empty. */
    def empty(): Boolean = {
 
    }
 ";"";"2020-03-25 15:18:09"
3890;312;"Go";"type MyQueue struct {
 
}
 
 
/** Initialize your data structure here. */
func Constructor() MyQueue {
 
}
 
 
/** Push element x to the back of queue. */
func (this *MyQueue) Push(x int)  {
 
}
 
 
/** Removes the element from in front of queue and 
returns that element. */
func (this *MyQueue) Pop() int {
 
}
 
 
/** Get the front element. */
func (this *MyQueue) Peek() int {";"";"2020-03-25 15:18:09"
3891;312;"Kotlin";"class MyQueue() {
 
    /** Initialize your data structure here. */
 
 
    /** Push element x to the back of queue. */
    fun push(x: Int) {
 
    }
 
    /** Removes the element from in front of queue 
and returns that element. */
    fun pop(): Int {
 
    }
 
    /** Get the front element. */
    fun peek(): Int {
 
    }
 
    /** Returns whether the queue is empty. */
    fun empty(): Boolean {
 
    }
 ";"";"2020-03-25 15:18:09"
3892;312;"Python3";"class MyQueue:
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
 
 
    def push(self, x: int) -> None:
        """"""
        Push element x to the back of queue.
        """"""
 
 
    def pop(self) -> int:
        """"""
        Removes the element from in front of queue 
and returns that element.
        """"""
 
 
    def peek(self) -> int:
        """"""
        Get the front element.
        """"""
 ";"";"2020-03-25 15:18:09"
3893;312;"JavaScript";"/**
 * Initialize your data structure here.
 */
var MyQueue = function() {
 
};
 
/**
 * Push element x to the back of queue. 
 * @param {number} x
 * @return {void}
 */
MyQueue.prototype.push = function(x) {
 
};
 
/**
 * Removes the element from in front of queue and 
returns that element.
 * @return {number}
 */
MyQueue.prototype.pop = function() {
 
};
 
/**";"";"2020-03-25 15:18:09"
3894;312;"PHP";"class MyQueue {
    /**
     * Initialize your data structure here.
     */
    function __construct() {
 
    }
 
    /**
     * Push element x to the back of queue.
     * @param Integer $x
     * @return NULL
     */
    function push($x) {
 
    }
 
    /**
     * Removes the element from in front of queue 
and returns that element.
     * @return Integer
     */
    function pop() {
 
    }
 ";"";"2020-03-25 15:18:09"
3895;312;"Swift";"class MyQueue {
 
    /** Initialize your data structure here. */
    init() {
 
    }
    
    /** Push element x to the back of queue. */
    func push(_ x: Int) {
 
    }
    
    /** Removes the element from in front of queue 
and returns that element. */
    func pop() -> Int {
 
    }
    
    /** Get the front element. */
    func peek() -> Int {
 
    }
    
    /** Returns whether the queue is empty. */
    func empty() -> Bool {
 ";"";"2020-03-25 15:18:09"
3896;312;"Ruby";"class MyQueue
 
=begin
    Initialize your data structure here.
=end
    def initialize()
 
    end
 
 
=begin
    Push element x to the back of queue.
    :type x: Integer
    :rtype: Void
=end
    def push(x)
 
    end
 
 
=begin
    Removes the element from in front of queue and 
returns that element.
    :rtype: Integer
=end
    def pop()";"";"2020-03-25 15:18:09"
3897;312;"Python";"class MyQueue(object):
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
 
 
    def push(self, x):
        """"""
        Push element x to the back of queue.
        :type x: int
        :rtype: None
        """"""
 
 
    def pop(self):
        """"""
        Removes the element from in front of queue 
and returns that element.
        :rtype: int
        """"""
 
 
    def peek(self):
        """"""";"";"2020-03-25 15:18:09"
3898;313;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode Partition(ListNode head, int x) 
{
 
    }
}";"";"2020-03-25 15:18:09"
3899;313;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode partition(ListNode head, int x) 
{
 
    }
}";"";"2020-03-25 15:18:09"
3900;313;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
struct ListNode* partition(struct ListNode* head, 
int x){
 
}";"";"2020-03-25 15:18:09"
3901;313;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn partition(head: Option<Box<ListNode>>, 
x: i32) -> Option<Box<ListNode>> {
 
    }
}";"";"2020-03-25 15:18:09"
3902;313;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def partition(head: ListNode, x: Int): ListNode 
= {
 
    }
}";"";"2020-03-25 15:18:09"
3903;313;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func partition(head *ListNode, x int) *ListNode {
 
}";"";"2020-03-25 15:18:09"
3904;313;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun partition(head: ListNode?, x: Int): 
ListNode? {
 
    }
}";"";"2020-03-25 15:18:09"
3905;313;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def partition(self, head: ListNode, x: int) -> 
ListNode:";"";"2020-03-25 15:18:09"
3906;313;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @param {number} x
 * @return {ListNode}
 */
var partition = function(head, x) {
 
};";"";"2020-03-25 15:18:09"
3907;313;"PHP";"/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
class Solution {
 
    /**
     * @param ListNode $head
     * @param Integer $x
     * @return ListNode
     */
    function partition($head, $x) {
 
    }
}";"";"2020-03-25 15:18:09"
3908;313;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func partition(_ head: ListNode?, _ x: Int) -> 
ListNode? {
 
    }
}";"";"2020-03-25 15:18:09"
3909;313;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# @param {ListNode} head
# @param {Integer} x
# @return {ListNode}
def partition(head, x)
 
end";"";"2020-03-25 15:18:09"
3910;313;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def partition(self, head, x):
        """"""
        :type head: ListNode
        :type x: int
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:09"
3911;314;"C#";"public class Solution {
    public string ComplexNumberMultiply(string a, 
string b) {
 
    }
}";"";"2020-03-25 15:18:09"
3912;314;"Java";"class Solution {
    public String complexNumberMultiply(String a, 
String b) {
 
    }
}";"";"2020-03-25 15:18:09"
3913;314;"C";"char * complexNumberMultiply(char * a, char * b){
 
}";"";"2020-03-25 15:18:09"
3914;314;"Scala";"object Solution {
    def complexNumberMultiply(a: String, b: String)
: String = {
 
    }
}";"";"2020-03-25 15:18:09"
3915;314;"JavaScript";"/**
 * @param {string} a
 * @param {string} b
 * @return {string}
 */
var complexNumberMultiply = function(a, b) {
 
};";"";"2020-03-25 15:18:09"
3916;314;"Python3";"class Solution:
    def complexNumberMultiply(self, a: str, b: str) 
-> str:";"";"2020-03-25 15:18:09"
3917;314;"Go";"func complexNumberMultiply(a string, b string) 
string {
 
}";"";"2020-03-25 15:18:09"
3918;314;"Swift";"class Solution {
    func complexNumberMultiply(_ a: String, _ b: 
String) -> String {
        
    }
}";"";"2020-03-25 15:18:09"
3919;314;"Ruby";"# @param {String} a
# @param {String} b
# @return {String}
def complex_number_multiply(a, b)
 
end";"";"2020-03-25 15:18:09"
3920;314;"Kotlin";"class Solution {
    fun complexNumberMultiply(a: String, b: String)
: String {
 
    }
}";"";"2020-03-25 15:18:09"
3921;314;"Python";"class Solution(object):
    def complexNumberMultiply(self, a, b):
        """"""
        :type a: str
        :type b: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:09"
3922;315;"C#";"public class Solution {
    public int MinHeightShelves(int[][] books, int 
shelf_width) {
 
    }
}";"";"2020-03-25 15:18:10"
3923;315;"Java";"class Solution {
    public int minHeightShelves(int[][] books, int 
shelf_width) {
 
    }
}";"";"2020-03-25 15:18:10"
3924;315;"C";"int minHeightShelves(int** books, int booksSize, 
int* booksColSize, int shelf_width){
 
}";"";"2020-03-25 15:18:10"
3925;315;"Rust";"impl Solution {
    pub fn min_height_shelves(books: Vec<Vec<i32>>, 
shelf_width: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:10"
3926;315;"Scala";"object Solution {
    def minHeightShelves(books: Array[Array[Int]], 
shelf_width: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:10"
3927;315;"Go";"func minHeightShelves(books [][]int, shelf_width 
int) int {
 
}";"";"2020-03-25 15:18:10"
3928;315;"Kotlin";"class Solution {
    fun minHeightShelves(books: Array<IntArray>, 
shelf_width: Int): Int {
 
    }
}";"";"2020-03-25 15:18:10"
3929;315;"Python3";"class Solution:
    def minHeightShelves(self, books: List[List[int]
], shelf_width: int) -> int:";"";"2020-03-25 15:18:10"
3930;315;"JavaScript";"/**
 * @param {number[][]} books
 * @param {number} shelf_width
 * @return {number}
 */
var minHeightShelves = function(books, shelf_width) 
{
 
};";"";"2020-03-25 15:18:10"
3931;315;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $books
     * @param Integer $shelf_width
     * @return Integer
     */
    function minHeightShelves($books, $shelf_width) 
{
        
    }
}";"";"2020-03-25 15:18:10"
3932;315;"Swift";"class Solution {
    func minHeightShelves(_ books: [[Int]], _ 
shelf_width: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:10"
3933;315;"Ruby";"# @param {Integer[][]} books";"";"2020-03-25 15:18:10"
3934;315;"Python";"class Solution(object):
    def minHeightShelves(self, books, shelf_width):
        """"""
        :type books: List[List[int]]
        :type shelf_width: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:10"
3935;316;"C#";"public class Solution {
    public bool IsRationalEqual(string S, string T) 
{
 
    }
}";"";"2020-03-25 15:18:10"
3936;316;"Java";"class Solution {
    public boolean isRationalEqual(String S, String 
T) {
 
    }
}";"";"2020-03-25 15:18:10"
3937;316;"Rust";"impl Solution {
    pub fn is_rational_equal(s: String, t: String) 
-> bool {
        
    }
}";"";"2020-03-25 15:18:10"
3938;316;"C";"bool isRationalEqual(char * S, char * T){
 
}";"";"2020-03-25 15:18:10"
3939;316;"Scala";"object Solution {
    def isRationalEqual(S: String, T: String): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:10"
3940;316;"Go";"func isRationalEqual(S string, T string) bool {
 
}";"";"2020-03-25 15:18:10"
3941;316;"Kotlin";"class Solution {
    fun isRationalEqual(S: String, T: String): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:10"
3942;316;"Python3";"class Solution:
    def isRationalEqual(self, S: str, T: str) -> 
bool:";"";"2020-03-25 15:18:10"
3943;316;"JavaScript";"/**
 * @param {string} S
 * @param {string} T
 * @return {boolean}
 */
var isRationalEqual = function(S, T) {
 
};";"";"2020-03-25 15:18:10"
3944;316;"PHP";"class Solution {";"";"2020-03-25 15:18:10"
3945;316;"Swift";"class Solution {
    func isRationalEqual(_ S: String, _ T: String) 
-> Bool {
        
    }
}";"";"2020-03-25 15:18:10"
3946;316;"Ruby";"# @param {String} s
# @param {String} t
# @return {Boolean}
def is_rational_equal(s, t)
 
end";"";"2020-03-25 15:18:10"
3947;316;"Python";"class Solution(object):
    def isRationalEqual(self, S, T):
        """"""
        :type S: str
        :type T: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:10"
3948;317;"C#";"public class Solution {
    public int TwoCitySchedCost(int[][] costs) {
 
    }
}";"";"2020-03-25 15:18:10"
3949;317;"Java";"class Solution {
    public int twoCitySchedCost(int[][] costs) {
 
    }
}";"";"2020-03-25 15:18:10"
3950;317;"Rust";"impl Solution {
    pub fn two_city_sched_cost(costs: Vec<Vec<i32>>)
 -> i32 {
        
    }
}";"";"2020-03-25 15:18:10"
3951;317;"C";"int twoCitySchedCost(int** costs, int costsSize, 
int* costsColSize){
 
}";"";"2020-03-25 15:18:10"
3952;317;"Scala";"object Solution {
    def twoCitySchedCost(costs: Array[Array[Int]]): 
Int = {
 
    }
}";"";"2020-03-25 15:18:10"
3953;317;"Go";"func twoCitySchedCost(costs [][]int) int {
 
}";"";"2020-03-25 15:18:10"
3954;317;"Kotlin";"class Solution {
    fun twoCitySchedCost(costs: Array<IntArray>): 
Int {
 
    }
}";"";"2020-03-25 15:18:10"
3955;317;"Python3";"class Solution:
    def twoCitySchedCost(self, costs: List[List[int]
]) -> int:";"";"2020-03-25 15:18:10"
3956;317;"JavaScript";"/**
 * @param {number[][]} costs
 * @return {number}
 */
var twoCitySchedCost = function(costs) {
 
};";"";"2020-03-25 15:18:10"
3957;317;"PHP";"class Solution {";"";"2020-03-25 15:18:10"
3958;317;"Swift";"class Solution {
    func twoCitySchedCost(_ costs: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:10"
3959;317;"Ruby";"# @param {Integer[][]} costs
# @return {Integer}
def two_city_sched_cost(costs)
 
end";"";"2020-03-25 15:18:10"
3960;317;"Python";"class Solution(object):
    def twoCitySchedCost(self, costs):
        """"""
        :type costs: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:10"
3961;318;"C#";"public class Solution {
    public int[] FindOrder(int numCourses, int[][] 
prerequisites) {
 
    }
}";"";"2020-03-25 15:18:10"
3962;318;"Java";"class Solution {
    public int[] findOrder(int numCourses, int[][] 
prerequisites) {
 
    }
}";"";"2020-03-25 15:18:10"
3963;318;"Rust";"impl Solution {
    pub fn find_order(num_courses: i32, 
prerequisites: Vec<Vec<i32>>) -> Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:10"
3964;318;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* findOrder(int numCourses, int** prerequisites, 
int prerequisitesSize, int* prerequisitesColSize, 
int* returnSize){
 
}";"";"2020-03-25 15:18:10"
3965;318;"Scala";"object Solution {
    def findOrder(numCourses: Int, prerequisites: 
Array[Array[Int]]): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:10"
3966;318;"Go";"func findOrder(numCourses int, prerequisites [][]
int) []int {
 
}";"";"2020-03-25 15:18:10"
3967;318;"Kotlin";"class Solution {
    fun findOrder(numCourses: Int, prerequisites: 
Array<IntArray>): IntArray {
 
    }
}";"";"2020-03-25 15:18:10"
3968;318;"Python3";"class Solution:
    def findOrder(self, numCourses: int, 
prerequisites: List[List[int]]) -> List[int]:";"";"2020-03-25 15:18:10"
3969;318;"JavaScript";"/**
 * @param {number} numCourses
 * @param {number[][]} prerequisites
 * @return {number[]}
 */
var findOrder = function(numCourses, prerequisites) 
{
 
};";"";"2020-03-25 15:18:10"
3970;318;"PHP";"class Solution {";"";"2020-03-25 15:18:10"
3971;318;"Swift";"class Solution {
    func findOrder(_ numCourses: Int, _ 
prerequisites: [[Int]]) -> [Int] {
 
    }
}";"";"2020-03-25 15:18:10"
3972;318;"Ruby";"# @param {Integer} num_courses
# @param {Integer[][]} prerequisites
# @return {Integer[]}
def find_order(num_courses, prerequisites)
 
end";"";"2020-03-25 15:18:10"
3973;318;"Python";"class Solution(object):
    def findOrder(self, numCourses, prerequisites):
        """"""
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:10"
3974;319;"C#";"public class MyCircularDeque {
 
    /** Initialize your data structure here. Set 
the size of the deque to be k. */
    public MyCircularDeque(int k) {
 
    }
    
    /** Adds an item at the front of Deque. Return 
true if the operation is successful. */
    public bool InsertFront(int value) {
 
    }
    
    /** Adds an item at the rear of Deque. Return 
true if the operation is successful. */
    public bool InsertLast(int value) {
 
    }
    
    /** Deletes an item from the front of Deque. 
Return true if the operation is successful. */
    public bool DeleteFront() {
 
    }
    ";"";"2020-03-25 15:18:10"
3975;319;"Java";"class MyCircularDeque {
 
    /** Initialize your data structure here. Set 
the size of the deque to be k. */
    public MyCircularDeque(int k) {
 
    }
    
    /** Adds an item at the front of Deque. Return 
true if the operation is successful. */
    public boolean insertFront(int value) {
 
    }
    
    /** Adds an item at the rear of Deque. Return 
true if the operation is successful. */
    public boolean insertLast(int value) {
 
    }
    
    /** Deletes an item from the front of Deque. 
Return true if the operation is successful. */
    public boolean deleteFront() {
 
    }
    ";"";"2020-03-25 15:18:10"
3976;319;"C";"typedef struct {
    
} MyCircularDeque;
 
/** Initialize your data structure here. Set the 
size of the deque to be k. */
 
MyCircularDeque* myCircularDequeCreate(int k) {
    
}
 
/** Adds an item at the front of Deque. Return true 
if the operation is successful. */
bool myCircularDequeInsertFront(MyCircularDeque* 
obj, int value) {
  
}
 
/** Adds an item at the rear of Deque. Return true 
if the operation is successful. */
bool myCircularDequeInsertLast(MyCircularDeque* obj,
 int value) {
  
}
 
/** Deletes an item from the front of Deque. Return ";"";"2020-03-25 15:18:10"
3977;319;"Rust";"struct MyCircularDeque {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl MyCircularDeque {
 
    /** Initialize your data structure here. Set 
the size of the deque to be k. */
    fn new(k: i32) -> Self {
        
    }
    
    /** Adds an item at the front of Deque. Return 
true if the operation is successful. */
    fn insert_front(&self, value: i32) -> bool {
        
    }
    
    /** Adds an item at the rear of Deque. Return ";"";"2020-03-25 15:18:10"
3978;319;"Scala";"class MyCircularDeque(_k: Int) {
 
    /** Initialize your data structure here. Set 
the size of the deque to be k. */
 
 
    /** Adds an item at the front of Deque. Return 
true if the operation is successful. */
    def insertFront(value: Int): Boolean = {
 
    }
 
    /** Adds an item at the rear of Deque. Return 
true if the operation is successful. */
    def insertLast(value: Int): Boolean = {
 
    }
 
    /** Deletes an item from the front of Deque. 
Return true if the operation is successful. */
    def deleteFront(): Boolean = {
 
    }
 
    /** Deletes an item from the rear of Deque. 
Return true if the operation is successful. */";"";"2020-03-25 15:18:10"
3979;319;"Go";"type MyCircularDeque struct {
 
}
 
 
/** Initialize your data structure here. Set the 
size of the deque to be k. */
func Constructor(k int) MyCircularDeque {
 
}
 
 
/** Adds an item at the front of Deque. Return true 
if the operation is successful. */
func (this *MyCircularDeque) InsertFront(value int) 
bool {
 
}
 
 
/** Adds an item at the rear of Deque. Return true 
if the operation is successful. */
func (this *MyCircularDeque) InsertLast(value int) 
bool {
 
}";"";"2020-03-25 15:18:10"
3980;319;"Kotlin";"class MyCircularDeque(k: Int) {
 
    /** Initialize your data structure here. Set 
the size of the deque to be k. */
 
 
    /** Adds an item at the front of Deque. Return 
true if the operation is successful. */
    fun insertFront(value: Int): Boolean {
 
    }
 
    /** Adds an item at the rear of Deque. Return 
true if the operation is successful. */
    fun insertLast(value: Int): Boolean {
 
    }
 
    /** Deletes an item from the front of Deque. 
Return true if the operation is successful. */
    fun deleteFront(): Boolean {
 
    }
 
    /** Deletes an item from the rear of Deque. 
Return true if the operation is successful. */";"";"2020-03-25 15:18:10"
3981;319;"Python3";"class MyCircularDeque:
 
    def __init__(self, k: int):
        """"""
        Initialize your data structure here. Set 
the size of the deque to be k.
        """"""
        
 
    def insertFront(self, value: int) -> bool:
        """"""
        Adds an item at the front of Deque. Return 
true if the operation is successful.
        """"""
        
 
    def insertLast(self, value: int) -> bool:
        """"""
        Adds an item at the rear of Deque. Return 
true if the operation is successful.
        """"""
        
 
    def deleteFront(self) -> bool:
        """"""
        Deletes an item from the front of Deque. ";"";"2020-03-25 15:18:10"
3982;319;"JavaScript";"/**
 * Initialize your data structure here. Set the 
size of the deque to be k.
 * @param {number} k
 */
var MyCircularDeque = function(k) {
 
};
 
/**
 * Adds an item at the front of Deque. Return true 
if the operation is successful. 
 * @param {number} value
 * @return {boolean}
 */
MyCircularDeque.prototype.insertFront = function
(value) {
 
};
 
/**
 * Adds an item at the rear of Deque. Return true 
if the operation is successful. 
 * @param {number} value
 * @return {boolean}
 */";"";"2020-03-25 15:18:10"
3983;319;"PHP";"class MyCircularDeque {
    /**
     * Initialize your data structure here. Set the 
size of the deque to be k.
     * @param Integer $k
     */
    function __construct($k) {
        
    }
  
    /**
     * Adds an item at the front of Deque. Return 
true if the operation is successful.
     * @param Integer $value
     * @return Boolean
     */
    function insertFront($value) {
        
    }
  
    /**
     * Adds an item at the rear of Deque. Return 
true if the operation is successful.
     * @param Integer $value
     * @return Boolean
     */";"";"2020-03-25 15:18:10"
3984;319;"Swift";"class MyCircularDeque {
 
    /** Initialize your data structure here. Set 
the size of the deque to be k. */
    init(_ k: Int) {
        
    }
    
    /** Adds an item at the front of Deque. Return 
true if the operation is successful. */
    func insertFront(_ value: Int) -> Bool {
        
    }
    
    /** Adds an item at the rear of Deque. Return 
true if the operation is successful. */
    func insertLast(_ value: Int) -> Bool {
        
    }
    
    /** Deletes an item from the front of Deque. 
Return true if the operation is successful. */
    func deleteFront() -> Bool {
        
    }
    ";"";"2020-03-25 15:18:10"
3985;319;"Ruby";"class MyCircularDeque
 
=begin
    Initialize your data structure here. Set the 
size of the deque to be k.
    :type k: Integer
=end
    def initialize(k)
 
    end
 
 
=begin
    Adds an item at the front of Deque. Return true 
if the operation is successful.
    :type value: Integer
    :rtype: Boolean
=end
    def insert_front(value)
 
    end
 
 
=begin
    Adds an item at the rear of Deque. Return true 
if the operation is successful.";"";"2020-03-25 15:18:10"
3986;319;"Python";"class MyCircularDeque(object):
 
    def __init__(self, k):
        """"""
        Initialize your data structure here. Set 
the size of the deque to be k.
        :type k: int
        """"""
        
 
    def insertFront(self, value):
        """"""
        Adds an item at the front of Deque. Return 
true if the operation is successful.
        :type value: int
        :rtype: bool
        """"""
        
 
    def insertLast(self, value):
        """"""
        Adds an item at the rear of Deque. Return 
true if the operation is successful.
        :type value: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:10"
3987;320;"C#";"public class Solution {
    public int NthUglyNumber(int n) {
 
    }
}";"";"2020-03-25 15:18:10"
3988;320;"Java";"class Solution {
    public int nthUglyNumber(int n) {
 
    }
}";"";"2020-03-25 15:18:10"
3989;320;"Rust";"impl Solution {
    pub fn nth_ugly_number(n: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:10"
3990;320;"C";"int nthUglyNumber(int n){
 
}";"";"2020-03-25 15:18:10"
3991;320;"Scala";"object Solution {
    def nthUglyNumber(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:10"
3992;320;"Go";"func nthUglyNumber(n int) int {
 
}";"";"2020-03-25 15:18:10"
3993;320;"Kotlin";"class Solution {
    fun nthUglyNumber(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:10"
3994;320;"Python3";"class Solution:
    def nthUglyNumber(self, n: int) -> int:";"";"2020-03-25 15:18:10"
3995;320;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var nthUglyNumber = function(n) {
 
};";"";"2020-03-25 15:18:10"
3996;320;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function nthUglyNumber($n) {
 
    }
}";"";"2020-03-25 15:18:10"
3997;320;"Swift";"class Solution {
    func nthUglyNumber(_ n: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:10"
3998;320;"Ruby";"# @param {Integer} n
# @return {Integer}
def nth_ugly_number(n)
 
end";"";"2020-03-25 15:18:10"
3999;320;"Python";"class Solution(object):
    def nthUglyNumber(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:10"
4000;321;"C#";"public class Solution {
    public IList<IList<int>> FourSum(int[] nums, 
int target) {
 
    }
}";"";"2020-03-25 15:18:10"
4001;321;"Java";"class Solution {
    public List<List<Integer>> fourSum(int[] nums, 
int target) {
 
    }
}";"";"2020-03-25 15:18:10"
4002;321;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** fourSum(int* nums, int numsSize, int target, 
int* returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:10"
4003;321;"Rust";"impl Solution {
    pub fn four_sum(nums: Vec<i32>, target: i32) -> 
Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:10"
4004;321;"Scala";"object Solution {
    def fourSum(nums: Array[Int], target: Int): List
[List[Int]] = {
 
    }
}";"";"2020-03-25 15:18:10"
4005;321;"Go";"func fourSum(nums []int, target int) [][]int {
 
}";"";"2020-03-25 15:18:10"
4006;321;"Kotlin";"class Solution {
    fun fourSum(nums: IntArray, target: Int): 
List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:10"
4007;321;"Python3";"class Solution:
    def fourSum(self, nums: List[int], target: int) 
-> List[List[int]]:";"";"2020-03-25 15:18:10"
4008;321;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[][]}
 */
var fourSum = function(nums, target) {
 
};";"";"2020-03-25 15:18:10"
4009;321;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer $target
     * @return Integer[][]
     */
    function fourSum($nums, $target) {
        
    }
}";"";"2020-03-25 15:18:10"
4010;321;"Swift";"class Solution {
    func fourSum(_ nums: [Int], _ target: Int) -> [
[Int]] {
        
    }
}";"";"2020-03-25 15:18:10"
4011;321;"Ruby";"# @param {Integer[]} nums
# @param {Integer} target
# @return {Integer[][]}
def four_sum(nums, target)
 
end";"";"2020-03-25 15:18:10"
4012;321;"Python";"class Solution(object):
    def fourSum(self, nums, target):
        """"""
        :type nums: List[int]
        :type target: int
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:10"
4013;322;"C#";"public class Solution {
 
    public Solution(int n_rows, int n_cols) {
 
    }
    
    public int[] Flip() {
 
    }
    
    public void Reset() {
 
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * Solution obj = new Solution(n_rows, n_cols);
 * int[] param_1 = obj.Flip();
 * obj.Reset();
 */";"";"2020-03-25 15:18:10"
4014;322;"Java";"class Solution {
 
    public Solution(int n_rows, int n_cols) {
 
    }
    
    public int[] flip() {
 
    }
    
    public void reset() {
 
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * Solution obj = new Solution(n_rows, n_cols);
 * int[] param_1 = obj.flip();
 * obj.reset();
 */";"";"2020-03-25 15:18:10"
4015;322;"Rust";"struct Solution {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl Solution {
 
    fn new(n_rows: i32, n_cols: i32) -> Self {
        
    }
    
    fn flip(&self) -> Vec<i32> {
        
    }
    
    fn reset(&self) {
        
    }
}
 ";"";"2020-03-25 15:18:10"
4016;322;"C";"typedef struct {
    
} Solution;
 
 
Solution* solutionCreate(int n_rows, int n_cols) {
    
}
 
int* solutionFlip(Solution* obj, int* retSize) {
  
}
 
void solutionReset(Solution* obj) {
  
}
 
void solutionFree(Solution* obj) {
    
}
 
/**
 * Your Solution struct will be instantiated and 
called as such:
 * Solution* obj = solutionCreate(n_rows, n_cols);
 * int* param_1 = solutionFlip(obj, retSize);";"";"2020-03-25 15:18:10"
4017;322;"Scala";"class Solution(_n_rows: Int, _n_cols: Int) {
 
    def flip(): Array[Int] = {
 
    }
 
    def reset() {
 
    }
 
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * var obj = new Solution(n_rows, n_cols)
 * var param_1 = obj.flip()
 * obj.reset()
 */";"";"2020-03-25 15:18:10"
4018;322;"Go";"type Solution struct {
 
}
 
 
func Constructor(n_rows int, n_cols int) Solution {
 
}
 
 
func (this *Solution) Flip() []int {
 
}
 
 
func (this *Solution) Reset()  {
 
}
 
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * obj := Constructor(n_rows, n_cols);
 * param_1 := obj.Flip();
 * obj.Reset();";"";"2020-03-25 15:18:10"
4019;322;"Kotlin";"class Solution(n_rows: Int, n_cols: Int) {
 
    fun flip(): IntArray {
 
    }
 
    fun reset() {
 
    }
 
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * var obj = Solution(n_rows, n_cols)
 * var param_1 = obj.flip()
 * obj.reset()
 */";"";"2020-03-25 15:18:10"
4020;322;"Python3";"class Solution:
 
    def __init__(self, n_rows: int, n_cols: int):
        
 
    def flip(self) -> List[int]:
        
 
    def reset(self) -> None:
        
 
 
# Your Solution object will be instantiated and 
called as such:
# obj = Solution(n_rows, n_cols)
# param_1 = obj.flip()
# obj.reset()";"";"2020-03-25 15:18:10"
4021;322;"JavaScript";"/**
 * @param {number} n_rows
 * @param {number} n_cols
 */
var Solution = function(n_rows, n_cols) {
 
};
 
/**
 * @return {number[]}
 */
Solution.prototype.flip = function() {
 
};
 
/**
 * @return {void}
 */
Solution.prototype.reset = function() {
 
};
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * var obj = new Solution(n_rows, n_cols)";"";"2020-03-25 15:18:10"
4022;322;"PHP";"class Solution {";"";"2020-03-25 15:18:10"
4023;322;"Swift";"class Solution {
 
    init(_ n_rows: Int, _ n_cols: Int) {
        
    }
    
    func flip() -> [Int] {
        
    }
    
    func reset() {
        
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * let obj = Solution(n_rows, n_cols)
 * let ret_1: [Int] = obj.flip()
 * obj.reset()
 */";"";"2020-03-25 15:18:10"
4024;322;"Ruby";"class Solution
 
=begin
    :type n_rows: Integer
    :type n_cols: Integer
=end
    def initialize(n_rows, n_cols)
 
    end
 
 
=begin
    :rtype: Integer[]
=end
    def flip()
 
    end
 
 
=begin
    :rtype: Void
=end
    def reset()
 
    end
 ";"";"2020-03-25 15:18:10"
4025;322;"Python";"class Solution(object):
 
    def __init__(self, n_rows, n_cols):
        """"""
        :type n_rows: int
        :type n_cols: int
        """"""
        
 
    def flip(self):
        """"""
        :rtype: List[int]
        """"""
        
 
    def reset(self):
        """"""
        :rtype: None
        """"""
        
 
 
# Your Solution object will be instantiated and 
called as such:
# obj = Solution(n_rows, n_cols)
# param_1 = obj.flip()";"";"2020-03-25 15:18:10"
4026;323;"C#";"public class Solution {
    public string ReverseLeftWords(string s, int n) 
{
 
    }
}";"";"2020-03-25 15:18:10"
4027;323;"Java";"class Solution {
    public String reverseLeftWords(String s, int n) 
{
 
    }
}";"";"2020-03-25 15:18:10"
4028;323;"Rust";"impl Solution {
    pub fn reverse_left_words(s: String, n: i32) -> 
String {
 
    }
}";"";"2020-03-25 15:18:10"
4029;323;"C";"char* reverseLeftWords(char* s, int n){
 
}";"";"2020-03-25 15:18:10"
4030;323;"Python3";"class Solution:
    def reverseLeftWords(self, s: str, n: int) -> 
str:";"";"2020-03-25 15:18:10"
4031;323;"JavaScript";"/**
 * @param {string} s
 * @param {number} n
 * @return {string}
 */
var reverseLeftWords = function(s, n) {
 
};";"";"2020-03-25 15:18:10"
4032;323;"Go";"func reverseLeftWords(s string, n int) string {
 
}";"";"2020-03-25 15:18:10"
4033;323;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @param Integer $n
     * @return String
     */
    function reverseLeftWords($s, $n) {
 
    }
}";"";"2020-03-25 15:18:10"
4034;323;"Swift";"class Solution {
    func reverseLeftWords(_ s: String, _ n: Int) -> 
String {
 
    }
}";"";"2020-03-25 15:18:10"
4035;323;"Ruby";"# @param {String} s
# @param {Integer} n
# @return {String}
def reverse_left_words(s, n)
 
end";"";"2020-03-25 15:18:10"
4036;323;"Kotlin";"class Solution {
    fun reverseLeftWords(s: String, n: Int): String 
{
 
    }
}";"";"2020-03-25 15:18:10"
4037;323;"Python";"class Solution(object):
    def reverseLeftWords(self, s, n):
        """"""
        :type s: str
        :type n: int
        :rtype: str
        """"""";"";"2020-03-25 15:18:10"
4038;324;"C#";"public class Solution {
    public IList<string> FindRepeatedDnaSequences
(string s) {
 
    }
}";"";"2020-03-25 15:18:10"
4039;324;"Java";"class Solution {
    public List<String> findRepeatedDnaSequences
(String s) {
 
    }
}";"";"2020-03-25 15:18:10"
4040;324;"C++";"class Solution {";"";"2020-03-25 15:18:10"
4041;324;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** findRepeatedDnaSequences(char * s, int* 
returnSize){
 
}";"";"2020-03-25 15:18:10"
4042;324;"Rust";"impl Solution {
    pub fn find_repeated_dna_sequences(s: String) 
-> Vec<String> {
 
    }
}";"";"2020-03-25 15:18:10"
4043;324;"Scala";"object Solution {
    def findRepeatedDnaSequences(s: String): List
[String] = {
 
    }
}";"";"2020-03-25 15:18:10"
4044;324;"Go";"func findRepeatedDnaSequences(s string) []string {
 
}";"";"2020-03-25 15:18:10"
4045;324;"Kotlin";"class Solution {
    fun findRepeatedDnaSequences(s: String): 
List<String> {
 
    }
}";"";"2020-03-25 15:18:10"
4046;324;"Python3";"class Solution:
    def findRepeatedDnaSequences(self, s: str) -> 
List[str]:";"";"2020-03-25 15:18:10"
4047;324;"JavaScript";"/**
 * @param {string} s
 * @return {string[]}
 */
var findRepeatedDnaSequences = function(s) {
 
};";"";"2020-03-25 15:18:10"
4048;324;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return String[]
     */
    function findRepeatedDnaSequences($s) {
 
    }
}";"";"2020-03-25 15:18:10"
4049;324;"Swift";"class Solution {
    func findRepeatedDnaSequences(_ s: String) -> 
[String] {
 
    }
}";"";"2020-03-25 15:18:10"
4050;324;"Ruby";"# @param {String} s
# @return {String[]}
def find_repeated_dna_sequences(s)
 
end";"";"2020-03-25 15:18:10"
4051;324;"Python";"class Solution(object):
    def findRepeatedDnaSequences(self, s):
        """"""
        :type s: str
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:10"
4052;325;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode GetIntersectionNode(ListNode 
headA, ListNode headB) {
        
    }
}";"";"2020-03-25 15:18:10"
4053;325;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode 
headA, ListNode headB) {
        
    }
}";"";"2020-03-25 15:18:10"
4054;325;"C++";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, 
ListNode *headB) {
        
    }
};";"";"2020-03-25 15:18:10"
4055;325;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode *getIntersectionNode(struct 
ListNode *headA, struct ListNode *headB) {
    
}";"";"2020-03-25 15:18:10"
4056;325;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def getIntersectionNode(self, headA: ListNode, 
headB: ListNode) -> ListNode:";"";"2020-03-25 15:18:10"
4057;325;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
 
/**
 * @param {ListNode} headA
 * @param {ListNode} headB
 * @return {ListNode}
 */
var getIntersectionNode = function(headA, headB) {
    
};";"";"2020-03-25 15:18:10"
4058;325;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func getIntersectionNode(headA, headB *ListNode) 
*ListNode {
    
}";"";"2020-03-25 15:18:10"
4059;325;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """"""
        :type head1, head1: ListNode
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:10"
4060;326;"C#";"public class Solution {
    public string OriginalDigits(string s) {
 
    }
}";"";"2020-03-25 15:18:10"
4061;326;"Java";"class Solution {
    public String originalDigits(String s) {
 
    }
}";"";"2020-03-25 15:18:10"
4062;326;"C";"char * originalDigits(char * s){
 
}";"";"2020-03-25 15:18:10"
4063;326;"Rust";"impl Solution {
    pub fn original_digits(s: String) -> String {
        
    }
}";"";"2020-03-25 15:18:10"
4064;326;"Scala";"object Solution {
    def originalDigits(s: String): String = {
 
    }
}";"";"2020-03-25 15:18:10"
4065;326;"Go";"func originalDigits(s string) string {
 
}";"";"2020-03-25 15:18:10"
4066;326;"Kotlin";"class Solution {
    fun originalDigits(s: String): String {
 
    }
}";"";"2020-03-25 15:18:10"
4067;326;"Python3";"class Solution:
    def originalDigits(self, s: str) -> str:";"";"2020-03-25 15:18:10"
4068;326;"JavaScript";"/**
 * @param {string} s
 * @return {string}
 */
var originalDigits = function(s) {
 
};";"";"2020-03-25 15:18:10"
4069;326;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return String
     */
    function originalDigits($s) {
        
    }
}";"";"2020-03-25 15:18:10"
4070;326;"Swift";"class Solution {
    func originalDigits(_ s: String) -> String {
        
    }
}";"";"2020-03-25 15:18:10"
4071;326;"Ruby";"# @param {String} s
# @return {String}
def original_digits(s)
 
end";"";"2020-03-25 15:18:10"
4072;326;"Python";"class Solution(object):
    def originalDigits(self, s):
        """"""
        :type s: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:10"
4073;327;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode MergeTrees(TreeNode t1, 
TreeNode t2) {
 
    }
}";"";"2020-03-25 15:18:10"
4074;327;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode mergeTrees(TreeNode t1, 
TreeNode t2) {
 
    }
}";"";"2020-03-25 15:18:10"
4075;327;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* mergeTrees(struct TreeNode* t1, 
struct TreeNode* t2){
 
}";"";"2020-03-25 15:18:10"
4076;327;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn merge_trees(t1: 
Option<Rc<RefCell<TreeNode>>>, t2: 
Option<Rc<RefCell<TreeNode>>>) -> 
Option<Rc<RefCell<TreeNode>>> {
        ";"";"2020-03-25 15:18:10"
4077;327;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def mergeTrees(t1: TreeNode, t2: TreeNode): 
TreeNode = {
 
    }
}";"";"2020-03-25 15:18:10"
4078;327;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def mergeTrees(self, t1: TreeNode, t2: TreeNode)
 -> TreeNode:";"";"2020-03-25 15:18:10"
4079;327;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} t1
 * @param {TreeNode} t2
 * @return {TreeNode}
 */
var mergeTrees = function(t1, t2) {
 
};";"";"2020-03-25 15:18:10"
4080;327;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func mergeTrees(t1 *TreeNode, t2 *TreeNode) 
*TreeNode {
 
}";"";"2020-03-25 15:18:10"
4081;327;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func mergeTrees(_ t1: TreeNode?, _ t2: TreeNode?
) -> TreeNode? {
        
    }
}";"";"2020-03-25 15:18:10"
4082;327;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} t1
# @param {TreeNode} t2
# @return {TreeNode}
def merge_trees(t1, t2)
 
end";"";"2020-03-25 15:18:10"
4083;327;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def mergeTrees(self, t1, t2):
        """"""
        :type t1: TreeNode
        :type t2: TreeNode
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:10"
4084;327;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun mergeTrees(t1: TreeNode?, t2: TreeNode?): 
TreeNode? {
 
    }
}";"";"2020-03-25 15:18:10"
4085;328;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode SortedListToBST(ListNode head) {
 
    }
}";"";"2020-03-25 15:18:10"
4086;328;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode sortedListToBST(ListNode head) {
 
    }
}";"";"2020-03-25 15:18:10"
4087;328;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]";"";"2020-03-25 15:18:10"
4088;328;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* sortedListToBST(struct ListNode* 
head){
 
}";"";"2020-03-25 15:18:10"
4089;328;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def sortedListToBST(head: ListNode): TreeNode = 
{
 
    }
}";"";"2020-03-25 15:18:10"
4090;328;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func sortedListToBST(head *ListNode) *TreeNode {
 
}";"";"2020-03-25 15:18:10"
4091;328;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun sortedListToBST(head: ListNode?): TreeNode? 
{
 
    }
}";"";"2020-03-25 15:18:10"
4092;328;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def sortedListToBST(self, head: ListNode) -> 
TreeNode:";"";"2020-03-25 15:18:10"
4093;328;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {ListNode} head
 * @return {TreeNode}
 */
var sortedListToBST = function(head) {
 
};";"";"2020-03-25 15:18:10"
4094;328;"PHP";"/**";"";"2020-03-25 15:18:10"
4095;328;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func sortedListToBST(_ head: ListNode?) -> ";"";"2020-03-25 15:18:10"
4096;328;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {ListNode} head
# @return {TreeNode}
def sorted_list_to_bst(head)
 
end";"";"2020-03-25 15:18:10"
4097;328;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def sortedListToBST(self, head):
        """"""
        :type head: ListNode
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:10"
4098;329;"C#";"public class Solution {
    public bool Find132pattern(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:10"
4099;329;"Java";"class Solution {
    public boolean find132pattern(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:10"
4100;329;"C";"bool find132pattern(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:10"
4101;329;"Rust";"impl Solution {
    pub fn find132pattern(nums: Vec<i32>) -> bool {
        
    }
}";"";"2020-03-25 15:18:10"
4102;329;"Scala";"object Solution {
    def find132pattern(nums: Array[Int]): Boolean = 
{
 
    }
}";"";"2020-03-25 15:18:10"
4103;329;"Go";"func find132pattern(nums []int) bool {
 
}";"";"2020-03-25 15:18:10"
4104;329;"Kotlin";"class Solution {
    fun find132pattern(nums: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:10"
4105;329;"Python3";"class Solution:
    def find132pattern(self, nums: List[int]) -> 
bool:";"";"2020-03-25 15:18:10"
4106;329;"JavaScript";"/**
 * @param {number[]} nums
 * @return {boolean}
 */
var find132pattern = function(nums) {
 
};";"";"2020-03-25 15:18:10"
4107;329;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Boolean
     */
    function find132pattern($nums) {
        
    }
}";"";"2020-03-25 15:18:10"
4108;329;"Swift";"class Solution {
    func find132pattern(_ nums: [Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:10"
4109;329;"Ruby";"# @param {Integer[]} nums
# @return {Boolean}
def find132pattern(nums)
 
end";"";"2020-03-25 15:18:10"
4110;329;"Python";"class Solution(object):
    def find132pattern(self, nums):
        """"""
        :type nums: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:10"
4111;330;"C#";"public class Solution {
    public string SimplifyPath(string path) {
 
    }
}";"";"2020-03-25 15:18:10"
4112;330;"Java";"class Solution {
    public String simplifyPath(String path) {
 
    }
}";"";"2020-03-25 15:18:10"
4113;330;"C";"char * simplifyPath(char * path){
 
}";"";"2020-03-25 15:18:10"
4114;330;"Rust";"impl Solution {
    pub fn simplify_path(path: String) -> String {
        
    }
}";"";"2020-03-25 15:18:10"
4115;330;"Scala";"object Solution {
    def simplifyPath(path: String): String = {
 
    }
}";"";"2020-03-25 15:18:10"
4116;330;"Go";"func simplifyPath(path string) string {
 
}";"";"2020-03-25 15:18:10"
4117;330;"Kotlin";"class Solution {
    fun simplifyPath(path: String): String {
 
    }
}";"";"2020-03-25 15:18:10"
4118;330;"Python3";"class Solution:
    def simplifyPath(self, path: str) -> str:";"";"2020-03-25 15:18:10"
4119;330;"JavaScript";"/**
 * @param {string} path
 * @return {string}
 */
var simplifyPath = function(path) {
 
};";"";"2020-03-25 15:18:10"
4120;330;"PHP";"class Solution {
 
    /**
     * @param String $path
     * @return String
     */
    function simplifyPath($path) {
        
    }
}";"";"2020-03-25 15:18:10"
4121;330;"Swift";"class Solution {
    func simplifyPath(_ path: String) -> String {
        
    }
}";"";"2020-03-25 15:18:10"
4122;330;"Ruby";"# @param {String} path";"";"2020-03-25 15:18:10"
4123;330;"Python";"class Solution(object):
    def simplifyPath(self, path):
        """"""
        :type path: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:10"
4124;331;"C#";"/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate 
about its implementation
 * class MountainArray {
 *     public int Get(int index) {}
 *     public int Length() {}
 * }
 */
 
class Solution {
    public int FindInMountainArray(int target, 
MountainArray mountainArr) {
        
    }
}";"";"2020-03-25 15:18:10"
4125;331;"Java";"/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate 
about its implementation
 * interface MountainArray {
 *     public int get(int index) {}
 *     public int length() {}
 * }
 */
 
class Solution {
    public int findInMountainArray(int target, 
MountainArray mountainArr) {
        
    }
}";"";"2020-03-25 15:18:10"
4126;331;"C";"/**
 * 
****************************************************
*****************
 * // This is the MountainArray's API interface.
 * // You should not implement it, or speculate 
about its implementation
 * 
****************************************************
*****************
 *
 * int get(MountainArray *, int index);
 * int length(MountainArray *);
 */
int findInMountainArray(int target, MountainArray* 
mountainArr){
    
}";"";"2020-03-25 15:18:10"
4127;331;"Python3";"# """"""
# This is MountainArray's API interface.
# You should not implement it, or speculate about 
its implementation
# """"""
#class MountainArray:
#    def get(self, index: int) -> int:
#    def length(self) -> int:
 
class Solution:
    def findInMountainArray(self, target: int, 
mountain_arr: 'MountainArray') -> int:";"";"2020-03-25 15:18:10"
4128;331;"JavaScript";"/**
 * // This is the MountainArray's API interface.
 * // You should not implement it, or speculate 
about its implementation
 * function MountainArray() {
 *
 *     @param {number} index
 *     @return {number}
 *     this.get = function(index) {
 *         ...
 *     };
 *
 *     @return {number}
 *     this.length = function() {
 *         ...
 *     };
 * };
 */
/**
 * @param {number} target
 * @param {MountainArray} mountainArr
 * @return {number}
 */
var findInMountainArray = function(target, 
mountainArr) {
    ";"";"2020-03-25 15:18:10"
4129;331;"Ruby";"# This is MountainArray's API interface.";"";"2020-03-25 15:18:10"
4130;331;"Python";"# """"""
# This is MountainArray's API interface.
# You should not implement it, or speculate about 
its implementation
# """"""
#class MountainArray(object):
#    def get(self, index):
#        """"""
#        :type index: int
#        :rtype int
#        """"""
#
#    def length(self):
#        """"""
#        :rtype int
#        """"""
 
class Solution(object):
    def findInMountainArray(self, target, 
mountain_arr):
        """"""
        :type target: integer
        :type mountain_arr: MountainArray
        :rtype: integer
        """"""";"";"2020-03-25 15:18:10"
4131;332;"C#";"public class Solution {
    public int FindSubstringInWraproundString
(string p) {
 
    }
}";"";"2020-03-25 15:18:10"
4132;332;"Java";"class Solution {
    public int findSubstringInWraproundString
(String p) {
 
    }
}";"";"2020-03-25 15:18:10"
4133;332;"Rust";"impl Solution {
    pub fn find_substring_in_wrapround_string(p: 
String) -> i32 {
        
    }
}";"";"2020-03-25 15:18:10"
4134;332;"C";"int findSubstringInWraproundString(char * p){
 
}";"";"2020-03-25 15:18:10"
4135;332;"Scala";"object Solution {
    def findSubstringInWraproundString(p: String): 
Int = {
 
    }
}";"";"2020-03-25 15:18:10"
4136;332;"Go";"func findSubstringInWraproundString(p string) int {
 
}";"";"2020-03-25 15:18:10"
4137;332;"Kotlin";"class Solution {
    fun findSubstringInWraproundString(p: String): 
Int {
 
    }
}";"";"2020-03-25 15:18:10"
4138;332;"Python3";"class Solution:
    def findSubstringInWraproundString(self, p: str)
 -> int:";"";"2020-03-25 15:18:10"
4139;332;"JavaScript";"/**
 * @param {string} p
 * @return {number}
 */
var findSubstringInWraproundString = function(p) {
 
};";"";"2020-03-25 15:18:10"
4140;332;"PHP";"class Solution {
 
    /**
     * @param String $p
     * @return Integer
     */
    function findSubstringInWraproundString($p) {
        
    }
}";"";"2020-03-25 15:18:10"
4141;332;"Swift";"class Solution {
    func findSubstringInWraproundString(_ p: String)
 -> Int {
        
    }
}";"";"2020-03-25 15:18:10"
4142;332;"Ruby";"# @param {String} p
# @return {Integer}
def find_substring_in_wrapround_string(p)
 
end";"";"2020-03-25 15:18:10"
4143;332;"Python";"class Solution(object):
    def findSubstringInWraproundString(self, p):
        """"""
        :type p: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:10"
4144;333;"C#";"/*
// Definition for a Node.
public class Node {
    public int val;
    public IList<Node> children;
 
    public Node() {}
 
    public Node(int _val) {
        val = _val;
    }
 
    public Node(int _val,IList<Node> _children) {
        val = _val;
        children = _children;
    }
}
*/
public class Solution {
    public IList<int> Preorder(Node root) {
        
    }
}";"";"2020-03-25 15:18:11"
4145;333;"Java";"/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;
 
    public Node() {}
 
    public Node(int _val) {
        val = _val;
    }
 
    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public List<Integer> preorder(Node root) {
        
    }
}";"";"2020-03-25 15:18:11"
4146;333;"C++";"/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;
 
    Node() {}
 
    Node(int _val) {
        val = _val;
    }
 
    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
public:
    vector<int> preorder(Node* root) {
        
    }
};";"";"2020-03-25 15:18:11"
4147;333;"Python3";"""""""
# Definition for a Node.
class Node:
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children
""""""
class Solution:
    def preorder(self, root: 'Node') -> List[int]:";"";"2020-03-25 15:18:11"
4148;333;"JavaScript";"/**
 * // Definition for a Node.
 * function Node(val, children) {
 *    this.val = val;
 *    this.children = children;
 * };
 */
/**
 * @param {Node} root
 * @return {number[]}
 */
var preorder = function(root) {
    
};";"";"2020-03-25 15:18:11"
4149;333;"Go";"/**
 * Definition for a Node.
 * type Node struct {
 *     Val int
 *     Children []*Node
 * }
 */
 
func preorder(root *Node) []int {
    
}";"";"2020-03-25 15:18:11"
4150;333;"Python";"""""""
# Definition for a Node.
class Node(object):
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children
""""""
class Solution(object):
    def preorder(self, root):
        """"""
        :type root: Node
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:11"
4151;334;"C#";"public class Solution {
    public int[] Exchange(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:11"
4152;334;"Java";"class Solution {
    public int[] exchange(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:11"
4153;334;"Rust";"impl Solution {
    pub fn exchange(nums: Vec<i32>) -> Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:11"
4154;334;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* exchange(int* nums, int numsSize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:11"
4155;334;"Scala";"object Solution {
    def exchange(nums: Array[Int]): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:11"
4156;334;"Go";"func exchange(nums []int) []int {
 
}";"";"2020-03-25 15:18:11"
4157;334;"Kotlin";"class Solution {
    fun exchange(nums: IntArray): IntArray {
 
    }
}";"";"2020-03-25 15:18:11"
4158;334;"Python3";"class Solution:
    def exchange(self, nums: List[int]) -> List[int]
:";"";"2020-03-25 15:18:11"
4159;334;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number[]}
 */
var exchange = function(nums) {
 
};";"";"2020-03-25 15:18:11"
4160;334;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer[]
     */
    function exchange($nums) {
 
    }
}";"";"2020-03-25 15:18:11"
4161;334;"Swift";"class Solution {
    func exchange(_ nums: [Int]) -> [Int] {
 
    }
}";"";"2020-03-25 15:18:11"
4162;334;"Ruby";"# @param {Integer[]} nums
# @return {Integer[]}
def exchange(nums)
 
end";"";"2020-03-25 15:18:11"
4163;334;"Python";"class Solution(object):
    def exchange(self, nums):
        """"""
        :type nums: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:11"
4164;335;"C#";"public class Solution {
    public int FindLength(int[] A, int[] B) {
 
    }
}";"";"2020-03-25 15:18:11"
4165;335;"Java";"class Solution {
    public int findLength(int[] A, int[] B) {
 
    }
}";"";"2020-03-25 15:18:11"
4166;335;"C";"int findLength(int* A, int ASize, int* B, int BSize)
{
 
}";"";"2020-03-25 15:18:11"
4167;335;"Rust";"impl Solution {
    pub fn find_length(a: Vec<i32>, b: Vec<i32>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:11"
4168;335;"Scala";"object Solution {
    def findLength(A: Array[Int], B: Array[Int]): 
Int = {
 
    }
}";"";"2020-03-25 15:18:11"
4169;335;"Go";"func findLength(A []int, B []int) int {
 
}";"";"2020-03-25 15:18:11"
4170;335;"Kotlin";"class Solution {
    fun findLength(A: IntArray, B: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:11"
4171;335;"Python3";"class Solution:
    def findLength(self, A: List[int], B: List[int])
 -> int:";"";"2020-03-25 15:18:11"
4172;335;"JavaScript";"/**
 * @param {number[]} A
 * @param {number[]} B
 * @return {number}
 */
var findLength = function(A, B) {
 
};";"";"2020-03-25 15:18:11"
4173;335;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @param Integer[] $B
     * @return Integer
     */
    function findLength($A, $B) {
        
    }
}";"";"2020-03-25 15:18:11"
4174;335;"Swift";"class Solution {
    func findLength(_ A: [Int], _ B: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:11"
4175;335;"Ruby";"# @param {Integer[]} a
# @param {Integer[]} b
# @return {Integer}
def find_length(a, b)
 
end";"";"2020-03-25 15:18:11"
4176;335;"Python";"class Solution(object):
    def findLength(self, A, B):
        """"""
        :type A: List[int]
        :type B: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:11"
4177;336;"C#";"public class Solution {
    public IList<int> AddToArrayForm(int[] A, int K)
 {
 
    }
}";"";"2020-03-25 15:18:11"
4178;336;"Java";"class Solution {
    public List<Integer> addToArrayForm(int[] A, 
int K) {
 
    }
}";"";"2020-03-25 15:18:11"
4179;336;"Rust";"impl Solution {
    pub fn add_to_array_form(a: Vec<i32>, k: i32) 
-> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:11"
4180;336;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* addToArrayForm(int* A, int ASize, int K, int* 
returnSize){
 
}";"";"2020-03-25 15:18:11"
4181;336;"Scala";"object Solution {
    def addToArrayForm(A: Array[Int], K: Int): List
[Int] = {
 
    }
}";"";"2020-03-25 15:18:11"
4182;336;"Go";"func addToArrayForm(A []int, K int) []int {
 
}";"";"2020-03-25 15:18:11"
4183;336;"Kotlin";"class Solution {
    fun addToArrayForm(A: IntArray, K: Int): 
List<Int> {
 
    }
}";"";"2020-03-25 15:18:11"
4184;336;"Python3";"class Solution:
    def addToArrayForm(self, A: List[int], K: int) 
-> List[int]:";"";"2020-03-25 15:18:11"
4185;336;"JavaScript";"/**
 * @param {number[]} A
 * @param {number} K
 * @return {number[]}
 */
var addToArrayForm = function(A, K) {
 
};";"";"2020-03-25 15:18:11"
4186;336;"PHP";"class Solution {";"";"2020-03-25 15:18:11"
4187;336;"Swift";"class Solution {
    func addToArrayForm(_ A: [Int], _ K: Int) -> 
[Int] {
        
    }
}";"";"2020-03-25 15:18:11"
4188;336;"Ruby";"# @param {Integer[]} a
# @param {Integer} k
# @return {Integer[]}
def add_to_array_form(a, k)
 
end";"";"2020-03-25 15:18:11"
4189;336;"Python";"class Solution(object):
    def addToArrayForm(self, A, K):
        """"""
        :type A: List[int]
        :type K: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:11"
4190;337;"C#";"public class Solution {
    public bool PatternMatching(string pattern, 
string value) {
 
    }
}";"";"2020-03-25 15:18:11"
4191;337;"Java";"class Solution {
    public boolean patternMatching(String pattern, 
String value) {
 
    }
}";"";"2020-03-25 15:18:11"
4192;337;"Rust";"impl Solution {
    pub fn pattern_matching(pattern: String, value: 
String) -> bool {
 
    }
}";"";"2020-03-25 15:18:11"
4193;337;"C";"bool patternMatching(char* pattern, char* value){
 
}";"";"2020-03-25 15:18:11"
4194;337;"Scala";"object Solution {
    def patternMatching(pattern: String, value: 
String): Boolean = {
 
    }
}";"";"2020-03-25 15:18:11"
4195;337;"Go";"func patternMatching(pattern string, value string) 
bool {
 
}";"";"2020-03-25 15:18:11"
4196;337;"Kotlin";"class Solution {
    fun patternMatching(pattern: String, value: 
String): Boolean {
 
    }
}";"";"2020-03-25 15:18:11"
4197;337;"Python3";"class Solution:
    def patternMatching(self, pattern: str, value: 
str) -> bool:";"";"2020-03-25 15:18:11"
4198;337;"JavaScript";"/**
 * @param {string} pattern
 * @param {string} value
 * @return {boolean}
 */
var patternMatching = function(pattern, value) {
 
};";"";"2020-03-25 15:18:11"
4199;337;"PHP";"class Solution {";"";"2020-03-25 15:18:11"
4200;337;"Swift";"class Solution {
    func patternMatching(_ pattern: String, _ 
value: String) -> Bool {
 
    }
}";"";"2020-03-25 15:18:11"
4201;337;"Ruby";"# @param {String} pattern
# @param {String} value
# @return {Boolean}
def pattern_matching(pattern, value)
 
end";"";"2020-03-25 15:18:11"
4202;337;"Python";"class Solution(object):
    def patternMatching(self, pattern, value):
        """"""
        :type pattern: str
        :type value: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:11"
4203;338;"C#";"public class Solution {
    public bool CheckPossibility(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:11"
4204;338;"Java";"class Solution {
    public boolean checkPossibility(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:11"
4205;338;"Rust";"impl Solution {
    pub fn check_possibility(nums: Vec<i32>) -> 
bool {
        
    }
}";"";"2020-03-25 15:18:11"
4206;338;"C";"bool checkPossibility(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:11"
4207;338;"Scala";"object Solution {
    def checkPossibility(nums: Array[Int]): Boolean 
= {
 
    }
}";"";"2020-03-25 15:18:11"
4208;338;"Go";"func checkPossibility(nums []int) bool {
 
}";"";"2020-03-25 15:18:11"
4209;338;"Kotlin";"class Solution {
    fun checkPossibility(nums: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:11"
4210;338;"Python3";"class Solution:
    def checkPossibility(self, nums: List[int]) -> 
bool:";"";"2020-03-25 15:18:11"
4211;338;"JavaScript";"/**
 * @param {number[]} nums
 * @return {boolean}
 */
var checkPossibility = function(nums) {
 
};";"";"2020-03-25 15:18:11"
4212;338;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Boolean
     */
    function checkPossibility($nums) {
        
    }
}";"";"2020-03-25 15:18:11"
4213;338;"Swift";"class Solution {
    func checkPossibility(_ nums: [Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:11"
4214;338;"Ruby";"# @param {Integer[]} nums
# @return {Boolean}
def check_possibility(nums)
 
end";"";"2020-03-25 15:18:11"
4215;338;"Python";"class Solution(object):
    def checkPossibility(self, nums):
        """"""
        :type nums: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:11"
4216;339;"C#";"public class Solution {
    public string MinRemoveToMakeValid(string s) {
 
    }
}";"";"2020-03-25 15:18:11"
4217;339;"Java";"class Solution {
    public String minRemoveToMakeValid(String s) {
 
    }
}";"";"2020-03-25 15:18:11"
4218;339;"C";"char * minRemoveToMakeValid(char * s){
 
}";"";"2020-03-25 15:18:11"
4219;339;"Rust";"impl Solution {
    pub fn min_remove_to_make_valid(s: String) -> 
String {
 
    }
}";"";"2020-03-25 15:18:11"
4220;339;"Scala";"object Solution {
    def minRemoveToMakeValid(s: String): String = {
 
    }
}";"";"2020-03-25 15:18:11"
4221;339;"Go";"func minRemoveToMakeValid(s string) string {
 
}";"";"2020-03-25 15:18:11"
4222;339;"Kotlin";"class Solution {
    fun minRemoveToMakeValid(s: String): String {
 
    }
}";"";"2020-03-25 15:18:11"
4223;339;"Python3";"class Solution:
    def minRemoveToMakeValid(self, s: str) -> str:";"";"2020-03-25 15:18:11"
4224;339;"JavaScript";"/**
 * @param {string} s
 * @return {string}
 */
var minRemoveToMakeValid = function(s) {
 
};";"";"2020-03-25 15:18:11"
4225;339;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return String
     */
    function minRemoveToMakeValid($s) {
 
    }
}";"";"2020-03-25 15:18:11"
4226;339;"Swift";"class Solution {
    func minRemoveToMakeValid(_ s: String) -> 
String {
 
    }
}";"";"2020-03-25 15:18:11"
4227;339;"Ruby";"# @param {String} s
# @return {String}
def min_remove_to_make_valid(s)
 
end";"";"2020-03-25 15:18:11"
4228;339;"Python";"class Solution(object):
    def minRemoveToMakeValid(self, s):
        """"""
        :type s: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:11"
4229;340;"C#";"public class Solution {
    public int SmallestRepunitDivByK(int K) {
 
    }
}";"";"2020-03-25 15:18:11"
4230;340;"Java";"class Solution {
    public int smallestRepunitDivByK(int K) {
 
    }
}";"";"2020-03-25 15:18:11"
4231;340;"Rust";"impl Solution {
    pub fn smallest_repunit_div_by_k(k: i32) -> i32 
{
        
    }
}";"";"2020-03-25 15:18:11"
4232;340;"C";"int smallestRepunitDivByK(int K){
 
}";"";"2020-03-25 15:18:11"
4233;340;"Scala";"object Solution {
    def smallestRepunitDivByK(K: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:11"
4234;340;"Go";"func smallestRepunitDivByK(K int) int {
 
}";"";"2020-03-25 15:18:11"
4235;340;"Kotlin";"class Solution {
    fun smallestRepunitDivByK(K: Int): Int {
 
    }
}";"";"2020-03-25 15:18:11"
4236;340;"Python3";"class Solution:
    def smallestRepunitDivByK(self, K: int) -> int:";"";"2020-03-25 15:18:11"
4237;340;"JavaScript";"/**
 * @param {number} K
 * @return {number}
 */
var smallestRepunitDivByK = function(K) {
 
};";"";"2020-03-25 15:18:11"
4238;340;"PHP";"class Solution {";"";"2020-03-25 15:18:11"
4239;340;"Swift";"class Solution {
    func smallestRepunitDivByK(_ K: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:11"
4240;340;"Ruby";"# @param {Integer} k
# @return {Integer}
def smallest_repunit_div_by_k(k)
 
end";"";"2020-03-25 15:18:11"
4241;340;"Python";"class Solution(object):
    def smallestRepunitDivByK(self, K):
        """"""
        :type K: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:11"
4242;341;"C#";"public class Solution {
    public int CountDigitOne(int n) {
 
    }
}";"";"2020-03-25 15:18:11"
4243;341;"Java";"class Solution {
    public int countDigitOne(int n) {
 
    }
}";"";"2020-03-25 15:18:11"
4244;341;"Rust";"impl Solution {
    pub fn count_digit_one(n: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:11"
4245;341;"C";"int countDigitOne(int n){
 
}";"";"2020-03-25 15:18:11"
4246;341;"Scala";"object Solution {
    def countDigitOne(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:11"
4247;341;"Go";"func countDigitOne(n int) int {
 
}";"";"2020-03-25 15:18:11"
4248;341;"Kotlin";"class Solution {
    fun countDigitOne(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:11"
4249;341;"Python3";"class Solution:
    def countDigitOne(self, n: int) -> int:";"";"2020-03-25 15:18:11"
4250;341;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var countDigitOne = function(n) {
 
};";"";"2020-03-25 15:18:11"
4251;341;"PHP";"class Solution {";"";"2020-03-25 15:18:11"
4252;341;"Swift";"class Solution {
    func countDigitOne(_ n: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:11"
4253;341;"Ruby";"# @param {Integer} n
# @return {Integer}
def count_digit_one(n)
 
end";"";"2020-03-25 15:18:11"
4254;341;"Python";"class Solution(object):
    def countDigitOne(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:11"
4255;342;"C#";"public class Solution {
    public int CutOffTree(IList<IList<int>> forest) 
{
 
    }
}";"";"2020-03-25 15:18:11"
4256;342;"Java";"class Solution {
    public int cutOffTree(List<List<Integer>> 
forest) {
 
    }
}";"";"2020-03-25 15:18:11"
4257;342;"C";"int cutOffTree(int** forest, int forestSize, int* 
forestColSize){
 
}";"";"2020-03-25 15:18:11"
4258;342;"Rust";"impl Solution {
    pub fn cut_off_tree(forest: Vec<Vec<i32>>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:11"
4259;342;"Scala";"object Solution {
    def cutOffTree(forest: List[List[Int]]): Int = {
 
    }
}";"";"2020-03-25 15:18:11"
4260;342;"Go";"func cutOffTree(forest [][]int) int {
 
}";"";"2020-03-25 15:18:11"
4261;342;"Kotlin";"class Solution {
    fun cutOffTree(forest: List<List<Int>>): Int {
 
    }
}";"";"2020-03-25 15:18:11"
4262;342;"Python3";"class Solution:
    def cutOffTree(self, forest: List[List[int]]) 
-> int:";"";"2020-03-25 15:18:11"
4263;342;"JavaScript";"/**
 * @param {number[][]} forest
 * @return {number}
 */
var cutOffTree = function(forest) {
 
};";"";"2020-03-25 15:18:11"
4264;342;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $forest
     * @return Integer
     */
    function cutOffTree($forest) {
        
    }
}";"";"2020-03-25 15:18:11"
4265;342;"Swift";"class Solution {
    func cutOffTree(_ forest: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:11"
4266;342;"Ruby";"# @param {Integer[][]} forest";"";"2020-03-25 15:18:11"
4267;342;"Python";"class Solution(object):
    def cutOffTree(self, forest):
        """"""
        :type forest: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:11"
4268;343;"C#";"public class Solution {
    public int MovesToMakeZigzag(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:11"
4269;343;"Java";"class Solution {
    public int movesToMakeZigzag(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:11"
4270;343;"C";"int movesToMakeZigzag(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:11"
4271;343;"Rust";"impl Solution {
    pub fn moves_to_make_zigzag(nums: Vec<i32>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:11"
4272;343;"Scala";"object Solution {
    def movesToMakeZigzag(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:11"
4273;343;"Go";"func movesToMakeZigzag(nums []int) int {
 
}";"";"2020-03-25 15:18:11"
4274;343;"Kotlin";"class Solution {
    fun movesToMakeZigzag(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:11"
4275;343;"Python3";"class Solution:
    def movesToMakeZigzag(self, nums: List[int]) -> 
int:";"";"2020-03-25 15:18:11"
4276;343;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var movesToMakeZigzag = function(nums) {
 
};";"";"2020-03-25 15:18:11"
4277;343;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function movesToMakeZigzag($nums) {
        
    }
}";"";"2020-03-25 15:18:11"
4278;343;"Swift";"class Solution {
    func movesToMakeZigzag(_ nums: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:11"
4279;343;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:18:11"
4280;343;"Python";"class Solution(object):
    def movesToMakeZigzag(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:11"
4281;344;"C#";"public class Solution {
    public int MajorityElement(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:11"
4282;344;"Java";"class Solution {
    public int majorityElement(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:11"
4283;344;"Rust";"impl Solution {
    pub fn majority_element(nums: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:11"
4284;344;"C";"int majorityElement(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:11"
4285;344;"Scala";"object Solution {
    def majorityElement(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:11"
4286;344;"Go";"func majorityElement(nums []int) int {
 
}";"";"2020-03-25 15:18:11"
4287;344;"Kotlin";"class Solution {
    fun majorityElement(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:11"
4288;344;"Python3";"class Solution:
    def majorityElement(self, nums: List[int]) -> 
int:";"";"2020-03-25 15:18:11"
4289;344;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var majorityElement = function(nums) {
 
};";"";"2020-03-25 15:18:11"
4290;344;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function majorityElement($nums) {
 
    }
}";"";"2020-03-25 15:18:11"
4291;344;"Swift";"class Solution {
    func majorityElement(_ nums: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:11"
4292;344;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def majority_element(nums)
 
end";"";"2020-03-25 15:18:11"
4293;344;"Python";"class Solution(object):
    def majorityElement(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:11"
4294;345;"C#";"public class Solution {
    public string ReplaceWords(IList<string> dict, 
string sentence) {
 
    }
}";"";"2020-03-25 15:18:11"
4295;345;"Java";"class Solution {
    public String replaceWords(List<String> dict, 
String sentence) {
 
    }
}";"";"2020-03-25 15:18:11"
4296;345;"Rust";"impl Solution {
    pub fn replace_words(dict: Vec<String>, 
sentence: String) -> String {
        
    }
}";"";"2020-03-25 15:18:11"
4297;345;"C";"char * replaceWords(char ** dict, int dictSize, 
char * sentence){
 
}";"";"2020-03-25 15:18:11"
4298;345;"Scala";"object Solution {
    def replaceWords(dict: List[String], sentence: 
String): String = {
 
    }
}";"";"2020-03-25 15:18:11"
4299;345;"Go";"func replaceWords(dict []string, sentence string) 
string {
 
}";"";"2020-03-25 15:18:11"
4300;345;"Kotlin";"class Solution {
    fun replaceWords(dict: List<String>, sentence: 
String): String {
 
    }
}";"";"2020-03-25 15:18:11"
4301;345;"Python3";"class Solution:
    def replaceWords(self, dict: List[str], 
sentence: str) -> str:";"";"2020-03-25 15:18:11"
4302;345;"JavaScript";"/**
 * @param {string[]} dict
 * @param {string} sentence
 * @return {string}
 */
var replaceWords = function(dict, sentence) {
 
};";"";"2020-03-25 15:18:11"
4303;345;"PHP";"class Solution {
 
    /**
     * @param String[] $dict
     * @param String $sentence
     * @return String
     */
    function replaceWords($dict, $sentence) {
        
    }
}";"";"2020-03-25 15:18:11"
4304;345;"Swift";"class Solution {
    func replaceWords(_ dict: [String], _ sentence: 
String) -> String {
        
    }
}";"";"2020-03-25 15:18:11"
4305;345;"Ruby";"# @param {String[]} dict
# @param {String} sentence
# @return {String}
def replace_words(dict, sentence)
 
end";"";"2020-03-25 15:18:11"
4306;345;"Python";"class Solution(object):
    def replaceWords(self, dict, sentence):
        """"""
        :type dict: List[str]
        :type sentence: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:11"
4307;346;"C#";"public class Solution {
    public bool ReorderedPowerOf2(int N) {
 
    }
}";"";"2020-03-25 15:18:11"
4308;346;"Java";"class Solution {
    public boolean reorderedPowerOf2(int N) {
 
    }
}";"";"2020-03-25 15:18:11"
4309;346;"C";"bool reorderedPowerOf2(int N){
 
}";"";"2020-03-25 15:18:11"
4310;346;"Rust";"impl Solution {
    pub fn reordered_power_of2(n: i32) -> bool {
        
    }
}";"";"2020-03-25 15:18:11"
4311;346;"Scala";"object Solution {
    def reorderedPowerOf2(N: Int): Boolean = {
 
    }
}";"";"2020-03-25 15:18:11"
4312;346;"Python3";"class Solution:
    def reorderedPowerOf2(self, N: int) -> bool:";"";"2020-03-25 15:18:11"
4313;346;"JavaScript";"/**
 * @param {number} N
 * @return {boolean}
 */
var reorderedPowerOf2 = function(N) {
 
};";"";"2020-03-25 15:18:11"
4314;346;"PHP";"class Solution {
 
    /**
     * @param Integer $N
     * @return Boolean
     */
    function reorderedPowerOf2($N) {
        
    }
}";"";"2020-03-25 15:18:11"
4315;346;"Swift";"class Solution {
    func reorderedPowerOf2(_ N: Int) -> Bool {
        
    }
}";"";"2020-03-25 15:18:11"
4316;346;"Ruby";"# @param {Integer} n";"";"2020-03-25 15:18:11"
4317;346;"Python";"class Solution(object):
    def reorderedPowerOf2(self, N):
        """"""
        :type N: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:11"
4318;346;"Kotlin";"class Solution {
    fun reorderedPowerOf2(N: Int): Boolean {
 
    }
}";"";"2020-03-25 15:18:11"
4319;347;"C#";"public class Solution {
    public int[] GardenNoAdj(int N, int[][] paths) {
 
    }
}";"";"2020-03-25 15:18:11"
4320;347;"Java";"class Solution {
    public int[] gardenNoAdj(int N, int[][] paths) {
 
    }
}";"";"2020-03-25 15:18:11"
4321;347;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* gardenNoAdj(int N, int** paths, int pathsSize, 
int* pathsColSize, int* returnSize){
 
}";"";"2020-03-25 15:18:11"
4322;347;"Python3";"class Solution:
    def gardenNoAdj(self, N: int, paths: List[List
[int]]) -> List[int]:";"";"2020-03-25 15:18:11"
4323;347;"JavaScript";"/**
 * @param {number} N
 * @param {number[][]} paths
 * @return {number[]}
 */
var gardenNoAdj = function(N, paths) {
 
};";"";"2020-03-25 15:18:11"
4324;347;"Ruby";"# @param {Integer} n";"";"2020-03-25 15:18:11"
4325;347;"Python";"class Solution(object):
    def gardenNoAdj(self, N, paths):
        """"""
        :type N: int
        :type paths: List[List[int]]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:11"
4326;348;"C#";"public class Solution {
    public double FrogPosition(int n, int[][] edges,
 int t, int target) {
 
    }
}";"";"2020-03-25 15:18:11"
4327;348;"Java";"class Solution {
    public double frogPosition(int n, int[][] edges,
 int t, int target) {
 
    }
}";"";"2020-03-25 15:18:11"
4328;348;"Rust";"impl Solution {
    pub fn frog_position(n: i32, edges: 
Vec<Vec<i32>>, t: i32, target: i32) -> f64 {
 
    }
}";"";"2020-03-25 15:18:11"
4329;348;"C";"double frogPosition(int n, int** edges, int 
edgesSize, int* edgesColSize, int t, int target){
 
}";"";"2020-03-25 15:18:11"
4330;348;"Scala";"object Solution {
    def frogPosition(n: Int, edges: Array[Array[Int]
], t: Int, target: Int): Double = {
 
    }
}";"";"2020-03-25 15:18:11"
4331;348;"Go";"func frogPosition(n int, edges [][]int, t int, 
target int) float64 {
 
}";"";"2020-03-25 15:18:11"
4332;348;"Kotlin";"class Solution {
    fun frogPosition(n: Int, edges: Array<IntArray>,
 t: Int, target: Int): Double {
 
    }
}";"";"2020-03-25 15:18:11"
4333;348;"Python3";"class Solution:
    def frogPosition(self, n: int, edges: List[List
[int]], t: int, target: int) -> float:";"";"2020-03-25 15:18:11"
4334;348;"JavaScript";"/**
 * @param {number} n
 * @param {number[][]} edges
 * @param {number} t
 * @param {number} target
 * @return {number}
 */
var frogPosition = function(n, edges, t, target) {
 
};";"";"2020-03-25 15:18:11"
4335;348;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @param Integer[][] $edges
     * @param Integer $t
     * @param Integer $target
     * @return Float
     */
    function frogPosition($n, $edges, $t, $target) {
 
    }
}";"";"2020-03-25 15:18:11"
4336;348;"Swift";"class Solution {
    func frogPosition(_ n: Int, _ edges: [[Int]], _ 
t: Int, _ target: Int) -> Double {
        
    }
}";"";"2020-03-25 15:18:11"
4337;348;"Ruby";"# @param {Integer} n
# @param {Integer[][]} edges
# @param {Integer} t
# @param {Integer} target
# @return {Float}
def frog_position(n, edges, t, target)
 
end";"";"2020-03-25 15:18:11"
4338;348;"Python";"class Solution(object):
    def frogPosition(self, n, edges, t, target):
        """"""
        :type n: int
        :type edges: List[List[int]]
        :type t: int
        :type target: int
        :rtype: float
        """"""";"";"2020-03-25 15:18:11"
4339;349;"C#";"public class Solution {
    public string ReplaceSpace(string s) {
 
    }
}";"";"2020-03-25 15:18:11"
4340;349;"Java";"class Solution {
    public String replaceSpace(String s) {
 
    }
}";"";"2020-03-25 15:18:11"
4341;349;"C";"char* replaceSpace(char* s){
 
}";"";"2020-03-25 15:18:11"
4342;349;"Rust";"impl Solution {
    pub fn replace_space(s: String) -> String {
 
    }
}";"";"2020-03-25 15:18:11"
4343;349;"Scala";"object Solution {
    def replaceSpace(s: String): String = {
 
    }
}";"";"2020-03-25 15:18:11"
4344;349;"Go";"func replaceSpace(s string) string {
 
}";"";"2020-03-25 15:18:11"
4345;349;"Kotlin";"class Solution {
    fun replaceSpace(s: String): String {
 
    }
}";"";"2020-03-25 15:18:11"
4346;349;"Python3";"class Solution:
    def replaceSpace(self, s: str) -> str:";"";"2020-03-25 15:18:11"
4347;349;"JavaScript";"/**
 * @param {string} s
 * @return {string}
 */
var replaceSpace = function(s) {
 
};";"";"2020-03-25 15:18:11"
4348;349;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return String
     */
    function replaceSpace($s) {
 
    }
}";"";"2020-03-25 15:18:11"
4349;349;"Swift";"class Solution {
    func replaceSpace(_ s: String) -> String {
 
    }
}";"";"2020-03-25 15:18:11"
4350;349;"Ruby";"# @param {String} s";"";"2020-03-25 15:18:11"
4351;349;"Python";"class Solution(object):
    def replaceSpace(self, s):
        """"""
        :type s: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:11"
4352;350;"C#";"public class Solution {
    public IList<IList<int>> MinimumAbsDifference
(int[] arr) {
 
    }
}";"";"2020-03-25 15:18:11"
4353;350;"Java";"class Solution {
    public List<List<Integer>> minimumAbsDifference
(int[] arr) {
 
    }
}";"";"2020-03-25 15:18:11"
4354;350;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** minimumAbsDifference(int* arr, int arrSize, 
int* returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:11"
4355;350;"Rust";"impl Solution {
    pub fn minimum_abs_difference(arr: Vec<i32>) -> 
Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:11"
4356;350;"Scala";"object Solution {
    def minimumAbsDifference(arr: Array[Int]): List
[List[Int]] = {
 
    }
}";"";"2020-03-25 15:18:11"
4357;350;"Go";"func minimumAbsDifference(arr []int) [][]int {
 
}";"";"2020-03-25 15:18:11"
4358;350;"Kotlin";"class Solution {
    fun minimumAbsDifference(arr: IntArray): 
List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:11"
4359;350;"Python3";"class Solution:
    def minimumAbsDifference(self, arr: List[int]) 
-> List[List[int]]:";"";"2020-03-25 15:18:11"
4360;350;"JavaScript";"/**
 * @param {number[]} arr
 * @return {number[][]}
 */
var minimumAbsDifference = function(arr) {
 
};";"";"2020-03-25 15:18:11"
4361;350;"PHP";"class Solution {
 
    /**
     * @param Integer[] $arr
     * @return Integer[][]
     */
    function minimumAbsDifference($arr) {
        
    }
}";"";"2020-03-25 15:18:11"
4362;350;"Swift";"class Solution {
    func minimumAbsDifference(_ arr: [Int]) -> [
[Int]] {
        
    }
}";"";"2020-03-25 15:18:11"
4363;350;"Ruby";"# @param {Integer[]} arr
# @return {Integer[][]}
def minimum_abs_difference(arr)
 
end";"";"2020-03-25 15:18:11"
4364;350;"Python";"class Solution(object):
    def minimumAbsDifference(self, arr):
        """"""
        :type arr: List[int]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:11"
4365;351;"C#";"public class Solution {
    public int FindMagicIndex(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:11"
4366;351;"Java";"class Solution {
    public int findMagicIndex(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:11"
4367;351;"C";"int findMagicIndex(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:11"
4368;351;"Rust";"impl Solution {
    pub fn find_magic_index(nums: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:11"
4369;351;"Scala";"object Solution {
    def findMagicIndex(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:11"
4370;351;"Go";"func findMagicIndex(nums []int) int {
 
}";"";"2020-03-25 15:18:11"
4371;351;"Kotlin";"class Solution {
    fun findMagicIndex(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:11"
4372;351;"Python3";"class Solution:
    def findMagicIndex(self, nums: List[int]) -> 
int:";"";"2020-03-25 15:18:11"
4373;351;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var findMagicIndex = function(nums) {
 
};";"";"2020-03-25 15:18:11"
4374;351;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function findMagicIndex($nums) {
 
    }
}";"";"2020-03-25 15:18:11"
4375;351;"Swift";"class Solution {
    func findMagicIndex(_ nums: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:11"
4376;351;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def find_magic_index(nums)
 
end";"";"2020-03-25 15:18:11"
4377;351;"Python";"class Solution(object):
    def findMagicIndex(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:11"
4378;352;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public bool IsUnivalTree(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:11"
4379;352;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isUnivalTree(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:11"
4380;352;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
bool isUnivalTree(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:11"
4381;352;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn is_unival_tree(root: 
Option<Rc<RefCell<TreeNode>>>) -> bool {
        
    }
}";"";"2020-03-25 15:18:11"
4382;352;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def isUnivalTree(root: TreeNode): Boolean = {
 
    }
}";"";"2020-03-25 15:18:11"
4383;352;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func isUnivalTree(root *TreeNode) bool {
 
}";"";"2020-03-25 15:18:11"
4384;352;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun isUnivalTree(root: TreeNode?): Boolean {
 
    }
}";"";"2020-03-25 15:18:11"
4385;352;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def isUnivalTree(self, root: TreeNode) -> bool:";"";"2020-03-25 15:18:11"
4386;352;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isUnivalTree = function(root) {
 
};";"";"2020-03-25 15:18:11"
4387;352;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Boolean
     */
    function isUnivalTree($root) {
        
    }
}";"";"2020-03-25 15:18:11"
4388;352;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func isUnivalTree(_ root: TreeNode?) -> Bool {
        
    }
}";"";"2020-03-25 15:18:11"
4389;352;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:11"
4390;352;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def isUnivalTree(self, root):
        """"""
        :type root: TreeNode
        :rtype: bool
        """"""";"";"2020-03-25 15:18:11"
4391;353;"C#";"public class Solution {
    public bool WordBreak(string s, IList<string> 
wordDict) {
 
    }
}";"";"2020-03-25 15:18:12"
4392;353;"Java";"class Solution {
    public boolean wordBreak(String s, List<String> 
wordDict) {
 
    }
}";"";"2020-03-25 15:18:12"
4393;353;"C";"bool wordBreak(char * s, char ** wordDict, int 
wordDictSize){
 
}";"";"2020-03-25 15:18:12"
4394;353;"Python3";"class Solution:
    def wordBreak(self, s: str, wordDict: List[str])
 -> bool:";"";"2020-03-25 15:18:12"
4395;353;"JavaScript";"/**
 * @param {string} s
 * @param {string[]} wordDict
 * @return {boolean}
 */
var wordBreak = function(s, wordDict) {
 
};";"";"2020-03-25 15:18:12"
4396;353;"Go";"func wordBreak(s string, wordDict []string) bool {";"";"2020-03-25 15:18:12"
4397;353;"Swift";"class Solution {
    func wordBreak(_ s: String, _ wordDict: [String]
) -> Bool {
 
    }
}";"";"2020-03-25 15:18:12"
4398;353;"Ruby";"# @param {String} s
# @param {String[]} word_dict
# @return {Boolean}
def word_break(s, word_dict)
 
end";"";"2020-03-25 15:18:12"
4399;353;"Python";"class Solution(object):
    def wordBreak(self, s, wordDict):
        """"""
        :type s: str
        :type wordDict: List[str]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:12"
4400;354;"C#";"public class Solution {
    public int TotalFruit(int[] tree) {
 
    }
}";"";"2020-03-25 15:18:12"
4401;354;"Java";"class Solution {
    public int totalFruit(int[] tree) {
 
    }
}";"";"2020-03-25 15:18:12"
4402;354;"C";"int totalFruit(int* tree, int treeSize){
 
}";"";"2020-03-25 15:18:12"
4403;354;"Rust";"impl Solution {
    pub fn total_fruit(tree: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:12"
4404;354;"Scala";"object Solution {
    def totalFruit(tree: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:12"
4405;354;"Go";"func totalFruit(tree []int) int {
 
}";"";"2020-03-25 15:18:12"
4406;354;"Kotlin";"class Solution {
    fun totalFruit(tree: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:12"
4407;354;"Python3";"class Solution:
    def totalFruit(self, tree: List[int]) -> int:";"";"2020-03-25 15:18:12"
4408;354;"JavaScript";"/**
 * @param {number[]} tree
 * @return {number}
 */
var totalFruit = function(tree) {
 
};";"";"2020-03-25 15:18:12"
4409;354;"PHP";"class Solution {
 
    /**
     * @param Integer[] $tree
     * @return Integer
     */
    function totalFruit($tree) {
        
    }
}";"";"2020-03-25 15:18:12"
4410;354;"Swift";"class Solution {
    func totalFruit(_ tree: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:12"
4411;354;"Ruby";"# @param {Integer[]} tree";"";"2020-03-25 15:18:12"
4412;354;"Python";"class Solution(object):
    def totalFruit(self, tree):
        """"""
        :type tree: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:12"
4413;355;"C#";"public class Solution {
    public int CountVowelPermutation(int n) {
 
    }
}";"";"2020-03-25 15:18:12"
4414;355;"Java";"class Solution {
    public int countVowelPermutation(int n) {
 
    }
}";"";"2020-03-25 15:18:12"
4415;355;"Rust";"impl Solution {
    pub fn count_vowel_permutation(n: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:12"
4416;355;"C";"int countVowelPermutation(int n){
 
}";"";"2020-03-25 15:18:12"
4417;355;"Scala";"object Solution {
    def countVowelPermutation(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:12"
4418;355;"Go";"func countVowelPermutation(n int) int {
 
}";"";"2020-03-25 15:18:12"
4419;355;"Kotlin";"class Solution {
    fun countVowelPermutation(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:12"
4420;355;"Python3";"class Solution:
    def countVowelPermutation(self, n: int) -> int:";"";"2020-03-25 15:18:12"
4421;355;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var countVowelPermutation = function(n) {
 
};";"";"2020-03-25 15:18:12"
4422;355;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function countVowelPermutation($n) {
 
    }
}";"";"2020-03-25 15:18:12"
4423;355;"Swift";"class Solution {
    func countVowelPermutation(_ n: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:12"
4424;355;"Ruby";"# @param {Integer} n
# @return {Integer}
def count_vowel_permutation(n)
 
end";"";"2020-03-25 15:18:12"
4425;355;"Python";"class Solution(object):
    def countVowelPermutation(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:12"
4426;356;"Java";"class Solution {
    public int game(int[] guess, int[] answer) {
 
    }
}";"";"2020-03-25 15:18:12"
4427;356;"C++";"class Solution {";"";"2020-03-25 15:18:12"
4428;356;"C";"int game(int* guess, int guessSize, int* answer, 
int answerSize){
 
}";"";"2020-03-25 15:18:12"
4429;356;"Python3";"class Solution:
    def game(self, guess: List[int], answer: List
[int]) -> int:";"";"2020-03-25 15:18:12"
4430;356;"JavaScript";"/**
 * @param {number[]} guess
 * @param {number[]} answer
 * @return {number}
 */
var game = function(guess, answer) {
 
};";"";"2020-03-25 15:18:12"
4431;356;"Go";"func game(guess []int, answer []int) int {
 
}";"";"2020-03-25 15:18:12"
4432;356;"Python";"class Solution(object):
    def game(self, guess, answer):
        """"""
        :type guess: List[int]
        :type answer: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:12"
4433;357;"C#";"public class Solution {
    public bool CanMeasureWater(int x, int y, int z)
 {
 
    }
}";"";"2020-03-25 15:18:12"
4434;357;"Java";"class Solution {
    public boolean canMeasureWater(int x, int y, 
int z) {
 
    }
}";"";"2020-03-25 15:18:12"
4435;357;"C";"bool canMeasureWater(int x, int y, int z){
 
}";"";"2020-03-25 15:18:12"
4436;357;"Rust";"impl Solution {
    pub fn can_measure_water(x: i32, y: i32, z: i32)
 -> bool {
        
    }
}";"";"2020-03-25 15:18:12"
4437;357;"Scala";"object Solution {
    def canMeasureWater(x: Int, y: Int, z: Int): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:12"
4438;357;"Go";"func canMeasureWater(x int, y int, z int) bool {
 
}";"";"2020-03-25 15:18:12"
4439;357;"Kotlin";"class Solution {
    fun canMeasureWater(x: Int, y: Int, z: Int): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:12"
4440;357;"Python3";"class Solution:
    def canMeasureWater(self, x: int, y: int, z: 
int) -> bool:";"";"2020-03-25 15:18:12"
4441;357;"JavaScript";"/**
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @return {boolean}
 */
var canMeasureWater = function(x, y, z) {
 
};";"";"2020-03-25 15:18:12"
4442;357;"PHP";"class Solution {
 
    /**
     * @param Integer $x
     * @param Integer $y
     * @param Integer $z
     * @return Boolean
     */
    function canMeasureWater($x, $y, $z) {
        
    }
}";"";"2020-03-25 15:18:12"
4443;357;"Swift";"class Solution {
    func canMeasureWater(_ x: Int, _ y: Int, _ z: 
Int) -> Bool {
        
    }
}";"";"2020-03-25 15:18:12"
4444;357;"Ruby";"# @param {Integer} x
# @param {Integer} y
# @param {Integer} z
# @return {Boolean}
def can_measure_water(x, y, z)
 
end";"";"2020-03-25 15:18:12"
4445;357;"Python";"class Solution(object):
    def canMeasureWater(self, x, y, z):
        """"""
        :type x: int
        :type y: int
        :type z: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:12"
4446;358;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<int> InorderTraversal(TreeNode 
root) {
 
    }
}";"";"2020-03-25 15:18:12"
4447;358;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode 
root) {
 
    }
}";"";"2020-03-25 15:18:12"
4448;358;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn inorder_traversal(root: 
Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:12"
4449;358;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* inorderTraversal(struct TreeNode* root, int* 
returnSize){
 
}";"";"2020-03-25 15:18:12"
4450;358;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def inorderTraversal(root: TreeNode): List[Int] 
= {
 
    }
}";"";"2020-03-25 15:18:12"
4451;358;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func inorderTraversal(root *TreeNode) []int {
 
}";"";"2020-03-25 15:18:12"
4452;358;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun inorderTraversal(root: TreeNode?): 
List<Int> {
 
    }
}";"";"2020-03-25 15:18:12"
4453;358;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def inorderTraversal(self, root: TreeNode) -> 
List[int]:";"";"2020-03-25 15:18:12"
4454;358;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[]}
 */
var inorderTraversal = function(root) {
 
};";"";"2020-03-25 15:18:12"
4455;358;"PHP";"/**";"";"2020-03-25 15:18:12"
4456;358;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func inorderTraversal(_ root: TreeNode?) -> 
[Int] {
        
    }
}";"";"2020-03-25 15:18:12"
4457;358;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer[]}
def inorder_traversal(root)
 
end";"";"2020-03-25 15:18:12"
4458;358;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def inorderTraversal(self, root):
        """"""
        :type root: TreeNode
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:12"
4459;359;"C#";"public class Solution {
    public int ArrangeCoins(int n) {
 
    }
}";"";"2020-03-25 15:18:12"
4460;359;"Java";"class Solution {
    public int arrangeCoins(int n) {
 
    }
}";"";"2020-03-25 15:18:12"
4461;359;"C";"int arrangeCoins(int n){
 
}";"";"2020-03-25 15:18:12"
4462;359;"Rust";"impl Solution {
    pub fn arrange_coins(n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:12"
4463;359;"Scala";"object Solution {
    def arrangeCoins(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:12"
4464;359;"Go";"func arrangeCoins(n int) int {
 
}";"";"2020-03-25 15:18:12"
4465;359;"Kotlin";"class Solution {
    fun arrangeCoins(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:12"
4466;359;"Python3";"class Solution:
    def arrangeCoins(self, n: int) -> int:";"";"2020-03-25 15:18:12"
4467;359;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var arrangeCoins = function(n) {
 
};";"";"2020-03-25 15:18:12"
4468;359;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function arrangeCoins($n) {
        
    }
}";"";"2020-03-25 15:18:12"
4469;359;"Swift";"class Solution {
    func arrangeCoins(_ n: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:12"
4470;359;"Ruby";"# @param {Integer} n
# @return {Integer}
def arrange_coins(n)
 
end";"";"2020-03-25 15:18:12"
4471;359;"Python";"class Solution(object):
    def arrangeCoins(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:12"
4472;360;"C#";"public class Solution {
    public double[] CutSquares(int[] square1, int[] 
square2) {
 
    }
}";"";"2020-03-25 15:18:12"
4473;360;"Java";"class Solution {
    public double[] cutSquares(int[] square1, int[] 
square2) {
 
    }
}";"";"2020-03-25 15:18:12"
4474;360;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
double* cutSquares(int* square1, int square1Size, 
int* square2, int square2Size, int* returnSize){
 
}";"";"2020-03-25 15:18:12"
4475;360;"Rust";"impl Solution {
    pub fn cut_squares(square1: Vec<i32>, square2: 
Vec<i32>) -> Vec<f64> {
 
    }
}";"";"2020-03-25 15:18:12"
4476;360;"Scala";"object Solution {
    def cutSquares(square1: Array[Int], square2: 
Array[Int]): Array[Double] = {
 
    }
}";"";"2020-03-25 15:18:12"
4477;360;"Go";"func cutSquares(square1 []int, square2 []int) []
float64 {
 
}";"";"2020-03-25 15:18:12"
4478;360;"Kotlin";"class Solution {
    fun cutSquares(square1: IntArray, square2: 
IntArray): DoubleArray {
 
    }
}";"";"2020-03-25 15:18:12"
4479;360;"Python3";"class Solution:
    def cutSquares(self, square1: List[int], 
square2: List[int]) -> List[float]:";"";"2020-03-25 15:18:12"
4480;360;"JavaScript";"/**
 * @param {number[]} square1
 * @param {number[]} square2
 * @return {number[]}
 */
var cutSquares = function(square1, square2) {
 
};";"";"2020-03-25 15:18:12"
4481;360;"PHP";"class Solution {
 
    /**
     * @param Integer[] $square1
     * @param Integer[] $square2
     * @return Float[]
     */
    function cutSquares($square1, $square2) {
 
    }
}";"";"2020-03-25 15:18:12"
4482;360;"Swift";"class Solution {
    func cutSquares(_ square1: [Int], _ square2: 
[Int]) -> [Double] {
 
    }
}";"";"2020-03-25 15:18:12"
4483;360;"Ruby";"# @param {Integer[]} square1
# @param {Integer[]} square2
# @return {Float[]}
def cut_squares(square1, square2)
 
end";"";"2020-03-25 15:18:12"
4484;360;"Python";"class Solution(object):
    def cutSquares(self, square1, square2):
        """"""
        :type square1: List[int]
        :type square2: List[int]
        :rtype: List[float]
        """"""";"";"2020-03-25 15:18:12"
4485;361;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public bool CheckSubTree(TreeNode t1, TreeNode 
t2) {
 
    }
}";"";"2020-03-25 15:18:12"
4486;361;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean checkSubTree(TreeNode t1, 
TreeNode t2) {
 
    }
}";"";"2020-03-25 15:18:12"
4487;361;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn check_sub_tree(t1: 
Option<Rc<RefCell<TreeNode>>>, t2: 
Option<Rc<RefCell<TreeNode>>>) -> bool {
 
    }";"";"2020-03-25 15:18:12"
4488;361;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
bool checkSubTree(struct TreeNode* t1, struct 
TreeNode* t2){
 
}";"";"2020-03-25 15:18:12"
4489;361;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def checkSubTree(t1: TreeNode, t2: TreeNode): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:12"
4490;361;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func checkSubTree(t1 *TreeNode, t2 *TreeNode) bool {
 
}";"";"2020-03-25 15:18:12"
4491;361;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun checkSubTree(t1: TreeNode?, t2: TreeNode?): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:12"
4492;361;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def checkSubTree(self, t1: TreeNode, t2: 
TreeNode) -> bool:";"";"2020-03-25 15:18:12"
4493;361;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} t1
 * @param {TreeNode} t2
 * @return {boolean}
 */
var checkSubTree = function(t1, t2) {
 
};";"";"2020-03-25 15:18:12"
4494;361;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $t1
     * @param TreeNode $t2
     * @return Boolean
     */
    function checkSubTree($t1, $t2) {
 
    }
}";"";"2020-03-25 15:18:12"
4495;361;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func checkSubTree(_ t1: TreeNode?, _ t2: 
TreeNode?) -> Bool {
 
    }
}";"";"2020-03-25 15:18:12"
4496;361;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} t1
# @param {TreeNode} t2
# @return {Boolean}
def check_sub_tree(t1, t2)
 
end";"";"2020-03-25 15:18:12"
4497;361;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def checkSubTree(self, t1, t2):
        """"""
        :type t1: TreeNode
        :type t2: TreeNode
        :rtype: bool
        """"""";"";"2020-03-25 15:18:12"
4498;362;"C#";"public class Solution {
    public void Merge(int[] nums1, int m, int[] 
nums2, int n) {
 
    }
}";"";"2020-03-25 15:18:12"
4499;362;"Java";"class Solution {
    public void merge(int[] nums1, int m, int[] 
nums2, int n) {
 
    }
}";"";"2020-03-25 15:18:12"
4500;362;"Rust";"impl Solution {
    pub fn merge(nums1: &mut Vec<i32>, m: i32, 
nums2: &mut Vec<i32>, n: i32) {
        
    }
}";"";"2020-03-25 15:18:12"
4501;362;"C";"void merge(int* nums1, int nums1Size, int m, int* 
nums2, int nums2Size, int n){
 
}";"";"2020-03-25 15:18:12"
4502;362;"Scala";"object Solution {
    def merge(nums1: Array[Int], m: Int, nums2: 
Array[Int], n: Int): Unit = {
 
    }
}";"";"2020-03-25 15:18:12"
4503;362;"Go";"func merge(nums1 []int, m int, nums2 []int, n int)  
{
 
}";"";"2020-03-25 15:18:12"
4504;362;"Kotlin";"class Solution {
    fun merge(nums1: IntArray, m: Int, nums2: 
IntArray, n: Int): Unit {
 
    }
}";"";"2020-03-25 15:18:12"
4505;362;"Python3";"class Solution:
    def merge(self, nums1: List[int], m: int, 
nums2: List[int], n: int) -> None:
        """"""
        Do not return anything, modify nums1 
in-place instead.
        """"""";"";"2020-03-25 15:18:12"
4506;362;"JavaScript";"/**
 * @param {number[]} nums1
 * @param {number} m
 * @param {number[]} nums2
 * @param {number} n
 * @return {void} Do not return anything, modify 
nums1 in-place instead.
 */
var merge = function(nums1, m, nums2, n) {
 
};";"";"2020-03-25 15:18:12"
4507;362;"PHP";"class Solution {";"";"2020-03-25 15:18:12"
4508;362;"Swift";"class Solution {
    func merge(_ nums1: inout [Int], _ m: Int, _ 
nums2: [Int], _ n: Int) {
        
    }
}";"";"2020-03-25 15:18:12"
4509;362;"Ruby";"# @param {Integer[]} nums1
# @param {Integer} m
# @param {Integer[]} nums2
# @param {Integer} n
# @return {Void} Do not return anything, modify 
nums1 in-place instead.
def merge(nums1, m, nums2, n)
 
end";"";"2020-03-25 15:18:12"
4510;362;"Python";"class Solution(object):
    def merge(self, nums1, m, nums2, n):
        """"""
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: None Do not return anything, modify 
nums1 in-place instead.
        """"""";"";"2020-03-25 15:18:12"
4511;363;"C#";"public class Solution {
    public bool IsHappy(int n) {
 
    }
}";"";"2020-03-25 15:18:12"
4512;363;"Java";"class Solution {
    public boolean isHappy(int n) {
 
    }
}";"";"2020-03-25 15:18:12"
4513;363;"C";"bool isHappy(int n){
 
}";"";"2020-03-25 15:18:12"
4514;363;"Rust";"impl Solution {
    pub fn is_happy(n: i32) -> bool {
 
    }
}";"";"2020-03-25 15:18:12"
4515;363;"Scala";"object Solution {
    def isHappy(n: Int): Boolean = {
 
    }
}";"";"2020-03-25 15:18:12"
4516;363;"Go";"func isHappy(n int) bool {
 
}";"";"2020-03-25 15:18:12"
4517;363;"Kotlin";"class Solution {
    fun isHappy(n: Int): Boolean {
 
    }
}";"";"2020-03-25 15:18:12"
4518;363;"Python3";"class Solution:
    def isHappy(self, n: int) -> bool:";"";"2020-03-25 15:18:12"
4519;363;"JavaScript";"/**
 * @param {number} n
 * @return {boolean}
 */
var isHappy = function(n) {
 
};";"";"2020-03-25 15:18:12"
4520;363;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Boolean
     */
    function isHappy($n) {
 
    }
}";"";"2020-03-25 15:18:12"
4521;363;"Swift";"class Solution {
    func isHappy(_ n: Int) -> Bool {
 
    }
}";"";"2020-03-25 15:18:12"
4522;363;"Ruby";"# @param {Integer} n";"";"2020-03-25 15:18:12"
4523;363;"Python";"class Solution(object):
    def isHappy(self, n):
        """"""
        :type n: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:12"
4524;364;"C#";"public class Solution {
    public IList<bool> CanMakePaliQueries(string s, 
int[][] queries) {
 
    }
}";"";"2020-03-25 15:18:12"
4525;364;"Java";"class Solution {
    public List<Boolean> canMakePaliQueries(String 
s, int[][] queries) {
 
    }
}";"";"2020-03-25 15:18:12"
4526;364;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
bool* canMakePaliQueries(char * s, int** queries, 
int queriesSize, int* queriesColSize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:12"
4527;364;"Rust";"impl Solution {
    pub fn can_make_pali_queries(s: String, 
queries: Vec<Vec<i32>>) -> Vec<bool> {
 
    }
}";"";"2020-03-25 15:18:12"
4528;364;"Scala";"object Solution {
    def canMakePaliQueries(s: String, queries: Array
[Array[Int]]): Array[Boolean] = {
 
    }
}";"";"2020-03-25 15:18:12"
4529;364;"Go";"func canMakePaliQueries(s string, queries [][]int) 
[]bool {
 
}";"";"2020-03-25 15:18:12"
4530;364;"Kotlin";"class Solution {
    fun canMakePaliQueries(s: String, queries: 
Array<IntArray>): BooleanArray {
 
    }
}";"";"2020-03-25 15:18:12"
4531;364;"Python3";"class Solution:
    def canMakePaliQueries(self, s: str, queries: 
List[List[int]]) -> List[bool]:";"";"2020-03-25 15:18:12"
4532;364;"JavaScript";"/**
 * @param {string} s
 * @param {number[][]} queries
 * @return {boolean[]}
 */
var canMakePaliQueries = function(s, queries) {
 
};";"";"2020-03-25 15:18:12"
4533;364;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @param Integer[][] $queries
     * @return Boolean[]
     */
    function canMakePaliQueries($s, $queries) {
 
    }
}";"";"2020-03-25 15:18:12"
4534;364;"Swift";"class Solution {
    func canMakePaliQueries(_ s: String, _ queries: 
[[Int]]) -> [Bool] {
 
    }
}";"";"2020-03-25 15:18:12"
4535;364;"Ruby";"# @param {String} s
# @param {Integer[][]} queries
# @return {Boolean[]}
def can_make_pali_queries(s, queries)
 
end";"";"2020-03-25 15:18:12"
4536;364;"Python";"class Solution(object):
    def canMakePaliQueries(self, s, queries):
        """"""
        :type s: str
        :type queries: List[List[int]]
        :rtype: List[bool]
        """"""";"";"2020-03-25 15:18:12"
4537;365;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode AddTwoNumbers(ListNode l1, 
ListNode l2) {
 
    }
}";"";"2020-03-25 15:18:12"
4538;365;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, 
ListNode l2) {
 
    }
}";"";"2020-03-25 15:18:12"
4539;365;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn add_two_numbers(l1: 
Option<Box<ListNode>>, l2: Option<Box<ListNode>>) 
-> Option<Box<ListNode>> {
        
    }
}";"";"2020-03-25 15:18:12"
4540;365;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
struct ListNode* addTwoNumbers(struct ListNode* l1, 
struct ListNode* l2){
 
}";"";"2020-03-25 15:18:12"
4541;365;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def addTwoNumbers(l1: ListNode, l2: ListNode): 
ListNode = {
 
    }
}";"";"2020-03-25 15:18:12"
4542;365;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func addTwoNumbers(l1 *ListNode, l2 *ListNode) 
*ListNode {
 
}";"";"2020-03-25 15:18:12"
4543;365;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun addTwoNumbers(l1: ListNode?, l2: ListNode?)
: ListNode? {
 
    }
}";"";"2020-03-25 15:18:12"
4544;365;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: 
ListNode) -> ListNode:";"";"2020-03-25 15:18:12"
4545;365;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */
var addTwoNumbers = function(l1, l2) {
 
};";"";"2020-03-25 15:18:12"
4546;365;"PHP";"/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
class Solution {
 
    /**
     * @param ListNode $l1
     * @param ListNode $l2
     * @return ListNode
     */
    function addTwoNumbers($l1, $l2) {
        
    }
}";"";"2020-03-25 15:18:12"
4547;365;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func addTwoNumbers(_ l1: ListNode?, _ l2: 
ListNode?) -> ListNode? {
        
    }
}";"";"2020-03-25 15:18:12"
4548;365;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# @param {ListNode} l1
# @param {ListNode} l2
# @return {ListNode}
def add_two_numbers(l1, l2)
 
end";"";"2020-03-25 15:18:12"
4549;365;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """"""
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:12"
4550;366;"C#";"public class Solution {
    public string LastSubstring(string s) {
 
    }
}";"";"2020-03-25 15:18:12"
4551;366;"Java";"class Solution {
    public String lastSubstring(String s) {
 
    }
}";"";"2020-03-25 15:18:12"
4552;366;"Rust";"impl Solution {
    pub fn last_substring(s: String) -> String {
        
    }
}";"";"2020-03-25 15:18:12"
4553;366;"C";"char * lastSubstring(char * s){
 
}";"";"2020-03-25 15:18:12"
4554;366;"Scala";"object Solution {
    def lastSubstring(s: String): String = {
 
    }
}";"";"2020-03-25 15:18:12"
4555;366;"Go";"func lastSubstring(s string) string {
 
}";"";"2020-03-25 15:18:12"
4556;366;"Kotlin";"class Solution {
    fun lastSubstring(s: String): String {
 
    }
}";"";"2020-03-25 15:18:12"
4557;366;"Python3";"class Solution:
    def lastSubstring(self, s: str) -> str:";"";"2020-03-25 15:18:12"
4558;366;"JavaScript";"/**
 * @param {string} s
 * @return {string}
 */
var lastSubstring = function(s) {
 
};";"";"2020-03-25 15:18:12"
4559;366;"PHP";"class Solution {";"";"2020-03-25 15:18:12"
4560;366;"Swift";"class Solution {
    func lastSubstring(_ s: String) -> String {
        
    }
}";"";"2020-03-25 15:18:12"
4561;366;"Ruby";"# @param {String} s
# @return {String}
def last_substring(s)
 
end";"";"2020-03-25 15:18:12"
4562;366;"Python";"class Solution(object):
    def lastSubstring(self, s):
        """"""
        :type s: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:12"
4563;367;"C#";"public class Solution {
    public int MaxProfit(int[] prices) {
 
    }
}";"";"2020-03-25 15:18:12"
4564;367;"Java";"class Solution {
    public int maxProfit(int[] prices) {
 
    }
}";"";"2020-03-25 15:18:12"
4565;367;"C";"int maxProfit(int* prices, int pricesSize){
 
}";"";"2020-03-25 15:18:12"
4566;367;"Rust";"impl Solution {
    pub fn max_profit(prices: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:12"
4567;367;"Scala";"object Solution {
    def maxProfit(prices: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:12"
4568;367;"Go";"func maxProfit(prices []int) int {
 
}";"";"2020-03-25 15:18:12"
4569;367;"Kotlin";"class Solution {
    fun maxProfit(prices: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:12"
4570;367;"Python3";"class Solution:
    def maxProfit(self, prices: List[int]) -> int:";"";"2020-03-25 15:18:12"
4571;367;"JavaScript";"/**
 * @param {number[]} prices
 * @return {number}
 */
var maxProfit = function(prices) {
 
};";"";"2020-03-25 15:18:12"
4572;367;"PHP";"class Solution {
 
    /**
     * @param Integer[] $prices
     * @return Integer
     */
    function maxProfit($prices) {
 
    }
}";"";"2020-03-25 15:18:12"
4573;367;"Swift";"class Solution {
    func maxProfit(_ prices: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:12"
4574;367;"Ruby";"# @param {Integer[]} prices";"";"2020-03-25 15:18:12"
4575;367;"Python";"class Solution(object):
    def maxProfit(self, prices):
        """"""
        :type prices: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:12"
4576;368;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<IList<int>> VerticalTraversal
(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:12"
4577;368;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> verticalTraversal
(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:12"
4578;368;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn vertical_traversal(root: 
Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:12"
4579;368;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** verticalTraversal(struct TreeNode* root, int* 
returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:12"
4580;368;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def verticalTraversal(root: TreeNode): List[List
[Int]] = {
 
    }
}";"";"2020-03-25 15:18:12"
4581;368;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func verticalTraversal(root *TreeNode) [][]int {
 
}";"";"2020-03-25 15:18:12"
4582;368;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun verticalTraversal(root: TreeNode?): 
List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:12"
4583;368;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def verticalTraversal(self, root: TreeNode) -> 
List[List[int]]:";"";"2020-03-25 15:18:12"
4584;368;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[][]}
 */
var verticalTraversal = function(root) {
 
};";"";"2020-03-25 15:18:12"
4585;368;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer[][]
     */
    function verticalTraversal($root) {
        
    }
}";"";"2020-03-25 15:18:12"
4586;368;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func verticalTraversal(_ root: TreeNode?) -> [
[Int]] {
        
    }
}";"";"2020-03-25 15:18:12"
4587;368;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer[][]}
def vertical_traversal(root)
 
end";"";"2020-03-25 15:18:12"
4588;368;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def verticalTraversal(self, root):
        """"""
        :type root: TreeNode
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:12"
4589;369;"C#";"public class AllOne {
 
    /** Initialize your data structure here. */
    public AllOne() {
 
    }
    
    /** Inserts a new key <Key> with value 1. Or 
increments an existing key by 1. */
    public void Inc(string key) {
 
    }
    
    /** Decrements an existing key by 1. If Key's 
value is 1, remove it from the data structure. */
    public void Dec(string key) {
 
    }
    
    /** Returns one of the keys with maximal value. 
*/
    public string GetMaxKey() {
 
    }
    
    /** Returns one of the keys with Minimal value. ";"";"2020-03-25 15:18:12"
4590;369;"Java";"class AllOne {
 
    /** Initialize your data structure here. */
    public AllOne() {
 
    }
    
    /** Inserts a new key <Key> with value 1. Or 
increments an existing key by 1. */
    public void inc(String key) {
 
    }
    
    /** Decrements an existing key by 1. If Key's 
value is 1, remove it from the data structure. */
    public void dec(String key) {
 
    }
    
    /** Returns one of the keys with maximal value. 
*/
    public String getMaxKey() {
 
    }
    
    /** Returns one of the keys with Minimal value. ";"";"2020-03-25 15:18:12"
4591;369;"C";"typedef struct {
    
} AllOne;
 
/** Initialize your data structure here. */
 
AllOne* allOneCreate() {
    
}
 
/** Inserts a new key <Key> with value 1. Or 
increments an existing key by 1. */
void allOneInc(AllOne* obj, char * key) {
  
}
 
/** Decrements an existing key by 1. If Key's value 
is 1, remove it from the data structure. */
void allOneDec(AllOne* obj, char * key) {
  
}
 
/** Returns one of the keys with maximal value. */
char * allOneGetMaxKey(AllOne* obj) {
  
}";"";"2020-03-25 15:18:12"
4592;369;"Rust";"struct AllOne {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl AllOne {
 
    /** Initialize your data structure here. */
    fn new() -> Self {
        
    }
    
    /** Inserts a new key <Key> with value 1. Or 
increments an existing key by 1. */
    fn inc(&self, key: String) {
        
    }
    
    /** Decrements an existing key by 1. If Key's 
value is 1, remove it from the data structure. */";"";"2020-03-25 15:18:12"
4593;369;"Scala";"class AllOne() {
 
    /** Initialize your data structure here. */
 
 
    /** Inserts a new key <Key> with value 1. Or 
increments an existing key by 1. */
    def inc(key: String) {
 
    }
 
    /** Decrements an existing key by 1. If Key's 
value is 1, remove it from the data structure. */
    def dec(key: String) {
 
    }
 
    /** Returns one of the keys with maximal value. 
*/
    def getMaxKey(): String = {
 
    }
 
    /** Returns one of the keys with Minimal value. 
*/
    def getMinKey(): String = {";"";"2020-03-25 15:18:12"
4594;369;"Go";"type AllOne struct {
 
}
 
 
/** Initialize your data structure here. */
func Constructor() AllOne {
 
}
 
 
/** Inserts a new key <Key> with value 1. Or 
increments an existing key by 1. */
func (this *AllOne) Inc(key string)  {
 
}
 
 
/** Decrements an existing key by 1. If Key's value 
is 1, remove it from the data structure. */
func (this *AllOne) Dec(key string)  {
 
}
 
 
/** Returns one of the keys with maximal value. */";"";"2020-03-25 15:18:12"
4595;369;"Kotlin";"class AllOne() {
 
    /** Initialize your data structure here. */
 
 
    /** Inserts a new key <Key> with value 1. Or 
increments an existing key by 1. */
    fun inc(key: String) {
 
    }
 
    /** Decrements an existing key by 1. If Key's 
value is 1, remove it from the data structure. */
    fun dec(key: String) {
 
    }
 
    /** Returns one of the keys with maximal value. 
*/
    fun getMaxKey(): String {
 
    }
 
    /** Returns one of the keys with Minimal value. 
*/
    fun getMinKey(): String {";"";"2020-03-25 15:18:12"
4596;369;"JavaScript";"/**
 * Initialize your data structure here.
 */
var AllOne = function() {
 
};
 
/**
 * Inserts a new key <Key> with value 1. Or 
increments an existing key by 1. 
 * @param {string} key
 * @return {void}
 */
AllOne.prototype.inc = function(key) {
 
};
 
/**
 * Decrements an existing key by 1. If Key's value 
is 1, remove it from the data structure. 
 * @param {string} key
 * @return {void}
 */
AllOne.prototype.dec = function(key) {
 
};";"";"2020-03-25 15:18:12"
4597;369;"Python3";"class AllOne:
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
        
 
    def inc(self, key: str) -> None:
        """"""
        Inserts a new key <Key> with value 1. Or 
increments an existing key by 1.
        """"""
        
 
    def dec(self, key: str) -> None:
        """"""
        Decrements an existing key by 1. If Key's 
value is 1, remove it from the data structure.
        """"""
        
 
    def getMaxKey(self) -> str:
        """"""
        Returns one of the keys with maximal value.
        """"""";"";"2020-03-25 15:18:12"
4598;369;"PHP";"class AllOne {
    /**
     * Initialize your data structure here.
     */
    function __construct() {
        
    }
  
    /**
     * Inserts a new key <Key> with value 1. Or 
increments an existing key by 1.
     * @param String $key
     * @return NULL
     */
    function inc($key) {
        
    }
  
    /**
     * Decrements an existing key by 1. If Key's 
value is 1, remove it from the data structure.
     * @param String $key
     * @return NULL
     */
    function dec($key) {
        ";"";"2020-03-25 15:18:12"
4599;369;"Swift";"class AllOne {
 
    /** Initialize your data structure here. */
    init() {
        
    }
    
    /** Inserts a new key <Key> with value 1. Or 
increments an existing key by 1. */
    func inc(_ key: String) {
        
    }
    
    /** Decrements an existing key by 1. If Key's 
value is 1, remove it from the data structure. */
    func dec(_ key: String) {
        
    }
    
    /** Returns one of the keys with maximal value. 
*/
    func getMaxKey() -> String {
        
    }
    
    /** Returns one of the keys with Minimal value. ";"";"2020-03-25 15:18:12"
4600;369;"Ruby";"class AllOne
 
=begin
    Initialize your data structure here.
=end
    def initialize()
 
    end
 
 
=begin
    Inserts a new key <Key> with value 1. Or 
increments an existing key by 1.
    :type key: String
    :rtype: Void
=end
    def inc(key)
 
    end
 
 
=begin
    Decrements an existing key by 1. If Key's value 
is 1, remove it from the data structure.
    :type key: String
    :rtype: Void";"";"2020-03-25 15:18:12"
4601;369;"Python";"class AllOne(object):
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
        
 
    def inc(self, key):
        """"""
        Inserts a new key <Key> with value 1. Or 
increments an existing key by 1.
        :type key: str
        :rtype: None
        """"""
        
 
    def dec(self, key):
        """"""
        Decrements an existing key by 1. If Key's 
value is 1, remove it from the data structure.
        :type key: str
        :rtype: None
        """"""
        
 ";"";"2020-03-25 15:18:12"
4602;370;"C#";"public class Solution {
    public int MinCost(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:12"
4603;370;"Java";"class Solution {
    public int minCost(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:12"
4604;370;"Rust";"impl Solution {
    pub fn min_cost(grid: Vec<Vec<i32>>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:12"
4605;370;"C";"int minCost(int** grid, int gridSize, int* 
gridColSize){
 
}";"";"2020-03-25 15:18:12"
4606;370;"Scala";"object Solution {
    def minCost(grid: Array[Array[Int]]): Int = {
 
    }
}";"";"2020-03-25 15:18:12"
4607;370;"Go";"func minCost(grid [][]int) int {
 
}";"";"2020-03-25 15:18:12"
4608;370;"Kotlin";"class Solution {
    fun minCost(grid: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:12"
4609;370;"Python3";"class Solution:
    def minCost(self, grid: List[List[int]]) -> int:";"";"2020-03-25 15:18:12"
4610;370;"JavaScript";"/**
 * @param {number[][]} grid
 * @return {number}
 */
var minCost = function(grid) {
 
};";"";"2020-03-25 15:18:12"
4611;370;"PHP";"";"";"2020-03-25 15:18:12"
4612;370;"Swift";"class Solution {
    func minCost(_ grid: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:12"
4613;370;"Ruby";"# @param {Integer[][]} grid
# @return {Integer}
def min_cost(grid)
 
end";"";"2020-03-25 15:18:12"
4614;370;"Python";"class Solution(object):
    def minCost(self, grid):
        """"""
        :type grid: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:12"
4615;371;"C#";"public class Solution {
    public int MaxScoreSightseeingPair(int[] A) {
 
    }
}";"";"2020-03-25 15:18:13"
4616;371;"Java";"class Solution {
    public int maxScoreSightseeingPair(int[] A) {
 
    }
}";"";"2020-03-25 15:18:13"
4617;371;"C";"int maxScoreSightseeingPair(int* A, int ASize){
 
}";"";"2020-03-25 15:18:13"
4618;371;"Rust";"impl Solution {
    pub fn max_score_sightseeing_pair(a: Vec<i32>) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:13"
4619;371;"Scala";"object Solution {
    def maxScoreSightseeingPair(A: Array[Int]): Int 
= {
 
    }
}";"";"2020-03-25 15:18:13"
4620;371;"Go";"func maxScoreSightseeingPair(A []int) int {
 
}";"";"2020-03-25 15:18:13"
4621;371;"Kotlin";"class Solution {
    fun maxScoreSightseeingPair(A: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:13"
4622;371;"Python3";"class Solution:
    def maxScoreSightseeingPair(self, A: List[int]) 
-> int:";"";"2020-03-25 15:18:13"
4623;371;"JavaScript";"/**
 * @param {number[]} A
 * @return {number}
 */
var maxScoreSightseeingPair = function(A) {
 
};";"";"2020-03-25 15:18:13"
4624;371;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @return Integer
     */
    function maxScoreSightseeingPair($A) {
        
    }
}";"";"2020-03-25 15:18:13"
4625;371;"Swift";"class Solution {
    func maxScoreSightseeingPair(_ A: [Int]) -> Int 
{
        
    }
}";"";"2020-03-25 15:18:13"
4626;371;"Ruby";"# @param {Integer[]} a";"";"2020-03-25 15:18:13"
4627;371;"Python";"class Solution(object):
    def maxScoreSightseeingPair(self, A):
        """"""
        :type A: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:13"
4628;372;"C#";"public class Solution {
    public int Massage(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:13"
4629;372;"Java";"class Solution {
    public int massage(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:13"
4630;372;"C";"int massage(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:13"
4631;372;"Rust";"impl Solution {
    pub fn massage(nums: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:13"
4632;372;"Scala";"object Solution {
    def massage(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:13"
4633;372;"Go";"func massage(nums []int) int {
 
}";"";"2020-03-25 15:18:13"
4634;372;"Kotlin";"class Solution {
    fun massage(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:13"
4635;372;"Python3";"class Solution:
    def massage(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:13"
4636;372;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var massage = function(nums) {
 
};";"";"2020-03-25 15:18:13"
4637;372;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function massage($nums) {
 
    }
}";"";"2020-03-25 15:18:13"
4638;372;"Swift";"class Solution {
    func massage(_ nums: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:13"
4639;372;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def massage(nums)
 
end";"";"2020-03-25 15:18:13"
4640;372;"Python";"class Solution(object):
    def massage(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:13"
4641;373;"C#";"public class Solution {
    public int[][] GenerateMatrix(int n) {
 
    }
}";"";"2020-03-25 15:18:13"
4642;373;"Java";"class Solution {
    public int[][] generateMatrix(int n) {
 
    }
}";"";"2020-03-25 15:18:13"
4643;373;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** generateMatrix(int n, int* returnSize, int** 
returnColumnSizes){
 
}";"";"2020-03-25 15:18:13"
4644;373;"Rust";"impl Solution {
    pub fn generate_matrix(n: i32) -> Vec<Vec<i32>> 
{
        
    }
}";"";"2020-03-25 15:18:13"
4645;373;"Scala";"object Solution {
    def generateMatrix(n: Int): Array[Array[Int]] = 
{
 
    }
}";"";"2020-03-25 15:18:13"
4646;373;"Go";"func generateMatrix(n int) [][]int {
 
}";"";"2020-03-25 15:18:13"
4647;373;"Kotlin";"class Solution {
    fun generateMatrix(n: Int): Array<IntArray> {
 
    }
}";"";"2020-03-25 15:18:13"
4648;373;"Python3";"class Solution:
    def generateMatrix(self, n: int) -> List[List
[int]]:";"";"2020-03-25 15:18:13"
4649;373;"JavaScript";"/**
 * @param {number} n
 * @return {number[][]}
 */
var generateMatrix = function(n) {
 
};";"";"2020-03-25 15:18:13"
4650;373;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer[][]
     */
    function generateMatrix($n) {
        
    }
}";"";"2020-03-25 15:18:13"
4651;373;"Swift";"class Solution {
    func generateMatrix(_ n: Int) -> [[Int]] {
        
    }
}";"";"2020-03-25 15:18:13"
4652;373;"Ruby";"# @param {Integer} n";"";"2020-03-25 15:18:13"
4653;373;"Python";"class Solution(object):
    def generateMatrix(self, n):
        """"""
        :type n: int
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:13"
4654;374;"C#";"public class Skiplist {
 
    public Skiplist() {
 
    }
    
    public bool Search(int target) {
 
    }
    
    public void Add(int num) {
 
    }
    
    public bool Erase(int num) {
 
    }
}
 
/**
 * Your Skiplist object will be instantiated and 
called as such:
 * Skiplist obj = new Skiplist();
 * bool param_1 = obj.Search(target);
 * obj.Add(num);
 * bool param_3 = obj.Erase(num);";"";"2020-03-25 15:18:13"
4655;374;"Java";"class Skiplist {
 
    public Skiplist() {
 
    }
    
    public boolean search(int target) {
 
    }
    
    public void add(int num) {
 
    }
    
    public boolean erase(int num) {
 
    }
}
 
/**
 * Your Skiplist object will be instantiated and 
called as such:
 * Skiplist obj = new Skiplist();
 * boolean param_1 = obj.search(target);
 * obj.add(num);
 * boolean param_3 = obj.erase(num);";"";"2020-03-25 15:18:13"
4656;374;"Rust";"struct Skiplist {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl Skiplist {
 
    fn new() -> Self {
 
    }
    
    fn search(&self, target: i32) -> bool {
 
    }
    
    fn add(&self, num: i32) {
 
    }
    
    fn erase(&self, num: i32) -> bool {";"";"2020-03-25 15:18:13"
4657;374;"C";"typedef struct {
    
} Skiplist;
 
 
Skiplist* skiplistCreate() {
    
}
 
bool skiplistSearch(Skiplist* obj, int target) {
  
}
 
void skiplistAdd(Skiplist* obj, int num) {
  
}
 
bool skiplistErase(Skiplist* obj, int num) {
  
}
 
void skiplistFree(Skiplist* obj) {
    
}
 
/**";"";"2020-03-25 15:18:13"
4658;374;"Scala";"class Skiplist() {
 
    def search(target: Int): Boolean = {
 
    }
 
    def add(num: Int) {
 
    }
 
    def erase(num: Int): Boolean = {
 
    }
 
}
 
/**
 * Your Skiplist object will be instantiated and 
called as such:
 * var obj = new Skiplist()
 * var param_1 = obj.search(target)
 * obj.add(num)
 * var param_3 = obj.erase(num)
 */";"";"2020-03-25 15:18:13"
4659;374;"Go";"type Skiplist struct {
 
}
 
 
func Constructor() Skiplist {
 
}
 
 
func (this *Skiplist) Search(target int) bool {
 
}
 
 
func (this *Skiplist) Add(num int)  {
 
}
 
 
func (this *Skiplist) Erase(num int) bool {
 
}
 
 
/**";"";"2020-03-25 15:18:13"
4660;374;"Kotlin";"class Skiplist() {
 
    fun search(target: Int): Boolean {
 
    }
 
    fun add(num: Int) {
 
    }
 
    fun erase(num: Int): Boolean {
 
    }
 
}
 
/**
 * Your Skiplist object will be instantiated and 
called as such:
 * var obj = Skiplist()
 * var param_1 = obj.search(target)
 * obj.add(num)
 * var param_3 = obj.erase(num)
 */";"";"2020-03-25 15:18:13"
4661;374;"Python3";"class Skiplist:
 
    def __init__(self):
        
 
    def search(self, target: int) -> bool:
        
 
    def add(self, num: int) -> None:
        
 
    def erase(self, num: int) -> bool:
        
 
 
# Your Skiplist object will be instantiated and 
called as such:
# obj = Skiplist()
# param_1 = obj.search(target)
# obj.add(num)
# param_3 = obj.erase(num)";"";"2020-03-25 15:18:13"
4662;374;"JavaScript";"var Skiplist = function() {
 
};
 
/** 
 * @param {number} target
 * @return {boolean}
 */
Skiplist.prototype.search = function(target) {
 
};
 
/** 
 * @param {number} num
 * @return {void}
 */
Skiplist.prototype.add = function(num) {
 
};
 
/** 
 * @param {number} num
 * @return {boolean}
 */
Skiplist.prototype.erase = function(num) {
 ";"";"2020-03-25 15:18:13"
4663;374;"PHP";"class Skiplist {
    /**
     */
    function __construct() {
 
    }
 
    /**
     * @param Integer $target
     * @return Boolean
     */
    function search($target) {
 
    }
 
    /**
     * @param Integer $num
     * @return NULL
     */
    function add($num) {
 
    }
 
    /**
     * @param Integer $num
     * @return Boolean";"";"2020-03-25 15:18:13"
4664;374;"Swift";"class Skiplist {
 
    init() {
 
    }
    
    func search(_ target: Int) -> Bool {
 
    }
    
    func add(_ num: Int) {
 
    }
    
    func erase(_ num: Int) -> Bool {
 
    }
}
 
/**
 * Your Skiplist object will be instantiated and 
called as such:
 * let obj = Skiplist()
 * let ret_1: Bool = obj.search(target)
 * obj.add(num)
 * let ret_3: Bool = obj.erase(num)";"";"2020-03-25 15:18:13"
4665;374;"Ruby";"class Skiplist
    def initialize()
 
    end
 
 
=begin
    :type target: Integer
    :rtype: Boolean
=end
    def search(target)
 
    end
 
 
=begin
    :type num: Integer
    :rtype: Void
=end
    def add(num)
 
    end
 
 
=begin
    :type num: Integer";"";"2020-03-25 15:18:13"
4666;374;"Python";"class Skiplist(object):
 
    def __init__(self):
        
 
    def search(self, target):
        """"""
        :type target: int
        :rtype: bool
        """"""
        
 
    def add(self, num):
        """"""
        :type num: int
        :rtype: None
        """"""
        
 
    def erase(self, num):
        """"""
        :type num: int
        :rtype: bool
        """"""
        
 ";"";"2020-03-25 15:18:13"
4667;375;"C#";"public class Solution {
    public IList<string> PrintKMoves(int K) {
 
    }
}";"";"2020-03-25 15:18:13"
4668;375;"Java";"class Solution {
    public List<String> printKMoves(int K) {
 
    }
}";"";"2020-03-25 15:18:13"
4669;375;"Rust";"impl Solution {
    pub fn print_k_moves(k: i32) -> Vec<String> {
 
    }
}";"";"2020-03-25 15:18:13"
4670;375;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char** printKMoves(int K, int* returnSize){
 
}";"";"2020-03-25 15:18:13"
4671;375;"Scala";"object Solution {
    def printKMoves(K: Int): List[String] = {
 
    }
}";"";"2020-03-25 15:18:13"
4672;375;"Go";"func printKMoves(K int) []string {
 
}";"";"2020-03-25 15:18:13"
4673;375;"Kotlin";"class Solution {
    fun printKMoves(K: Int): List<String> {
 
    }
}";"";"2020-03-25 15:18:13"
4674;375;"Python3";"class Solution:
    def printKMoves(self, K: int) -> List[str]:";"";"2020-03-25 15:18:13"
4675;375;"JavaScript";"/**
 * @param {number} K
 * @return {string[]}
 */
var printKMoves = function(K) {
 
};";"";"2020-03-25 15:18:13"
4676;375;"PHP";"class Solution {";"";"2020-03-25 15:18:13"
4677;375;"Swift";"class Solution {
    func printKMoves(_ K: Int) -> [String] {
 
    }
}";"";"2020-03-25 15:18:13"
4678;375;"Ruby";"# @param {Integer} k
# @return {String[]}
def print_k_moves(k)
 
end";"";"2020-03-25 15:18:13"
4679;375;"Python";"class Solution(object):
    def printKMoves(self, K):
        """"""
        :type K: int
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:13"
4680;376;"C#";"public class Solution {
    public int MyAtoi(string str) {
 
    }
}";"";"2020-03-25 15:18:13"
4681;376;"Java";"class Solution {
    public int myAtoi(String str) {
 
    }
}";"";"2020-03-25 15:18:13"
4682;376;"Rust";"impl Solution {";"";"2020-03-25 15:18:13"
4683;376;"C";"int myAtoi(char * str){
 
}";"";"2020-03-25 15:18:13"
4684;376;"Scala";"object Solution {
    def myAtoi(str: String): Int = {
 
    }
}";"";"2020-03-25 15:18:13"
4685;376;"JavaScript";"/**
 * @param {string} str
 * @return {number}
 */
var myAtoi = function(str) {
 
};";"";"2020-03-25 15:18:13"
4686;376;"Python3";"class Solution:
    def myAtoi(self, str: str) -> int:";"";"2020-03-25 15:18:13"
4687;376;"Go";"func myAtoi(str string) int {
 
}";"";"2020-03-25 15:18:13"
4688;376;"Swift";"class Solution {
    func myAtoi(_ str: String) -> Int {
        
    }
}";"";"2020-03-25 15:18:13"
4689;376;"Ruby";"# @param {String} str
# @return {Integer}
def my_atoi(str)
 
end";"";"2020-03-25 15:18:13"
4690;376;"Kotlin";"class Solution {
    fun myAtoi(str: String): Int {
 
    }
}";"";"2020-03-25 15:18:13"
4691;376;"Python";"class Solution(object):
    def myAtoi(self, str):
        """"""
        :type str: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:13"
4692;377;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int MaxSumBST(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:13"
4693;377;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int maxSumBST(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:13"
4694;377;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn max_sum_bst(root: 
Option<Rc<RefCell<TreeNode>>>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:13"
4695;377;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int maxSumBST(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:13"
4696;377;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def maxSumBST(root: TreeNode): Int = {
 
    }
}";"";"2020-03-25 15:18:13"
4697;377;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func maxSumBST(root *TreeNode) int {
 
}";"";"2020-03-25 15:18:13"
4698;377;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun maxSumBST(root: TreeNode?): Int {
 
    }
}";"";"2020-03-25 15:18:13"
4699;377;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def maxSumBST(self, root: TreeNode) -> int:";"";"2020-03-25 15:18:13"
4700;377;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var maxSumBST = function(root) {
 
};";"";"2020-03-25 15:18:13"
4701;377;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer
     */
    function maxSumBST($root) {
 
    }
}";"";"2020-03-25 15:18:13"
4702;377;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func maxSumBST(_ root: TreeNode?) -> Int {
        
    }
}";"";"2020-03-25 15:18:13"
4703;377;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer}
def max_sum_bst(root)
 
end";"";"2020-03-25 15:18:13"
4704;377;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def maxSumBST(self, root):
        """"""
        :type root: TreeNode
        :rtype: int
        """"""";"";"2020-03-25 15:18:13"
4705;378;"C#";"public class MedianFinder {
 
    /** initialize your data structure here. */
    public MedianFinder() {
 
    }
    
    public void AddNum(int num) {
 
    }
    
    public double FindMedian() {
 
    }
}
 
/**
 * Your MedianFinder object will be instantiated 
and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.AddNum(num);
 * double param_2 = obj.FindMedian();
 */";"";"2020-03-25 15:18:13"
4706;378;"Java";"class MedianFinder {
 
    /** initialize your data structure here. */
    public MedianFinder() {
 
    }
    
    public void addNum(int num) {
 
    }
    
    public double findMedian() {
 
    }
}
 
/**
 * Your MedianFinder object will be instantiated 
and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */";"";"2020-03-25 15:18:13"
4707;378;"Rust";"struct MedianFinder {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl MedianFinder {
 
    /** initialize your data structure here. */
    fn new() -> Self {
 
    }
    
    fn add_num(&self, num: i32) {
 
    }
    
    fn find_median(&self) -> f64 {
 
    }
}";"";"2020-03-25 15:18:13"
4708;378;"C";"typedef struct {
 
} MedianFinder;
 
/** initialize your data structure here. */
 
MedianFinder* medianFinderCreate() {
 
}
 
void medianFinderAddNum(MedianFinder* obj, int num) 
{
 
}
 
double medianFinderFindMedian(MedianFinder* obj) {
 
}
 
void medianFinderFree(MedianFinder* obj) {
 
}
 
/**
 * Your MedianFinder struct will be instantiated 
and called as such:";"";"2020-03-25 15:18:13"
4709;378;"Scala";"class MedianFinder() {
 
    /** initialize your data structure here. */
 
 
    def addNum(num: Int) {
 
    }
 
    def findMedian(): Double = {
 
    }
 
}
 
/**
 * Your MedianFinder object will be instantiated 
and called as such:
 * var obj = new MedianFinder()
 * obj.addNum(num)
 * var param_2 = obj.findMedian()
 */";"";"2020-03-25 15:18:13"
4710;378;"Go";"type MedianFinder struct {
 
}
 
 
/** initialize your data structure here. */
func Constructor() MedianFinder {
 
}
 
 
func (this *MedianFinder) AddNum(num int)  {
 
}
 
 
func (this *MedianFinder) FindMedian() float64 {
 
}
 
 
/**
 * Your MedianFinder object will be instantiated 
and called as such:
 * obj := Constructor();
 * obj.AddNum(num);";"";"2020-03-25 15:18:13"
4711;378;"Kotlin";"class MedianFinder() {
 
    /** initialize your data structure here. */
 
 
    fun addNum(num: Int) {
 
    }
 
    fun findMedian(): Double {
 
    }
 
}
 
/**
 * Your MedianFinder object will be instantiated 
and called as such:
 * var obj = MedianFinder()
 * obj.addNum(num)
 * var param_2 = obj.findMedian()
 */";"";"2020-03-25 15:18:13"
4712;378;"Python3";"class MedianFinder:
 
    def __init__(self):
        """"""
        initialize your data structure here.
        """"""
 
 
    def addNum(self, num: int) -> None:
 
 
    def findMedian(self) -> float:
 
 
 
# Your MedianFinder object will be instantiated and 
called as such:
# obj = MedianFinder()
# obj.addNum(num)
# param_2 = obj.findMedian()";"";"2020-03-25 15:18:13"
4713;378;"JavaScript";"/**
 * initialize your data structure here.
 */
var MedianFinder = function() {
 
};
 
/** 
 * @param {number} num
 * @return {void}
 */
MedianFinder.prototype.addNum = function(num) {
 
};
 
/**
 * @return {number}
 */
MedianFinder.prototype.findMedian = function() {
 
};
 
/**
 * Your MedianFinder object will be instantiated 
and called as such:
 * var obj = new MedianFinder()";"";"2020-03-25 15:18:13"
4714;378;"PHP";"class MedianFinder {
    /**
     * initialize your data structure here.
     */
    function __construct() {
 
    }
 
    /**
     * @param Integer $num
     * @return NULL
     */
    function addNum($num) {
 
    }
 
    /**
     * @return Float
     */
    function findMedian() {
 
    }
}
 
/**
 * Your MedianFinder object will be instantiated ";"";"2020-03-25 15:18:13"
4715;378;"Swift";"class MedianFinder {
 
    /** initialize your data structure here. */
    init() {
 
    }
    
    func addNum(_ num: Int) {
 
    }
    
    func findMedian() -> Double {
 
    }
}
 
/**
 * Your MedianFinder object will be instantiated 
and called as such:
 * let obj = MedianFinder()
 * obj.addNum(num)
 * let ret_2: Double = obj.findMedian()
 */";"";"2020-03-25 15:18:13"
4716;378;"Ruby";"class MedianFinder
 
=begin
    initialize your data structure here.
=end
    def initialize()
 
    end
 
 
=begin
    :type num: Integer
    :rtype: Void
=end
    def add_num(num)
 
    end
 
 
=begin
    :rtype: Float
=end
    def find_median()
 
    end
 ";"";"2020-03-25 15:18:13"
4717;378;"Python";"class MedianFinder(object):
 
    def __init__(self):
        """"""
        initialize your data structure here.
        """"""
 
 
    def addNum(self, num):
        """"""
        :type num: int
        :rtype: None
        """"""
 
 
    def findMedian(self):
        """"""
        :rtype: float
        """"""
 
 
 
# Your MedianFinder object will be instantiated and 
called as such:
# obj = MedianFinder()
# obj.addNum(num)";"";"2020-03-25 15:18:13"
4718;379;"C#";"public class Solution {
    public string ReverseWords(string s) {
 
    }
}";"";"2020-03-25 15:18:13"
4719;379;"Java";"class Solution {
    public String reverseWords(String s) {
 
    }
}";"";"2020-03-25 15:18:13"
4720;379;"C";"char * reverseWords(char * s){
 
}";"";"2020-03-25 15:18:13"
4721;379;"Rust";"impl Solution {
    pub fn reverse_words(s: String) -> String {
 
    }
}";"";"2020-03-25 15:18:13"
4722;379;"Scala";"object Solution {
    def reverseWords(s: String): String = {
 
    }
}";"";"2020-03-25 15:18:13"
4723;379;"Go";"func reverseWords(s string) string {
 
}";"";"2020-03-25 15:18:13"
4724;379;"Kotlin";"class Solution {
    fun reverseWords(s: String): String {
 
    }
}";"";"2020-03-25 15:18:13"
4725;379;"Python3";"class Solution:
    def reverseWords(self, s: str) -> str:";"";"2020-03-25 15:18:13"
4726;379;"JavaScript";"/**
 * @param {string} s
 * @return {string}
 */
var reverseWords = function(s) {
 
};";"";"2020-03-25 15:18:13"
4727;379;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return String
     */
    function reverseWords($s) {
 
    }
}";"";"2020-03-25 15:18:13"
4728;379;"Swift";"class Solution {
    func reverseWords(_ s: String) -> String {
 
    }
}";"";"2020-03-25 15:18:13"
4729;379;"Ruby";"# @param {String} s
# @return {String}
def reverse_words(s)
 
end";"";"2020-03-25 15:18:13"
4730;379;"Python";"class Solution(object):
    def reverseWords(self, s):
        """"""
        :type s: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:13"
4731;380;"C#";"public class Solution {
    public double[] Intersection(int[] start1, int[]
 end1, int[] start2, int[] end2) {
 
    }
}";"";"2020-03-25 15:18:13"
4732;380;"Java";"class Solution {
    public double[] intersection(int[] start1, int[]
 end1, int[] start2, int[] end2) {
 
    }
}";"";"2020-03-25 15:18:13"
4733;380;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
double* intersection(int* start1, int start1Size, 
int* end1, int end1Size, int* start2, int 
start2Size, int* end2, int end2Size, int* 
returnSize){
 
}";"";"2020-03-25 15:18:13"
4734;380;"Rust";"impl Solution {
    pub fn intersection(start1: Vec<i32>, end1: 
Vec<i32>, start2: Vec<i32>, end2: Vec<i32>) -> 
Vec<f64> {
 
    }
}";"";"2020-03-25 15:18:13"
4735;380;"Scala";"object Solution {
    def intersection(start1: Array[Int], end1: Array
[Int], start2: Array[Int], end2: Array[Int]): Array
[Double] = {
 
    }
}";"";"2020-03-25 15:18:13"
4736;380;"Go";"func intersection(start1 []int, end1 []int, start2 
[]int, end2 []int) []float64 {
 
}";"";"2020-03-25 15:18:13"
4737;380;"Kotlin";"class Solution {
    fun intersection(start1: IntArray, end1: 
IntArray, start2: IntArray, end2: IntArray): 
DoubleArray {
 
    }
}";"";"2020-03-25 15:18:13"
4738;380;"Python3";"class Solution:
    def intersection(self, start1: List[int], end1: 
List[int], start2: List[int], end2: List[int]) -> 
List[float]:";"";"2020-03-25 15:18:13"
4739;380;"JavaScript";"/**
 * @param {number[]} start1
 * @param {number[]} end1
 * @param {number[]} start2
 * @param {number[]} end2
 * @return {number[]}
 */
var intersection = function(start1, end1, start2, 
end2) {
 
};";"";"2020-03-25 15:18:13"
4740;380;"PHP";"class Solution {
 
    /**
     * @param Integer[] $start1
     * @param Integer[] $end1
     * @param Integer[] $start2
     * @param Integer[] $end2
     * @return Float[]
     */
    function intersection($start1, $end1, $start2, 
$end2) {
 
    }
}";"";"2020-03-25 15:18:13"
4741;380;"Swift";"class Solution {
    func intersection(_ start1: [Int], _ end1: [Int]
, _ start2: [Int], _ end2: [Int]) -> [Double] {
 
    }
}";"";"2020-03-25 15:18:13"
4742;380;"Ruby";"# @param {Integer[]} start1
# @param {Integer[]} end1
# @param {Integer[]} start2
# @param {Integer[]} end2
# @return {Float[]}
def intersection(start1, end1, start2, end2)
 
end";"";"2020-03-25 15:18:13"
4743;380;"Python";"class Solution(object):
    def intersection(self, start1, end1, start2, 
end2):
        """"""
        :type start1: List[int]
        :type end1: List[int]
        :type start2: List[int]
        :type end2: List[int]
        :rtype: List[float]
        """"""";"";"2020-03-25 15:18:13"
4744;381;"C#";"public class Solution {
    public int[][] DiagonalSort(int[][] mat) {
        
    }
}";"";"2020-03-25 15:18:13"
4745;381;"Java";"class Solution {
    public int[][] diagonalSort(int[][] mat) {
 
    }
}";"";"2020-03-25 15:18:13"
4746;381;"Rust";"impl Solution {
    pub fn diagonal_sort(mat: Vec<Vec<i32>>) -> 
Vec<Vec<i32>> {
 
    }
}";"";"2020-03-25 15:18:13"
4747;381;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** diagonalSort(int** mat, int matSize, int* 
matColSize, int* returnSize, int** 
returnColumnSizes){
 
}";"";"2020-03-25 15:18:13"
4748;381;"Scala";"object Solution {
    def diagonalSort(mat: Array[Array[Int]]): Array
[Array[Int]] = {
 
    }
}";"";"2020-03-25 15:18:13"
4749;381;"Go";"func diagonalSort(mat [][]int) [][]int {
 
}";"";"2020-03-25 15:18:13"
4750;381;"Kotlin";"class Solution {
    fun diagonalSort(mat: Array<IntArray>): 
Array<IntArray> {
 
    }
}";"";"2020-03-25 15:18:13"
4751;381;"Python3";"class Solution:
    def diagonalSort(self, mat: List[List[int]]) -> 
List[List[int]]:";"";"2020-03-25 15:18:13"
4752;381;"JavaScript";"/**
 * @param {number[][]} mat
 * @return {number[][]}
 */
var diagonalSort = function(mat) {
    
};";"";"2020-03-25 15:18:13"
4753;381;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $mat
     * @return Integer[][]
     */
    function diagonalSort($mat) {
 
    }
}";"";"2020-03-25 15:18:13"
4754;381;"Swift";"class Solution {
    func diagonalSort(_ mat: [[Int]]) -> [[Int]] {
 
    }
}";"";"2020-03-25 15:18:13"
4755;381;"Ruby";"# @param {Integer[][]} mat
# @return {Integer[][]}
def diagonal_sort(mat)
    
end";"";"2020-03-25 15:18:13"
4756;381;"Python";"class Solution(object):
    def diagonalSort(self, mat):
        """"""
        :type mat: List[List[int]]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:13"
4757;382;"C#";"public class Solution {
    public IList<string> AddOperators(string num, 
int target) {
 
    }
}";"";"2020-03-25 15:18:13"
4758;382;"Java";"class Solution {
    public List<String> addOperators(String num, 
int target) {
 
    }
}";"";"2020-03-25 15:18:13"
4759;382;"Rust";"impl Solution {
    pub fn add_operators(num: String, target: i32) 
-> Vec<String> {
 
    }
}";"";"2020-03-25 15:18:13"
4760;382;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** addOperators(char * num, int target, int* 
returnSize){
 
}";"";"2020-03-25 15:18:13"
4761;382;"Scala";"object Solution {
    def addOperators(num: String, target: Int): List
[String] = {
 
    }
}";"";"2020-03-25 15:18:13"
4762;382;"Go";"func addOperators(num string, target int) []string {
 
}";"";"2020-03-25 15:18:13"
4763;382;"Kotlin";"class Solution {
    fun addOperators(num: String, target: Int): 
List<String> {
 
    }
}";"";"2020-03-25 15:18:13"
4764;382;"Python3";"class Solution:
    def addOperators(self, num: str, target: int) 
-> List[str]:";"";"2020-03-25 15:18:13"
4765;382;"JavaScript";"/**
 * @param {string} num
 * @param {number} target
 * @return {string[]}
 */
var addOperators = function(num, target) {
 
};";"";"2020-03-25 15:18:13"
4766;382;"PHP";"class Solution {";"";"2020-03-25 15:18:13"
4767;382;"Swift";"class Solution {
    func addOperators(_ num: String, _ target: Int) 
-> [String] {
 
    }
}";"";"2020-03-25 15:18:13"
4768;382;"Ruby";"# @param {String} num
# @param {Integer} target
# @return {String[]}
def add_operators(num, target)
 
end";"";"2020-03-25 15:18:13"
4769;382;"Python";"class Solution(object):
    def addOperators(self, num, target):
        """"""
        :type num: str
        :type target: int
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:13"
4770;383;"C#";"public class Solution {
    public int ConsecutiveNumbersSum(int N) {
 
    }
}";"";"2020-03-25 15:18:13"
4771;383;"Java";"class Solution {
    public int consecutiveNumbersSum(int N) {
 
    }
}";"";"2020-03-25 15:18:13"
4772;383;"Rust";"impl Solution {
    pub fn consecutive_numbers_sum(n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:13"
4773;383;"C";"int consecutiveNumbersSum(int N){
 
}";"";"2020-03-25 15:18:13"
4774;383;"Scala";"object Solution {
    def consecutiveNumbersSum(N: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:13"
4775;383;"Go";"func consecutiveNumbersSum(N int) int {
 
}";"";"2020-03-25 15:18:13"
4776;383;"Kotlin";"class Solution {
    fun consecutiveNumbersSum(N: Int): Int {
 
    }
}";"";"2020-03-25 15:18:13"
4777;383;"Python3";"class Solution:
    def consecutiveNumbersSum(self, N: int) -> int:";"";"2020-03-25 15:18:13"
4778;383;"JavaScript";"/**
 * @param {number} N
 * @return {number}
 */
var consecutiveNumbersSum = function(N) {
 
};";"";"2020-03-25 15:18:13"
4779;383;"PHP";"class Solution {
 
    /**
     * @param Integer $N
     * @return Integer
     */
    function consecutiveNumbersSum($N) {
        
    }
}";"";"2020-03-25 15:18:13"
4780;383;"Swift";"class Solution {
    func consecutiveNumbersSum(_ N: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:13"
4781;383;"Ruby";"# @param {Integer} n
# @return {Integer}
def consecutive_numbers_sum(n)
 
end";"";"2020-03-25 15:18:13"
4782;383;"Python";"class Solution(object):
    def consecutiveNumbersSum(self, N):
        """"""
        :type N: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:13"
4783;384;"C#";"public class Solution {
    public bool CanPartition(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:13"
4784;384;"Java";"class Solution {
    public boolean canPartition(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:13"
4785;384;"Rust";"impl Solution {
    pub fn can_partition(nums: Vec<i32>) -> bool {
        
    }
}";"";"2020-03-25 15:18:13"
4786;384;"C";"bool canPartition(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:13"
4787;384;"Scala";"object Solution {
    def canPartition(nums: Array[Int]): Boolean = {
 
    }
}";"";"2020-03-25 15:18:13"
4788;384;"Go";"func canPartition(nums []int) bool {
 
}";"";"2020-03-25 15:18:13"
4789;384;"Kotlin";"class Solution {
    fun canPartition(nums: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:13"
4790;384;"Python3";"class Solution:
    def canPartition(self, nums: List[int]) -> bool:";"";"2020-03-25 15:18:13"
4791;384;"JavaScript";"/**
 * @param {number[]} nums
 * @return {boolean}
 */
var canPartition = function(nums) {
 
};";"";"2020-03-25 15:18:13"
4792;384;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Boolean
     */
    function canPartition($nums) {
        
    }
}";"";"2020-03-25 15:18:13"
4793;384;"Swift";"class Solution {
    func canPartition(_ nums: [Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:13"
4794;384;"Ruby";"# @param {Integer[]} nums
# @return {Boolean}
def can_partition(nums)
 
end";"";"2020-03-25 15:18:13"
4795;384;"Python";"class Solution(object):
    def canPartition(self, nums):
        """"""
        :type nums: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:13"
4796;385;"C#";"public class Solution {
    public bool CanConstruct(string ransomNote, 
string magazine) {
 
    }
}";"";"2020-03-25 15:18:13"
4797;385;"Java";"class Solution {
    public boolean canConstruct(String ransomNote, 
String magazine) {
 
    }
}";"";"2020-03-25 15:18:13"
4798;385;"C";"bool canConstruct(char * ransomNote, char * 
magazine){
 
}";"";"2020-03-25 15:18:13"
4799;385;"Rust";"impl Solution {
    pub fn can_construct(ransom_note: String, 
magazine: String) -> bool {
        
    }
}";"";"2020-03-25 15:18:13"
4800;385;"Scala";"object Solution {
    def canConstruct(ransomNote: String, magazine: 
String): Boolean = {
 
    }
}";"";"2020-03-25 15:18:13"
4801;385;"Go";"func canConstruct(ransomNote string, magazine 
string) bool {
 
}";"";"2020-03-25 15:18:13"
4802;385;"Kotlin";"class Solution {
    fun canConstruct(ransomNote: String, magazine: 
String): Boolean {
 
    }
}";"";"2020-03-25 15:18:13"
4803;385;"Python3";"class Solution:
    def canConstruct(self, ransomNote: str, 
magazine: str) -> bool:";"";"2020-03-25 15:18:13"
4804;385;"JavaScript";"/**
 * @param {string} ransomNote
 * @param {string} magazine
 * @return {boolean}
 */
var canConstruct = function(ransomNote, magazine) {
 
};";"";"2020-03-25 15:18:13"
4805;385;"PHP";"class Solution {
 
    /**
     * @param String $ransomNote
     * @param String $magazine
     * @return Boolean
     */
    function canConstruct($ransomNote, $magazine) {
        
    }
}";"";"2020-03-25 15:18:13"
4806;385;"Swift";"class Solution {
    func canConstruct(_ ransomNote: String, _ 
magazine: String) -> Bool {
        
    }
}";"";"2020-03-25 15:18:13"
4807;385;"Ruby";"# @param {String} ransom_note
# @param {String} magazine
# @return {Boolean}
def can_construct(ransom_note, magazine)
 
end";"";"2020-03-25 15:18:13"
4808;385;"Python";"class Solution(object):
    def canConstruct(self, ransomNote, magazine):
        """"""
        :type ransomNote: str
        :type magazine: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:13"
4809;386;"C#";"public class Solution {
    public int LongestOnes(int[] A, int K) {
 
    }
}";"";"2020-03-25 15:18:13"
4810;386;"Java";"class Solution {
    public int longestOnes(int[] A, int K) {
 
    }
}";"";"2020-03-25 15:18:13"
4811;386;"C";"int longestOnes(int* A, int ASize, int K){
 
}";"";"2020-03-25 15:18:13"
4812;386;"Rust";"impl Solution {
    pub fn longest_ones(a: Vec<i32>, k: i32) -> i32 
{
        
    }
}";"";"2020-03-25 15:18:13"
4813;386;"Scala";"object Solution {
    def longestOnes(A: Array[Int], K: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:13"
4814;386;"Go";"func longestOnes(A []int, K int) int {
 
}";"";"2020-03-25 15:18:13"
4815;386;"Kotlin";"class Solution {
    fun longestOnes(A: IntArray, K: Int): Int {
 
    }
}";"";"2020-03-25 15:18:13"
4816;386;"Python3";"class Solution:
    def longestOnes(self, A: List[int], K: int) -> 
int:";"";"2020-03-25 15:18:13"
4817;386;"JavaScript";"/**
 * @param {number[]} A
 * @param {number} K
 * @return {number}
 */
var longestOnes = function(A, K) {
 
};";"";"2020-03-25 15:18:13"
4818;386;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @param Integer $K
     * @return Integer
     */
    function longestOnes($A, $K) {
        
    }
}";"";"2020-03-25 15:18:13"
4819;386;"Swift";"class Solution {
    func longestOnes(_ A: [Int], _ K: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:13"
4820;386;"Ruby";"# @param {Integer[]} a";"";"2020-03-25 15:18:13"
4821;386;"Python";"class Solution(object):
    def longestOnes(self, A, K):
        """"""
        :type A: List[int]
        :type K: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:13"
4822;387;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int SumEvenGrandparent(TreeNode root) {
        
    }
}";"";"2020-03-25 15:18:13"
4823;387;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int sumEvenGrandparent(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:13"
4824;387;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int sumEvenGrandparent(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:13"
4825;387;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn sum_even_grandparent(root: 
Option<Rc<RefCell<TreeNode>>>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:13"
4826;387;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def sumEvenGrandparent(root: TreeNode): Int = {
 
    }
}";"";"2020-03-25 15:18:13"
4827;387;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func sumEvenGrandparent(root *TreeNode) int {
 
}";"";"2020-03-25 15:18:13"
4828;387;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun sumEvenGrandparent(root: TreeNode?): Int {
 
    }
}";"";"2020-03-25 15:18:13"
4829;387;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def sumEvenGrandparent(self, root: TreeNode) -> 
int:";"";"2020-03-25 15:18:13"
4830;387;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var sumEvenGrandparent = function(root) {
    
};";"";"2020-03-25 15:18:13"
4831;387;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer
     */
    function sumEvenGrandparent($root) {
 
    }
}";"";"2020-03-25 15:18:13"
4832;387;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func sumEvenGrandparent(_ root: TreeNode?) -> 
Int {
 
    }
}";"";"2020-03-25 15:18:13"
4833;387;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer}
def sum_even_grandparent(root)
    
end";"";"2020-03-25 15:18:13"
4834;387;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def sumEvenGrandparent(self, root):
        """"""
        :type root: TreeNode
        :rtype: int
        """"""";"";"2020-03-25 15:18:13"
4835;388;"C#";"public class Solution {
    public bool FindWhetherExistsPath(int n, int[][]
 graph, int start, int target) {
 
    }
}";"";"2020-03-25 15:18:13"
4836;388;"Java";"class Solution {
    public boolean findWhetherExistsPath(int n, int
[][] graph, int start, int target) {
 
    }
}";"";"2020-03-25 15:18:13"
4837;388;"Rust";"impl Solution {
    pub fn find_whether_exists_path(n: i32, graph: 
Vec<Vec<i32>>, start: i32, target: i32) -> bool {
 
    }
}";"";"2020-03-25 15:18:13"
4838;388;"C";"bool findWhetherExistsPath(int n, int** graph, int 
graphSize, int* graphColSize, int start, int target)
{
 
}";"";"2020-03-25 15:18:13"
4839;388;"Scala";"object Solution {
    def findWhetherExistsPath(n: Int, graph: Array
[Array[Int]], start: Int, target: Int): Boolean = {
 
    }
}";"";"2020-03-25 15:18:13"
4840;388;"Go";"func findWhetherExistsPath(n int, graph [][]int, 
start int, target int) bool {
 
}";"";"2020-03-25 15:18:13"
4841;388;"Kotlin";"class Solution {
    fun findWhetherExistsPath(n: Int, graph: 
Array<IntArray>, start: Int, target: Int): Boolean {
 
    }
}";"";"2020-03-25 15:18:13"
4842;388;"Python3";"class Solution:
    def findWhetherExistsPath(self, n: int, graph: 
List[List[int]], start: int, target: int) -> bool:";"";"2020-03-25 15:18:13"
4843;388;"JavaScript";"/**
 * @param {number} n
 * @param {number[][]} graph
 * @param {number} start
 * @param {number} target
 * @return {boolean}
 */
var findWhetherExistsPath = function(n, graph, 
start, target) {
 
};";"";"2020-03-25 15:18:13"
4844;388;"PHP";"class Solution {";"";"2020-03-25 15:18:13"
4845;388;"Swift";"class Solution {
    func findWhetherExistsPath(_ n: Int, _ graph: [
[Int]], _ start: Int, _ target: Int) -> Bool {
 
    }
}";"";"2020-03-25 15:18:13"
4846;388;"Ruby";"# @param {Integer} n
# @param {Integer[][]} graph
# @param {Integer} start
# @param {Integer} target
# @return {Boolean}
def find_whether_exists_path(n, graph, start, 
target)
 
end";"";"2020-03-25 15:18:13"
4847;388;"Python";"class Solution(object):
    def findWhetherExistsPath(self, n, graph, start,
 target):
        """"""
        :type n: int
        :type graph: List[List[int]]
        :type start: int
        :type target: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:13"
4848;389;"C#";"public class Solution {
    public int LargestComponentSize(int[] A) {
 
    }
}";"";"2020-03-25 15:18:13"
4849;389;"Java";"class Solution {
    public int largestComponentSize(int[] A) {
 
    }
}";"";"2020-03-25 15:18:13"
4850;389;"Rust";"impl Solution {
    pub fn largest_component_size(a: Vec<i32>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:13"
4851;389;"C";"int largestComponentSize(int* A, int ASize){
 
}";"";"2020-03-25 15:18:13"
4852;389;"Scala";"object Solution {
    def largestComponentSize(A: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:13"
4853;389;"Go";"func largestComponentSize(A []int) int {
 
}";"";"2020-03-25 15:18:13"
4854;389;"Kotlin";"class Solution {
    fun largestComponentSize(A: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:13"
4855;389;"Python3";"class Solution:
    def largestComponentSize(self, A: List[int]) -> 
int:";"";"2020-03-25 15:18:13"
4856;389;"JavaScript";"/**
 * @param {number[]} A
 * @return {number}
 */
var largestComponentSize = function(A) {
 
};";"";"2020-03-25 15:18:13"
4857;389;"PHP";"class Solution {";"";"2020-03-25 15:18:13"
4858;389;"Swift";"class Solution {
    func largestComponentSize(_ A: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:13"
4859;389;"Ruby";"# @param {Integer[]} a
# @return {Integer}
def largest_component_size(a)
 
end";"";"2020-03-25 15:18:13"
4860;389;"Python";"class Solution(object):
    def largestComponentSize(self, A):
        """"""
        :type A: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:13"
4861;390;"C#";"public class Solution {
    public int MaxSatisfied(int[] customers, int[] 
grumpy, int X) {
 
    }
}";"";"2020-03-25 15:18:14"
4862;390;"Java";"class Solution {
    public int maxSatisfied(int[] customers, int[] 
grumpy, int X) {
 
    }
}";"";"2020-03-25 15:18:14"
4863;390;"C";"int maxSatisfied(int* customers, int customersSize, 
int* grumpy, int grumpySize, int X){
 
}";"";"2020-03-25 15:18:14"
4864;390;"Rust";"impl Solution {
    pub fn max_satisfied(customers: Vec<i32>, 
grumpy: Vec<i32>, x: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:14"
4865;390;"Scala";"object Solution {
    def maxSatisfied(customers: Array[Int], grumpy: 
Array[Int], X: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:14"
4866;390;"Go";"func maxSatisfied(customers []int, grumpy []int, X 
int) int {
 
}";"";"2020-03-25 15:18:14"
4867;390;"Kotlin";"class Solution {
    fun maxSatisfied(customers: IntArray, grumpy: 
IntArray, X: Int): Int {
 
    }
}";"";"2020-03-25 15:18:14"
4868;390;"Python3";"class Solution:
    def maxSatisfied(self, customers: List[int], 
grumpy: List[int], X: int) -> int:";"";"2020-03-25 15:18:14"
4869;390;"JavaScript";"/**
 * @param {number[]} customers
 * @param {number[]} grumpy
 * @param {number} X
 * @return {number}
 */
var maxSatisfied = function(customers, grumpy, X) {
 
};";"";"2020-03-25 15:18:14"
4870;390;"PHP";"class Solution {
 
    /**
     * @param Integer[] $customers
     * @param Integer[] $grumpy
     * @param Integer $X
     * @return Integer
     */
    function maxSatisfied($customers, $grumpy, $X) {
        
    }
}";"";"2020-03-25 15:18:14"
4871;390;"Swift";"class Solution {
    func maxSatisfied(_ customers: [Int], _ grumpy: 
[Int], _ X: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:14"
4872;390;"Ruby";"# @param {Integer[]} customers";"";"2020-03-25 15:18:14"
4873;390;"Python";"class Solution(object):
    def maxSatisfied(self, customers, grumpy, X):
        """"""
        :type customers: List[int]
        :type grumpy: List[int]
        :type X: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:14"
4874;391;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<int> PreorderTraversal(TreeNode 
root) {
 
    }
}";"";"2020-03-25 15:18:14"
4875;391;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode 
root) {
 
    }
}";"";"2020-03-25 15:18:14"
4876;391;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* preorderTraversal(struct TreeNode* root, int* 
returnSize){
 
}";"";"2020-03-25 15:18:14"
4877;391;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn preorder_traversal(root: 
Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:14"
4878;391;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def preorderTraversal(root: TreeNode): List[Int]
 = {
 
    }
}";"";"2020-03-25 15:18:14"
4879;391;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func preorderTraversal(root *TreeNode) []int {
 
}";"";"2020-03-25 15:18:14"
4880;391;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun preorderTraversal(root: TreeNode?): 
List<Int> {
 
    }
}";"";"2020-03-25 15:18:14"
4881;391;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def preorderTraversal(self, root: TreeNode) -> 
List[int]:";"";"2020-03-25 15:18:14"
4882;391;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[]}
 */
var preorderTraversal = function(root) {
 
};";"";"2020-03-25 15:18:14"
4883;391;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer[]
     */
    function preorderTraversal($root) {
 
    }
}";"";"2020-03-25 15:18:14"
4884;391;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func preorderTraversal(_ root: TreeNode?) -> 
[Int] {
 
    }
}";"";"2020-03-25 15:18:14"
4885;391;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:14"
4886;391;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def preorderTraversal(self, root):
        """"""
        :type root: TreeNode
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:14"
4887;392;"C#";"public class Solution {
    public string NumberToWords(int num) {
 
    }
}";"";"2020-03-25 15:18:14"
4888;392;"Java";"class Solution {
    public String numberToWords(int num) {
 
    }
}";"";"2020-03-25 15:18:14"
4889;392;"Rust";"impl Solution {
    pub fn number_to_words(num: i32) -> String {
 
    }
}";"";"2020-03-25 15:18:14"
4890;392;"C";"char * numberToWords(int num){
 
}";"";"2020-03-25 15:18:14"
4891;392;"Scala";"object Solution {
    def numberToWords(num: Int): String = {
 
    }
}";"";"2020-03-25 15:18:14"
4892;392;"Go";"func numberToWords(num int) string {
 
}";"";"2020-03-25 15:18:14"
4893;392;"Kotlin";"class Solution {
    fun numberToWords(num: Int): String {
 
    }
}";"";"2020-03-25 15:18:14"
4894;392;"Python3";"class Solution:
    def numberToWords(self, num: int) -> str:";"";"2020-03-25 15:18:14"
4895;392;"JavaScript";"/**
 * @param {number} num
 * @return {string}
 */
var numberToWords = function(num) {
 
};";"";"2020-03-25 15:18:14"
4896;392;"PHP";"class Solution {
 
    /**
     * @param Integer $num
     * @return String
     */
    function numberToWords($num) {
 
    }
}";"";"2020-03-25 15:18:14"
4897;392;"Swift";"class Solution {
    func numberToWords(_ num: Int) -> String {
 
    }
}";"";"2020-03-25 15:18:14"
4898;392;"Ruby";"# @param {Integer} num
# @return {String}
def number_to_words(num)
 
end";"";"2020-03-25 15:18:14"
4899;392;"Python";"class Solution(object):
    def numberToWords(self, num):
        """"""
        :type num: int
        :rtype: str
        """"""";"";"2020-03-25 15:18:14"
4900;393;"C#";"public class Solution {
    public bool CheckStraightLine(int[][] 
coordinates) {
 
    }
}";"";"2020-03-25 15:18:14"
4901;393;"Java";"class Solution {
    public boolean checkStraightLine(int[][] 
coordinates) {
 
    }
}";"";"2020-03-25 15:18:14"
4902;393;"Rust";"impl Solution {
    pub fn check_straight_line(coordinates: 
Vec<Vec<i32>>) -> bool {
 
    }
}";"";"2020-03-25 15:18:14"
4903;393;"C";"bool checkStraightLine(int** coordinates, int 
coordinatesSize, int* coordinatesColSize){
 
}";"";"2020-03-25 15:18:14"
4904;393;"Scala";"object Solution {
    def checkStraightLine(coordinates: Array[Array
[Int]]): Boolean = {
 
    }
}";"";"2020-03-25 15:18:14"
4905;393;"Go";"func checkStraightLine(coordinates [][]int) bool {
 
}";"";"2020-03-25 15:18:14"
4906;393;"Kotlin";"class Solution {
    fun checkStraightLine(coordinates: 
Array<IntArray>): Boolean {
 
    }
}";"";"2020-03-25 15:18:14"
4907;393;"Python3";"class Solution:
    def checkStraightLine(self, coordinates: List
[List[int]]) -> bool:";"";"2020-03-25 15:18:14"
4908;393;"JavaScript";"/**
 * @param {number[][]} coordinates
 * @return {boolean}
 */
var checkStraightLine = function(coordinates) {
 
};";"";"2020-03-25 15:18:14"
4909;393;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $coordinates
     * @return Boolean
     */
    function checkStraightLine($coordinates) {
 
    }
}";"";"2020-03-25 15:18:14"
4910;393;"Swift";"class Solution {
    func checkStraightLine(_ coordinates: [[Int]]) 
-> Bool {
 
    }
}";"";"2020-03-25 15:18:14"
4911;393;"Ruby";"# @param {Integer[][]} coordinates
# @return {Boolean}
def check_straight_line(coordinates)
 
end";"";"2020-03-25 15:18:14"
4912;393;"Python";"class Solution(object):
    def checkStraightLine(self, coordinates):
        """"""
        :type coordinates: List[List[int]]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:14"
4913;394;"C#";"public class Solution {
    public int EqualSubstring(string s, string t, 
int maxCost) {
 
    }
}";"";"2020-03-25 15:18:14"
4914;394;"Java";"class Solution {
    public int equalSubstring(String s, String t, 
int maxCost) {
 
    }
}";"";"2020-03-25 15:18:14"
4915;394;"Rust";"impl Solution {
    pub fn equal_substring(s: String, t: String, 
max_cost: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:14"
4916;394;"C";"int equalSubstring(char * s, char * t, int maxCost){
 
}";"";"2020-03-25 15:18:14"
4917;394;"Scala";"object Solution {
    def equalSubstring(s: String, t: String, 
maxCost: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:14"
4918;394;"Go";"func equalSubstring(s string, t string, maxCost int)
 int {
 
}";"";"2020-03-25 15:18:14"
4919;394;"Kotlin";"class Solution {
    fun equalSubstring(s: String, t: String, 
maxCost: Int): Int {
 
    }
}";"";"2020-03-25 15:18:14"
4920;394;"Python3";"class Solution:
    def equalSubstring(self, s: str, t: str, 
maxCost: int) -> int:";"";"2020-03-25 15:18:14"
4921;394;"JavaScript";"/**
 * @param {string} s
 * @param {string} t
 * @param {number} maxCost
 * @return {number}
 */
var equalSubstring = function(s, t, maxCost) {
 
};";"";"2020-03-25 15:18:14"
4922;394;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @param String $t
     * @param Integer $maxCost
     * @return Integer
     */
    function equalSubstring($s, $t, $maxCost) {
 
    }
}";"";"2020-03-25 15:18:14"
4923;394;"Swift";"class Solution {
    func equalSubstring(_ s: String, _ t: String, _ 
maxCost: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:14"
4924;394;"Ruby";"# @param {String} s
# @param {String} t
# @param {Integer} max_cost
# @return {Integer}
def equal_substring(s, t, max_cost)
 
end";"";"2020-03-25 15:18:14"
4925;394;"Python";"class Solution(object):
    def equalSubstring(self, s, t, maxCost):
        """"""
        :type s: str
        :type t: str
        :type maxCost: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:14"
4926;395;"C#";"public class Solution {
    public int UniquePathsIII(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:14"
4927;395;"Java";"class Solution {
    public int uniquePathsIII(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:14"
4928;395;"C";"int uniquePathsIII(int** grid, int gridSize, int* 
gridColSize){
 
}";"";"2020-03-25 15:18:14"
4929;395;"Rust";"impl Solution {
    pub fn unique_paths_iii(grid: Vec<Vec<i32>>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:14"
4930;395;"Scala";"object Solution {
    def uniquePathsIII(grid: Array[Array[Int]]): 
Int = {
 
    }
}";"";"2020-03-25 15:18:14"
4931;395;"Go";"func uniquePathsIII(grid [][]int) int {
 
}";"";"2020-03-25 15:18:14"
4932;395;"Kotlin";"class Solution {
    fun uniquePathsIII(grid: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:14"
4933;395;"Python3";"class Solution:
    def uniquePathsIII(self, grid: List[List[int]]) 
-> int:";"";"2020-03-25 15:18:14"
4934;395;"JavaScript";"/**
 * @param {number[][]} grid
 * @return {number}
 */
var uniquePathsIII = function(grid) {
 
};";"";"2020-03-25 15:18:14"
4935;395;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $grid
     * @return Integer
     */
    function uniquePathsIII($grid) {
        
    }
}";"";"2020-03-25 15:18:14"
4936;395;"Swift";"class Solution {
    func uniquePathsIII(_ grid: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:14"
4937;395;"Ruby";"# @param {Integer[][]} grid";"";"2020-03-25 15:18:14"
4938;395;"Python";"class Solution(object):
    def uniquePathsIII(self, grid):
        """"""
        :type grid: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:14"
4939;396;"C#";"public class Solution {
    public int CountSquares(int[][] matrix) {
 
    }
}";"";"2020-03-25 15:18:14"
4940;396;"Java";"class Solution {
    public int countSquares(int[][] matrix) {
 
    }
}";"";"2020-03-25 15:18:14"
4941;396;"C";"int countSquares(int** matrix, int matrixSize, int* 
matrixColSize){
 
}";"";"2020-03-25 15:18:14"
4942;396;"Rust";"impl Solution {
    pub fn count_squares(matrix: Vec<Vec<i32>>) -> 
i32 {
 
    }
}";"";"2020-03-25 15:18:14"
4943;396;"Scala";"object Solution {
    def countSquares(matrix: Array[Array[Int]]): 
Int = {
 
    }
}";"";"2020-03-25 15:18:14"
4944;396;"Go";"func countSquares(matrix [][]int) int {
 
}";"";"2020-03-25 15:18:14"
4945;396;"Kotlin";"class Solution {
    fun countSquares(matrix: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:14"
4946;396;"Python3";"class Solution:
    def countSquares(self, matrix: List[List[int]]) 
-> int:";"";"2020-03-25 15:18:14"
4947;396;"JavaScript";"/**
 * @param {number[][]} matrix
 * @return {number}
 */
var countSquares = function(matrix) {
 
};";"";"2020-03-25 15:18:14"
4948;396;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $matrix
     * @return Integer
     */
    function countSquares($matrix) {
 
    }
}";"";"2020-03-25 15:18:14"
4949;396;"Swift";"class Solution {
    func countSquares(_ matrix: [[Int]]) -> Int {
 
    }
}";"";"2020-03-25 15:18:14"
4950;396;"Ruby";"# @param {Integer[][]} matrix
# @return {Integer}
def count_squares(matrix)
 
end";"";"2020-03-25 15:18:14"
4951;396;"Python";"class Solution(object):
    def countSquares(self, matrix):
        """"""
        :type matrix: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:14"
4952;397;"C#";"public class Solution {
    public int[] GetMaxMatrix(int[][] matrix) {
 
    }
}";"";"2020-03-25 15:18:14"
4953;397;"Java";"class Solution {
    public int[] getMaxMatrix(int[][] matrix) {
 
    }
}";"";"2020-03-25 15:18:14"
4954;397;"Rust";"impl Solution {
    pub fn get_max_matrix(matrix: Vec<Vec<i32>>) -> 
Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:14"
4955;397;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* getMaxMatrix(int** matrix, int matrixSize, 
int* matrixColSize, int* returnSize){
 
}";"";"2020-03-25 15:18:14"
4956;397;"Scala";"object Solution {
    def getMaxMatrix(matrix: Array[Array[Int]]): 
Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:14"
4957;397;"Go";"func getMaxMatrix(matrix [][]int) []int {
 
}";"";"2020-03-25 15:18:14"
4958;397;"Kotlin";"class Solution {
    fun getMaxMatrix(matrix: Array<IntArray>): 
IntArray {
 
    }
}";"";"2020-03-25 15:18:14"
4959;397;"Python3";"class Solution:
    def getMaxMatrix(self, matrix: List[List[int]]) 
-> List[int]:";"";"2020-03-25 15:18:14"
4960;397;"JavaScript";"/**
 * @param {number[][]} matrix
 * @return {number[]}
 */
var getMaxMatrix = function(matrix) {
 
};";"";"2020-03-25 15:18:14"
4961;397;"PHP";"class Solution {";"";"2020-03-25 15:18:14"
4962;397;"Swift";"class Solution {
    func getMaxMatrix(_ matrix: [[Int]]) -> [Int] {
 
    }
}";"";"2020-03-25 15:18:14"
4963;397;"Ruby";"# @param {Integer[][]} matrix
# @return {Integer[]}
def get_max_matrix(matrix)
 
end";"";"2020-03-25 15:18:14"
4964;397;"Python";"class Solution(object):
    def getMaxMatrix(self, matrix):
        """"""
        :type matrix: List[List[int]]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:14"
4965;398;"C#";"public class Solution {
    public string OrderlyQueue(string S, int K) {
 
    }
}";"";"2020-03-25 15:18:14"
4966;398;"Java";"class Solution {
    public String orderlyQueue(String S, int K) {
 
    }
}";"";"2020-03-25 15:18:14"
4967;398;"C";"char * orderlyQueue(char * S, int K){
 
}";"";"2020-03-25 15:18:14"
4968;398;"Rust";"impl Solution {
    pub fn orderly_queue(s: String, k: i32) -> 
String {
        
    }
}";"";"2020-03-25 15:18:14"
4969;398;"Scala";"object Solution {
    def orderlyQueue(S: String, K: Int): String = {
 
    }
}";"";"2020-03-25 15:18:14"
4970;398;"Go";"func orderlyQueue(S string, K int) string {
 
}";"";"2020-03-25 15:18:14"
4971;398;"Kotlin";"class Solution {
    fun orderlyQueue(S: String, K: Int): String {
 
    }
}";"";"2020-03-25 15:18:14"
4972;398;"Python3";"class Solution:
    def orderlyQueue(self, S: str, K: int) -> str:";"";"2020-03-25 15:18:14"
4973;398;"JavaScript";"/**
 * @param {string} S
 * @param {number} K
 * @return {string}
 */
var orderlyQueue = function(S, K) {
 
};";"";"2020-03-25 15:18:14"
4974;398;"PHP";"class Solution {
 
    /**
     * @param String $S
     * @param Integer $K
     * @return String
     */
    function orderlyQueue($S, $K) {
        
    }
}";"";"2020-03-25 15:18:14"
4975;398;"Swift";"class Solution {
    func orderlyQueue(_ S: String, _ K: Int) -> 
String {
        
    }
}";"";"2020-03-25 15:18:14"
4976;398;"Ruby";"# @param {String} s";"";"2020-03-25 15:18:14"
4977;398;"Python";"class Solution(object):
    def orderlyQueue(self, S, K):
        """"""
        :type S: str
        :type K: int
        :rtype: str
        """"""";"";"2020-03-25 15:18:14"
4978;399;"C#";"public class Solution {
    public int StoneGameII(int[] piles) {
 
    }
}";"";"2020-03-25 15:18:14"
4979;399;"Java";"class Solution {
    public int stoneGameII(int[] piles) {
 
    }
}";"";"2020-03-25 15:18:14"
4980;399;"C";"int stoneGameII(int* piles, int pilesSize){
 
}";"";"2020-03-25 15:18:14"
4981;399;"Rust";"impl Solution {
    pub fn stone_game_ii(piles: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:14"
4982;399;"Scala";"object Solution {
    def stoneGameII(piles: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:14"
4983;399;"Go";"func stoneGameII(piles []int) int {
 
}";"";"2020-03-25 15:18:14"
4984;399;"Kotlin";"class Solution {
    fun stoneGameII(piles: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:14"
4985;399;"Python3";"class Solution:
    def stoneGameII(self, piles: List[int]) -> int:";"";"2020-03-25 15:18:14"
4986;399;"JavaScript";"/**
 * @param {number[]} piles
 * @return {number}
 */
var stoneGameII = function(piles) {
 
};";"";"2020-03-25 15:18:14"
4987;399;"PHP";"class Solution {
 
    /**
     * @param Integer[] $piles
     * @return Integer
     */
    function stoneGameII($piles) {
        
    }
}";"";"2020-03-25 15:18:14"
4988;399;"Swift";"class Solution {
    func stoneGameII(_ piles: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:14"
4989;399;"Ruby";"# @param {Integer[]} piles";"";"2020-03-25 15:18:14"
4990;399;"Python";"class Solution(object):
    def stoneGameII(self, piles):
        """"""
        :type piles: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:14"
4991;400;"C#";"public class Solution {
    public int CountCharacters(string[] words, 
string chars) {
 
    }
}";"";"2020-03-25 15:18:14"
4992;400;"Java";"class Solution {
    public int countCharacters(String[] words, 
String chars) {
 
    }
}";"";"2020-03-25 15:18:14"
4993;400;"C";"int countCharacters(char ** words, int wordsSize, 
char * chars){
 
}";"";"2020-03-25 15:18:14"
4994;400;"Rust";"impl Solution {
    pub fn count_characters(words: Vec<String>, 
chars: String) -> i32 {
        
    }
}";"";"2020-03-25 15:18:14"
4995;400;"Scala";"object Solution {
    def countCharacters(words: Array[String], 
chars: String): Int = {
 
    }
}";"";"2020-03-25 15:18:14"
4996;400;"Go";"func countCharacters(words []string, chars string) 
int {
 
}";"";"2020-03-25 15:18:14"
4997;400;"Kotlin";"class Solution {
    fun countCharacters(words: Array<String>, 
chars: String): Int {
 
    }
}";"";"2020-03-25 15:18:14"
4998;400;"Python3";"class Solution:
    def countCharacters(self, words: List[str], 
chars: str) -> int:";"";"2020-03-25 15:18:14"
4999;400;"JavaScript";"/**
 * @param {string[]} words
 * @param {string} chars
 * @return {number}
 */
var countCharacters = function(words, chars) {
 
};";"";"2020-03-25 15:18:14"
5000;400;"PHP";"class Solution {
 
    /**
     * @param String[] $words
     * @param String $chars
     * @return Integer
     */
    function countCharacters($words, $chars) {
        
    }
}";"";"2020-03-25 15:18:14"
5001;400;"Swift";"class Solution {
    func countCharacters(_ words: [String], _ 
chars: String) -> Int {
        
    }
}";"";"2020-03-25 15:18:14"
5002;400;"Ruby";"# @param {String[]} words
# @param {String} chars
# @return {Integer}
def count_characters(words, chars)
 
end";"";"2020-03-25 15:18:14"
5003;400;"Python";"class Solution(object):
    def countCharacters(self, words, chars):
        """"""
        :type words: List[str]
        :type chars: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:14"
5004;401;"C#";"public class Solution {
    public int NthMagicalNumber(int N, int A, int B)
 {
 
    }
}";"";"2020-03-25 15:18:14"
5005;401;"Java";"class Solution {
    public int nthMagicalNumber(int N, int A, int B)
 {
 
    }
}";"";"2020-03-25 15:18:14"
5006;401;"Rust";"impl Solution {
    pub fn nth_magical_number(n: i32, a: i32, b: 
i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:14"
5007;401;"C";"int nthMagicalNumber(int N, int A, int B){
 
}";"";"2020-03-25 15:18:14"
5008;401;"Scala";"object Solution {
    def nthMagicalNumber(N: Int, A: Int, B: Int): 
Int = {
 
    }
}";"";"2020-03-25 15:18:14"
5009;401;"Python3";"class Solution:
    def nthMagicalNumber(self, N: int, A: int, B: 
int) -> int:";"";"2020-03-25 15:18:14"
5010;401;"JavaScript";"/**
 * @param {number} N
 * @param {number} A
 * @param {number} B
 * @return {number}
 */
var nthMagicalNumber = function(N, A, B) {
 
};";"";"2020-03-25 15:18:14"
5011;401;"Go";"func nthMagicalNumber(N int, A int, B int) int {
 
}";"";"2020-03-25 15:18:14"
5012;401;"PHP";"class Solution {";"";"2020-03-25 15:18:14"
5013;401;"Swift";"class Solution {
    func nthMagicalNumber(_ N: Int, _ A: Int, _ B: 
Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:14"
5014;401;"Ruby";"# @param {Integer} n
# @param {Integer} a
# @param {Integer} b
# @return {Integer}
def nth_magical_number(n, a, b)
 
end";"";"2020-03-25 15:18:14"
5015;401;"Kotlin";"class Solution {
    fun nthMagicalNumber(N: Int, A: Int, B: Int): 
Int {
 
    }
}";"";"2020-03-25 15:18:14"
5016;402;"C#";"public class Solution {
    public IList<IList<int>> ShiftGrid(int[][] grid,
 int k) {
 
    }
}";"";"2020-03-25 15:18:14"
5017;402;"Java";"class Solution {
    public List<List<Integer>> shiftGrid(int[][] 
grid, int k) {
 
    }
}";"";"2020-03-25 15:18:14"
5018;402;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** shiftGrid(int** grid, int gridSize, int* 
gridColSize, int k, int* returnSize, int** 
returnColumnSizes){
 
}";"";"2020-03-25 15:18:14"
5019;402;"Rust";"impl Solution {
    pub fn shift_grid(grid: Vec<Vec<i32>>, k: i32) 
-> Vec<Vec<i32>> {
 
    }
}";"";"2020-03-25 15:18:14"
5020;402;"Scala";"object Solution {
    def shiftGrid(grid: Array[Array[Int]], k: Int): 
List[List[Int]] = {
 
    }
}";"";"2020-03-25 15:18:14"
5021;402;"Go";"func shiftGrid(grid [][]int, k int) [][]int {
 
}";"";"2020-03-25 15:18:14"
5022;402;"Kotlin";"class Solution {
    fun shiftGrid(grid: Array<IntArray>, k: Int): 
List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:14"
5023;402;"Python3";"class Solution:
    def shiftGrid(self, grid: List[List[int]], k: 
int) -> List[List[int]]:";"";"2020-03-25 15:18:14"
5024;402;"JavaScript";"/**
 * @param {number[][]} grid
 * @param {number} k
 * @return {number[][]}
 */
var shiftGrid = function(grid, k) {
 
};";"";"2020-03-25 15:18:14"
5025;402;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $grid
     * @param Integer $k
     * @return Integer[][]
     */
    function shiftGrid($grid, $k) {
 
    }
}";"";"2020-03-25 15:18:14"
5026;402;"Swift";"class Solution {
    func shiftGrid(_ grid: [[Int]], _ k: Int) -> [
[Int]] {
 
    }
}";"";"2020-03-25 15:18:14"
5027;402;"Ruby";"# @param {Integer[][]} grid
# @param {Integer} k
# @return {Integer[][]}
def shift_grid(grid, k)
 
end";"";"2020-03-25 15:18:14"
5028;402;"Python";"class Solution(object):
    def shiftGrid(self, grid, k):
        """"""
        :type grid: List[List[int]]
        :type k: int
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:14"
5029;403;"C#";"public class Solution {
    public bool CanFinish(int numCourses, int[][] 
prerequisites) {
 
    }
}";"";"2020-03-25 15:18:14"
5030;403;"Java";"class Solution {
    public boolean canFinish(int numCourses, int[][]
 prerequisites) {
 
    }
}";"";"2020-03-25 15:18:14"
5031;403;"Rust";"impl Solution {
    pub fn can_finish(num_courses: i32, 
prerequisites: Vec<Vec<i32>>) -> bool {
        
    }
}";"";"2020-03-25 15:18:14"
5032;403;"C";"bool canFinish(int numCourses, int** prerequisites, 
int prerequisitesSize, int* prerequisitesColSize){
 
}";"";"2020-03-25 15:18:14"
5033;403;"Scala";"object Solution {
    def canFinish(numCourses: Int, prerequisites: 
Array[Array[Int]]): Boolean = {
 
    }
}";"";"2020-03-25 15:18:14"
5034;403;"Go";"func canFinish(numCourses int, prerequisites [][]
int) bool {
 
}";"";"2020-03-25 15:18:14"
5035;403;"Kotlin";"class Solution {
    fun canFinish(numCourses: Int, prerequisites: 
Array<IntArray>): Boolean {
 
    }
}";"";"2020-03-25 15:18:14"
5036;403;"Python3";"class Solution:
    def canFinish(self, numCourses: int, 
prerequisites: List[List[int]]) -> bool:";"";"2020-03-25 15:18:14"
5037;403;"JavaScript";"/**
 * @param {number} numCourses
 * @param {number[][]} prerequisites
 * @return {boolean}
 */
var canFinish = function(numCourses, prerequisites) 
{
 
};";"";"2020-03-25 15:18:14"
5038;403;"PHP";"class Solution {
 
    /**
     * @param Integer $numCourses
     * @param Integer[][] $prerequisites
     * @return Boolean
     */
    function canFinish($numCourses, $prerequisites) 
{
        
    }
}";"";"2020-03-25 15:18:14"
5039;403;"Swift";"class Solution {
    func canFinish(_ numCourses: Int, _ 
prerequisites: [[Int]]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:14"
5040;403;"Ruby";"# @param {Integer} num_courses
# @param {Integer[][]} prerequisites
# @return {Boolean}
def can_finish(num_courses, prerequisites)
 
end";"";"2020-03-25 15:18:14"
5041;403;"Python";"class Solution(object):
    def canFinish(self, numCourses, prerequisites):
        """"""
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:14"
5042;404;"C#";"public class Solution {
    public bool RepeatedSubstringPattern(string s) {
 
    }
}";"";"2020-03-25 15:18:14"
5043;404;"Java";"class Solution {
    public boolean repeatedSubstringPattern(String 
s) {
 
    }
}";"";"2020-03-25 15:18:14"
5044;404;"Rust";"impl Solution {
    pub fn repeated_substring_pattern(s: String) -> 
bool {
        
    }
}";"";"2020-03-25 15:18:14"
5045;404;"C";"bool repeatedSubstringPattern(char * s){
 
}";"";"2020-03-25 15:18:14"
5046;404;"Scala";"object Solution {
    def repeatedSubstringPattern(s: String): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:14"
5047;404;"Go";"func repeatedSubstringPattern(s string) bool {
 
}";"";"2020-03-25 15:18:14"
5048;404;"Kotlin";"class Solution {
    fun repeatedSubstringPattern(s: String): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:14"
5049;404;"Python3";"class Solution:
    def repeatedSubstringPattern(self, s: str) -> 
bool:";"";"2020-03-25 15:18:14"
5050;404;"JavaScript";"/**
 * @param {string} s
 * @return {boolean}
 */
var repeatedSubstringPattern = function(s) {
 
};";"";"2020-03-25 15:18:14"
5051;404;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return Boolean
     */
    function repeatedSubstringPattern($s) {
        
    }
}";"";"2020-03-25 15:18:14"
5052;404;"Swift";"class Solution {
    func repeatedSubstringPattern(_ s: String) -> 
Bool {
        
    }
}";"";"2020-03-25 15:18:14"
5053;404;"Ruby";"# @param {String} s
# @return {Boolean}
def repeated_substring_pattern(s)
 
end";"";"2020-03-25 15:18:14"
5054;404;"Python";"class Solution(object):
    def repeatedSubstringPattern(self, s):
        """"""
        :type s: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:14"
5055;405;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int CountNodes(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:14"
5056;405;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int countNodes(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:14"
5057;405;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn count_nodes(root: 
Option<Rc<RefCell<TreeNode>>>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:14"
5058;405;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int countNodes(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:14"
5059;405;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def countNodes(root: TreeNode): Int = {
 
    }
}";"";"2020-03-25 15:18:14"
5060;405;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func countNodes(root *TreeNode) int {
 
}";"";"2020-03-25 15:18:14"
5061;405;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun countNodes(root: TreeNode?): Int {
 
    }
}";"";"2020-03-25 15:18:14"
5062;405;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def countNodes(self, root: TreeNode) -> int:";"";"2020-03-25 15:18:14"
5063;405;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var countNodes = function(root) {
 
};";"";"2020-03-25 15:18:14"
5064;405;"PHP";"/**";"";"2020-03-25 15:18:14"
5065;405;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func countNodes(_ root: TreeNode?) -> Int {
 
    }
}";"";"2020-03-25 15:18:14"
5066;405;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer}
def count_nodes(root)
 
end";"";"2020-03-25 15:18:14"
5067;405;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def countNodes(self, root):
        """"""
        :type root: TreeNode
        :rtype: int
        """"""";"";"2020-03-25 15:18:14"
5068;406;"C#";"public class Solution {
    public bool Exist(char[][] board, string word) {
 
    }
}";"";"2020-03-25 15:18:14"
5069;406;"Java";"class Solution {
    public boolean exist(char[][] board, String 
word) {
 
    }
}";"";"2020-03-25 15:18:14"
5070;406;"C";"bool exist(char** board, int boardSize, int* 
boardColSize, char * word){
 
}";"";"2020-03-25 15:18:14"
5071;406;"Rust";"impl Solution {
    pub fn exist(board: Vec<Vec<char>>, word: 
String) -> bool {
        
    }
}";"";"2020-03-25 15:18:14"
5072;406;"Scala";"object Solution {
    def exist(board: Array[Array[Char]], word: 
String): Boolean = {
 
    }
}";"";"2020-03-25 15:18:14"
5073;406;"Go";"func exist(board [][]byte, word string) bool {
 
}";"";"2020-03-25 15:18:14"
5074;406;"Kotlin";"class Solution {
    fun exist(board: Array<CharArray>, word: String)
: Boolean {
 
    }
}";"";"2020-03-25 15:18:14"
5075;406;"Python3";"class Solution:
    def exist(self, board: List[List[str]], word: 
str) -> bool:";"";"2020-03-25 15:18:14"
5076;406;"JavaScript";"/**
 * @param {character[][]} board
 * @param {string} word
 * @return {boolean}
 */
var exist = function(board, word) {
 
};";"";"2020-03-25 15:18:14"
5077;406;"PHP";"class Solution {
 
    /**
     * @param String[][] $board
     * @param String $word
     * @return Boolean
     */
    function exist($board, $word) {
        
    }
}";"";"2020-03-25 15:18:14"
5078;406;"Swift";"class Solution {
    func exist(_ board: [[Character]], _ word: 
String) -> Bool {
        
    }
}";"";"2020-03-25 15:18:14"
5079;406;"Ruby";"# @param {Character[][]} board
# @param {String} word
# @return {Boolean}
def exist(board, word)
 
end";"";"2020-03-25 15:18:14"
5080;406;"Python";"class Solution(object):
    def exist(self, board, word):
        """"""
        :type board: List[List[str]]
        :type word: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:14"
5081;407;"C#";"public class Solution {
    public int OrderOfLargestPlusSign(int N, int[][]
 mines) {
 
    }
}";"";"2020-03-25 15:18:15"
5082;407;"Java";"class Solution {
    public int orderOfLargestPlusSign(int N, int[][]
 mines) {
 
    }
}";"";"2020-03-25 15:18:15"
5083;407;"Rust";"impl Solution {
    pub fn order_of_largest_plus_sign(n: i32, 
mines: Vec<Vec<i32>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:15"
5084;407;"C";"int orderOfLargestPlusSign(int N, int** mines, int 
minesSize, int* minesColSize){
 
}";"";"2020-03-25 15:18:15"
5085;407;"Scala";"object Solution {
    def orderOfLargestPlusSign(N: Int, mines: Array
[Array[Int]]): Int = {
 
    }
}";"";"2020-03-25 15:18:15"
5086;407;"Go";"func orderOfLargestPlusSign(N int, mines [][]int) 
int {
 
}";"";"2020-03-25 15:18:15"
5087;407;"Kotlin";"class Solution {
    fun orderOfLargestPlusSign(N: Int, mines: 
Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:15"
5088;407;"Python3";"class Solution:
    def orderOfLargestPlusSign(self, N: int, mines: 
List[List[int]]) -> int:";"";"2020-03-25 15:18:15"
5089;407;"JavaScript";"/**
 * @param {number} N
 * @param {number[][]} mines
 * @return {number}
 */
var orderOfLargestPlusSign = function(N, mines) {
 
};";"";"2020-03-25 15:18:15"
5090;407;"PHP";"class Solution {
 
    /**
     * @param Integer $N
     * @param Integer[][] $mines
     * @return Integer
     */
    function orderOfLargestPlusSign($N, $mines) {
        
    }
}";"";"2020-03-25 15:18:15"
5091;407;"Swift";"class Solution {
    func orderOfLargestPlusSign(_ N: Int, _ mines: [
[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:15"
5092;407;"Ruby";"# @param {Integer} n
# @param {Integer[][]} mines
# @return {Integer}
def order_of_largest_plus_sign(n, mines)
 
end";"";"2020-03-25 15:18:15"
5093;407;"Python";"class Solution(object):
    def orderOfLargestPlusSign(self, N, mines):
        """"""
        :type N: int
        :type mines: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:15"
5094;408;"C#";"/* The isBadVersion API is defined in the parent 
class VersionControl.
      bool IsBadVersion(int version); */
 
public class Solution : VersionControl {
    public int FirstBadVersion(int n) {
        
    }
}";"";"2020-03-25 15:18:15"
5095;408;"Java";"/* The isBadVersion API is defined in the parent 
class VersionControl.
      boolean isBadVersion(int version); */
 
public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
        
    }
}";"";"2020-03-25 15:18:15"
5096;408;"C";"// Forward declaration of isBadVersion API.
bool isBadVersion(int version);
 
int firstBadVersion(int n) {
    
}";"";"2020-03-25 15:18:15"
5097;408;"Python3";"# The isBadVersion API is already defined for you.
# @param version, an integer
# @return a bool
# def isBadVersion(version):
 
class Solution:
    def firstBadVersion(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:15"
5098;408;"JavaScript";"/**
 * Definition for isBadVersion()
 * 
 * @param {integer} version number
 * @return {boolean} whether the version is bad
 * isBadVersion = function(version) {
 *     ...
 * };
 */
 
/**
 * @param {function} isBadVersion()
 * @return {function}
 */
var solution = function(isBadVersion) {
    /**
     * @param {integer} n Total versions
     * @return {integer} The first bad version
     */
    return function(n) {
        
    };
};";"";"2020-03-25 15:18:15"
5099;408;"Ruby";"# The is_bad_version API is already defined for you.";"";"2020-03-25 15:18:15"
5100;408;"Python";"# The isBadVersion API is already defined for you.
# @param version, an integer
# @return a bool
# def isBadVersion(version):
 
class Solution(object):
    def firstBadVersion(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:15"
5101;409;"C#";"public class Solution {
    public int MaxSubArray(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:15"
5102;409;"Java";"class Solution {
    public int maxSubArray(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:15"
5103;409;"C";"int maxSubArray(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:15"
5104;409;"Rust";"impl Solution {
    pub fn max_sub_array(nums: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:15"
5105;409;"Scala";"object Solution {
    def maxSubArray(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:15"
5106;409;"Go";"func maxSubArray(nums []int) int {
 
}";"";"2020-03-25 15:18:15"
5107;409;"Kotlin";"class Solution {
    fun maxSubArray(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:15"
5108;409;"Python3";"class Solution:
    def maxSubArray(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:15"
5109;409;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var maxSubArray = function(nums) {
 
};";"";"2020-03-25 15:18:15"
5110;409;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function maxSubArray($nums) {
        
    }
}";"";"2020-03-25 15:18:15"
5111;409;"Swift";"class Solution {
    func maxSubArray(_ nums: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:15"
5112;409;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:18:15"
5113;409;"Python";"class Solution(object):
    def maxSubArray(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:15"
5114;410;"C#";"public class Solution {
    public int SingleNonDuplicate(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:15"
5115;410;"Java";"class Solution {
    public int singleNonDuplicate(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:15"
5116;410;"C";"int singleNonDuplicate(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:15"
5117;410;"Rust";"impl Solution {
    pub fn single_non_duplicate(nums: Vec<i32>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:15"
5118;410;"Scala";"object Solution {
    def singleNonDuplicate(nums: Array[Int]): Int = 
{
 
    }
}";"";"2020-03-25 15:18:15"
5119;410;"Go";"func singleNonDuplicate(nums []int) int {
 
}";"";"2020-03-25 15:18:15"
5120;410;"Kotlin";"class Solution {
    fun singleNonDuplicate(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:15"
5121;410;"Python3";"class Solution:
    def singleNonDuplicate(self, nums: List[int]) 
-> int:";"";"2020-03-25 15:18:15"
5122;410;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var singleNonDuplicate = function(nums) {
 
};";"";"2020-03-25 15:18:15"
5123;410;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function singleNonDuplicate($nums) {
        
    }
}";"";"2020-03-25 15:18:15"
5124;410;"Swift";"class Solution {
    func singleNonDuplicate(_ nums: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:15"
5125;410;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def single_non_duplicate(nums)
 
end";"";"2020-03-25 15:18:15"
5126;410;"Python";"class Solution(object):
    def singleNonDuplicate(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:15"
5127;411;"C#";"public class Solution {
    public IList<int> FindAnagrams(string s, string 
p) {
 
    }
}";"";"2020-03-25 15:18:15"
5128;411;"Java";"class Solution {
    public List<Integer> findAnagrams(String s, 
String p) {
 
    }
}";"";"2020-03-25 15:18:15"
5129;411;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* findAnagrams(char * s, char * p, int* 
returnSize){
 
}";"";"2020-03-25 15:18:15"
5130;411;"Rust";"impl Solution {
    pub fn find_anagrams(s: String, p: String) -> 
Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:15"
5131;411;"Scala";"object Solution {
    def findAnagrams(s: String, p: String): List
[Int] = {
 
    }
}";"";"2020-03-25 15:18:15"
5132;411;"Go";"func findAnagrams(s string, p string) []int {
 
}";"";"2020-03-25 15:18:15"
5133;411;"Kotlin";"class Solution {
    fun findAnagrams(s: String, p: String): 
List<Int> {
 
    }
}";"";"2020-03-25 15:18:15"
5134;411;"Python3";"class Solution:
    def findAnagrams(self, s: str, p: str) -> List
[int]:";"";"2020-03-25 15:18:15"
5135;411;"JavaScript";"/**
 * @param {string} s
 * @param {string} p
 * @return {number[]}
 */
var findAnagrams = function(s, p) {
 
};";"";"2020-03-25 15:18:15"
5136;411;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @param String $p
     * @return Integer[]
     */
    function findAnagrams($s, $p) {
        
    }
}";"";"2020-03-25 15:18:15"
5137;411;"Swift";"class Solution {
    func findAnagrams(_ s: String, _ p: String) -> 
[Int] {
        
    }
}";"";"2020-03-25 15:18:15"
5138;411;"Ruby";"# @param {String} s
# @param {String} p
# @return {Integer[]}
def find_anagrams(s, p)
 
end";"";"2020-03-25 15:18:15"
5139;411;"Python";"class Solution(object):
    def findAnagrams(self, s, p):
        """"""
        :type s: str
        :type p: str
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:15"
5140;412;"C#";"public class Solution {
    public int[] PrevPermOpt1(int[] A) {
 
    }
}";"";"2020-03-25 15:18:15"
5141;412;"Java";"class Solution {
    public int[] prevPermOpt1(int[] A) {
 
    }
}";"";"2020-03-25 15:18:15"
5142;412;"Rust";"impl Solution {
    pub fn prev_perm_opt1(a: Vec<i32>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:15"
5143;412;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* prevPermOpt1(int* A, int ASize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:15"
5144;412;"Scala";"object Solution {
    def prevPermOpt1(A: Array[Int]): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:15"
5145;412;"Go";"func prevPermOpt1(A []int) []int {
 
}";"";"2020-03-25 15:18:15"
5146;412;"Kotlin";"class Solution {
    fun prevPermOpt1(A: IntArray): IntArray {
 
    }
}";"";"2020-03-25 15:18:15"
5147;412;"Python3";"class Solution:
    def prevPermOpt1(self, A: List[int]) -> List
[int]:";"";"2020-03-25 15:18:15"
5148;412;"JavaScript";"/**
 * @param {number[]} A
 * @return {number[]}
 */
var prevPermOpt1 = function(A) {
 
};";"";"2020-03-25 15:18:15"
5149;412;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @return Integer[]
     */
    function prevPermOpt1($A) {
        
    }
}";"";"2020-03-25 15:18:15"
5150;412;"Swift";"class Solution {
    func prevPermOpt1(_ A: [Int]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:15"
5151;412;"Ruby";"# @param {Integer[]} a
# @return {Integer[]}
def prev_perm_opt1(a)
 
end";"";"2020-03-25 15:18:15"
5152;412;"Python";"class Solution(object):
    def prevPermOpt1(self, A):
        """"""
        :type A: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:15"
5153;413;"C#";"public class Solution {
    public void Rotate(int[] nums, int k) {
 
    }
}";"";"2020-03-25 15:18:15"
5154;413;"Java";"class Solution {
    public void rotate(int[] nums, int k) {
 
    }
}";"";"2020-03-25 15:18:15"
5155;413;"C";"void rotate(int* nums, int numsSize, int k){
 
}";"";"2020-03-25 15:18:15"
5156;413;"Rust";"impl Solution {
    pub fn rotate(nums: &mut Vec<i32>, k: i32) {
 
    }
}";"";"2020-03-25 15:18:15"
5157;413;"Scala";"object Solution {
    def rotate(nums: Array[Int], k: Int): Unit = {
 
    }
}";"";"2020-03-25 15:18:15"
5158;413;"Go";"func rotate(nums []int, k int)  {
 
}";"";"2020-03-25 15:18:15"
5159;413;"Kotlin";"class Solution {
    fun rotate(nums: IntArray, k: Int): Unit {
 
    }
}";"";"2020-03-25 15:18:15"
5160;413;"Python3";"class Solution:
    def rotate(self, nums: List[int], k: int) -> 
None:
        """"""
        Do not return anything, modify nums 
in-place instead.
        """"""";"";"2020-03-25 15:18:15"
5161;413;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} k
 * @return {void} Do not return anything, modify 
nums in-place instead.
 */
var rotate = function(nums, k) {
 
};";"";"2020-03-25 15:18:15"
5162;413;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer $k
     * @return NULL
     */
    function rotate(&$nums, $k) {
 
    }
}";"";"2020-03-25 15:18:15"
5163;413;"Swift";"class Solution {
    func rotate(_ nums: inout [Int], _ k: Int) {
 
    }
}";"";"2020-03-25 15:18:15"
5164;413;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:18:15"
5165;413;"Python";"class Solution(object):
    def rotate(self, nums, k):
        """"""
        :type nums: List[int]
        :type k: int
        :rtype: None Do not return anything, modify 
nums in-place instead.
        """"""";"";"2020-03-25 15:18:15"
5166;414;"C#";"public class Solution {
    public int LeastBricks(IList<IList<int>> wall) {
 
    }
}";"";"2020-03-25 15:18:15"
5167;414;"Java";"class Solution {
    public int leastBricks(List<List<Integer>> wall)
 {
 
    }
}";"";"2020-03-25 15:18:15"
5168;414;"C";"int leastBricks(int** wall, int wallSize, int* 
wallColSize){
 
}";"";"2020-03-25 15:18:15"
5169;414;"Rust";"impl Solution {
    pub fn least_bricks(wall: Vec<Vec<i32>>) -> i32 
{
        
    }
}";"";"2020-03-25 15:18:15"
5170;414;"Scala";"object Solution {
    def leastBricks(wall: List[List[Int]]): Int = {
 
    }
}";"";"2020-03-25 15:18:15"
5171;414;"Go";"func leastBricks(wall [][]int) int {
 
}";"";"2020-03-25 15:18:15"
5172;414;"Kotlin";"class Solution {
    fun leastBricks(wall: List<List<Int>>): Int {
 
    }
}";"";"2020-03-25 15:18:15"
5173;414;"Python3";"class Solution:
    def leastBricks(self, wall: List[List[int]]) -> 
int:";"";"2020-03-25 15:18:15"
5174;414;"JavaScript";"/**
 * @param {number[][]} wall
 * @return {number}
 */
var leastBricks = function(wall) {
 
};";"";"2020-03-25 15:18:15"
5175;414;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $wall
     * @return Integer
     */
    function leastBricks($wall) {
        
    }
}";"";"2020-03-25 15:18:15"
5176;414;"Swift";"class Solution {
    func leastBricks(_ wall: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:15"
5177;414;"Ruby";"# @param {Integer[][]} wall
# @return {Integer}
def least_bricks(wall)
 
end";"";"2020-03-25 15:18:15"
5178;414;"Python";"class Solution(object):
    def leastBricks(self, wall):
        """"""
        :type wall: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:15"
5179;415;"MySQL";"# Write your MySQL query statement below";"";"2020-03-25 15:18:15"
5180;415;"MS SQL Server";"/* Write your T-SQL query statement below */";"";"2020-03-25 15:18:15"
5181;415;"Oracle";"/* Write your PL/SQL query statement below */";"";"2020-03-25 15:18:15"
5182;416;"C#";"public class Solution {
    public IList<IList<string>> FindDuplicate(string
[] paths) {
 
    }
}";"";"2020-03-25 15:18:15"
5183;416;"Java";"class Solution {
    public List<List<String>> findDuplicate(String[]
 paths) {
 
    }
}";"";"2020-03-25 15:18:15"
5184;416;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
char *** findDuplicate(char ** paths, int pathsSize,
 int* returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:15"
5185;416;"Rust";"impl Solution {
    pub fn find_duplicate(paths: Vec<String>) -> 
Vec<Vec<String>> {
        
    }
}";"";"2020-03-25 15:18:15"
5186;416;"Scala";"object Solution {
    def findDuplicate(paths: Array[String]): List
[List[String]] = {
 
    }
}";"";"2020-03-25 15:18:15"
5187;416;"Go";"func findDuplicate(paths []string) [][]string {
 
}";"";"2020-03-25 15:18:15"
5188;416;"Kotlin";"class Solution {
    fun findDuplicate(paths: Array<String>): 
List<List<String>> {
 
    }
}";"";"2020-03-25 15:18:15"
5189;416;"Python3";"class Solution:
    def findDuplicate(self, paths: List[str]) -> 
List[List[str]]:";"";"2020-03-25 15:18:15"
5190;416;"JavaScript";"/**
 * @param {string[]} paths
 * @return {string[][]}
 */
var findDuplicate = function(paths) {
 
};";"";"2020-03-25 15:18:15"
5191;416;"PHP";"class Solution {
 
    /**
     * @param String[] $paths
     * @return String[][]
     */
    function findDuplicate($paths) {
        
    }
}";"";"2020-03-25 15:18:15"
5192;416;"Swift";"class Solution {
    func findDuplicate(_ paths: [String]) -> [
[String]] {
        
    }
}";"";"2020-03-25 15:18:15"
5193;416;"Ruby";"# @param {String[]} paths";"";"2020-03-25 15:18:15"
5194;416;"Python";"class Solution(object):
    def findDuplicate(self, paths):
        """"""
        :type paths: List[str]
        :rtype: List[List[str]]
        """"""";"";"2020-03-25 15:18:15"
5195;417;"C#";"public class Solution {
    public int[] NextGreaterElement(int[] nums1, int
[] nums2) {
 
    }
}";"";"2020-03-25 15:18:15"
5196;417;"Java";"class Solution {
    public int[] nextGreaterElement(int[] nums1, int
[] nums2) {
 
    }
}";"";"2020-03-25 15:18:15"
5197;417;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* nextGreaterElement(int* nums1, int nums1Size, 
int* nums2, int nums2Size, int* returnSize){
 
}";"";"2020-03-25 15:18:15"
5198;417;"Rust";"impl Solution {
    pub fn next_greater_element(nums1: Vec<i32>, 
nums2: Vec<i32>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:15"
5199;417;"Scala";"object Solution {
    def nextGreaterElement(nums1: Array[Int], 
nums2: Array[Int]): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:15"
5200;417;"Go";"func nextGreaterElement(nums1 []int, nums2 []int) []
int {
 
}";"";"2020-03-25 15:18:15"
5201;417;"Kotlin";"class Solution {
    fun nextGreaterElement(nums1: IntArray, nums2: 
IntArray): IntArray {
 
    }
}";"";"2020-03-25 15:18:15"
5202;417;"Python3";"class Solution:
    def nextGreaterElement(self, nums1: List[int], 
nums2: List[int]) -> List[int]:";"";"2020-03-25 15:18:15"
5203;417;"JavaScript";"/**
 * @param {number[]} nums1
 * @param {number[]} nums2
 * @return {number[]}
 */
var nextGreaterElement = function(nums1, nums2) {
 
};";"";"2020-03-25 15:18:15"
5204;417;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums1
     * @param Integer[] $nums2
     * @return Integer[]
     */
    function nextGreaterElement($nums1, $nums2) {
        
    }
}";"";"2020-03-25 15:18:15"
5205;417;"Swift";"class Solution {
    func nextGreaterElement(_ nums1: [Int], _ 
nums2: [Int]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:15"
5206;417;"Ruby";"# @param {Integer[]} nums1
# @param {Integer[]} nums2
# @return {Integer[]}
def next_greater_element(nums1, nums2)
 
end";"";"2020-03-25 15:18:15"
5207;417;"Python";"class Solution(object):
    def nextGreaterElement(self, nums1, nums2):
        """"""
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:15"
5208;418;"C#";"public class Solution {
    public int MaxLength(IList<string> arr) {
 
    }
}";"";"2020-03-25 15:18:15"
5209;418;"Java";"class Solution {
    public int maxLength(List<String> arr) {
 
    }
}";"";"2020-03-25 15:18:15"
5210;418;"Rust";"impl Solution {
    pub fn max_length(arr: Vec<String>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:15"
5211;418;"C";"int maxLength(char ** arr, int arrSize){
 
}";"";"2020-03-25 15:18:15"
5212;418;"Scala";"object Solution {
    def maxLength(arr: List[String]): Int = {
 
    }
}";"";"2020-03-25 15:18:15"
5213;418;"Go";"func maxLength(arr []string) int {
 
}";"";"2020-03-25 15:18:15"
5214;418;"Kotlin";"class Solution {
    fun maxLength(arr: List<String>): Int {
 
    }
}";"";"2020-03-25 15:18:15"
5215;418;"Python3";"class Solution:
    def maxLength(self, arr: List[str]) -> int:";"";"2020-03-25 15:18:15"
5216;418;"JavaScript";"/**
 * @param {string[]} arr
 * @return {number}
 */
var maxLength = function(arr) {
 
};";"";"2020-03-25 15:18:15"
5217;418;"PHP";"class Solution {
 
    /**
     * @param String[] $arr
     * @return Integer
     */
    function maxLength($arr) {
 
    }
}";"";"2020-03-25 15:18:15"
5218;418;"Swift";"class Solution {
    func maxLength(_ arr: [String]) -> Int {
 
    }
}";"";"2020-03-25 15:18:15"
5219;418;"Ruby";"# @param {String[]} arr
# @return {Integer}
def max_length(arr)
 
end";"";"2020-03-25 15:18:15"
5220;418;"Python";"class Solution(object):
    def maxLength(self, arr):
        """"""
        :type arr: List[str]
        :rtype: int
        """"""";"";"2020-03-25 15:18:15"
5221;419;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode SortList(ListNode head) {
 
    }
}";"";"2020-03-25 15:18:15"
5222;419;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
 
    }
}";"";"2020-03-25 15:18:15"
5223;419;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn sort_list(head: Option<Box<ListNode>>) 
-> Option<Box<ListNode>> {
 
    }
}";"";"2020-03-25 15:18:15"
5224;419;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
struct ListNode* sortList(struct ListNode* head){
 
}";"";"2020-03-25 15:18:15"
5225;419;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def sortList(head: ListNode): ListNode = {
 
    }
}";"";"2020-03-25 15:18:15"
5226;419;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func sortList(head *ListNode) *ListNode {
 
}";"";"2020-03-25 15:18:15"
5227;419;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun sortList(head: ListNode?): ListNode? {
 
    }
}";"";"2020-03-25 15:18:15"
5228;419;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def sortList(self, head: ListNode) -> ListNode:";"";"2020-03-25 15:18:15"
5229;419;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var sortList = function(head) {
 
};";"";"2020-03-25 15:18:15"
5230;419;"PHP";"/**";"";"2020-03-25 15:18:15"
5231;419;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func sortList(_ head: ListNode?) -> ListNode? {
 
    }
}";"";"2020-03-25 15:18:15"
5232;419;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# @param {ListNode} head
# @return {ListNode}
def sort_list(head)
 
end";"";"2020-03-25 15:18:15"
5233;419;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def sortList(self, head):
        """"""
        :type head: ListNode
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:15"
5234;420;"C#";"public class Solution {
    public int FirstUniqChar(string s) {
 
    }
}";"";"2020-03-25 15:18:15"
5235;420;"Java";"class Solution {
    public int firstUniqChar(String s) {
 
    }
}";"";"2020-03-25 15:18:15"
5236;420;"C";"int firstUniqChar(char * s){
 
}";"";"2020-03-25 15:18:15"
5237;420;"Rust";"impl Solution {
    pub fn first_uniq_char(s: String) -> i32 {
        
    }
}";"";"2020-03-25 15:18:15"
5238;420;"Scala";"object Solution {
    def firstUniqChar(s: String): Int = {
 
    }
}";"";"2020-03-25 15:18:15"
5239;420;"Go";"func firstUniqChar(s string) int {
 
}";"";"2020-03-25 15:18:15"
5240;420;"Kotlin";"class Solution {
    fun firstUniqChar(s: String): Int {
 
    }
}";"";"2020-03-25 15:18:15"
5241;420;"Python3";"class Solution:
    def firstUniqChar(self, s: str) -> int:";"";"2020-03-25 15:18:15"
5242;420;"JavaScript";"/**
 * @param {string} s
 * @return {number}
 */
var firstUniqChar = function(s) {
 
};";"";"2020-03-25 15:18:15"
5243;420;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return Integer
     */
    function firstUniqChar($s) {
        
    }
}";"";"2020-03-25 15:18:15"
5244;420;"Swift";"class Solution {
    func firstUniqChar(_ s: String) -> Int {
        
    }
}";"";"2020-03-25 15:18:15"
5245;420;"Ruby";"# @param {String} s
# @return {Integer}
def first_uniq_char(s)
 
end";"";"2020-03-25 15:18:15"
5246;420;"Python";"class Solution(object):
    def firstUniqChar(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:15"
5247;421;"C#";"public class Solution {
    public int LargestRectangleArea(int[] heights) {
 
    }
}";"";"2020-03-25 15:18:15"
5248;421;"Java";"class Solution {
    public int largestRectangleArea(int[] heights) {
 
    }
}";"";"2020-03-25 15:18:15"
5249;421;"Rust";"impl Solution {
    pub fn largest_rectangle_area(heights: Vec<i32>)
 -> i32 {
        
    }
}";"";"2020-03-25 15:18:15"
5250;421;"C";"int largestRectangleArea(int* heights, int 
heightsSize){
 
}";"";"2020-03-25 15:18:15"
5251;421;"Scala";"object Solution {
    def largestRectangleArea(heights: Array[Int]): 
Int = {
 
    }
}";"";"2020-03-25 15:18:15"
5252;421;"Go";"func largestRectangleArea(heights []int) int {
 
}";"";"2020-03-25 15:18:15"
5253;421;"Kotlin";"class Solution {
    fun largestRectangleArea(heights: IntArray): 
Int {
 
    }
}";"";"2020-03-25 15:18:15"
5254;421;"Python3";"class Solution:
    def largestRectangleArea(self, heights: List
[int]) -> int:";"";"2020-03-25 15:18:15"
5255;421;"JavaScript";"/**
 * @param {number[]} heights
 * @return {number}
 */
var largestRectangleArea = function(heights) {
 
};";"";"2020-03-25 15:18:15"
5256;421;"PHP";"class Solution {";"";"2020-03-25 15:18:15"
5257;421;"Swift";"class Solution {
    func largestRectangleArea(_ heights: [Int]) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:15"
5258;421;"Ruby";"# @param {Integer[]} heights
# @return {Integer}
def largest_rectangle_area(heights)
 
end";"";"2020-03-25 15:18:15"
5259;421;"Python";"class Solution(object):
    def largestRectangleArea(self, heights):
        """"""
        :type heights: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:15"
5260;422;"C#";"public class Solution {
    public string ReorganizeString(string S) {
 
    }
}";"";"2020-03-25 15:18:15"
5261;422;"Java";"class Solution {
    public String reorganizeString(String S) {
 
    }
}";"";"2020-03-25 15:18:15"
5262;422;"C";"char * reorganizeString(char * S){
 
}";"";"2020-03-25 15:18:15"
5263;422;"Rust";"impl Solution {
    pub fn reorganize_string(s: String) -> String {
        
    }
}";"";"2020-03-25 15:18:15"
5264;422;"Scala";"object Solution {
    def reorganizeString(S: String): String = {
 
    }
}";"";"2020-03-25 15:18:15"
5265;422;"Go";"func reorganizeString(S string) string {
 
}";"";"2020-03-25 15:18:15"
5266;422;"Kotlin";"class Solution {
    fun reorganizeString(S: String): String {
 
    }
}";"";"2020-03-25 15:18:15"
5267;422;"Python3";"class Solution:
    def reorganizeString(self, S: str) -> str:";"";"2020-03-25 15:18:15"
5268;422;"JavaScript";"/**
 * @param {string} S
 * @return {string}
 */
var reorganizeString = function(S) {
 
};";"";"2020-03-25 15:18:15"
5269;422;"PHP";"class Solution {
 
    /**
     * @param String $S
     * @return String
     */
    function reorganizeString($S) {
        
    }
}";"";"2020-03-25 15:18:15"
5270;422;"Swift";"class Solution {
    func reorganizeString(_ S: String) -> String {
        
    }
}";"";"2020-03-25 15:18:15"
5271;422;"Ruby";"# @param {String} s
# @return {String}
def reorganize_string(s)
 
end";"";"2020-03-25 15:18:15"
5272;422;"Python";"class Solution(object):
    def reorganizeString(self, S):
        """"""
        :type S: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:15"
5273;423;"C#";"public class RandomizedCollection {
 
    /** Initialize your data structure here. */
    public RandomizedCollection() {
 
    }
    
    /** Inserts a value to the collection. Returns 
true if the collection did not already contain the 
specified element. */
    public bool Insert(int val) {
 
    }
    
    /** Removes a value from the collection. 
Returns true if the collection contained the 
specified element. */
    public bool Remove(int val) {
 
    }
    
    /** Get a random element from the collection. */
    public int GetRandom() {
 
    }
}";"";"2020-03-25 15:18:15"
5274;423;"Java";"class RandomizedCollection {
 
    /** Initialize your data structure here. */
    public RandomizedCollection() {
 
    }
    
    /** Inserts a value to the collection. Returns 
true if the collection did not already contain the 
specified element. */
    public boolean insert(int val) {
 
    }
    
    /** Removes a value from the collection. 
Returns true if the collection contained the 
specified element. */
    public boolean remove(int val) {
 
    }
    
    /** Get a random element from the collection. */
    public int getRandom() {
 
    }
}";"";"2020-03-25 15:18:15"
5275;423;"C";"typedef struct {
    
} RandomizedCollection;
 
/** Initialize your data structure here. */
 
RandomizedCollection* randomizedCollectionCreate() {
    
}
 
/** Inserts a value to the collection. Returns true 
if the collection did not already contain the 
specified element. */
bool randomizedCollectionInsert
(RandomizedCollection* obj, int val) {
  
}
 
/** Removes a value from the collection. Returns 
true if the collection contained the specified 
element. */
bool randomizedCollectionRemove
(RandomizedCollection* obj, int val) {
  
}
 ";"";"2020-03-25 15:18:15"
5276;423;"Rust";"struct RandomizedCollection {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl RandomizedCollection {
 
    /** Initialize your data structure here. */
    fn new() -> Self {
        
    }
    
    /** Inserts a value to the collection. Returns 
true if the collection did not already contain the 
specified element. */
    fn insert(&self, val: i32) -> bool {
        
    }
    
    /** Removes a value from the collection. ";"";"2020-03-25 15:18:15"
5277;423;"Scala";"class RandomizedCollection() {
 
    /** Initialize your data structure here. */
 
 
    /** Inserts a value to the collection. Returns 
true if the collection did not already contain the 
specified element. */
    def insert(`val`: Int): Boolean = {
 
    }
 
    /** Removes a value from the collection. 
Returns true if the collection contained the 
specified element. */
    def remove(`val`: Int): Boolean = {
 
    }
 
    /** Get a random element from the collection. */
    def getRandom(): Int = {
 
    }
 
}
 ";"";"2020-03-25 15:18:15"
5278;423;"Go";"type RandomizedCollection struct {
 
}
 
 
/** Initialize your data structure here. */
func Constructor() RandomizedCollection {
 
}
 
 
/** Inserts a value to the collection. Returns true 
if the collection did not already contain the 
specified element. */
func (this *RandomizedCollection) Insert(val int) 
bool {
 
}
 
 
/** Removes a value from the collection. Returns 
true if the collection contained the specified 
element. */
func (this *RandomizedCollection) Remove(val int) 
bool {
 ";"";"2020-03-25 15:18:15"
5279;423;"Kotlin";"class RandomizedCollection() {
 
    /** Initialize your data structure here. */
 
 
    /** Inserts a value to the collection. Returns 
true if the collection did not already contain the 
specified element. */
    fun insert(`val`: Int): Boolean {
 
    }
 
    /** Removes a value from the collection. 
Returns true if the collection contained the 
specified element. */
    fun remove(`val`: Int): Boolean {
 
    }
 
    /** Get a random element from the collection. */
    fun getRandom(): Int {
 
    }
 
}
 ";"";"2020-03-25 15:18:15"
5280;423;"Python3";"class RandomizedCollection:
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
        
 
    def insert(self, val: int) -> bool:
        """"""
        Inserts a value to the collection. Returns 
true if the collection did not already contain the 
specified element.
        """"""
        
 
    def remove(self, val: int) -> bool:
        """"""
        Removes a value from the collection. 
Returns true if the collection contained the 
specified element.
        """"""
        
 
    def getRandom(self) -> int:
        """"""";"";"2020-03-25 15:18:15"
5281;423;"JavaScript";"/**
 * Initialize your data structure here.
 */
var RandomizedCollection = function() {
 
};
 
/**
 * Inserts a value to the collection. Returns true 
if the collection did not already contain the 
specified element. 
 * @param {number} val
 * @return {boolean}
 */
RandomizedCollection.prototype.insert = function
(val) {
 
};
 
/**
 * Removes a value from the collection. Returns 
true if the collection contained the specified 
element. 
 * @param {number} val
 * @return {boolean}
 */";"";"2020-03-25 15:18:15"
5282;423;"PHP";"class RandomizedCollection {
    /**
     * Initialize your data structure here.
     */
    function __construct() {
        
    }
  
    /**
     * Inserts a value to the collection. Returns 
true if the collection did not already contain the 
specified element.
     * @param Integer $val
     * @return Boolean
     */
    function insert($val) {
        
    }
  
    /**
     * Removes a value from the collection. Returns 
true if the collection contained the specified 
element.
     * @param Integer $val
     * @return Boolean
     */";"";"2020-03-25 15:18:15"
5283;423;"Swift";"class RandomizedCollection {
 
    /** Initialize your data structure here. */
    init() {
        
    }
    
    /** Inserts a value to the collection. Returns 
true if the collection did not already contain the 
specified element. */
    func insert(_ val: Int) -> Bool {
        
    }
    
    /** Removes a value from the collection. 
Returns true if the collection contained the 
specified element. */
    func remove(_ val: Int) -> Bool {
        
    }
    
    /** Get a random element from the collection. */
    func getRandom() -> Int {
        
    }
}";"";"2020-03-25 15:18:15"
5284;423;"Ruby";"class RandomizedCollection
 
=begin
    Initialize your data structure here.
=end
    def initialize()
 
    end
 
 
=begin
    Inserts a value to the collection. Returns true 
if the collection did not already contain the 
specified element.
    :type val: Integer
    :rtype: Boolean
=end
    def insert(val)
 
    end
 
 
=begin
    Removes a value from the collection. Returns 
true if the collection contained the specified 
element.";"";"2020-03-25 15:18:15"
5285;423;"Python";"class RandomizedCollection(object):
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
        
 
    def insert(self, val):
        """"""
        Inserts a value to the collection. Returns 
true if the collection did not already contain the 
specified element.
        :type val: int
        :rtype: bool
        """"""
        
 
    def remove(self, val):
        """"""
        Removes a value from the collection. 
Returns true if the collection contained the 
specified element.
        :type val: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:15"
5286;424;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public bool IsPalindrome(ListNode head) {
 
    }
}";"";"2020-03-25 15:18:15"
5287;424;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
 
    }
}";"";"2020-03-25 15:18:15"
5288;424;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn is_palindrome(head: 
Option<Box<ListNode>>) -> bool {
 
    }
}";"";"2020-03-25 15:18:15"
5289;424;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
bool isPalindrome(struct ListNode* head){
 
}";"";"2020-03-25 15:18:15"
5290;424;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def isPalindrome(head: ListNode): Boolean = {
 
    }
}";"";"2020-03-25 15:18:15"
5291;424;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func isPalindrome(head *ListNode) bool {
 
}";"";"2020-03-25 15:18:15"
5292;424;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun isPalindrome(head: ListNode?): Boolean {
 
    }
}";"";"2020-03-25 15:18:15"
5293;424;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def isPalindrome(self, head: ListNode) -> bool:";"";"2020-03-25 15:18:15"
5294;424;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @return {boolean}
 */
var isPalindrome = function(head) {
 
};";"";"2020-03-25 15:18:15"
5295;424;"PHP";"/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
class Solution {
 
    /**
     * @param ListNode $head
     * @return Boolean
     */
    function isPalindrome($head) {
 
    }
}";"";"2020-03-25 15:18:15"
5296;424;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func isPalindrome(_ head: ListNode?) -> Bool {
 
    }
}";"";"2020-03-25 15:18:15"
5297;424;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# @param {ListNode} head
# @return {Boolean}
def is_palindrome(head)
 
end";"";"2020-03-25 15:18:15"
5298;424;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def isPalindrome(self, head):
        """"""
        :type head: ListNode
        :rtype: bool
        """"""";"";"2020-03-25 15:18:15"
5299;425;"C#";"public class Solution {
 
    public Solution(int[] nums) {
 
    }
    
    /** Resets the array to its original 
configuration and return it. */
    public int[] Reset() {
 
    }
    
    /** Returns a random shuffling of the array. */
    public int[] Shuffle() {
 
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * Solution obj = new Solution(nums);
 * int[] param_1 = obj.Reset();
 * int[] param_2 = obj.Shuffle();
 */";"";"2020-03-25 15:18:15"
5300;425;"Java";"class Solution {
 
    public Solution(int[] nums) {
 
    }
    
    /** Resets the array to its original 
configuration and return it. */
    public int[] reset() {
 
    }
    
    /** Returns a random shuffling of the array. */
    public int[] shuffle() {
 
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * Solution obj = new Solution(nums);
 * int[] param_1 = obj.reset();
 * int[] param_2 = obj.shuffle();
 */";"";"2020-03-25 15:18:15"
5301;425;"Rust";"struct Solution {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl Solution {
 
    fn new(nums: Vec<i32>) -> Self {
        
    }
    
    /** Resets the array to its original 
configuration and return it. */
    fn reset(&self) -> Vec<i32> {
        
    }
    
    /** Returns a random shuffling of the array. */
    fn shuffle(&self) -> Vec<i32> {
        ";"";"2020-03-25 15:18:15"
5302;425;"C";"typedef struct {
    
} Solution;
 
 
Solution* solutionCreate(int* nums, int numsSize) {
    
}
 
/** Resets the array to its original configuration 
and return it. */
int* solutionReset(Solution* obj, int* retSize) {
  
}
 
/** Returns a random shuffling of the array. */
int* solutionShuffle(Solution* obj, int* retSize) {
  
}
 
void solutionFree(Solution* obj) {
    
}
 
/**
 * Your Solution struct will be instantiated and ";"";"2020-03-25 15:18:15"
5303;425;"Scala";"class Solution(_nums: Array[Int]) {
 
    /** Resets the array to its original 
configuration and return it. */
    def reset(): Array[Int] = {
 
    }
 
    /** Returns a random shuffling of the array. */
    def shuffle(): Array[Int] = {
 
    }
 
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * var obj = new Solution(nums)
 * var param_1 = obj.reset()
 * var param_2 = obj.shuffle()
 */";"";"2020-03-25 15:18:15"
5304;425;"Go";"type Solution struct {
 
}
 
 
func Constructor(nums []int) Solution {
 
}
 
 
/** Resets the array to its original configuration 
and return it. */
func (this *Solution) Reset() []int {
 
}
 
 
/** Returns a random shuffling of the array. */
func (this *Solution) Shuffle() []int {
 
}
 
 
/**
 * Your Solution object will be instantiated and 
called as such:";"";"2020-03-25 15:18:15"
5305;425;"Kotlin";"class Solution(nums: IntArray) {
 
    /** Resets the array to its original 
configuration and return it. */
    fun reset(): IntArray {
 
    }
 
    /** Returns a random shuffling of the array. */
    fun shuffle(): IntArray {
 
    }
 
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * var obj = Solution(nums)
 * var param_1 = obj.reset()
 * var param_2 = obj.shuffle()
 */";"";"2020-03-25 15:18:15"
5306;425;"Python3";"class Solution:
 
    def __init__(self, nums: List[int]):
        
 
    def reset(self) -> List[int]:
        """"""
        Resets the array to its original 
configuration and return it.
        """"""
        
 
    def shuffle(self) -> List[int]:
        """"""
        Returns a random shuffling of the array.
        """"""
        
 
 
# Your Solution object will be instantiated and 
called as such:
# obj = Solution(nums)
# param_1 = obj.reset()
# param_2 = obj.shuffle()";"";"2020-03-25 15:18:15"
5307;425;"JavaScript";"/**
 * @param {number[]} nums
 */
var Solution = function(nums) {
 
};
 
/**
 * Resets the array to its original configuration 
and return it.
 * @return {number[]}
 */
Solution.prototype.reset = function() {
 
};
 
/**
 * Returns a random shuffling of the array.
 * @return {number[]}
 */
Solution.prototype.shuffle = function() {
 
};
 
/**
 * Your Solution object will be instantiated and ";"";"2020-03-25 15:18:15"
5308;425;"PHP";"class Solution {
    /**
     * @param Integer[] $nums
     */
    function __construct($nums) {
        
    }
  
    /**
     * Resets the array to its original 
configuration and return it.
     * @return Integer[]
     */
    function reset() {
        
    }
  
    /**
     * Returns a random shuffling of the array.
     * @return Integer[]
     */
    function shuffle() {
        
    }
}
 ";"";"2020-03-25 15:18:15"
5309;425;"Swift";"class Solution {
 
    init(_ nums: [Int]) {
        
    }
    
    /** Resets the array to its original 
configuration and return it. */
    func reset() -> [Int] {
        
    }
    
    /** Returns a random shuffling of the array. */
    func shuffle() -> [Int] {
        
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * let obj = Solution(nums)
 * let ret_1: [Int] = obj.reset()
 * let ret_2: [Int] = obj.shuffle()
 */";"";"2020-03-25 15:18:15"
5310;425;"Ruby";"class Solution
 
=begin
    :type nums: Integer[]
=end
    def initialize(nums)
 
    end
 
 
=begin
    Resets the array to its original configuration 
and return it.
    :rtype: Integer[]
=end
    def reset()
 
    end
 
 
=begin
    Returns a random shuffling of the array.
    :rtype: Integer[]
=end
    def shuffle()
 ";"";"2020-03-25 15:18:15"
5311;425;"Python";"class Solution(object):
 
    def __init__(self, nums):
        """"""
        :type nums: List[int]
        """"""
        
 
    def reset(self):
        """"""
        Resets the array to its original 
configuration and return it.
        :rtype: List[int]
        """"""
        
 
    def shuffle(self):
        """"""
        Returns a random shuffling of the array.
        :rtype: List[int]
        """"""
        
 
 
# Your Solution object will be instantiated and 
called as such:";"";"2020-03-25 15:18:15"
5312;426;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int MinCameraCover(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:15"
5313;426;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int minCameraCover(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:15"
5314;426;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn min_camera_cover(root: 
Option<Rc<RefCell<TreeNode>>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:15"
5315;426;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int minCameraCover(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:15"
5316;426;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def minCameraCover(root: TreeNode): Int = {
 
    }
}";"";"2020-03-25 15:18:15"
5317;426;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func minCameraCover(root *TreeNode) int {
 
}";"";"2020-03-25 15:18:15"
5318;426;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun minCameraCover(root: TreeNode?): Int {
 
    }
}";"";"2020-03-25 15:18:15"
5319;426;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def minCameraCover(self, root: TreeNode) -> int:";"";"2020-03-25 15:18:15"
5320;426;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var minCameraCover = function(root) {
 
};";"";"2020-03-25 15:18:15"
5321;426;"PHP";"/**";"";"2020-03-25 15:18:15"
5322;426;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func minCameraCover(_ root: TreeNode?) -> Int {
        
    }
}";"";"2020-03-25 15:18:15"
5323;426;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer}
def min_camera_cover(root)
 
end";"";"2020-03-25 15:18:15"
5324;426;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def minCameraCover(self, root):
        """"""
        :type root: TreeNode
        :rtype: int
        """"""";"";"2020-03-25 15:18:15"
5325;427;"C#";"public class Solution {
    public string IntToRoman(int num) {
 
    }
}";"";"2020-03-25 15:18:15"
5326;427;"Java";"class Solution {
    public String intToRoman(int num) {
 
    }
}";"";"2020-03-25 15:18:15"
5327;427;"C";"char * intToRoman(int num){
 
}";"";"2020-03-25 15:18:15"
5328;427;"Rust";"impl Solution {
    pub fn int_to_roman(num: i32) -> String {
        
    }
}";"";"2020-03-25 15:18:15"
5329;427;"Scala";"object Solution {
    def intToRoman(num: Int): String = {
 
    }
}";"";"2020-03-25 15:18:15"
5330;427;"Go";"func intToRoman(num int) string {
 
}";"";"2020-03-25 15:18:15"
5331;427;"Kotlin";"class Solution {
    fun intToRoman(num: Int): String {
 
    }
}";"";"2020-03-25 15:18:15"
5332;427;"Python3";"class Solution:
    def intToRoman(self, num: int) -> str:";"";"2020-03-25 15:18:15"
5333;427;"JavaScript";"/**
 * @param {number} num
 * @return {string}
 */
var intToRoman = function(num) {
 
};";"";"2020-03-25 15:18:15"
5334;427;"PHP";"class Solution {
 
    /**
     * @param Integer $num
     * @return String
     */
    function intToRoman($num) {
        
    }
}";"";"2020-03-25 15:18:15"
5335;427;"Swift";"class Solution {
    func intToRoman(_ num: Int) -> String {
        
    }
}";"";"2020-03-25 15:18:15"
5336;427;"Ruby";"# @param {Integer} num";"";"2020-03-25 15:18:15"
5337;427;"Python";"class Solution(object):
    def intToRoman(self, num):
        """"""
        :type num: int
        :rtype: str
        """"""";"";"2020-03-25 15:18:15"
5338;428;"C#";"public class Solution {
    public int MinDistance(string word1, string 
word2) {
 
    }
}";"";"2020-03-25 15:18:16"
5339;428;"Java";"class Solution {
    public int minDistance(String word1, String 
word2) {
 
    }
}";"";"2020-03-25 15:18:16"
5340;428;"C";"int minDistance(char * word1, char * word2){
 
}";"";"2020-03-25 15:18:16"
5341;428;"Rust";"impl Solution {
    pub fn min_distance(word1: String, word2: 
String) -> i32 {
        
    }
}";"";"2020-03-25 15:18:16"
5342;428;"Scala";"object Solution {
    def minDistance(word1: String, word2: String): 
Int = {
 
    }
}";"";"2020-03-25 15:18:16"
5343;428;"Go";"func minDistance(word1 string, word2 string) int {
 
}";"";"2020-03-25 15:18:16"
5344;428;"Kotlin";"class Solution {
    fun minDistance(word1: String, word2: String): 
Int {
 
    }
}";"";"2020-03-25 15:18:16"
5345;428;"Python3";"class Solution:
    def minDistance(self, word1: str, word2: str) 
-> int:";"";"2020-03-25 15:18:16"
5346;428;"JavaScript";"/**
 * @param {string} word1
 * @param {string} word2
 * @return {number}
 */
var minDistance = function(word1, word2) {
 
};";"";"2020-03-25 15:18:16"
5347;428;"PHP";"class Solution {
 
    /**
     * @param String $word1
     * @param String $word2
     * @return Integer
     */
    function minDistance($word1, $word2) {
        
    }
}";"";"2020-03-25 15:18:16"
5348;428;"Swift";"class Solution {
    func minDistance(_ word1: String, _ word2: 
String) -> Int {
        
    }
}";"";"2020-03-25 15:18:16"
5349;428;"Ruby";"# @param {String} word1
# @param {String} word2
# @return {Integer}
def min_distance(word1, word2)
 
end";"";"2020-03-25 15:18:16"
5350;428;"Python";"class Solution(object):
    def minDistance(self, word1, word2):
        """"""
        :type word1: str
        :type word2: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:16"
5351;429;"C#";"public class Solution {
    public IList<string> ReadBinaryWatch(int num) {
 
    }
}";"";"2020-03-25 15:18:16"
5352;429;"Java";"class Solution {
    public List<String> readBinaryWatch(int num) {
 
    }
}";"";"2020-03-25 15:18:16"
5353;429;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** readBinaryWatch(int num, int* returnSize){
 
}";"";"2020-03-25 15:18:16"
5354;429;"Rust";"impl Solution {
    pub fn read_binary_watch(num: i32) -> 
Vec<String> {
        
    }
}";"";"2020-03-25 15:18:16"
5355;429;"Scala";"object Solution {
    def readBinaryWatch(num: Int): List[String] = {
 
    }
}";"";"2020-03-25 15:18:16"
5356;429;"Go";"func readBinaryWatch(num int) []string {
 
}";"";"2020-03-25 15:18:16"
5357;429;"Kotlin";"class Solution {
    fun readBinaryWatch(num: Int): List<String> {
 
    }
}";"";"2020-03-25 15:18:16"
5358;429;"Python3";"class Solution:
    def readBinaryWatch(self, num: int) -> List[str]
:";"";"2020-03-25 15:18:16"
5359;429;"JavaScript";"/**
 * @param {number} num
 * @return {string[]}
 */
var readBinaryWatch = function(num) {
 
};";"";"2020-03-25 15:18:16"
5360;429;"PHP";"class Solution {
 
    /**
     * @param Integer $num
     * @return String[]
     */
    function readBinaryWatch($num) {
        
    }
}";"";"2020-03-25 15:18:16"
5361;429;"Swift";"class Solution {
    func readBinaryWatch(_ num: Int) -> [String] {
        
    }
}";"";"2020-03-25 15:18:16"
5362;429;"Ruby";"# @param {Integer} num
# @return {String[]}
def read_binary_watch(num)
 
end";"";"2020-03-25 15:18:16"
5363;429;"Python";"class Solution(object):
    def readBinaryWatch(self, num):
        """"""
        :type num: int
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:16"
5364;430;"C#";"public class Solution {
    public bool IsPowerOfTwo(int n) {
 
    }
}";"";"2020-03-25 15:18:16"
5365;430;"Java";"class Solution {
    public boolean isPowerOfTwo(int n) {
 
    }
}";"";"2020-03-25 15:18:16"
5366;430;"C";"bool isPowerOfTwo(int n){
 
}";"";"2020-03-25 15:18:16"
5367;430;"Rust";"impl Solution {
    pub fn is_power_of_two(n: i32) -> bool {
 
    }
}";"";"2020-03-25 15:18:16"
5368;430;"Scala";"object Solution {
    def isPowerOfTwo(n: Int): Boolean = {
 
    }
}";"";"2020-03-25 15:18:16"
5369;430;"Go";"func isPowerOfTwo(n int) bool {
 
}";"";"2020-03-25 15:18:16"
5370;430;"Kotlin";"class Solution {
    fun isPowerOfTwo(n: Int): Boolean {
 
    }
}";"";"2020-03-25 15:18:16"
5371;430;"Python3";"class Solution:
    def isPowerOfTwo(self, n: int) -> bool:";"";"2020-03-25 15:18:16"
5372;430;"JavaScript";"/**
 * @param {number} n
 * @return {boolean}
 */
var isPowerOfTwo = function(n) {
 
};";"";"2020-03-25 15:18:16"
5373;430;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Boolean
     */
    function isPowerOfTwo($n) {
 
    }
}";"";"2020-03-25 15:18:16"
5374;430;"Swift";"class Solution {
    func isPowerOfTwo(_ n: Int) -> Bool {
 
    }
}";"";"2020-03-25 15:18:16"
5375;430;"Ruby";"# @param {Integer} n
# @return {Boolean}
def is_power_of_two(n)
 
end";"";"2020-03-25 15:18:16"
5376;430;"Python";"class Solution(object):
    def isPowerOfTwo(self, n):
        """"""
        :type n: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:16"
5377;431;"C#";"public class Solution {
    public int MinRefuelStops(int target, int 
startFuel, int[][] stations) {
 
    }
}";"";"2020-03-25 15:18:16"
5378;431;"Java";"class Solution {
    public int minRefuelStops(int target, int 
startFuel, int[][] stations) {
 
    }
}";"";"2020-03-25 15:18:16"
5379;431;"C";"int minRefuelStops(int target, int startFuel, int** 
stations, int stationsSize, int* stationsColSize){
 
}";"";"2020-03-25 15:18:16"
5380;431;"Rust";"impl Solution {
    pub fn min_refuel_stops(target: i32, 
start_fuel: i32, stations: Vec<Vec<i32>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:16"
5381;431;"Scala";"object Solution {
    def minRefuelStops(target: Int, startFuel: Int, 
stations: Array[Array[Int]]): Int = {
 
    }
}";"";"2020-03-25 15:18:16"
5382;431;"Go";"func minRefuelStops(target int, startFuel int, 
stations [][]int) int {
 
}";"";"2020-03-25 15:18:16"
5383;431;"Kotlin";"class Solution {
    fun minRefuelStops(target: Int, startFuel: Int, 
stations: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:16"
5384;431;"Python3";"class Solution:
    def minRefuelStops(self, target: int, 
startFuel: int, stations: List[List[int]]) -> int:";"";"2020-03-25 15:18:16"
5385;431;"JavaScript";"/**
 * @param {number} target
 * @param {number} startFuel
 * @param {number[][]} stations
 * @return {number}
 */
var minRefuelStops = function(target, startFuel, 
stations) {
 
};";"";"2020-03-25 15:18:16"
5386;431;"PHP";"class Solution {
 
    /**
     * @param Integer $target
     * @param Integer $startFuel
     * @param Integer[][] $stations
     * @return Integer
     */
    function minRefuelStops($target, $startFuel, 
$stations) {
        
    }
}";"";"2020-03-25 15:18:16"
5387;431;"Swift";"class Solution {
    func minRefuelStops(_ target: Int, _ startFuel: 
Int, _ stations: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:16"
5388;431;"Ruby";"# @param {Integer} target
# @param {Integer} start_fuel
# @param {Integer[][]} stations
# @return {Integer}
def min_refuel_stops(target, start_fuel, stations)
 
end";"";"2020-03-25 15:18:16"
5389;431;"Python";"class Solution(object):
    def minRefuelStops(self, target, startFuel, 
stations):
        """"""
        :type target: int
        :type startFuel: int
        :type stations: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:16"
5390;432;"C#";"public class Solution {
    public IList<IList<int>> CombinationSum(int[] 
candidates, int target) {
 
    }
}";"";"2020-03-25 15:18:16"
5391;432;"Java";"class Solution {
    public List<List<Integer>> combinationSum(int[] 
candidates, int target) {
 
    }
}";"";"2020-03-25 15:18:16"
5392;432;"Rust";"impl Solution {
    pub fn combination_sum(candidates: Vec<i32>, 
target: i32) -> Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:16"
5393;432;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** combinationSum(int* candidates, int 
candidatesSize, int target, int* returnSize, int** 
returnColumnSizes){
 
}";"";"2020-03-25 15:18:16"
5394;432;"Scala";"object Solution {
    def combinationSum(candidates: Array[Int], 
target: Int): List[List[Int]] = {
 
    }
}";"";"2020-03-25 15:18:16"
5395;432;"Go";"func combinationSum(candidates []int, target int) []
[]int {
 
}";"";"2020-03-25 15:18:16"
5396;432;"Kotlin";"class Solution {
    fun combinationSum(candidates: IntArray, 
target: Int): List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:16"
5397;432;"Python3";"class Solution:
    def combinationSum(self, candidates: List[int], 
target: int) -> List[List[int]]:";"";"2020-03-25 15:18:16"
5398;432;"JavaScript";"/**
 * @param {number[]} candidates
 * @param {number} target
 * @return {number[][]}
 */
var combinationSum = function(candidates, target) {
 
};";"";"2020-03-25 15:18:16"
5399;432;"PHP";"class Solution {";"";"2020-03-25 15:18:16"
5400;432;"Swift";"class Solution {
    func combinationSum(_ candidates: [Int], _ 
target: Int) -> [[Int]] {
        
    }
}";"";"2020-03-25 15:18:16"
5401;432;"Ruby";"# @param {Integer[]} candidates
# @param {Integer} target
# @return {Integer[][]}
def combination_sum(candidates, target)
 
end";"";"2020-03-25 15:18:16"
5402;432;"Python";"class Solution(object):
    def combinationSum(self, candidates, target):
        """"""
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:16"
5403;433;"C#";"public class Solution {
    public string[] FindOcurrences(string text, 
string first, string second) {
 
    }
}";"";"2020-03-25 15:18:16"
5404;433;"Java";"class Solution {
    public String[] findOcurrences(String text, 
String first, String second) {
 
    }
}";"";"2020-03-25 15:18:16"
5405;433;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** findOcurrences(char * text, char * first, 
char * second, int* returnSize){
 
}";"";"2020-03-25 15:18:16"
5406;433;"Rust";"impl Solution {
    pub fn find_ocurrences(text: String, first: 
String, second: String) -> Vec<String> {
        
    }
}";"";"2020-03-25 15:18:16"
5407;433;"Scala";"object Solution {
    def findOcurrences(text: String, first: String, 
second: String): Array[String] = {
 
    }
}";"";"2020-03-25 15:18:16"
5408;433;"Go";"func findOcurrences(text string, first string, 
second string) []string {
 
}";"";"2020-03-25 15:18:16"
5409;433;"Kotlin";"class Solution {
    fun findOcurrences(text: String, first: String, 
second: String): Array<String> {
 
    }
}";"";"2020-03-25 15:18:16"
5410;433;"Python3";"class Solution:
    def findOcurrences(self, text: str, first: str, 
second: str) -> List[str]:";"";"2020-03-25 15:18:16"
5411;433;"JavaScript";"/**
 * @param {string} text
 * @param {string} first
 * @param {string} second
 * @return {string[]}
 */
var findOcurrences = function(text, first, second) {
 
};";"";"2020-03-25 15:18:16"
5412;433;"PHP";"class Solution {
 
    /**
     * @param String $text
     * @param String $first
     * @param String $second
     * @return String[]
     */
    function findOcurrences($text, $first, $second) 
{
        
    }
}";"";"2020-03-25 15:18:16"
5413;433;"Swift";"class Solution {
    func findOcurrences(_ text: String, _ first: 
String, _ second: String) -> [String] {
        
    }
}";"";"2020-03-25 15:18:16"
5414;433;"Ruby";"# @param {String} text";"";"2020-03-25 15:18:16"
5415;433;"Python";"class Solution(object):
    def findOcurrences(self, text, first, second):
        """"""
        :type text: str
        :type first: str
        :type second: str
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:16"
5416;434;"C#";"public class Solution {
    public int ThreeSumMulti(int[] A, int target) {
 
    }
}";"";"2020-03-25 15:18:16"
5417;434;"Java";"class Solution {
    public int threeSumMulti(int[] A, int target) {
 
    }
}";"";"2020-03-25 15:18:16"
5418;434;"Rust";"impl Solution {
    pub fn three_sum_multi(a: Vec<i32>, target: i32)
 -> i32 {
        
    }
}";"";"2020-03-25 15:18:16"
5419;434;"C";"int threeSumMulti(int* A, int ASize, int target){
 
}";"";"2020-03-25 15:18:16"
5420;434;"Scala";"object Solution {
    def threeSumMulti(A: Array[Int], target: Int): 
Int = {
 
    }
}";"";"2020-03-25 15:18:16"
5421;434;"Go";"func threeSumMulti(A []int, target int) int {
 
}";"";"2020-03-25 15:18:16"
5422;434;"Kotlin";"class Solution {
    fun threeSumMulti(A: IntArray, target: Int): 
Int {
 
    }
}";"";"2020-03-25 15:18:16"
5423;434;"Python3";"class Solution:
    def threeSumMulti(self, A: List[int], target: 
int) -> int:";"";"2020-03-25 15:18:16"
5424;434;"JavaScript";"/**
 * @param {number[]} A
 * @param {number} target
 * @return {number}
 */
var threeSumMulti = function(A, target) {
 
};";"";"2020-03-25 15:18:16"
5425;434;"PHP";"class Solution {";"";"2020-03-25 15:18:16"
5426;434;"Swift";"class Solution {
    func threeSumMulti(_ A: [Int], _ target: Int) 
-> Int {
        
    }
}";"";"2020-03-25 15:18:16"
5427;434;"Ruby";"# @param {Integer[]} a
# @param {Integer} target
# @return {Integer}
def three_sum_multi(a, target)
 
end";"";"2020-03-25 15:18:16"
5428;434;"Python";"class Solution(object):
    def threeSumMulti(self, A, target):
        """"""
        :type A: List[int]
        :type target: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:16"
5429;435;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn prune_tree(root: 
Option<Rc<RefCell<TreeNode>>>) -> 
Option<Rc<RefCell<TreeNode>>> {
        
    }";"";"2020-03-25 15:18:16"
5430;435;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def pruneTree(root: TreeNode): TreeNode = {
 
    }
}";"";"2020-03-25 15:18:16"
5431;435;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func pruneTree(root *TreeNode) *TreeNode {
 
}";"";"2020-03-25 15:18:16"
5432;435;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return TreeNode
     */
    function pruneTree($root) {
        
    }
}";"";"2020-03-25 15:18:16"
5433;435;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func pruneTree(_ root: TreeNode?) -> TreeNode? {
        
    }
}";"";"2020-03-25 15:18:16"
5434;435;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {TreeNode}
def prune_tree(root)
 
end";"";"2020-03-25 15:18:16"
5435;435;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun pruneTree(root: TreeNode?): TreeNode? {
 
    }
}";"";"2020-03-25 15:18:16"
5436;436;"C#";"public class Solution {
    public int IntegerBreak(int n) {
 
    }
}";"";"2020-03-25 15:18:16"
5437;436;"Java";"class Solution {
    public int integerBreak(int n) {
 
    }
}";"";"2020-03-25 15:18:16"
5438;436;"Rust";"impl Solution {
    pub fn integer_break(n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:16"
5439;436;"C";"int integerBreak(int n){
 
}";"";"2020-03-25 15:18:16"
5440;436;"Scala";"object Solution {
    def integerBreak(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:16"
5441;436;"Go";"func integerBreak(n int) int {
 
}";"";"2020-03-25 15:18:16"
5442;436;"Kotlin";"class Solution {
    fun integerBreak(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:16"
5443;436;"Python3";"class Solution:
    def integerBreak(self, n: int) -> int:";"";"2020-03-25 15:18:16"
5444;436;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var integerBreak = function(n) {
 
};";"";"2020-03-25 15:18:16"
5445;436;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function integerBreak($n) {
        
    }
}";"";"2020-03-25 15:18:16"
5446;436;"Swift";"class Solution {
    func integerBreak(_ n: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:16"
5447;436;"Ruby";"# @param {Integer} n
# @return {Integer}
def integer_break(n)
 
end";"";"2020-03-25 15:18:16"
5448;436;"Python";"class Solution(object):
    def integerBreak(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:16"
5449;437;"C#";"public class Solution {
    public int MinTaps(int n, int[] ranges) {
        
    }
}";"";"2020-03-25 15:18:16"
5450;437;"Java";"class Solution {
    public int minTaps(int n, int[] ranges) {
 
    }
}";"";"2020-03-25 15:18:16"
5451;437;"Rust";"impl Solution {
    pub fn min_taps(n: i32, ranges: Vec<i32>) -> 
i32 {
 
    }
}";"";"2020-03-25 15:18:16"
5452;437;"C";"int minTaps(int n, int* ranges, int rangesSize){
 
}";"";"2020-03-25 15:18:16"
5453;437;"Scala";"object Solution {
    def minTaps(n: Int, ranges: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:16"
5454;437;"Go";"func minTaps(n int, ranges []int) int {
 
}";"";"2020-03-25 15:18:16"
5455;437;"Kotlin";"class Solution {
    fun minTaps(n: Int, ranges: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:16"
5456;437;"Python3";"class Solution:
    def minTaps(self, n: int, ranges: List[int]) -> 
int:";"";"2020-03-25 15:18:16"
5457;437;"JavaScript";"/**
 * @param {number} n
 * @param {number[]} ranges
 * @return {number}
 */
var minTaps = function(n, ranges) {
    
};";"";"2020-03-25 15:18:16"
5458;437;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @param Integer[] $ranges
     * @return Integer
     */
    function minTaps($n, $ranges) {
 
    }
}";"";"2020-03-25 15:18:16"
5459;437;"Swift";"class Solution {
    func minTaps(_ n: Int, _ ranges: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:16"
5460;437;"Ruby";"# @param {Integer} n
# @param {Integer[]} ranges
# @return {Integer}
def min_taps(n, ranges)
    
end";"";"2020-03-25 15:18:16"
5461;437;"Python";"class Solution(object):
    def minTaps(self, n, ranges):
        """"""
        :type n: int
        :type ranges: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:16"
5462;438;"C#";"public class Solution {
    public int SingleNumber(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:16"
5463;438;"Java";"class Solution {
    public int singleNumber(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:16"
5464;438;"Rust";"impl Solution {
    pub fn single_number(nums: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:16"
5465;438;"C";"int singleNumber(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:16"
5466;438;"Scala";"object Solution {
    def singleNumber(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:16"
5467;438;"Go";"func singleNumber(nums []int) int {
 
}";"";"2020-03-25 15:18:16"
5468;438;"Kotlin";"class Solution {
    fun singleNumber(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:16"
5469;438;"Python3";"class Solution:
    def singleNumber(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:16"
5470;438;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var singleNumber = function(nums) {
 
};";"";"2020-03-25 15:18:16"
5471;438;"PHP";"class Solution {";"";"2020-03-25 15:18:16"
5472;438;"Swift";"class Solution {
    func singleNumber(_ nums: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:16"
5473;438;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def single_number(nums)
 
end";"";"2020-03-25 15:18:16"
5474;438;"Python";"class Solution(object):
    def singleNumber(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:16"
5475;439;"C#";"public class Solution {
    public IList<int> CircularPermutation(int n, 
int start) {
 
    }
}";"";"2020-03-25 15:18:16"
5476;439;"Java";"class Solution {
    public List<Integer> circularPermutation(int n, 
int start) {
 
    }
}";"";"2020-03-25 15:18:16"
5477;439;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* circularPermutation(int n, int start, int* 
returnSize){
 
}";"";"2020-03-25 15:18:16"
5478;439;"Rust";"impl Solution {
    pub fn circular_permutation(n: i32, start: i32) 
-> Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:16"
5479;439;"Scala";"object Solution {
    def circularPermutation(n: Int, start: Int): 
List[Int] = {
 
    }
}";"";"2020-03-25 15:18:16"
5480;439;"Go";"func circularPermutation(n int, start int) []int {
 
}";"";"2020-03-25 15:18:16"
5481;439;"Kotlin";"class Solution {
    fun circularPermutation(n: Int, start: Int): 
List<Int> {
 
    }
}";"";"2020-03-25 15:18:16"
5482;439;"JavaScript";"/**
 * @param {number} n
 * @param {number} start
 * @return {number[]}
 */
var circularPermutation = function(n, start) {
 
};";"";"2020-03-25 15:18:16"
5483;439;"Python3";"class Solution:
    def circularPermutation(self, n: int, start: 
int) -> List[int]:";"";"2020-03-25 15:18:16"
5484;439;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @param Integer $start
     * @return Integer[]
     */
    function circularPermutation($n, $start) {
 
    }
}";"";"2020-03-25 15:18:16"
5485;439;"Swift";"class Solution {
    func circularPermutation(_ n: Int, _ start: Int)
 -> [Int] {
 
    }
}";"";"2020-03-25 15:18:16"
5486;439;"Ruby";"# @param {Integer} n
# @param {Integer} start
# @return {Integer[]}
def circular_permutation(n, start)
 
end";"";"2020-03-25 15:18:16"
5487;439;"Python";"class Solution(object):
    def circularPermutation(self, n, start):
        """"""
        :type n: int
        :type start: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:16"
5488;440;"C#";"public class Solution {
    public bool OneEditAway(string first, string 
second) {
 
    }
}";"";"2020-03-25 15:18:16"
5489;440;"Java";"class Solution {
    public boolean oneEditAway(String first, String 
second) {
 
    }
}";"";"2020-03-25 15:18:16"
5490;440;"Rust";"impl Solution {
    pub fn one_edit_away(first: String, second: 
String) -> bool {
 
    }
}";"";"2020-03-25 15:18:16"
5491;440;"C";"bool oneEditAway(char* first, char* second){
 
}";"";"2020-03-25 15:18:16"
5492;440;"Scala";"object Solution {
    def oneEditAway(first: String, second: String): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:16"
5493;440;"Go";"func oneEditAway(first string, second string) bool {
 
}";"";"2020-03-25 15:18:16"
5494;440;"Kotlin";"class Solution {
    fun oneEditAway(first: String, second: String): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:16"
5495;440;"Python3";"class Solution:
    def oneEditAway(self, first: str, second: str) 
-> bool:";"";"2020-03-25 15:18:16"
5496;440;"JavaScript";"/**
 * @param {string} first
 * @param {string} second
 * @return {boolean}
 */
var oneEditAway = function(first, second) {
 
};";"";"2020-03-25 15:18:16"
5497;440;"PHP";"class Solution {
 
    /**
     * @param String $first
     * @param String $second
     * @return Boolean
     */
    function oneEditAway($first, $second) {
 
    }
}";"";"2020-03-25 15:18:16"
5498;440;"Swift";"class Solution {
    func oneEditAway(_ first: String, _ second: 
String) -> Bool {
 
    }
}";"";"2020-03-25 15:18:16"
5499;440;"Ruby";"# @param {String} first
# @param {String} second
# @return {Boolean}
def one_edit_away(first, second)
 
end";"";"2020-03-25 15:18:16"
5500;440;"Python";"class Solution(object):
    def oneEditAway(self, first, second):
        """"""
        :type first: str
        :type second: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:16"
5501;441;"C#";"public class Solution {
    public int FindKthLargest(int[] nums, int k) {
 
    }
}";"";"2020-03-25 15:18:16"
5502;441;"Java";"class Solution {
    public int findKthLargest(int[] nums, int k) {
 
    }
}";"";"2020-03-25 15:18:16"
5503;441;"C";"int findKthLargest(int* nums, int numsSize, int k){
 
}";"";"2020-03-25 15:18:16"
5504;441;"Rust";"impl Solution {
    pub fn find_kth_largest(nums: Vec<i32>, k: i32) 
-> i32 {
 
    }
}";"";"2020-03-25 15:18:16"
5505;441;"Scala";"object Solution {
    def findKthLargest(nums: Array[Int], k: Int): 
Int = {
 
    }
}";"";"2020-03-25 15:18:16"
5506;441;"Go";"func findKthLargest(nums []int, k int) int {
 
}";"";"2020-03-25 15:18:16"
5507;441;"Kotlin";"class Solution {
    fun findKthLargest(nums: IntArray, k: Int): Int 
{
 
    }
}";"";"2020-03-25 15:18:16"
5508;441;"Python3";"class Solution:
    def findKthLargest(self, nums: List[int], k: 
int) -> int:";"";"2020-03-25 15:18:16"
5509;441;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
var findKthLargest = function(nums, k) {
 
};";"";"2020-03-25 15:18:16"
5510;441;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer $k
     * @return Integer
     */
    function findKthLargest($nums, $k) {
 
    }
}";"";"2020-03-25 15:18:16"
5511;441;"Swift";"class Solution {
    func findKthLargest(_ nums: [Int], _ k: Int) -> 
Int {
 
    }
}";"";"2020-03-25 15:18:16"
5512;441;"Ruby";"# @param {Integer[]} nums
# @param {Integer} k
# @return {Integer}
def find_kth_largest(nums, k)
 
end";"";"2020-03-25 15:18:16"
5513;441;"Python";"class Solution(object):
    def findKthLargest(self, nums, k):
        """"""
        :type nums: List[int]
        :type k: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:16"
5514;442;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode SortedArrayToBST(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:16"
5515;442;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:16"
5516;442;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* sortedArrayToBST(int* nums, int 
numsSize){
 
}";"";"2020-03-25 15:18:16"
5517;442;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn sorted_array_to_bst(nums: Vec<i32>) -> 
Option<Rc<RefCell<TreeNode>>> {
        
    }
}";"";"2020-03-25 15:18:16"
5518;442;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def sortedArrayToBST(nums: Array[Int]): 
TreeNode = {
 
    }
}";"";"2020-03-25 15:18:16"
5519;442;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func sortedArrayToBST(nums []int) *TreeNode {
 
}";"";"2020-03-25 15:18:16"
5520;442;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun sortedArrayToBST(nums: IntArray): TreeNode? 
{
 
    }
}";"";"2020-03-25 15:18:16"
5521;442;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def sortedArrayToBST(self, nums: List[int]) -> 
TreeNode:";"";"2020-03-25 15:18:16"
5522;442;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {number[]} nums
 * @return {TreeNode}
 */
var sortedArrayToBST = function(nums) {
 
};";"";"2020-03-25 15:18:16"
5523;442;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param Integer[] $nums
     * @return TreeNode
     */
    function sortedArrayToBST($nums) {
        
    }
}";"";"2020-03-25 15:18:16"
5524;442;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func sortedArrayToBST(_ nums: [Int]) -> 
TreeNode? {
        
    }
}";"";"2020-03-25 15:18:16"
5525;442;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:16"
5526;442;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def sortedArrayToBST(self, nums):
        """"""
        :type nums: List[int]
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:16"
5527;443;"C#";"public class Solution {
    public double AngleClock(int hour, int minutes) 
{
 
    }
}";"";"2020-03-25 15:18:16"
5528;443;"Java";"class Solution {
    public double angleClock(int hour, int minutes) 
{
 
    }
}";"";"2020-03-25 15:18:16"
5529;443;"Rust";"impl Solution {
    pub fn angle_clock(hour: i32, minutes: i32) -> 
f64 {
 
    }
}";"";"2020-03-25 15:18:16"
5530;443;"C";"double angleClock(int hour, int minutes){
 
}";"";"2020-03-25 15:18:16"
5531;443;"Scala";"object Solution {
    def angleClock(hour: Int, minutes: Int): Double 
= {
 
    }
}";"";"2020-03-25 15:18:16"
5532;443;"Go";"func angleClock(hour int, minutes int) float64 {
 
}";"";"2020-03-25 15:18:16"
5533;443;"Kotlin";"class Solution {
    fun angleClock(hour: Int, minutes: Int): Double 
{
 
    }
}";"";"2020-03-25 15:18:16"
5534;443;"Python3";"class Solution:
    def angleClock(self, hour: int, minutes: int) 
-> float:";"";"2020-03-25 15:18:16"
5535;443;"JavaScript";"/**
 * @param {number} hour
 * @param {number} minutes
 * @return {number}
 */
var angleClock = function(hour, minutes) {
 
};";"";"2020-03-25 15:18:16"
5536;443;"PHP";"class Solution {
 
    /**
     * @param Integer $hour
     * @param Integer $minutes
     * @return Float
     */
    function angleClock($hour, $minutes) {
 
    }
}";"";"2020-03-25 15:18:16"
5537;443;"Swift";"class Solution {
    func angleClock(_ hour: Int, _ minutes: Int) -> 
Double {
 
    }
}";"";"2020-03-25 15:18:16"
5538;443;"Ruby";"# @param {Integer} hour
# @param {Integer} minutes
# @return {Float}
def angle_clock(hour, minutes)
 
end";"";"2020-03-25 15:18:16"
5539;443;"Python";"class Solution(object):
    def angleClock(self, hour, minutes):
        """"""
        :type hour: int
        :type minutes: int
        :rtype: float
        """"""";"";"2020-03-25 15:18:16"
5540;444;"C#";"public class Solution {
    public int BalancedString(string s) {
 
    }
}";"";"2020-03-25 15:18:16"
5541;444;"Java";"class Solution {
    public int balancedString(String s) {
 
    }
}";"";"2020-03-25 15:18:16"
5542;444;"Rust";"impl Solution {
    pub fn balanced_string(s: String) -> i32 {
 
    }
}";"";"2020-03-25 15:18:16"
5543;444;"C";"int balancedString(char * s){
 
}";"";"2020-03-25 15:18:16"
5544;444;"Scala";"object Solution {
    def balancedString(s: String): Int = {
 
    }
}";"";"2020-03-25 15:18:16"
5545;444;"Go";"func balancedString(s string) int {
 
}";"";"2020-03-25 15:18:16"
5546;444;"Kotlin";"class Solution {
    fun balancedString(s: String): Int {
 
    }
}";"";"2020-03-25 15:18:16"
5547;444;"Python3";"class Solution:
    def balancedString(self, s: str) -> int:";"";"2020-03-25 15:18:16"
5548;444;"JavaScript";"/**
 * @param {string} s
 * @return {number}
 */
var balancedString = function(s) {
 
};";"";"2020-03-25 15:18:16"
5549;444;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return Integer
     */
    function balancedString($s) {
 
    }
}";"";"2020-03-25 15:18:16"
5550;444;"Swift";"class Solution {
    func balancedString(_ s: String) -> Int {
 
    }
}";"";"2020-03-25 15:18:16"
5551;444;"Ruby";"# @param {String} s
# @return {Integer}
def balanced_string(s)
 
end";"";"2020-03-25 15:18:16"
5552;444;"Python";"class Solution(object):
    def balancedString(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:16"
5553;445;"C#";"/*
// Definition for a Node.
public class Node {
    public int val;
    public Node left;
    public Node right;
 
    public Node(){}
    public Node(int _val,Node _left,Node _right) {
        val = _val;
        left = _left;
        right = _right;
    }
}
*/
public class Solution {
    public Node TreeToDoublyList(Node root) {
 
    }
}";"";"2020-03-25 15:18:16"
5554;445;"Java";"/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
 
    public Node() {}
 
    public Node(int _val) {
        val = _val;
    }
 
    public Node(int _val,Node _left,Node _right) {
        val = _val;
        left = _left;
        right = _right;
    }
};
*/
class Solution {
    public Node treeToDoublyList(Node root) {
        
    }
}";"";"2020-03-25 15:18:16"
5555;445;"C++";"/*";"";"2020-03-25 15:18:16"
5556;445;"Python3";"""""""
# Definition for a Node.
class Node:
    def __init__(self, val, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
""""""
class Solution:
    def treeToDoublyList(self, root: 'Node') -> 
'Node':";"";"2020-03-25 15:18:16"
5557;445;"JavaScript";"/**
 * // Definition for a Node.
 * function Node(val,left,right) {
 *    this.val = val;
 *    this.left = left;
 *    this.right = right;
 * };
 */
/**
 * @param {Node} root
 * @return {Node}
 */
var treeToDoublyList = function(root) {
 
};";"";"2020-03-25 15:18:16"
5558;445;"Python";"""""""
# Definition for a Node.
class Node(object):
    def __init__(self, val, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
""""""
class Solution(object):
    def treeToDoublyList(self, root):
        """"""
        :type root: Node
        :rtype: Node
        """"""";"";"2020-03-25 15:18:16"
5559;446;"MS SQL Server";"/* Write your T-SQL query statement below */";"";"2020-03-25 15:18:16"
5560;446;"Oracle";"/* Write your PL/SQL query statement below */";"";"2020-03-25 15:18:16"
5561;447;"C#";"public class Solution {
    public int CatMouseGame(int[][] graph) {
 
    }
}";"";"2020-03-25 15:18:16"
5562;447;"Java";"class Solution {
    public int catMouseGame(int[][] graph) {
 
    }
}";"";"2020-03-25 15:18:16"
5563;447;"C";"int catMouseGame(int** graph, int graphSize, int* 
graphColSize){
 
}";"";"2020-03-25 15:18:16"
5564;447;"Rust";"impl Solution {
    pub fn cat_mouse_game(graph: Vec<Vec<i32>>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:16"
5565;447;"Scala";"object Solution {
    def catMouseGame(graph: Array[Array[Int]]): Int 
= {
 
    }
}";"";"2020-03-25 15:18:16"
5566;447;"Go";"func catMouseGame(graph [][]int) int {
 
}";"";"2020-03-25 15:18:16"
5567;447;"Kotlin";"class Solution {
    fun catMouseGame(graph: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:16"
5568;447;"Python3";"class Solution:
    def catMouseGame(self, graph: List[List[int]]) 
-> int:";"";"2020-03-25 15:18:16"
5569;447;"JavaScript";"/**
 * @param {number[][]} graph
 * @return {number}
 */
var catMouseGame = function(graph) {
 
};";"";"2020-03-25 15:18:16"
5570;447;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $graph
     * @return Integer
     */
    function catMouseGame($graph) {
        
    }
}";"";"2020-03-25 15:18:16"
5571;447;"Swift";"class Solution {
    func catMouseGame(_ graph: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:16"
5572;447;"Ruby";"# @param {Integer[][]} graph";"";"2020-03-25 15:18:16"
5573;447;"Python";"class Solution(object):
    def catMouseGame(self, graph):
        """"""
        :type graph: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:16"
5574;448;"C#";"public class Solution {
    public int SplitArray(int[] nums, int m) {
 
    }
}";"";"2020-03-25 15:18:16"
5575;448;"Java";"class Solution {
    public int splitArray(int[] nums, int m) {
 
    }
}";"";"2020-03-25 15:18:16"
5576;448;"C";"int splitArray(int* nums, int numsSize, int m){
 
}";"";"2020-03-25 15:18:16"
5577;448;"Rust";"impl Solution {
    pub fn split_array(nums: Vec<i32>, m: i32) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:16"
5578;448;"Scala";"object Solution {
    def splitArray(nums: Array[Int], m: Int): Int = 
{
 
    }
}";"";"2020-03-25 15:18:16"
5579;448;"Go";"func splitArray(nums []int, m int) int {
 
}";"";"2020-03-25 15:18:16"
5580;448;"Kotlin";"class Solution {
    fun splitArray(nums: IntArray, m: Int): Int {
 
    }
}";"";"2020-03-25 15:18:16"
5581;448;"Python3";"class Solution:
    def splitArray(self, nums: List[int], m: int) 
-> int:";"";"2020-03-25 15:18:16"
5582;448;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} m
 * @return {number}
 */
var splitArray = function(nums, m) {
 
};";"";"2020-03-25 15:18:16"
5583;448;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer $m
     * @return Integer
     */
    function splitArray($nums, $m) {
        
    }
}";"";"2020-03-25 15:18:16"
5584;448;"Swift";"class Solution {
    func splitArray(_ nums: [Int], _ m: Int) -> Int 
{
        
    }
}";"";"2020-03-25 15:18:16"
5585;448;"Ruby";"# @param {Integer[]} nums
# @param {Integer} m
# @return {Integer}
def split_array(nums, m)
 
end";"";"2020-03-25 15:18:16"
5586;448;"Python";"class Solution(object):
    def splitArray(self, nums, m):
        """"""
        :type nums: List[int]
        :type m: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:16"
5587;449;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public bool IsPalindrome(ListNode head) {
 
    }
}";"";"2020-03-25 15:18:17"
5588;449;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
 
    }
}";"";"2020-03-25 15:18:17"
5589;449;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
bool isPalindrome(struct ListNode* head){
 
}";"";"2020-03-25 15:18:17"
5590;449;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn is_palindrome(head: 
Option<Box<ListNode>>) -> bool {
 
    }
}";"";"2020-03-25 15:18:17"
5591;449;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def isPalindrome(head: ListNode): Boolean = {
 
    }
}";"";"2020-03-25 15:18:17"
5592;449;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func isPalindrome(head *ListNode) bool {
 
}";"";"2020-03-25 15:18:17"
5593;449;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun isPalindrome(head: ListNode?): Boolean {
 
    }
}";"";"2020-03-25 15:18:17"
5594;449;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def isPalindrome(self, head: ListNode) -> bool:";"";"2020-03-25 15:18:17"
5595;449;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @return {boolean}
 */
var isPalindrome = function(head) {
 
};";"";"2020-03-25 15:18:17"
5596;449;"PHP";"/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
class Solution {
 
    /**
     * @param ListNode $head
     * @return Boolean
     */
    function isPalindrome($head) {
 
    }
}";"";"2020-03-25 15:18:17"
5597;449;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func isPalindrome(_ head: ListNode?) -> Bool {
 
    }
}";"";"2020-03-25 15:18:17"
5598;449;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# @param {ListNode} head
# @return {Boolean}
def is_palindrome(head)
 
end";"";"2020-03-25 15:18:17"
5599;449;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def isPalindrome(self, head):
        """"""
        :type head: ListNode
        :rtype: bool
        """"""";"";"2020-03-25 15:18:17"
5600;450;"C#";"public class Solution {
    public int NumTrees(int n) {
 
    }
}";"";"2020-03-25 15:18:17"
5601;450;"Java";"class Solution {
    public int numTrees(int n) {
 
    }
}";"";"2020-03-25 15:18:17"
5602;450;"Rust";"impl Solution {
    pub fn num_trees(n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:17"
5603;450;"C";"int numTrees(int n){
 
}";"";"2020-03-25 15:18:17"
5604;450;"Scala";"object Solution {
    def numTrees(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:17"
5605;450;"Go";"func numTrees(n int) int {
 
}";"";"2020-03-25 15:18:17"
5606;450;"Kotlin";"class Solution {
    fun numTrees(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:17"
5607;450;"Python3";"class Solution:
    def numTrees(self, n: int) -> int:";"";"2020-03-25 15:18:17"
5608;450;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var numTrees = function(n) {
 
};";"";"2020-03-25 15:18:17"
5609;450;"PHP";"class Solution {";"";"2020-03-25 15:18:17"
5610;450;"Swift";"class Solution {
    func numTrees(_ n: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:17"
5611;450;"Ruby";"# @param {Integer} n
# @return {Integer}
def num_trees(n)
 
end";"";"2020-03-25 15:18:17"
5612;450;"Python";"class Solution(object):
    def numTrees(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:17"
5613;451;"C#";"public class Solution {
    public int MaximumSwap(int num) {
 
    }
}";"";"2020-03-25 15:18:17"
5614;451;"Java";"class Solution {
    public int maximumSwap(int num) {
 
    }
}";"";"2020-03-25 15:18:17"
5615;451;"Rust";"impl Solution {
    pub fn maximum_swap(num: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:17"
5616;451;"C";"int maximumSwap(int num){
 
}";"";"2020-03-25 15:18:17"
5617;451;"Scala";"object Solution {
    def maximumSwap(num: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:17"
5618;451;"Go";"func maximumSwap(num int) int {
 
}";"";"2020-03-25 15:18:17"
5619;451;"Kotlin";"class Solution {
    fun maximumSwap(num: Int): Int {
 
    }
}";"";"2020-03-25 15:18:17"
5620;451;"Python3";"class Solution:
    def maximumSwap(self, num: int) -> int:";"";"2020-03-25 15:18:17"
5621;451;"JavaScript";"/**
 * @param {number} num
 * @return {number}
 */
var maximumSwap = function(num) {
 
};";"";"2020-03-25 15:18:17"
5622;451;"PHP";"class Solution {
 
    /**
     * @param Integer $num
     * @return Integer
     */
    function maximumSwap($num) {
        
    }
}";"";"2020-03-25 15:18:17"
5623;451;"Swift";"class Solution {
    func maximumSwap(_ num: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:17"
5624;451;"Ruby";"# @param {Integer} num
# @return {Integer}
def maximum_swap(num)
 
end";"";"2020-03-25 15:18:17"
5625;451;"Python";"class Solution(object):
    def maximumSwap(self, num):
        """"""
        :type num: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:17"
5626;452;"C#";"public class Solution {
    public IList<int> DiffWaysToCompute(string 
input) {
 
    }
}";"";"2020-03-25 15:18:17"
5627;452;"Java";"class Solution {
    public List<Integer> diffWaysToCompute(String 
input) {
 
    }
}";"";"2020-03-25 15:18:17"
5628;452;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* diffWaysToCompute(char * input, int* 
returnSize){
 
}";"";"2020-03-25 15:18:17"
5629;452;"Rust";"impl Solution {
    pub fn diff_ways_to_compute(input: String) -> 
Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:17"
5630;452;"Scala";"object Solution {
    def diffWaysToCompute(input: String): List[Int] 
= {
 
    }
}";"";"2020-03-25 15:18:17"
5631;452;"Go";"func diffWaysToCompute(input string) []int {
 
}";"";"2020-03-25 15:18:17"
5632;452;"Kotlin";"class Solution {
    fun diffWaysToCompute(input: String): List<Int> 
{
 
    }
}";"";"2020-03-25 15:18:17"
5633;452;"Python3";"class Solution:
    def diffWaysToCompute(self, input: str) -> List
[int]:";"";"2020-03-25 15:18:17"
5634;452;"JavaScript";"/**
 * @param {string} input
 * @return {number[]}
 */
var diffWaysToCompute = function(input) {
 
};";"";"2020-03-25 15:18:17"
5635;452;"PHP";"class Solution {
 
    /**
     * @param String $input
     * @return Integer[]
     */
    function diffWaysToCompute($input) {
 
    }
}";"";"2020-03-25 15:18:17"
5636;452;"Swift";"class Solution {
    func diffWaysToCompute(_ input: String) -> [Int]
 {
 
    }
}";"";"2020-03-25 15:18:17"
5637;452;"Ruby";"# @param {String} input
# @return {Integer[]}
def diff_ways_to_compute(input)
 
end";"";"2020-03-25 15:18:17"
5638;452;"Python";"class Solution(object):
    def diffWaysToCompute(self, input):
        """"""
        :type input: str
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:17"
5639;453;"C#";"public class Solution {
    public IList<IList<int>> PermuteUnique(int[] 
nums) {
 
    }
}";"";"2020-03-25 15:18:17"
5640;453;"Java";"class Solution {
    public List<List<Integer>> permuteUnique(int[] 
nums) {
 
    }
}";"";"2020-03-25 15:18:17"
5641;453;"Rust";"impl Solution {
    pub fn permute_unique(nums: Vec<i32>) -> 
Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:17"
5642;453;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** permuteUnique(int* nums, int numsSize, int* 
returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:17"
5643;453;"Scala";"object Solution {
    def permuteUnique(nums: Array[Int]): List[List
[Int]] = {
 
    }
}";"";"2020-03-25 15:18:17"
5644;453;"Go";"func permuteUnique(nums []int) [][]int {
 
}";"";"2020-03-25 15:18:17"
5645;453;"Kotlin";"class Solution {
    fun permuteUnique(nums: IntArray): 
List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:17"
5646;453;"Python3";"class Solution:
    def permuteUnique(self, nums: List[int]) -> List
[List[int]]:";"";"2020-03-25 15:18:17"
5647;453;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number[][]}
 */
var permuteUnique = function(nums) {
 
};";"";"2020-03-25 15:18:17"
5648;453;"PHP";"class Solution {";"";"2020-03-25 15:18:17"
5649;453;"Swift";"class Solution {
    func permuteUnique(_ nums: [Int]) -> [[Int]] {
        
    }
}";"";"2020-03-25 15:18:17"
5650;453;"Ruby";"# @param {Integer[]} nums
# @return {Integer[][]}
def permute_unique(nums)
 
end";"";"2020-03-25 15:18:17"
5651;453;"Python";"class Solution(object):
    def permuteUnique(self, nums):
        """"""
        :type nums: List[int]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:17"
5652;454;"C#";"public class Solution {
    public int[][] ImageSmoother(int[][] M) {
 
    }
}";"";"2020-03-25 15:18:17"
5653;454;"Java";"class Solution {
    public int[][] imageSmoother(int[][] M) {
 
    }
}";"";"2020-03-25 15:18:17"
5654;454;"Rust";"impl Solution {
    pub fn image_smoother(m: Vec<Vec<i32>>) -> 
Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:17"
5655;454;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** imageSmoother(int** M, int MSize, int* 
MColSize, int* returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:17"
5656;454;"Scala";"object Solution {
    def imageSmoother(M: Array[Array[Int]]): Array
[Array[Int]] = {
 
    }
}";"";"2020-03-25 15:18:17"
5657;454;"Go";"func imageSmoother(M [][]int) [][]int {
 
}";"";"2020-03-25 15:18:17"
5658;454;"Kotlin";"class Solution {
    fun imageSmoother(M: Array<IntArray>): 
Array<IntArray> {
 
    }
}";"";"2020-03-25 15:18:17"
5659;454;"Python3";"class Solution:
    def imageSmoother(self, M: List[List[int]]) -> 
List[List[int]]:";"";"2020-03-25 15:18:17"
5660;454;"JavaScript";"/**
 * @param {number[][]} M
 * @return {number[][]}
 */
var imageSmoother = function(M) {
 
};";"";"2020-03-25 15:18:17"
5661;454;"PHP";"class Solution {";"";"2020-03-25 15:18:17"
5662;454;"Swift";"class Solution {
    func imageSmoother(_ M: [[Int]]) -> [[Int]] {
        
    }
}";"";"2020-03-25 15:18:17"
5663;454;"Ruby";"# @param {Integer[][]} m
# @return {Integer[][]}
def image_smoother(m)
 
end";"";"2020-03-25 15:18:17"
5664;454;"Python";"class Solution(object):
    def imageSmoother(self, M):
        """"""
        :type M: List[List[int]]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:17"
5665;455;"C#";"public class Solution {
    public int MinSetSize(int[] arr) {
        
    }
}";"";"2020-03-25 15:18:17"
5666;455;"Java";"class Solution {
    public int minSetSize(int[] arr) {
 
    }
}";"";"2020-03-25 15:18:17"
5667;455;"Rust";"impl Solution {
    pub fn min_set_size(arr: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:17"
5668;455;"C";"int minSetSize(int* arr, int arrSize){
 
}";"";"2020-03-25 15:18:17"
5669;455;"Scala";"object Solution {
    def minSetSize(arr: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:17"
5670;455;"Go";"func minSetSize(arr []int) int {
 
}";"";"2020-03-25 15:18:17"
5671;455;"Kotlin";"class Solution {
    fun minSetSize(arr: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:17"
5672;455;"Python3";"class Solution:
    def minSetSize(self, arr: List[int]) -> int:";"";"2020-03-25 15:18:17"
5673;455;"JavaScript";"/**
 * @param {number[]} arr
 * @return {number}
 */
var minSetSize = function(arr) {
    
};";"";"2020-03-25 15:18:17"
5674;455;"PHP";"class Solution {";"";"2020-03-25 15:18:17"
5675;455;"Swift";"class Solution {
    func minSetSize(_ arr: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:17"
5676;455;"Ruby";"# @param {Integer[]} arr
# @return {Integer}
def min_set_size(arr)
    
end";"";"2020-03-25 15:18:17"
5677;455;"Python";"class Solution(object):
    def minSetSize(self, arr):
        """"""
        :type arr: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:17"
5678;456;"C#";"public class MyHashSet {
 
    /** Initialize your data structure here. */
    public MyHashSet() {
 
    }
    
    public void Add(int key) {
 
    }
    
    public void Remove(int key) {
 
    }
    
    /** Returns true if this set contains the 
specified element */
    public bool Contains(int key) {
 
    }
}
 
/**
 * Your MyHashSet object will be instantiated and 
called as such:
 * MyHashSet obj = new MyHashSet();";"";"2020-03-25 15:18:17"
5679;456;"Java";"class MyHashSet {
 
    /** Initialize your data structure here. */
    public MyHashSet() {
 
    }
    
    public void add(int key) {
 
    }
    
    public void remove(int key) {
 
    }
    
    /** Returns true if this set contains the 
specified element */
    public boolean contains(int key) {
 
    }
}
 
/**
 * Your MyHashSet object will be instantiated and 
called as such:
 * MyHashSet obj = new MyHashSet();";"";"2020-03-25 15:18:17"
5680;456;"C";"typedef struct {
    
} MyHashSet;
 
/** Initialize your data structure here. */
 
MyHashSet* myHashSetCreate() {
    
}
 
void myHashSetAdd(MyHashSet* obj, int key) {
  
}
 
void myHashSetRemove(MyHashSet* obj, int key) {
  
}
 
/** Returns true if this set contains the specified 
element */
bool myHashSetContains(MyHashSet* obj, int key) {
  
}
 
void myHashSetFree(MyHashSet* obj) {
    ";"";"2020-03-25 15:18:17"
5681;456;"Python3";"class MyHashSet:
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
        
 
    def add(self, key: int) -> None:
        
 
    def remove(self, key: int) -> None:
        
 
    def contains(self, key: int) -> bool:
        """"""
        Returns true if this set contains the 
specified element
        """"""
        
 
 
# Your MyHashSet object will be instantiated and 
called as such:
# obj = MyHashSet()
# obj.add(key)";"";"2020-03-25 15:18:17"
5682;456;"JavaScript";"/**
 * Initialize your data structure here.
 */
var MyHashSet = function() {
 
};
 
/** 
 * @param {number} key
 * @return {void}
 */
MyHashSet.prototype.add = function(key) {
 
};
 
/** 
 * @param {number} key
 * @return {void}
 */
MyHashSet.prototype.remove = function(key) {
 
};
 
/**
 * Returns true if this set contains the specified 
element ";"";"2020-03-25 15:18:17"
5683;456;"Ruby";"class MyHashSet
 
=begin
    Initialize your data structure here.
=end
    def initialize()
 
    end
 
 
=begin
    :type key: Integer
    :rtype: Void
=end
    def add(key)
 
    end
 
 
=begin
    :type key: Integer
    :rtype: Void
=end
    def remove(key)
 
    end";"";"2020-03-25 15:18:17"
5684;456;"Python";"class MyHashSet(object):
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
        
 
    def add(self, key):
        """"""
        :type key: int
        :rtype: None
        """"""
        
 
    def remove(self, key):
        """"""
        :type key: int
        :rtype: None
        """"""
        
 
    def contains(self, key):
        """"""
        Returns true if this set contains the 
specified element";"";"2020-03-25 15:18:17"
5685;457;"C#";"public class Solution {
    public int NumDecodings(string s) {
 
    }
}";"";"2020-03-25 15:18:17"
5686;457;"Java";"class Solution {
    public int numDecodings(String s) {
 
    }
}";"";"2020-03-25 15:18:17"
5687;457;"C";"int numDecodings(char * s){
 
}";"";"2020-03-25 15:18:17"
5688;457;"Rust";"impl Solution {
    pub fn num_decodings(s: String) -> i32 {
        
    }
}";"";"2020-03-25 15:18:17"
5689;457;"Scala";"object Solution {
    def numDecodings(s: String): Int = {
 
    }
}";"";"2020-03-25 15:18:17"
5690;457;"Go";"func numDecodings(s string) int {
 
}";"";"2020-03-25 15:18:17"
5691;457;"Kotlin";"class Solution {
    fun numDecodings(s: String): Int {
 
    }
}";"";"2020-03-25 15:18:17"
5692;457;"Python3";"class Solution:
    def numDecodings(self, s: str) -> int:";"";"2020-03-25 15:18:17"
5693;457;"JavaScript";"/**
 * @param {string} s
 * @return {number}
 */
var numDecodings = function(s) {
 
};";"";"2020-03-25 15:18:17"
5694;457;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return Integer
     */
    function numDecodings($s) {
        
    }
}";"";"2020-03-25 15:18:17"
5695;457;"Swift";"class Solution {
    func numDecodings(_ s: String) -> Int {
        
    }
}";"";"2020-03-25 15:18:17"
5696;457;"Ruby";"# @param {String} s";"";"2020-03-25 15:18:17"
5697;457;"Python";"class Solution(object):
    def numDecodings(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:17"
5698;458;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode ConstructMaximumBinaryTree(int[]
 nums) {
 
    }
}";"";"2020-03-25 15:18:17"
5699;458;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode constructMaximumBinaryTree(int[]
 nums) {
 
    }
}";"";"2020-03-25 15:18:17"
5700;458;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* constructMaximumBinaryTree(int* 
nums, int numsSize){
 
}";"";"2020-03-25 15:18:17"
5701;458;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn construct_maximum_binary_tree(nums: 
Vec<i32>) -> Option<Rc<RefCell<TreeNode>>> {
        
    }
}";"";"2020-03-25 15:18:17"
5702;458;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def constructMaximumBinaryTree(nums: Array[Int])
: TreeNode = {
 
    }
}";"";"2020-03-25 15:18:17"
5703;458;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func constructMaximumBinaryTree(nums []int) 
*TreeNode {
 
}";"";"2020-03-25 15:18:17"
5704;458;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun constructMaximumBinaryTree(nums: IntArray): 
TreeNode? {
 
    }
}";"";"2020-03-25 15:18:17"
5705;458;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def constructMaximumBinaryTree(self, nums: List
[int]) -> TreeNode:";"";"2020-03-25 15:18:17"
5706;458;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {number[]} nums
 * @return {TreeNode}
 */
var constructMaximumBinaryTree = function(nums) {
 
};";"";"2020-03-25 15:18:17"
5707;458;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param Integer[] $nums
     * @return TreeNode
     */
    function constructMaximumBinaryTree($nums) {
        
    }
}";"";"2020-03-25 15:18:17"
5708;458;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func constructMaximumBinaryTree(_ nums: [Int]) 
-> TreeNode? {
        
    }
}";"";"2020-03-25 15:18:17"
5709;458;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:17"
5710;458;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def constructMaximumBinaryTree(self, nums):
        """"""
        :type nums: List[int]
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:17"
5711;459;"Java";"/*
// Employee info
class Employee {
    // It's the unique id of each node;
    // unique id of this employee
    public int id;
    // the importance value of this employee
    public int importance;
    // the id of direct subordinates
    public List<Integer> subordinates;
};
*/
class Solution {
    public int getImportance(List<Employee> 
employees, int id) {
        
    }
}";"";"2020-03-25 15:18:17"
5712;459;"Python3";"""""""
# Employee info
class Employee:
    def __init__(self, id: int, importance: int, 
subordinates: List[int]):
        # It's the unique id of each node.
        # unique id of this employee
        self.id = id
        # the importance value of this employee
        self.importance = importance
        # the id of direct subordinates
        self.subordinates = subordinates
""""""
class Solution:
    def getImportance(self, employees: List
['Employee'], id: int) -> int:";"";"2020-03-25 15:18:17"
5713;459;"Ruby";"=begin
# Employee info
class Employee
    attr_accessor :id, :importance, :subordinates
    def initialize( id, importance, subordinates)
        # It's the unique id of each node.
        # unique id of this employee
        @id = id
        # the importance value of this employee
        @importance = importance
        # the id of direct subordinates
        @subordinates = subordinates
    end
end
=end
# @param {Employee} employees
# @param {Integer} id
# @return {Integer}
def get_importance(employees, id)
    
end";"";"2020-03-25 15:18:17"
5714;459;"Python";"""""""
# Employee info
class Employee(object):
    def __init__(self, id, importance, subordinates)
:
        #################
        :type id: int
        :type importance: int
        :type subordinates: List[int]
        #################
        # It's the unique id of each node.
        # unique id of this employee
        self.id = id
        # the importance value of this employee
        self.importance = importance
        # the id of direct subordinates
        self.subordinates = subordinates
""""""
class Solution(object):
    def getImportance(self, employees, id):
        """"""
        :type employees: List[Employee]
        :type id: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:17"
5715;460;"C#";"public class Solution {
    public IList<int> SequentialDigits(int low, int 
high) {
 
    }
}";"";"2020-03-25 15:18:17"
5716;460;"Java";"class Solution {
    public List<Integer> sequentialDigits(int low, 
int high) {
 
    }
}";"";"2020-03-25 15:18:17"
5717;460;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* sequentialDigits(int low, int high, int* 
returnSize){
 
}";"";"2020-03-25 15:18:17"
5718;460;"Rust";"impl Solution {
    pub fn sequential_digits(low: i32, high: i32) 
-> Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:17"
5719;460;"Scala";"object Solution {
    def sequentialDigits(low: Int, high: Int): List
[Int] = {
 
    }
}";"";"2020-03-25 15:18:17"
5720;460;"Go";"func sequentialDigits(low int, high int) []int {
 
}";"";"2020-03-25 15:18:17"
5721;460;"Kotlin";"class Solution {
    fun sequentialDigits(low: Int, high: Int): 
List<Int> {
 
    }
}";"";"2020-03-25 15:18:17"
5722;460;"Python3";"class Solution:
    def sequentialDigits(self, low: int, high: int) 
-> List[int]:";"";"2020-03-25 15:18:17"
5723;460;"JavaScript";"/**
 * @param {number} low
 * @param {number} high
 * @return {number[]}
 */
var sequentialDigits = function(low, high) {
 
};";"";"2020-03-25 15:18:17"
5724;460;"PHP";"class Solution {
 
    /**
     * @param Integer $low
     * @param Integer $high
     * @return Integer[]
     */
    function sequentialDigits($low, $high) {
 
    }
}";"";"2020-03-25 15:18:17"
5725;460;"Swift";"class Solution {
    func sequentialDigits(_ low: Int, _ high: Int) 
-> [Int] {
 
    }
}";"";"2020-03-25 15:18:17"
5726;460;"Ruby";"# @param {Integer} low";"";"2020-03-25 15:18:17"
5727;460;"Python";"class Solution(object):
    def sequentialDigits(self, low, high):
        """"""
        :type low: int
        :type high: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:17"
5728;461;"C#";"public class Solution {
    public int NumRescueBoats(int[] people, int 
limit) {
 
    }
}";"";"2020-03-25 15:18:17"
5729;461;"Java";"class Solution {
    public int numRescueBoats(int[] people, int 
limit) {
 
    }
}";"";"2020-03-25 15:18:17"
5730;461;"C";"int numRescueBoats(int* people, int peopleSize, int 
limit){
 
}";"";"2020-03-25 15:18:17"
5731;461;"Rust";"impl Solution {
    pub fn num_rescue_boats(people: Vec<i32>, 
limit: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:17"
5732;461;"Scala";"object Solution {
    def numRescueBoats(people: Array[Int], limit: 
Int): Int = {
 
    }
}";"";"2020-03-25 15:18:17"
5733;461;"Python3";"class Solution:
    def numRescueBoats(self, people: List[int], 
limit: int) -> int:";"";"2020-03-25 15:18:17"
5734;461;"JavaScript";"/**
 * @param {number[]} people
 * @param {number} limit
 * @return {number}
 */
var numRescueBoats = function(people, limit) {
 
};";"";"2020-03-25 15:18:17"
5735;461;"PHP";"class Solution {
 
    /**
     * @param Integer[] $people
     * @param Integer $limit
     * @return Integer
     */
    function numRescueBoats($people, $limit) {
        
    }
}";"";"2020-03-25 15:18:17"
5736;461;"Swift";"class Solution {
    func numRescueBoats(_ people: [Int], _ limit: 
Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:17"
5737;461;"Ruby";"# @param {Integer[]} people";"";"2020-03-25 15:18:17"
5738;461;"Python";"class Solution(object):
    def numRescueBoats(self, people, limit):
        """"""
        :type people: List[int]
        :type limit: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:17"
5739;461;"Kotlin";"class Solution {
    fun numRescueBoats(people: IntArray, limit: Int)
: Int {
 
    }
}";"";"2020-03-25 15:18:17"
5740;462;"C#";"public class Solution {
    public bool IsPowerOfFour(int num) {
 
    }
}";"";"2020-03-25 15:18:17"
5741;462;"Java";"class Solution {
    public boolean isPowerOfFour(int num) {
 
    }
}";"";"2020-03-25 15:18:17"
5742;462;"C";"bool isPowerOfFour(int num){
 
}";"";"2020-03-25 15:18:17"
5743;462;"Rust";"impl Solution {
    pub fn is_power_of_four(num: i32) -> bool {
        
    }
}";"";"2020-03-25 15:18:17"
5744;462;"Scala";"object Solution {
    def isPowerOfFour(num: Int): Boolean = {
 
    }
}";"";"2020-03-25 15:18:17"
5745;462;"Go";"func isPowerOfFour(num int) bool {
 
}";"";"2020-03-25 15:18:17"
5746;462;"Kotlin";"class Solution {
    fun isPowerOfFour(num: Int): Boolean {
 
    }
}";"";"2020-03-25 15:18:17"
5747;462;"Python3";"class Solution:
    def isPowerOfFour(self, num: int) -> bool:";"";"2020-03-25 15:18:17"
5748;462;"JavaScript";"/**
 * @param {number} num
 * @return {boolean}
 */
var isPowerOfFour = function(num) {
 
};";"";"2020-03-25 15:18:17"
5749;462;"PHP";"class Solution {
 
    /**
     * @param Integer $num
     * @return Boolean
     */
    function isPowerOfFour($num) {
        
    }
}";"";"2020-03-25 15:18:17"
5750;462;"Swift";"class Solution {
    func isPowerOfFour(_ num: Int) -> Bool {
        
    }
}";"";"2020-03-25 15:18:17"
5751;462;"Ruby";"# @param {Integer} num
# @return {Boolean}
def is_power_of_four(num)
 
end";"";"2020-03-25 15:18:17"
5752;462;"Python";"class Solution(object):
    def isPowerOfFour(self, num):
        """"""
        :type num: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:17"
5753;463;"C#";"public class Solution {
    public int MinScoreTriangulation(int[] A) {
 
    }
}";"";"2020-03-25 15:18:17"
5754;463;"Java";"class Solution {
    public int minScoreTriangulation(int[] A) {
 
    }
}";"";"2020-03-25 15:18:17"
5755;463;"Rust";"impl Solution {
    pub fn min_score_triangulation(a: Vec<i32>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:17"
5756;463;"C";"int minScoreTriangulation(int* A, int ASize){
 
}";"";"2020-03-25 15:18:17"
5757;463;"Scala";"object Solution {
    def minScoreTriangulation(A: Array[Int]): Int = 
{
 
    }
}";"";"2020-03-25 15:18:17"
5758;463;"Go";"func minScoreTriangulation(A []int) int {
 
}";"";"2020-03-25 15:18:17"
5759;463;"Kotlin";"class Solution {
    fun minScoreTriangulation(A: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:17"
5760;463;"Python3";"class Solution:
    def minScoreTriangulation(self, A: List[int]) 
-> int:";"";"2020-03-25 15:18:17"
5761;463;"JavaScript";"/**
 * @param {number[]} A
 * @return {number}
 */
var minScoreTriangulation = function(A) {
 
};";"";"2020-03-25 15:18:17"
5762;463;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @return Integer
     */
    function minScoreTriangulation($A) {
        
    }
}";"";"2020-03-25 15:18:17"
5763;463;"Swift";"class Solution {
    func minScoreTriangulation(_ A: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:17"
5764;463;"Ruby";"# @param {Integer[]} a
# @return {Integer}
def min_score_triangulation(a)
 
end";"";"2020-03-25 15:18:17"
5765;463;"Python";"class Solution(object):
    def minScoreTriangulation(self, A):
        """"""
        :type A: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:17"
5766;464;"C#";"public class Solution {
    public bool IsRectangleCover(int[][] rectangles)
 {
 
    }
}";"";"2020-03-25 15:18:17"
5767;464;"Java";"class Solution {
    public boolean isRectangleCover(int[][] 
rectangles) {
 
    }
}";"";"2020-03-25 15:18:17"
5768;464;"C";"bool isRectangleCover(int** rectangles, int 
rectanglesSize, int* rectanglesColSize){
 
}";"";"2020-03-25 15:18:17"
5769;464;"Rust";"impl Solution {
    pub fn is_rectangle_cover(rectangles: 
Vec<Vec<i32>>) -> bool {
        
    }
}";"";"2020-03-25 15:18:17"
5770;464;"Scala";"object Solution {
    def isRectangleCover(rectangles: Array[Array
[Int]]): Boolean = {
 
    }
}";"";"2020-03-25 15:18:17"
5771;464;"Go";"func isRectangleCover(rectangles [][]int) bool {
 
}";"";"2020-03-25 15:18:17"
5772;464;"Kotlin";"class Solution {
    fun isRectangleCover(rectangles: 
Array<IntArray>): Boolean {
 
    }
}";"";"2020-03-25 15:18:17"
5773;464;"Python3";"class Solution:
    def isRectangleCover(self, rectangles: List[List
[int]]) -> bool:";"";"2020-03-25 15:18:17"
5774;464;"JavaScript";"/**
 * @param {number[][]} rectangles
 * @return {boolean}
 */
var isRectangleCover = function(rectangles) {
 
};";"";"2020-03-25 15:18:17"
5775;464;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $rectangles
     * @return Boolean
     */
    function isRectangleCover($rectangles) {
        
    }
}";"";"2020-03-25 15:18:17"
5776;464;"Swift";"class Solution {
    func isRectangleCover(_ rectangles: [[Int]]) -> 
Bool {
        
    }
}";"";"2020-03-25 15:18:17"
5777;464;"Ruby";"# @param {Integer[][]} rectangles";"";"2020-03-25 15:18:17"
5778;464;"Python";"class Solution(object):
    def isRectangleCover(self, rectangles):
        """"""
        :type rectangles: List[List[int]]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:17"
5779;465;"C#";"public class Solution {
    public bool ReachingPoints(int sx, int sy, int 
tx, int ty) {
 
    }
}";"";"2020-03-25 15:18:17"
5780;465;"Java";"class Solution {
    public boolean reachingPoints(int sx, int sy, 
int tx, int ty) {
 
    }
}";"";"2020-03-25 15:18:17"
5781;465;"Rust";"impl Solution {
    pub fn reaching_points(sx: i32, sy: i32, tx: 
i32, ty: i32) -> bool {
        
    }
}";"";"2020-03-25 15:18:17"
5782;465;"C";"bool reachingPoints(int sx, int sy, int tx, int ty){
 
}";"";"2020-03-25 15:18:17"
5783;465;"Scala";"object Solution {
    def reachingPoints(sx: Int, sy: Int, tx: Int, 
ty: Int): Boolean = {
 
    }
}";"";"2020-03-25 15:18:17"
5784;465;"Go";"func reachingPoints(sx int, sy int, tx int, ty int) 
bool {
 
}";"";"2020-03-25 15:18:17"
5785;465;"Kotlin";"class Solution {
    fun reachingPoints(sx: Int, sy: Int, tx: Int, 
ty: Int): Boolean {
 
    }
}";"";"2020-03-25 15:18:17"
5786;465;"Python3";"class Solution:
    def reachingPoints(self, sx: int, sy: int, tx: 
int, ty: int) -> bool:";"";"2020-03-25 15:18:17"
5787;465;"JavaScript";"/**
 * @param {number} sx
 * @param {number} sy
 * @param {number} tx
 * @param {number} ty
 * @return {boolean}
 */
var reachingPoints = function(sx, sy, tx, ty) {
 
};";"";"2020-03-25 15:18:17"
5788;465;"PHP";"class Solution {
 
    /**
     * @param Integer $sx
     * @param Integer $sy
     * @param Integer $tx
     * @param Integer $ty
     * @return Boolean
     */
    function reachingPoints($sx, $sy, $tx, $ty) {
        
    }
}";"";"2020-03-25 15:18:17"
5789;465;"Swift";"class Solution {
    func reachingPoints(_ sx: Int, _ sy: Int, _ tx: 
Int, _ ty: Int) -> Bool {
        
    }
}";"";"2020-03-25 15:18:17"
5790;465;"Ruby";"# @param {Integer} sx
# @param {Integer} sy
# @param {Integer} tx
# @param {Integer} ty
# @return {Boolean}
def reaching_points(sx, sy, tx, ty)
 
end";"";"2020-03-25 15:18:17"
5791;465;"Python";"class Solution(object):
    def reachingPoints(self, sx, sy, tx, ty):
        """"""
        :type sx: int
        :type sy: int
        :type tx: int
        :type ty: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:17"
5792;466;"C#";"public class Solution {
    public string LongestPrefix(string s) {
 
    }
}";"";"2020-03-25 15:18:17"
5793;466;"Java";"class Solution {
    public String longestPrefix(String s) {
 
    }
}";"";"2020-03-25 15:18:17"
5794;466;"C";"char * longestPrefix(char * s){
 
}";"";"2020-03-25 15:18:17"
5795;466;"Rust";"impl Solution {
    pub fn longest_prefix(s: String) -> String {
 
    }
}";"";"2020-03-25 15:18:17"
5796;466;"Scala";"object Solution {
    def longestPrefix(s: String): String = {
 
    }
}";"";"2020-03-25 15:18:17"
5797;466;"Go";"func longestPrefix(s string) string {
 
}";"";"2020-03-25 15:18:17"
5798;466;"Kotlin";"class Solution {
    fun longestPrefix(s: String): String {
 
    }
}";"";"2020-03-25 15:18:17"
5799;466;"Python3";"class Solution:
    def longestPrefix(self, s: str) -> str:";"";"2020-03-25 15:18:17"
5800;466;"JavaScript";"/**
 * @param {string} s
 * @return {string}
 */
var longestPrefix = function(s) {
 
};";"";"2020-03-25 15:18:17"
5801;466;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return String
     */
    function longestPrefix($s) {
 
    }
}";"";"2020-03-25 15:18:17"
5802;466;"Swift";"class Solution {
    func longestPrefix(_ s: String) -> String {
        
    }
}";"";"2020-03-25 15:18:17"
5803;466;"Ruby";"# @param {String} s
# @return {String}
def longest_prefix(s)
 
end";"";"2020-03-25 15:18:17"
5804;466;"Python";"class Solution(object):
    def longestPrefix(self, s):
        """"""
        :type s: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:17"
5805;467;"C#";"public class Solution {
    public int NumSpecialEquivGroups(string[] A) {
 
    }
}";"";"2020-03-25 15:18:17"
5806;467;"Java";"class Solution {
    public int numSpecialEquivGroups(String[] A) {
 
    }
}";"";"2020-03-25 15:18:17"
5807;467;"C++";"class Solution {
public:
    int numSpecialEquivGroups(vector<string>& A) {
 
    }
};";"";"2020-03-25 15:18:17"
5808;467;"C";"int numSpecialEquivGroups(char ** A, int ASize){
 
}";"";"2020-03-25 15:18:17"
5809;467;"Rust";"impl Solution {
    pub fn num_special_equiv_groups(a: Vec<String>) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:17"
5810;467;"Scala";"object Solution {
    def numSpecialEquivGroups(A: Array[String]): 
Int = {
 
    }
}";"";"2020-03-25 15:18:17"
5811;467;"Go";"func numSpecialEquivGroups(A []string) int {
 
}";"";"2020-03-25 15:18:17"
5812;467;"Kotlin";"class Solution {
    fun numSpecialEquivGroups(A: Array<String>): 
Int {
 
    }
}";"";"2020-03-25 15:18:17"
5813;467;"Python3";"class Solution:
    def numSpecialEquivGroups(self, A: List[str]) 
-> int:";"";"2020-03-25 15:18:17"
5814;467;"JavaScript";"/**
 * @param {string[]} A
 * @return {number}
 */
var numSpecialEquivGroups = function(A) {
 
};";"";"2020-03-25 15:18:17"
5815;467;"PHP";"class Solution {
 
    /**
     * @param String[] $A
     * @return Integer
     */
    function numSpecialEquivGroups($A) {
        
    }
}";"";"2020-03-25 15:18:17"
5816;467;"Swift";"class Solution {
    func numSpecialEquivGroups(_ A: [String]) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:17"
5817;467;"Ruby";"# @param {String[]} a
# @return {Integer}
def num_special_equiv_groups(a)
 
end";"";"2020-03-25 15:18:17"
5818;467;"Python";"class Solution(object):
    def numSpecialEquivGroups(self, A):
        """"""
        :type A: List[str]
        :rtype: int
        """"""";"";"2020-03-25 15:18:17"
5819;468;"C#";"public class Solution {
    public IList<string> FindAndReplacePattern
(string[] words, string pattern) {
 
    }
}";"";"2020-03-25 15:18:17"
5820;468;"Java";"class Solution {
    public List<String> findAndReplacePattern(String
[] words, String pattern) {
 
    }
}";"";"2020-03-25 15:18:17"
5821;468;"Rust";"impl Solution {
    pub fn find_and_replace_pattern(words: 
Vec<String>, pattern: String) -> Vec<String> {
        
    }
}";"";"2020-03-25 15:18:17"
5822;468;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** findAndReplacePattern(char ** words, int 
wordsSize, char * pattern, int* returnSize){
 
}";"";"2020-03-25 15:18:17"
5823;468;"Scala";"object Solution {
    def findAndReplacePattern(words: Array[String], 
pattern: String): List[String] = {
 
    }
}";"";"2020-03-25 15:18:17"
5824;468;"Go";"func findAndReplacePattern(words []string, pattern 
string) []string {
 
}";"";"2020-03-25 15:18:17"
5825;468;"Kotlin";"class Solution {
    fun findAndReplacePattern(words: Array<String>, 
pattern: String): List<String> {
 
    }
}";"";"2020-03-25 15:18:17"
5826;468;"Python3";"class Solution:
    def findAndReplacePattern(self, words: List[str]
, pattern: str) -> List[str]:";"";"2020-03-25 15:18:17"
5827;468;"JavaScript";"/**
 * @param {string[]} words
 * @param {string} pattern
 * @return {string[]}
 */
var findAndReplacePattern = function(words, pattern)
 {
 
};";"";"2020-03-25 15:18:17"
5828;468;"PHP";"class Solution {";"";"2020-03-25 15:18:17"
5829;468;"Swift";"class Solution {
    func findAndReplacePattern(_ words: [String], _ 
pattern: String) -> [String] {
        
    }
}";"";"2020-03-25 15:18:17"
5830;468;"Ruby";"# @param {String[]} words
# @param {String} pattern
# @return {String[]}
def find_and_replace_pattern(words, pattern)
 
end";"";"2020-03-25 15:18:17"
5831;468;"Python";"class Solution(object):
    def findAndReplacePattern(self, words, pattern):
        """"""
        :type words: List[str]
        :type pattern: str
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:17"
5832;469;"C#";"public class Solution {
    public int LargestPalindrome(int n) {
 
    }
}";"";"2020-03-25 15:18:18"
5833;469;"Java";"class Solution {
    public int largestPalindrome(int n) {
 
    }
}";"";"2020-03-25 15:18:18"
5834;469;"C";"int largestPalindrome(int n){
 
}";"";"2020-03-25 15:18:18"
5835;469;"Rust";"impl Solution {
    pub fn largest_palindrome(n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:18"
5836;469;"Scala";"object Solution {
    def largestPalindrome(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:18"
5837;469;"Go";"func largestPalindrome(n int) int {
 
}";"";"2020-03-25 15:18:18"
5838;469;"Kotlin";"class Solution {
    fun largestPalindrome(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:18"
5839;469;"Python3";"class Solution:
    def largestPalindrome(self, n: int) -> int:";"";"2020-03-25 15:18:18"
5840;469;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var largestPalindrome = function(n) {
 
};";"";"2020-03-25 15:18:18"
5841;469;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function largestPalindrome($n) {
        
    }
}";"";"2020-03-25 15:18:18"
5842;469;"Swift";"class Solution {
    func largestPalindrome(_ n: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:18"
5843;469;"Ruby";"# @param {Integer} n";"";"2020-03-25 15:18:18"
5844;469;"Python";"class Solution(object):
    def largestPalindrome(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:18"
5845;470;"C#";"public class Solution {
    public string LongestCommonPrefix(string[] strs)
 {
 
    }
}";"";"2020-03-25 15:18:18"
5846;470;"Java";"class Solution {
    public String longestCommonPrefix(String[] strs)
 {
 
    }
}";"";"2020-03-25 15:18:18"
5847;470;"C";"char * longestCommonPrefix(char ** strs, int 
strsSize){
 
}";"";"2020-03-25 15:18:18"
5848;470;"Rust";"impl Solution {
    pub fn longest_common_prefix(strs: Vec<String>) 
-> String {
        
    }
}";"";"2020-03-25 15:18:18"
5849;470;"Scala";"object Solution {
    def longestCommonPrefix(strs: Array[String]): 
String = {
 
    }
}";"";"2020-03-25 15:18:18"
5850;470;"Go";"func longestCommonPrefix(strs []string) string {
 
}";"";"2020-03-25 15:18:18"
5851;470;"Kotlin";"class Solution {
    fun longestCommonPrefix(strs: Array<String>): 
String {
 
    }
}";"";"2020-03-25 15:18:18"
5852;470;"Python3";"class Solution:
    def longestCommonPrefix(self, strs: List[str]) 
-> str:";"";"2020-03-25 15:18:18"
5853;470;"JavaScript";"/**
 * @param {string[]} strs
 * @return {string}
 */
var longestCommonPrefix = function(strs) {
 
};";"";"2020-03-25 15:18:18"
5854;470;"PHP";"class Solution {
 
    /**
     * @param String[] $strs
     * @return String
     */
    function longestCommonPrefix($strs) {
        
    }
}";"";"2020-03-25 15:18:18"
5855;470;"Swift";"class Solution {
    func longestCommonPrefix(_ strs: [String]) -> 
String {
        
    }
}";"";"2020-03-25 15:18:18"
5856;470;"Ruby";"# @param {String[]} strs";"";"2020-03-25 15:18:18"
5857;470;"Python";"class Solution(object):
    def longestCommonPrefix(self, strs):
        """"""
        :type strs: List[str]
        :rtype: str
        """"""";"";"2020-03-25 15:18:18"
5858;471;"C#";"public class Solution {
    public int StrongPasswordChecker(string s) {
 
    }
}";"";"2020-03-25 15:18:18"
5859;471;"Java";"class Solution {
    public int strongPasswordChecker(String s) {
 
    }
}";"";"2020-03-25 15:18:18"
5860;471;"C";"int strongPasswordChecker(char * s){
 
}";"";"2020-03-25 15:18:18"
5861;471;"Rust";"impl Solution {
    pub fn strong_password_checker(s: String) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:18"
5862;471;"Scala";"object Solution {
    def strongPasswordChecker(s: String): Int = {
 
    }
}";"";"2020-03-25 15:18:18"
5863;471;"Go";"func strongPasswordChecker(s string) int {
 
}";"";"2020-03-25 15:18:18"
5864;471;"Kotlin";"class Solution {
    fun strongPasswordChecker(s: String): Int {
 
    }
}";"";"2020-03-25 15:18:18"
5865;471;"Python3";"class Solution:
    def strongPasswordChecker(self, s: str) -> int:";"";"2020-03-25 15:18:18"
5866;471;"JavaScript";"/**
 * @param {string} s
 * @return {number}
 */
var strongPasswordChecker = function(s) {
 
};";"";"2020-03-25 15:18:18"
5867;471;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return Integer
     */
    function strongPasswordChecker($s) {
        
    }
}";"";"2020-03-25 15:18:18"
5868;471;"Swift";"class Solution {
    func strongPasswordChecker(_ s: String) -> Int {
        
    }
}";"";"2020-03-25 15:18:18"
5869;471;"Ruby";"# @param {String} s
# @return {Integer}
def strong_password_checker(s)
 
end";"";"2020-03-25 15:18:18"
5870;471;"Python";"class Solution(object):
    def strongPasswordChecker(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:18"
5871;472;"C#";"public class Solution {
    public int TrapRainWater(int[][] heightMap) {
 
    }
}";"";"2020-03-25 15:18:18"
5872;472;"Java";"class Solution {
    public int trapRainWater(int[][] heightMap) {
 
    }
}";"";"2020-03-25 15:18:18"
5873;472;"C";"int trapRainWater(int** heightMap, int 
heightMapSize, int* heightMapColSize){
 
}";"";"2020-03-25 15:18:18"
5874;472;"Rust";"impl Solution {
    pub fn trap_rain_water(height_map: 
Vec<Vec<i32>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:18"
5875;472;"Scala";"object Solution {
    def trapRainWater(heightMap: Array[Array[Int]])
: Int = {
 
    }
}";"";"2020-03-25 15:18:18"
5876;472;"Go";"func trapRainWater(heightMap [][]int) int {
 
}";"";"2020-03-25 15:18:18"
5877;472;"Kotlin";"class Solution {
    fun trapRainWater(heightMap: Array<IntArray>): 
Int {
 
    }
}";"";"2020-03-25 15:18:18"
5878;472;"Python3";"class Solution:
    def trapRainWater(self, heightMap: List[List
[int]]) -> int:";"";"2020-03-25 15:18:18"
5879;472;"JavaScript";"/**
 * @param {number[][]} heightMap
 * @return {number}
 */
var trapRainWater = function(heightMap) {
 
};";"";"2020-03-25 15:18:18"
5880;472;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $heightMap
     * @return Integer
     */
    function trapRainWater($heightMap) {
        
    }
}";"";"2020-03-25 15:18:18"
5881;472;"Swift";"class Solution {
    func trapRainWater(_ heightMap: [[Int]]) -> Int 
{
        
    }
}";"";"2020-03-25 15:18:18"
5882;472;"Ruby";"# @param {Integer[][]} height_map
# @return {Integer}
def trap_rain_water(height_map)
 
end";"";"2020-03-25 15:18:18"
5883;472;"Python";"class Solution(object):
    def trapRainWater(self, heightMap):
        """"""
        :type heightMap: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:18"
5884;473;"C#";"public class Solution {
    public bool CheckSubarraySum(int[] nums, int k) 
{
 
    }
}";"";"2020-03-25 15:18:18"
5885;473;"Java";"class Solution {
    public boolean checkSubarraySum(int[] nums, int 
k) {
 
    }
}";"";"2020-03-25 15:18:18"
5886;473;"Rust";"impl Solution {
    pub fn check_subarray_sum(nums: Vec<i32>, k: 
i32) -> bool {
        
    }
}";"";"2020-03-25 15:18:18"
5887;473;"C";"bool checkSubarraySum(int* nums, int numsSize, int 
k){
 
}";"";"2020-03-25 15:18:18"
5888;473;"Scala";"object Solution {
    def checkSubarraySum(nums: Array[Int], k: Int): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:18"
5889;473;"Go";"func checkSubarraySum(nums []int, k int) bool {
 
}";"";"2020-03-25 15:18:18"
5890;473;"Kotlin";"class Solution {
    fun checkSubarraySum(nums: IntArray, k: Int): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:18"
5891;473;"Python3";"class Solution:
    def checkSubarraySum(self, nums: List[int], k: 
int) -> bool:";"";"2020-03-25 15:18:18"
5892;473;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} k
 * @return {boolean}
 */
var checkSubarraySum = function(nums, k) {
 
};";"";"2020-03-25 15:18:18"
5893;473;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer $k
     * @return Boolean
     */
    function checkSubarraySum($nums, $k) {
        
    }
}";"";"2020-03-25 15:18:18"
5894;473;"Swift";"class Solution {
    func checkSubarraySum(_ nums: [Int], _ k: Int) 
-> Bool {
        
    }
}";"";"2020-03-25 15:18:18"
5895;473;"Ruby";"# @param {Integer[]} nums
# @param {Integer} k
# @return {Boolean}
def check_subarray_sum(nums, k)
 
end";"";"2020-03-25 15:18:18"
5896;473;"Python";"class Solution(object):
    def checkSubarraySum(self, nums, k):
        """"""
        :type nums: List[int]
        :type k: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:18"
5897;474;"C#";"public class Solution {
    public int CountEval(string s, int result) {
 
    }
}";"";"2020-03-25 15:18:18"
5898;474;"Java";"class Solution {
    public int countEval(String s, int result) {
 
    }
}";"";"2020-03-25 15:18:18"
5899;474;"Rust";"impl Solution {
    pub fn count_eval(s: String, result: i32) -> 
i32 {
 
    }
}";"";"2020-03-25 15:18:18"
5900;474;"C";"int countEval(char* s, int result){
 
}";"";"2020-03-25 15:18:18"
5901;474;"Scala";"object Solution {
    def countEval(s: String, result: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:18"
5902;474;"Go";"func countEval(s string, result int) int {
 
}";"";"2020-03-25 15:18:18"
5903;474;"Kotlin";"class Solution {
    fun countEval(s: String, result: Int): Int {
 
    }
}";"";"2020-03-25 15:18:18"
5904;474;"Python3";"class Solution:
    def countEval(self, s: str, result: int) -> int:";"";"2020-03-25 15:18:18"
5905;474;"JavaScript";"/**
 * @param {string} s
 * @param {number} result
 * @return {number}
 */
var countEval = function(s, result) {
 
};";"";"2020-03-25 15:18:18"
5906;474;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @param Integer $result
     * @return Integer
     */
    function countEval($s, $result) {
 
    }
}";"";"2020-03-25 15:18:18"
5907;474;"Swift";"class Solution {
    func countEval(_ s: String, _ result: Int) -> 
Int {
 
    }
}";"";"2020-03-25 15:18:18"
5908;474;"Ruby";"# @param {String} s
# @param {Integer} result
# @return {Integer}
def count_eval(s, result)
 
end";"";"2020-03-25 15:18:18"
5909;474;"Python";"class Solution(object):
    def countEval(self, s, result):
        """"""
        :type s: str
        :type result: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:18"
5910;475;"C#";"public class Solution {
    public IList<int> LexicalOrder(int n) {
 
    }
}";"";"2020-03-25 15:18:18"
5911;475;"Java";"class Solution {
    public List<Integer> lexicalOrder(int n) {
 
    }
}";"";"2020-03-25 15:18:18"
5912;475;"Rust";"impl Solution {
    pub fn lexical_order(n: i32) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:18"
5913;475;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* lexicalOrder(int n, int* returnSize){
 
}";"";"2020-03-25 15:18:18"
5914;475;"Scala";"object Solution {
    def lexicalOrder(n: Int): List[Int] = {
 
    }
}";"";"2020-03-25 15:18:18"
5915;475;"Go";"func lexicalOrder(n int) []int {
 
}";"";"2020-03-25 15:18:18"
5916;475;"Kotlin";"class Solution {
    fun lexicalOrder(n: Int): List<Int> {
 
    }
}";"";"2020-03-25 15:18:18"
5917;475;"Python3";"class Solution:
    def lexicalOrder(self, n: int) -> List[int]:";"";"2020-03-25 15:18:18"
5918;475;"JavaScript";"/**
 * @param {number} n
 * @return {number[]}
 */
var lexicalOrder = function(n) {
 
};";"";"2020-03-25 15:18:18"
5919;475;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer[]
     */
    function lexicalOrder($n) {
        
    }
}";"";"2020-03-25 15:18:18"
5920;475;"Swift";"class Solution {
    func lexicalOrder(_ n: Int) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:18"
5921;475;"Ruby";"# @param {Integer} n
# @return {Integer[]}
def lexical_order(n)
 
end";"";"2020-03-25 15:18:18"
5922;475;"Python";"class Solution(object):
    def lexicalOrder(self, n):
        """"""
        :type n: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:18"
5923;476;"C#";"public class Solution {
    public bool IsLongPressedName(string name, 
string typed) {
 
    }
}";"";"2020-03-25 15:18:18"
5924;476;"Java";"class Solution {
    public boolean isLongPressedName(String name, 
String typed) {
 
    }
}";"";"2020-03-25 15:18:18"
5925;476;"Rust";"impl Solution {
    pub fn is_long_pressed_name(name: String, 
typed: String) -> bool {
        
    }
}";"";"2020-03-25 15:18:18"
5926;476;"C";"bool isLongPressedName(char * name, char * typed){
 
}";"";"2020-03-25 15:18:18"
5927;476;"Scala";"object Solution {
    def isLongPressedName(name: String, typed: 
String): Boolean = {
 
    }
}";"";"2020-03-25 15:18:18"
5928;476;"Go";"func isLongPressedName(name string, typed string) 
bool {
 
}";"";"2020-03-25 15:18:18"
5929;476;"Kotlin";"class Solution {
    fun isLongPressedName(name: String, typed: 
String): Boolean {
 
    }
}";"";"2020-03-25 15:18:18"
5930;476;"Python3";"class Solution:
    def isLongPressedName(self, name: str, typed: 
str) -> bool:";"";"2020-03-25 15:18:18"
5931;476;"JavaScript";"/**
 * @param {string} name
 * @param {string} typed
 * @return {boolean}
 */
var isLongPressedName = function(name, typed) {
 
};";"";"2020-03-25 15:18:18"
5932;476;"PHP";"class Solution {";"";"2020-03-25 15:18:18"
5933;476;"Swift";"class Solution {
    func isLongPressedName(_ name: String, _ typed: 
String) -> Bool {
        
    }
}";"";"2020-03-25 15:18:18"
5934;476;"Ruby";"# @param {String} name
# @param {String} typed
# @return {Boolean}
def is_long_pressed_name(name, typed)
 
end";"";"2020-03-25 15:18:18"
5935;476;"Python";"class Solution(object):
    def isLongPressedName(self, name, typed):
        """"""
        :type name: str
        :type typed: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:18"
5936;477;"C#";"public class Solution {
    public int[] SingleNumber(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:18"
5937;477;"Java";"class Solution {
    public int[] singleNumber(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:18"
5938;477;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* singleNumber(int* nums, int numsSize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:18"
5939;477;"Rust";"impl Solution {
    pub fn single_number(nums: Vec<i32>) -> 
Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:18"
5940;477;"Scala";"object Solution {
    def singleNumber(nums: Array[Int]): Array[Int] 
= {
 
    }
}";"";"2020-03-25 15:18:18"
5941;477;"Go";"func singleNumber(nums []int) []int {
 
}";"";"2020-03-25 15:18:18"
5942;477;"Kotlin";"class Solution {
    fun singleNumber(nums: IntArray): IntArray {
 
    }
}";"";"2020-03-25 15:18:18"
5943;477;"Python3";"class Solution:
    def singleNumber(self, nums: List[int]) -> List
[int]:";"";"2020-03-25 15:18:18"
5944;477;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number[]}
 */
var singleNumber = function(nums) {
 
};";"";"2020-03-25 15:18:18"
5945;477;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer[]
     */
    function singleNumber($nums) {
 
    }
}";"";"2020-03-25 15:18:18"
5946;477;"Swift";"class Solution {
    func singleNumber(_ nums: [Int]) -> [Int] {
 
    }
}";"";"2020-03-25 15:18:18"
5947;477;"Ruby";"# @param {Integer[]} nums
# @return {Integer[]}
def single_number(nums)
 
end";"";"2020-03-25 15:18:18"
5948;477;"Python";"class Solution(object):
    def singleNumber(self, nums):
        """"""
        :type nums: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:18"
5949;478;"C#";"public class Solution {
    public int AddDigits(int num) {
 
    }
}";"";"2020-03-25 15:18:18"
5950;478;"Java";"class Solution {
    public int addDigits(int num) {
 
    }
}";"";"2020-03-25 15:18:18"
5951;478;"Rust";"impl Solution {
    pub fn add_digits(num: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:18"
5952;478;"C";"int addDigits(int num){
 
}";"";"2020-03-25 15:18:18"
5953;478;"Scala";"object Solution {
    def addDigits(num: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:18"
5954;478;"Go";"func addDigits(num int) int {
 
}";"";"2020-03-25 15:18:18"
5955;478;"Kotlin";"class Solution {
    fun addDigits(num: Int): Int {
 
    }
}";"";"2020-03-25 15:18:18"
5956;478;"Python3";"class Solution:
    def addDigits(self, num: int) -> int:";"";"2020-03-25 15:18:18"
5957;478;"JavaScript";"/**
 * @param {number} num
 * @return {number}
 */
var addDigits = function(num) {
 
};";"";"2020-03-25 15:18:18"
5958;478;"PHP";"class Solution {
 
    /**
     * @param Integer $num
     * @return Integer
     */
    function addDigits($num) {
 
    }
}";"";"2020-03-25 15:18:18"
5959;478;"Swift";"class Solution {
    func addDigits(_ num: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:18"
5960;478;"Ruby";"# @param {Integer} num
# @return {Integer}
def add_digits(num)
 
end";"";"2020-03-25 15:18:18"
5961;478;"Python";"class Solution(object):
    def addDigits(self, num):
        """"""
        :type num: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:18"
5962;479;"C#";"public class Solution {
    public int MaxSubarraySumCircular(int[] A) {
 
    }
}";"";"2020-03-25 15:18:18"
5963;479;"Java";"class Solution {
    public int maxSubarraySumCircular(int[] A) {
 
    }
}";"";"2020-03-25 15:18:18"
5964;479;"Rust";"impl Solution {
    pub fn max_subarray_sum_circular(a: Vec<i32>) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:18"
5965;479;"C";"int maxSubarraySumCircular(int* A, int ASize){
 
}";"";"2020-03-25 15:18:18"
5966;479;"Scala";"object Solution {
    def maxSubarraySumCircular(A: Array[Int]): Int 
= {
 
    }
}";"";"2020-03-25 15:18:18"
5967;479;"Go";"func maxSubarraySumCircular(A []int) int {
 
}";"";"2020-03-25 15:18:18"
5968;479;"Kotlin";"class Solution {
    fun maxSubarraySumCircular(A: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:18"
5969;479;"Python3";"class Solution:
    def maxSubarraySumCircular(self, A: List[int]) 
-> int:";"";"2020-03-25 15:18:18"
5970;479;"JavaScript";"/**
 * @param {number[]} A
 * @return {number}
 */
var maxSubarraySumCircular = function(A) {
 
};";"";"2020-03-25 15:18:18"
5971;479;"PHP";"class Solution {";"";"2020-03-25 15:18:18"
5972;479;"Swift";"class Solution {
    func maxSubarraySumCircular(_ A: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:18"
5973;479;"Ruby";"# @param {Integer[]} a
# @return {Integer}
def max_subarray_sum_circular(a)
 
end";"";"2020-03-25 15:18:18"
5974;479;"Python";"class Solution(object):
    def maxSubarraySumCircular(self, A):
        """"""
        :type A: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:18"
5975;480;"C#";"public class Solution {
    public int[][] MultiSearch(string big, string[] 
smalls) {
 
    }
}";"";"2020-03-25 15:18:18"
5976;480;"Java";"class Solution {
    public int[][] multiSearch(String big, String[] 
smalls) {
 
    }
}";"";"2020-03-25 15:18:18"
5977;480;"Rust";"impl Solution {
    pub fn multi_search(big: String, smalls: 
Vec<String>) -> Vec<Vec<i32>> {
 
    }
}";"";"2020-03-25 15:18:18"
5978;480;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** multiSearch(char* big, char** smalls, int 
smallsSize, int* returnSize, int** 
returnColumnSizes){
 
}";"";"2020-03-25 15:18:18"
5979;480;"Scala";"object Solution {
    def multiSearch(big: String, smalls: Array
[String]): Array[Array[Int]] = {
 
    }
}";"";"2020-03-25 15:18:18"
5980;480;"Go";"func multiSearch(big string, smalls []string) [][]
int {
 
}";"";"2020-03-25 15:18:18"
5981;480;"Kotlin";"class Solution {
    fun multiSearch(big: String, smalls: 
Array<String>): Array<IntArray> {
 
    }
}";"";"2020-03-25 15:18:18"
5982;480;"Python3";"class Solution:
    def multiSearch(self, big: str, smalls: List
[str]) -> List[List[int]]:";"";"2020-03-25 15:18:18"
5983;480;"JavaScript";"/**
 * @param {string} big
 * @param {string[]} smalls
 * @return {number[][]}
 */
var multiSearch = function(big, smalls) {
 
};";"";"2020-03-25 15:18:18"
5984;480;"PHP";"class Solution {";"";"2020-03-25 15:18:18"
5985;480;"Swift";"class Solution {
    func multiSearch(_ big: String, _ smalls: 
[String]) -> [[Int]] {
 
    }
}";"";"2020-03-25 15:18:18"
5986;480;"Ruby";"# @param {String} big
# @param {String[]} smalls
# @return {Integer[][]}
def multi_search(big, smalls)
 
end";"";"2020-03-25 15:18:18"
5987;480;"Python";"class Solution(object):
    def multiSearch(self, big, smalls):
        """"""
        :type big: str
        :type smalls: List[str]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:18"
5988;481;"C#";"public class Solution {
    public string BaseNeg2(int N) {
 
    }
}";"";"2020-03-25 15:18:18"
5989;481;"Java";"class Solution {
    public String baseNeg2(int N) {
 
    }
}";"";"2020-03-25 15:18:18"
5990;481;"Rust";"impl Solution {
    pub fn base_neg2(n: i32) -> String {
        
    }
}";"";"2020-03-25 15:18:18"
5991;481;"C";"char * baseNeg2(int N){
 
}";"";"2020-03-25 15:18:18"
5992;481;"Scala";"object Solution {
    def baseNeg2(N: Int): String = {
 
    }
}";"";"2020-03-25 15:18:18"
5993;481;"Go";"func baseNeg2(N int) string {
 
}";"";"2020-03-25 15:18:18"
5994;481;"Kotlin";"class Solution {
    fun baseNeg2(N: Int): String {
 
    }
}";"";"2020-03-25 15:18:18"
5995;481;"Python3";"class Solution:
    def baseNeg2(self, N: int) -> str:";"";"2020-03-25 15:18:18"
5996;481;"JavaScript";"/**
 * @param {number} N
 * @return {string}
 */
var baseNeg2 = function(N) {
 
};";"";"2020-03-25 15:18:18"
5997;481;"PHP";"class Solution {";"";"2020-03-25 15:18:18"
5998;481;"Swift";"class Solution {
    func baseNeg2(_ N: Int) -> String {
        
    }
}";"";"2020-03-25 15:18:18"
5999;481;"Ruby";"# @param {Integer} n
# @return {String}
def base_neg2(n)
 
end";"";"2020-03-25 15:18:18"
6000;481;"Python";"class Solution(object):
    def baseNeg2(self, N):
        """"""
        :type N: int
        :rtype: str
        """"""";"";"2020-03-25 15:18:18"
6001;482;"C#";"public class Solution {
    public string ReverseStr(string s, int k) {
 
    }
}";"";"2020-03-25 15:18:18"
6002;482;"Java";"class Solution {
    public String reverseStr(String s, int k) {
 
    }
}";"";"2020-03-25 15:18:18"
6003;482;"Rust";"impl Solution {
    pub fn reverse_str(s: String, k: i32) -> String 
{
        
    }
}";"";"2020-03-25 15:18:18"
6004;482;"C";"char * reverseStr(char * s, int k){
 
}";"";"2020-03-25 15:18:18"
6005;482;"Scala";"object Solution {
    def reverseStr(s: String, k: Int): String = {
 
    }
}";"";"2020-03-25 15:18:18"
6006;482;"Go";"func reverseStr(s string, k int) string {
 
}";"";"2020-03-25 15:18:18"
6007;482;"Kotlin";"class Solution {
    fun reverseStr(s: String, k: Int): String {
 
    }
}";"";"2020-03-25 15:18:18"
6008;482;"Python3";"class Solution:
    def reverseStr(self, s: str, k: int) -> str:";"";"2020-03-25 15:18:18"
6009;482;"JavaScript";"/**
 * @param {string} s
 * @param {number} k
 * @return {string}
 */
var reverseStr = function(s, k) {
 
};";"";"2020-03-25 15:18:18"
6010;482;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @param Integer $k
     * @return String
     */
    function reverseStr($s, $k) {
        
    }
}";"";"2020-03-25 15:18:18"
6011;482;"Swift";"class Solution {
    func reverseStr(_ s: String, _ k: Int) -> 
String {
        
    }
}";"";"2020-03-25 15:18:18"
6012;482;"Ruby";"# @param {String} s
# @param {Integer} k
# @return {String}
def reverse_str(s, k)
 
end";"";"2020-03-25 15:18:18"
6013;482;"Python";"class Solution(object):
    def reverseStr(self, s, k):
        """"""
        :type s: str
        :type k: int
        :rtype: str
        """"""";"";"2020-03-25 15:18:18"
6014;483;"C#";"public class Solution {
    public bool IsToeplitzMatrix(int[][] matrix) {
 
    }
}";"";"2020-03-25 15:18:18"
6015;483;"Java";"class Solution {
    public boolean isToeplitzMatrix(int[][] matrix) 
{
 
    }
}";"";"2020-03-25 15:18:18"
6016;483;"Rust";"impl Solution {
    pub fn is_toeplitz_matrix(matrix: Vec<Vec<i32>>)
 -> bool {
        
    }
}";"";"2020-03-25 15:18:18"
6017;483;"C";"bool isToeplitzMatrix(int** matrix, int matrixSize, 
int* matrixColSize){
 
}";"";"2020-03-25 15:18:18"
6018;483;"Scala";"object Solution {
    def isToeplitzMatrix(matrix: Array[Array[Int]])
: Boolean = {
 
    }
}";"";"2020-03-25 15:18:18"
6019;483;"Go";"func isToeplitzMatrix(matrix [][]int) bool {
 
}";"";"2020-03-25 15:18:18"
6020;483;"Kotlin";"class Solution {
    fun isToeplitzMatrix(matrix: Array<IntArray>): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:18"
6021;483;"Python3";"class Solution:
    def isToeplitzMatrix(self, matrix: List[List
[int]]) -> bool:";"";"2020-03-25 15:18:18"
6022;483;"JavaScript";"/**
 * @param {number[][]} matrix
 * @return {boolean}
 */
var isToeplitzMatrix = function(matrix) {
 
};";"";"2020-03-25 15:18:18"
6023;483;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $matrix
     * @return Boolean
     */
    function isToeplitzMatrix($matrix) {
        
    }
}";"";"2020-03-25 15:18:18"
6024;483;"Swift";"class Solution {
    func isToeplitzMatrix(_ matrix: [[Int]]) -> 
Bool {
        
    }
}";"";"2020-03-25 15:18:18"
6025;483;"Ruby";"# @param {Integer[][]} matrix
# @return {Boolean}
def is_toeplitz_matrix(matrix)
 
end";"";"2020-03-25 15:18:18"
6026;483;"Python";"class Solution(object):
    def isToeplitzMatrix(self, matrix):
        """"""
        :type matrix: List[List[int]]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:18"
6027;484;"C#";"public class Solution {
    public bool ContainsDuplicate(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:18"
6028;484;"Java";"class Solution {
    public boolean containsDuplicate(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:18"
6029;484;"C";"bool containsDuplicate(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:18"
6030;484;"Rust";"impl Solution {
    pub fn contains_duplicate(nums: Vec<i32>) -> 
bool {
 
    }
}";"";"2020-03-25 15:18:18"
6031;484;"Scala";"object Solution {
    def containsDuplicate(nums: Array[Int]): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:18"
6032;484;"Go";"func containsDuplicate(nums []int) bool {
 
}";"";"2020-03-25 15:18:18"
6033;484;"Kotlin";"class Solution {
    fun containsDuplicate(nums: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:18"
6034;484;"Python3";"class Solution:
    def containsDuplicate(self, nums: List[int]) -> 
bool:";"";"2020-03-25 15:18:18"
6035;484;"JavaScript";"/**
 * @param {number[]} nums
 * @return {boolean}
 */
var containsDuplicate = function(nums) {
 
};";"";"2020-03-25 15:18:18"
6036;484;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Boolean
     */
    function containsDuplicate($nums) {
 
    }
}";"";"2020-03-25 15:18:18"
6037;484;"Swift";"class Solution {
    func containsDuplicate(_ nums: [Int]) -> Bool {
 
    }
}";"";"2020-03-25 15:18:18"
6038;484;"Ruby";"# @param {Integer[]} nums
# @return {Boolean}
def contains_duplicate(nums)
 
end";"";"2020-03-25 15:18:18"
6039;484;"Python";"class Solution(object):
    def containsDuplicate(self, nums):
        """"""
        :type nums: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:18"
6040;485;"Java";"// Java Iterator interface reference:
// https://docs.oracle.com/javase/8/docs/api/java/
util/Iterator.html
class PeekingIterator implements Iterator<Integer> {
 
    public PeekingIterator(Iterator<Integer> 
iterator) {
        // initialize any member here.
        
    }
 
    // Returns the next element in the iteration 
without advancing the iterator.
    public Integer peek() {
        
    }
 
    // hasNext() and next() should behave the same 
as in the Iterator interface.
    // Override them if needed.
    @Override
    public Integer next() {
        
    }
 
    @Override";"";"2020-03-25 15:18:18"
6041;485;"C++";"// Below is the interface for Iterator, which is 
already defined for you.
// **DO NOT** modify the interface for Iterator.
 
class Iterator {
    struct Data;
    Data* data;
public:
    Iterator(const vector<int>& nums);
    Iterator(const Iterator& iter);
    virtual ~Iterator();
    // Returns the next element in the iteration.
    int next();
    // Returns true if the iteration has more 
elements.
    bool hasNext() const;
};
 
 
class PeekingIterator : public Iterator {
public:
    PeekingIterator(const vector<int>& nums) : 
Iterator(nums) {
        // Initialize any member here.
        // **DO NOT** save a copy of nums and 
manipulate it directly.";"";"2020-03-25 15:18:18"
6042;485;"Python3";"# Below is the interface for Iterator, which is 
already defined for you.
#
# class Iterator:
#     def __init__(self, nums):
#         """"""
#         Initializes an iterator object to the 
beginning of a list.
#         :type nums: List[int]
#         """"""
#
#     def hasNext(self):
#         """"""
#         Returns true if the iteration has more 
elements.
#         :rtype: bool
#         """"""
#
#     def next(self):
#         """"""
#         Returns the next element in the iteration.
#         :rtype: int
#         """"""
 
class PeekingIterator:
    def __init__(self, iterator):";"";"2020-03-25 15:18:18"
6043;485;"Python";"# Below is the interface for Iterator, which is 
already defined for you.
#
# class Iterator(object):
#     def __init__(self, nums):
#         """"""
#         Initializes an iterator object to the 
beginning of a list.
#         :type nums: List[int]
#         """"""
#
#     def hasNext(self):
#         """"""
#         Returns true if the iteration has more 
elements.
#         :rtype: bool
#         """"""
#
#     def next(self):
#         """"""
#         Returns the next element in the iteration.
#         :rtype: int
#         """"""
 
class PeekingIterator(object):
    def __init__(self, iterator):";"";"2020-03-25 15:18:18"
6044;486;"C#";"public class Solution {
    public bool CanCross(int[] stones) {
 
    }
}";"";"2020-03-25 15:18:18"
6045;486;"Java";"class Solution {
    public boolean canCross(int[] stones) {
 
    }
}";"";"2020-03-25 15:18:18"
6046;486;"C";"bool canCross(int* stones, int stonesSize){
 
}";"";"2020-03-25 15:18:18"
6047;486;"Rust";"impl Solution {
    pub fn can_cross(stones: Vec<i32>) -> bool {
        
    }
}";"";"2020-03-25 15:18:18"
6048;486;"Scala";"object Solution {
    def canCross(stones: Array[Int]): Boolean = {
 
    }
}";"";"2020-03-25 15:18:18"
6049;486;"Go";"func canCross(stones []int) bool {
 
}";"";"2020-03-25 15:18:18"
6050;486;"Kotlin";"class Solution {
    fun canCross(stones: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:18"
6051;486;"Python3";"class Solution:
    def canCross(self, stones: List[int]) -> bool:";"";"2020-03-25 15:18:18"
6052;486;"JavaScript";"/**
 * @param {number[]} stones
 * @return {boolean}
 */
var canCross = function(stones) {
 
};";"";"2020-03-25 15:18:18"
6053;486;"PHP";"class Solution {
 
    /**
     * @param Integer[] $stones
     * @return Boolean
     */
    function canCross($stones) {
        
    }
}";"";"2020-03-25 15:18:18"
6054;486;"Swift";"class Solution {
    func canCross(_ stones: [Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:18"
6055;486;"Ruby";"# @param {Integer[]} stones
# @return {Boolean}
def can_cross(stones)
 
end";"";"2020-03-25 15:18:18"
6056;486;"Python";"class Solution(object):
    def canCross(self, stones):
        """"""
        :type stones: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:18"
6057;487;"C#";"public class Solution {
    public int NumEquivDominoPairs(int[][] dominoes)
 {
 
    }
}";"";"2020-03-25 15:18:18"
6058;487;"Java";"class Solution {
    public int numEquivDominoPairs(int[][] dominoes)
 {
 
    }
}";"";"2020-03-25 15:18:18"
6059;487;"Rust";"impl Solution {
    pub fn num_equiv_domino_pairs(dominoes: 
Vec<Vec<i32>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:18"
6060;487;"C";"int numEquivDominoPairs(int** dominoes, int 
dominoesSize, int* dominoesColSize){
 
}";"";"2020-03-25 15:18:18"
6061;487;"Scala";"object Solution {
    def numEquivDominoPairs(dominoes: Array[Array
[Int]]): Int = {
 
    }
}";"";"2020-03-25 15:18:18"
6062;487;"Go";"func numEquivDominoPairs(dominoes [][]int) int {
 
}";"";"2020-03-25 15:18:18"
6063;487;"Kotlin";"class Solution {
    fun numEquivDominoPairs(dominoes: 
Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:18"
6064;487;"Python3";"class Solution:
    def numEquivDominoPairs(self, dominoes: List
[List[int]]) -> int:";"";"2020-03-25 15:18:18"
6065;487;"JavaScript";"/**
 * @param {number[][]} dominoes
 * @return {number}
 */
var numEquivDominoPairs = function(dominoes) {
 
};";"";"2020-03-25 15:18:18"
6066;487;"PHP";"class Solution {";"";"2020-03-25 15:18:18"
6067;487;"Swift";"class Solution {
    func numEquivDominoPairs(_ dominoes: [[Int]]) 
-> Int {
        
    }
}";"";"2020-03-25 15:18:18"
6068;487;"Ruby";"# @param {Integer[][]} dominoes
# @return {Integer}
def num_equiv_domino_pairs(dominoes)
 
end";"";"2020-03-25 15:18:18"
6069;487;"Python";"class Solution(object):
    def numEquivDominoPairs(self, dominoes):
        """"""
        :type dominoes: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:18"
6070;488;"C#";"public class Solution {
    public bool ValidUtf8(int[] data) {
 
    }
}";"";"2020-03-25 15:18:18"
6071;488;"Java";"class Solution {
    public boolean validUtf8(int[] data) {
 
    }
}";"";"2020-03-25 15:18:18"
6072;488;"C";"bool validUtf8(int* data, int dataSize){
 
}";"";"2020-03-25 15:18:18"
6073;488;"Rust";"impl Solution {
    pub fn valid_utf8(data: Vec<i32>) -> bool {
        
    }
}";"";"2020-03-25 15:18:18"
6074;488;"Scala";"object Solution {
    def validUtf8(data: Array[Int]): Boolean = {
 
    }
}";"";"2020-03-25 15:18:18"
6075;488;"Go";"func validUtf8(data []int) bool {
 
}";"";"2020-03-25 15:18:18"
6076;488;"Kotlin";"class Solution {
    fun validUtf8(data: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:18"
6077;488;"Python3";"class Solution:
    def validUtf8(self, data: List[int]) -> bool:";"";"2020-03-25 15:18:18"
6078;488;"JavaScript";"/**
 * @param {number[]} data
 * @return {boolean}
 */
var validUtf8 = function(data) {
 
};";"";"2020-03-25 15:18:18"
6079;488;"PHP";"class Solution {
 
    /**
     * @param Integer[] $data
     * @return Boolean
     */
    function validUtf8($data) {
        
    }
}";"";"2020-03-25 15:18:18"
6080;488;"Swift";"class Solution {
    func validUtf8(_ data: [Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:18"
6081;488;"Ruby";"# @param {Integer[]} data
# @return {Boolean}
def valid_utf8(data)
 
end";"";"2020-03-25 15:18:18"
6082;488;"Python";"class Solution(object):
    def validUtf8(self, data):
        """"""
        :type data: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:18"
6083;489;"C#";"public class Solution {
    public int FindMinStep(string board, string 
hand) {
 
    }
}";"";"2020-03-25 15:18:19"
6084;489;"Java";"class Solution {
    public int findMinStep(String board, String 
hand) {
 
    }
}";"";"2020-03-25 15:18:19"
6085;489;"C";"int findMinStep(char * board, char * hand){
 
}";"";"2020-03-25 15:18:19"
6086;489;"Rust";"impl Solution {
    pub fn find_min_step(board: String, hand: 
String) -> i32 {
 
    }
}";"";"2020-03-25 15:18:19"
6087;489;"Scala";"object Solution {
    def findMinStep(board: String, hand: String): 
Int = {
 
    }
}";"";"2020-03-25 15:18:19"
6088;489;"Go";"func findMinStep(board string, hand string) int {
 
}";"";"2020-03-25 15:18:19"
6089;489;"Kotlin";"class Solution {
    fun findMinStep(board: String, hand: String): 
Int {
 
    }
}";"";"2020-03-25 15:18:19"
6090;489;"Python3";"class Solution:
    def findMinStep(self, board: str, hand: str) -> 
int:";"";"2020-03-25 15:18:19"
6091;489;"JavaScript";"/**
 * @param {string} board
 * @param {string} hand
 * @return {number}
 */
var findMinStep = function(board, hand) {
 
};";"";"2020-03-25 15:18:19"
6092;489;"PHP";"class Solution {
 
    /**
     * @param String $board
     * @param String $hand
     * @return Integer
     */
    function findMinStep($board, $hand) {
 
    }
}";"";"2020-03-25 15:18:19"
6093;489;"Swift";"class Solution {
    func findMinStep(_ board: String, _ hand: 
String) -> Int {
 
    }
}";"";"2020-03-25 15:18:19"
6094;489;"Ruby";"# @param {String} board
# @param {String} hand
# @return {Integer}
def find_min_step(board, hand)
 
end";"";"2020-03-25 15:18:19"
6095;489;"Python";"class Solution(object):
    def findMinStep(self, board, hand):
        """"""
        :type board: str
        :type hand: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:19"
6096;490;"C#";"public class Solution {
    public int SubarraySum(int[] nums, int k) {
 
    }
}";"";"2020-03-25 15:18:19"
6097;490;"Java";"class Solution {
    public int subarraySum(int[] nums, int k) {
 
    }
}";"";"2020-03-25 15:18:19"
6098;490;"C";"int subarraySum(int* nums, int numsSize, int k){
 
}";"";"2020-03-25 15:18:19"
6099;490;"Python3";"class Solution:
    def subarraySum(self, nums: List[int], k: int) 
-> int:";"";"2020-03-25 15:18:19"
6100;490;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
var subarraySum = function(nums, k) {
 
};";"";"2020-03-25 15:18:19"
6101;490;"Go";"func subarraySum(nums []int, k int) int {";"";"2020-03-25 15:18:19"
6102;490;"Swift";"class Solution {
    func subarraySum(_ nums: [Int], _ k: Int) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:19"
6103;490;"Ruby";"# @param {Integer[]} nums
# @param {Integer} k
# @return {Integer}
def subarray_sum(nums, k)
 
end";"";"2020-03-25 15:18:19"
6104;490;"Python";"class Solution(object):
    def subarraySum(self, nums, k):
        """"""
        :type nums: List[int]
        :type k: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:19"
6105;491;"C#";"public class Solution {
    public int CountServers(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:19"
6106;491;"Java";"class Solution {
    public int countServers(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:19"
6107;491;"Rust";"impl Solution {
    pub fn count_servers(grid: Vec<Vec<i32>>) -> 
i32 {
 
    }
}";"";"2020-03-25 15:18:19"
6108;491;"C";"int countServers(int** grid, int gridSize, int* 
gridColSize){
 
}";"";"2020-03-25 15:18:19"
6109;491;"Scala";"object Solution {
    def countServers(grid: Array[Array[Int]]): Int 
= {
 
    }
}";"";"2020-03-25 15:18:19"
6110;491;"Go";"func countServers(grid [][]int) int {
 
}";"";"2020-03-25 15:18:19"
6111;491;"Kotlin";"class Solution {
    fun countServers(grid: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:19"
6112;491;"Python3";"class Solution:
    def countServers(self, grid: List[List[int]]) 
-> int:";"";"2020-03-25 15:18:19"
6113;491;"JavaScript";"/**
 * @param {number[][]} grid
 * @return {number}
 */
var countServers = function(grid) {
 
};";"";"2020-03-25 15:18:19"
6114;491;"PHP";"class Solution {";"";"2020-03-25 15:18:19"
6115;491;"Swift";"class Solution {
    func countServers(_ grid: [[Int]]) -> Int {
 
    }
}";"";"2020-03-25 15:18:19"
6116;491;"Ruby";"# @param {Integer[][]} grid
# @return {Integer}
def count_servers(grid)
 
end";"";"2020-03-25 15:18:19"
6117;491;"Python";"class Solution(object):
    def countServers(self, grid):
        """"""
        :type grid: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:19"
6118;492;"C#";"public class Solution {
    public bool ValidMountainArray(int[] A) {
 
    }
}";"";"2020-03-25 15:18:19"
6119;492;"Java";"class Solution {
    public boolean validMountainArray(int[] A) {
 
    }
}";"";"2020-03-25 15:18:19"
6120;492;"C";"bool validMountainArray(int* A, int ASize){
 
}";"";"2020-03-25 15:18:19"
6121;492;"Rust";"impl Solution {
    pub fn valid_mountain_array(a: Vec<i32>) -> 
bool {
        
    }
}";"";"2020-03-25 15:18:19"
6122;492;"Scala";"object Solution {
    def validMountainArray(A: Array[Int]): Boolean 
= {
 
    }
}";"";"2020-03-25 15:18:19"
6123;492;"Go";"func validMountainArray(A []int) bool {
 
}";"";"2020-03-25 15:18:19"
6124;492;"Kotlin";"class Solution {
    fun validMountainArray(A: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:19"
6125;492;"Python3";"class Solution:
    def validMountainArray(self, A: List[int]) -> 
bool:";"";"2020-03-25 15:18:19"
6126;492;"JavaScript";"/**
 * @param {number[]} A
 * @return {boolean}
 */
var validMountainArray = function(A) {
 
};";"";"2020-03-25 15:18:19"
6127;492;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @return Boolean
     */
    function validMountainArray($A) {
        
    }
}";"";"2020-03-25 15:18:19"
6128;492;"Swift";"class Solution {
    func validMountainArray(_ A: [Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:19"
6129;492;"Ruby";"# @param {Integer[]} a";"";"2020-03-25 15:18:19"
6130;492;"Python";"class Solution(object):
    def validMountainArray(self, A):
        """"""
        :type A: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:19"
6131;493;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<double> AverageOfLevels(TreeNode 
root) {
 
    }
}";"";"2020-03-25 15:18:19"
6132;493;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Double> averageOfLevels(TreeNode 
root) {
 
    }
}";"";"2020-03-25 15:18:19"
6133;493;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
double* averageOfLevels(struct TreeNode* root, int* 
returnSize){
 
}";"";"2020-03-25 15:18:19"
6134;493;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn average_of_levels(root: 
Option<Rc<RefCell<TreeNode>>>) -> Vec<f64> {
        
    }
}";"";"2020-03-25 15:18:19"
6135;493;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def averageOfLevels(root: TreeNode): Array
[Double] = {
 
    }
}";"";"2020-03-25 15:18:19"
6136;493;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func averageOfLevels(root *TreeNode) []float64 {
 
}";"";"2020-03-25 15:18:19"
6137;493;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun averageOfLevels(root: TreeNode?): 
DoubleArray {
 
    }
}";"";"2020-03-25 15:18:19"
6138;493;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def averageOfLevels(self, root: TreeNode) -> 
List[float]:";"";"2020-03-25 15:18:19"
6139;493;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[]}
 */
var averageOfLevels = function(root) {
 
};";"";"2020-03-25 15:18:19"
6140;493;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Float[]
     */
    function averageOfLevels($root) {
        
    }
}";"";"2020-03-25 15:18:19"
6141;493;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func averageOfLevels(_ root: TreeNode?) -> 
[Double] {
        
    }
}";"";"2020-03-25 15:18:19"
6142;493;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:19"
6143;493;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def averageOfLevels(self, root):
        """"""
        :type root: TreeNode
        :rtype: List[float]
        """"""";"";"2020-03-25 15:18:19"
6144;494;"C#";"public class Solution {
    public string Tictactoe(string[] board) {
 
    }
}";"";"2020-03-25 15:18:19"
6145;494;"Java";"class Solution {
    public String tictactoe(String[] board) {
 
    }
}";"";"2020-03-25 15:18:19"
6146;494;"Rust";"impl Solution {
    pub fn tictactoe(board: Vec<String>) -> String {
 
    }
}";"";"2020-03-25 15:18:19"
6147;494;"C";"char* tictactoe(char** board, int boardSize){
 
}";"";"2020-03-25 15:18:19"
6148;494;"Python3";"class Solution:
    def tictactoe(self, board: List[str]) -> str:";"";"2020-03-25 15:18:19"
6149;494;"JavaScript";"/**
 * @param {string[]} board
 * @return {string}
 */
var tictactoe = function(board) {
 
};";"";"2020-03-25 15:18:19"
6150;494;"Go";"func tictactoe(board []string) string {
 
}";"";"2020-03-25 15:18:19"
6151;494;"PHP";"class Solution {
 
    /**
     * @param String[] $board
     * @return String
     */
    function tictactoe($board) {
 
    }
}";"";"2020-03-25 15:18:19"
6152;494;"Swift";"class Solution {
    func tictactoe(_ board: [String]) -> String {
 
    }
}";"";"2020-03-25 15:18:19"
6153;494;"Ruby";"# @param {String[]} board
# @return {String}
def tictactoe(board)
 
end";"";"2020-03-25 15:18:19"
6154;494;"Kotlin";"class Solution {
    fun tictactoe(board: Array<String>): String {
 
    }
}";"";"2020-03-25 15:18:19"
6155;494;"Python";"class Solution(object):
    def tictactoe(self, board):
        """"""
        :type board: List[str]
        :rtype: str
        """"""";"";"2020-03-25 15:18:19"
6156;495;"C#";"public class Solution {
    public bool IsPowerOfThree(int n) {
 
    }
}";"";"2020-03-25 15:18:19"
6157;495;"Java";"class Solution {
    public boolean isPowerOfThree(int n) {
 
    }
}";"";"2020-03-25 15:18:19"
6158;495;"C";"bool isPowerOfThree(int n){
 
}";"";"2020-03-25 15:18:19"
6159;495;"Rust";"impl Solution {
    pub fn is_power_of_three(n: i32) -> bool {
        
    }
}";"";"2020-03-25 15:18:19"
6160;495;"Scala";"object Solution {
    def isPowerOfThree(n: Int): Boolean = {
 
    }
}";"";"2020-03-25 15:18:19"
6161;495;"Go";"func isPowerOfThree(n int) bool {
 
}";"";"2020-03-25 15:18:19"
6162;495;"Kotlin";"class Solution {
    fun isPowerOfThree(n: Int): Boolean {
 
    }
}";"";"2020-03-25 15:18:19"
6163;495;"Python3";"class Solution:
    def isPowerOfThree(self, n: int) -> bool:";"";"2020-03-25 15:18:19"
6164;495;"JavaScript";"/**
 * @param {number} n
 * @return {boolean}
 */
var isPowerOfThree = function(n) {
 
};";"";"2020-03-25 15:18:19"
6165;495;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Boolean
     */
    function isPowerOfThree($n) {
        
    }
}";"";"2020-03-25 15:18:19"
6166;495;"Swift";"class Solution {
    func isPowerOfThree(_ n: Int) -> Bool {
        
    }
}";"";"2020-03-25 15:18:19"
6167;495;"Ruby";"# @param {Integer} n
# @return {Boolean}
def is_power_of_three(n)
 
end";"";"2020-03-25 15:18:19"
6168;495;"Python";"class Solution(object):
    def isPowerOfThree(self, n):
        """"""
        :type n: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:19"
6169;496;"C#";"public class Solution {
    public string NearestPalindromic(string n) {
 
    }
}";"";"2020-03-25 15:18:19"
6170;496;"Java";"class Solution {
    public String nearestPalindromic(String n) {
 
    }
}";"";"2020-03-25 15:18:19"
6171;496;"C";"char * nearestPalindromic(char * n){
 
}";"";"2020-03-25 15:18:19"
6172;496;"Rust";"impl Solution {
    pub fn nearest_palindromic(n: String) -> String 
{
        
    }
}";"";"2020-03-25 15:18:19"
6173;496;"Scala";"object Solution {
    def nearestPalindromic(n: String): String = {
 
    }
}";"";"2020-03-25 15:18:19"
6174;496;"Go";"func nearestPalindromic(n string) string {
 
}";"";"2020-03-25 15:18:19"
6175;496;"Kotlin";"class Solution {
    fun nearestPalindromic(n: String): String {
 
    }
}";"";"2020-03-25 15:18:19"
6176;496;"Python3";"class Solution:
    def nearestPalindromic(self, n: str) -> str:";"";"2020-03-25 15:18:19"
6177;496;"JavaScript";"/**
 * @param {string} n
 * @return {string}
 */
var nearestPalindromic = function(n) {
 
};";"";"2020-03-25 15:18:19"
6178;496;"PHP";"class Solution {
 
    /**
     * @param String $n
     * @return String
     */
    function nearestPalindromic($n) {
        
    }
}";"";"2020-03-25 15:18:19"
6179;496;"Swift";"class Solution {
    func nearestPalindromic(_ n: String) -> String {
        
    }
}";"";"2020-03-25 15:18:19"
6180;496;"Ruby";"# @param {String} n";"";"2020-03-25 15:18:19"
6181;496;"Python";"class Solution(object):
    def nearestPalindromic(self, n):
        """"""
        :type n: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:19"
6182;497;"C#";"public class Solution {
    public int LengthOfLastWord(string s) {
 
    }
}";"";"2020-03-25 15:18:19"
6183;497;"Java";"class Solution {
    public int lengthOfLastWord(String s) {
 
    }
}";"";"2020-03-25 15:18:19"
6184;497;"Rust";"impl Solution {
    pub fn length_of_last_word(s: String) -> i32 {
        
    }
}";"";"2020-03-25 15:18:19"
6185;497;"C";"int lengthOfLastWord(char * s){
 
}";"";"2020-03-25 15:18:19"
6186;497;"Scala";"object Solution {
    def lengthOfLastWord(s: String): Int = {
 
    }
}";"";"2020-03-25 15:18:19"
6187;497;"Go";"func lengthOfLastWord(s string) int {
 
}";"";"2020-03-25 15:18:19"
6188;497;"Kotlin";"class Solution {
    fun lengthOfLastWord(s: String): Int {
 
    }
}";"";"2020-03-25 15:18:19"
6189;497;"Python3";"class Solution:
    def lengthOfLastWord(self, s: str) -> int:";"";"2020-03-25 15:18:19"
6190;497;"JavaScript";"/**
 * @param {string} s
 * @return {number}
 */
var lengthOfLastWord = function(s) {
 
};";"";"2020-03-25 15:18:19"
6191;497;"PHP";"class Solution {";"";"2020-03-25 15:18:19"
6192;497;"Swift";"class Solution {
    func lengthOfLastWord(_ s: String) -> Int {
        
    }
}";"";"2020-03-25 15:18:19"
6193;497;"Ruby";"# @param {String} s
# @return {Integer}
def length_of_last_word(s)
 
end";"";"2020-03-25 15:18:19"
6194;497;"Python";"class Solution(object):
    def lengthOfLastWord(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:19"
6195;498;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode IncreasingBST(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:19"
6196;498;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode increasingBST(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:19"
6197;498;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* increasingBST(struct TreeNode* 
root){
 
}";"";"2020-03-25 15:18:19"
6198;498;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn increasing_bst(root: 
Option<Rc<RefCell<TreeNode>>>) -> 
Option<Rc<RefCell<TreeNode>>> {
        
    }";"";"2020-03-25 15:18:19"
6199;498;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def increasingBST(root: TreeNode): TreeNode = {
 
    }
}";"";"2020-03-25 15:18:19"
6200;498;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func increasingBST(root *TreeNode) *TreeNode {
 
}";"";"2020-03-25 15:18:19"
6201;498;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun increasingBST(root: TreeNode?): TreeNode? {
 
    }
}";"";"2020-03-25 15:18:19"
6202;498;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def increasingBST(self, root: TreeNode) -> 
TreeNode:";"";"2020-03-25 15:18:19"
6203;498;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {TreeNode}
 */
var increasingBST = function(root) {
 
};";"";"2020-03-25 15:18:19"
6204;498;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return TreeNode
     */
    function increasingBST($root) {
        
    }
}";"";"2020-03-25 15:18:19"
6205;498;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func increasingBST(_ root: TreeNode?) -> 
TreeNode? {
        
    }
}";"";"2020-03-25 15:18:19"
6206;498;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:19"
6207;498;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def increasingBST(self, root):
        """"""
        :type root: TreeNode
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:19"
6208;499;"C#";"public class Solution {
    public int FindMin(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:19"
6209;499;"Java";"class Solution {
    public int findMin(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:19"
6210;499;"C";"int findMin(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:19"
6211;499;"Rust";"impl Solution {
    pub fn find_min(nums: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:19"
6212;499;"Scala";"object Solution {
    def findMin(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:19"
6213;499;"Go";"func findMin(nums []int) int {
 
}";"";"2020-03-25 15:18:19"
6214;499;"Kotlin";"class Solution {
    fun findMin(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:19"
6215;499;"Python3";"class Solution:
    def findMin(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:19"
6216;499;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var findMin = function(nums) {
 
};";"";"2020-03-25 15:18:19"
6217;499;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function findMin($nums) {
 
    }
}";"";"2020-03-25 15:18:19"
6218;499;"Swift";"class Solution {
    func findMin(_ nums: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:19"
6219;499;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def find_min(nums)
 
end";"";"2020-03-25 15:18:19"
6220;499;"Python";"class Solution(object):
    def findMin(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:19"
6221;500;"C#";"public class Solution {
    public int MctFromLeafValues(int[] arr) {
 
    }
}";"";"2020-03-25 15:18:19"
6222;500;"Java";"class Solution {
    public int mctFromLeafValues(int[] arr) {
 
    }
}";"";"2020-03-25 15:18:19"
6223;500;"Rust";"impl Solution {
    pub fn mct_from_leaf_values(arr: Vec<i32>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:19"
6224;500;"C";"int mctFromLeafValues(int* arr, int arrSize){
 
}";"";"2020-03-25 15:18:19"
6225;500;"Scala";"object Solution {
    def mctFromLeafValues(arr: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:19"
6226;500;"Go";"func mctFromLeafValues(arr []int) int {
 
}";"";"2020-03-25 15:18:19"
6227;500;"Kotlin";"class Solution {
    fun mctFromLeafValues(arr: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:19"
6228;500;"Python3";"class Solution:
    def mctFromLeafValues(self, arr: List[int]) -> 
int:";"";"2020-03-25 15:18:19"
6229;500;"JavaScript";"/**
 * @param {number[]} arr
 * @return {number}
 */
var mctFromLeafValues = function(arr) {
 
};";"";"2020-03-25 15:18:19"
6230;500;"PHP";"class Solution {";"";"2020-03-25 15:18:19"
6231;500;"Swift";"class Solution {
    func mctFromLeafValues(_ arr: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:19"
6232;500;"Ruby";"# @param {Integer[]} arr
# @return {Integer}
def mct_from_leaf_values(arr)
 
end";"";"2020-03-25 15:18:19"
6233;500;"Python";"class Solution(object):
    def mctFromLeafValues(self, arr):
        """"""
        :type arr: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:19"
6234;501;"C#";"public class Solution {
    public int NumMatchingSubseq(string S, string[] 
words) {
 
    }
}";"";"2020-03-25 15:18:19"
6235;501;"Java";"class Solution {
    public int numMatchingSubseq(String S, String[] 
words) {
 
    }
}";"";"2020-03-25 15:18:19"
6236;501;"C";"int numMatchingSubseq(char * S, char ** words, int 
wordsSize){
 
}";"";"2020-03-25 15:18:19"
6237;501;"Rust";"impl Solution {
    pub fn num_matching_subseq(s: String, words: 
Vec<String>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:19"
6238;501;"Scala";"object Solution {
    def numMatchingSubseq(S: String, words: Array
[String]): Int = {
 
    }
}";"";"2020-03-25 15:18:19"
6239;501;"Go";"func numMatchingSubseq(S string, words []string) 
int {
 
}";"";"2020-03-25 15:18:19"
6240;501;"Kotlin";"class Solution {
    fun numMatchingSubseq(S: String, words: 
Array<String>): Int {
 
    }
}";"";"2020-03-25 15:18:19"
6241;501;"Python3";"class Solution:
    def numMatchingSubseq(self, S: str, words: List
[str]) -> int:";"";"2020-03-25 15:18:19"
6242;501;"JavaScript";"/**
 * @param {string} S
 * @param {string[]} words
 * @return {number}
 */
var numMatchingSubseq = function(S, words) {
 
};";"";"2020-03-25 15:18:19"
6243;501;"PHP";"class Solution {
 
    /**
     * @param String $S
     * @param String[] $words
     * @return Integer
     */
    function numMatchingSubseq($S, $words) {
        
    }
}";"";"2020-03-25 15:18:19"
6244;501;"Swift";"class Solution {
    func numMatchingSubseq(_ S: String, _ words: 
[String]) -> Int {
        
    }
}";"";"2020-03-25 15:18:19"
6245;501;"Ruby";"# @param {String} s
# @param {String[]} words
# @return {Integer}
def num_matching_subseq(s, words)
 
end";"";"2020-03-25 15:18:19"
6246;501;"Python";"class Solution(object):
    def numMatchingSubseq(self, S, words):
        """"""
        :type S: str
        :type words: List[str]
        :rtype: int
        """"""";"";"2020-03-25 15:18:19"
6247;502;"C#";"public class Solution {
    public int[] ClosestDivisors(int num) {
 
    }
}";"";"2020-03-25 15:18:19"
6248;502;"Java";"class Solution {
    public int[] closestDivisors(int num) {
 
    }
}";"";"2020-03-25 15:18:19"
6249;502;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* closestDivisors(int num, int* returnSize){
 
}";"";"2020-03-25 15:18:19"
6250;502;"Rust";"impl Solution {
    pub fn closest_divisors(num: i32) -> Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:19"
6251;502;"Scala";"object Solution {
    def closestDivisors(num: Int): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:19"
6252;502;"Go";"func closestDivisors(num int) []int {
 
}";"";"2020-03-25 15:18:19"
6253;502;"Kotlin";"class Solution {
    fun closestDivisors(num: Int): IntArray {
 
    }
}";"";"2020-03-25 15:18:19"
6254;502;"Python3";"class Solution:
    def closestDivisors(self, num: int) -> List[int]
:";"";"2020-03-25 15:18:19"
6255;502;"JavaScript";"/**
 * @param {number} num
 * @return {number[]}
 */
var closestDivisors = function(num) {
 
};";"";"2020-03-25 15:18:19"
6256;502;"PHP";"class Solution {
 
    /**
     * @param Integer $num
     * @return Integer[]
     */
    function closestDivisors($num) {
 
    }
}";"";"2020-03-25 15:18:19"
6257;502;"Swift";"class Solution {
    func closestDivisors(_ num: Int) -> [Int] {
 
    }
}";"";"2020-03-25 15:18:19"
6258;502;"Ruby";"# @param {Integer} num
# @return {Integer[]}
def closest_divisors(num)
 
end";"";"2020-03-25 15:18:19"
6259;502;"Python";"class Solution(object):
    def closestDivisors(self, num):
        """"""
        :type num: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:19"
6260;503;"C#";"public class Solution {
    public bool PossibleBipartition(int N, int[][] 
dislikes) {
 
    }
}";"";"2020-03-25 15:18:19"
6261;503;"Java";"class Solution {
    public boolean possibleBipartition(int N, int[]
[] dislikes) {
 
    }
}";"";"2020-03-25 15:18:19"
6262;503;"Rust";"impl Solution {
    pub fn possible_bipartition(n: i32, dislikes: 
Vec<Vec<i32>>) -> bool {
        
    }
}";"";"2020-03-25 15:18:19"
6263;503;"C";"bool possibleBipartition(int N, int** dislikes, int 
dislikesSize, int* dislikesColSize){
 
}";"";"2020-03-25 15:18:19"
6264;503;"Scala";"object Solution {
    def possibleBipartition(N: Int, dislikes: Array
[Array[Int]]): Boolean = {
 
    }
}";"";"2020-03-25 15:18:19"
6265;503;"Go";"func possibleBipartition(N int, dislikes [][]int) 
bool {
 
}";"";"2020-03-25 15:18:19"
6266;503;"Kotlin";"class Solution {
    fun possibleBipartition(N: Int, dislikes: 
Array<IntArray>): Boolean {
 
    }
}";"";"2020-03-25 15:18:19"
6267;503;"Python3";"class Solution:
    def possibleBipartition(self, N: int, dislikes: 
List[List[int]]) -> bool:";"";"2020-03-25 15:18:19"
6268;503;"JavaScript";"/**
 * @param {number} N
 * @param {number[][]} dislikes
 * @return {boolean}
 */
var possibleBipartition = function(N, dislikes) {
 
};";"";"2020-03-25 15:18:19"
6269;503;"PHP";"";"";"2020-03-25 15:18:19"
6270;503;"Swift";"class Solution {
    func possibleBipartition(_ N: Int, _ dislikes: [
[Int]]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:19"
6271;503;"Ruby";"# @param {Integer} n
# @param {Integer[][]} dislikes
# @return {Boolean}
def possible_bipartition(n, dislikes)
 
end";"";"2020-03-25 15:18:19"
6272;503;"Python";"class Solution(object):
    def possibleBipartition(self, N, dislikes):
        """"""
        :type N: int
        :type dislikes: List[List[int]]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:19"
6273;504;"C#";"public class Solution {
    public int[] SortByBits(int[] arr) {
 
    }
}";"";"2020-03-25 15:18:19"
6274;504;"Java";"class Solution {
    public int[] sortByBits(int[] arr) {
 
    }
}";"";"2020-03-25 15:18:19"
6275;504;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* sortByBits(int* arr, int arrSize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:19"
6276;504;"Rust";"impl Solution {
    pub fn sort_by_bits(arr: Vec<i32>) -> Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:19"
6277;504;"Scala";"object Solution {
    def sortByBits(arr: Array[Int]): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:19"
6278;504;"Go";"func sortByBits(arr []int) []int {
 
}";"";"2020-03-25 15:18:19"
6279;504;"Kotlin";"class Solution {
    fun sortByBits(arr: IntArray): IntArray {
 
    }
}";"";"2020-03-25 15:18:19"
6280;504;"Python3";"class Solution:
    def sortByBits(self, arr: List[int]) -> List
[int]:";"";"2020-03-25 15:18:19"
6281;504;"JavaScript";"/**
 * @param {number[]} arr
 * @return {number[]}
 */
var sortByBits = function(arr) {
 
};";"";"2020-03-25 15:18:19"
6282;504;"PHP";"class Solution {
 
    /**
     * @param Integer[] $arr
     * @return Integer[]
     */
    function sortByBits($arr) {
 
    }
}";"";"2020-03-25 15:18:19"
6283;504;"Swift";"class Solution {
    func sortByBits(_ arr: [Int]) -> [Int] {
 
    }
}";"";"2020-03-25 15:18:19"
6284;504;"Ruby";"# @param {Integer[]} arr";"";"2020-03-25 15:18:19"
6285;504;"Python";"class Solution(object):
    def sortByBits(self, arr):
        """"""
        :type arr: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:19"
6286;505;"C#";"public class Solution {
    public int SmallestDistancePair(int[] nums, int 
k) {
 
    }
}";"";"2020-03-25 15:18:19"
6287;505;"Java";"class Solution {
    public int smallestDistancePair(int[] nums, int 
k) {
 
    }
}";"";"2020-03-25 15:18:19"
6288;505;"Rust";"impl Solution {
    pub fn smallest_distance_pair(nums: Vec<i32>, 
k: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:19"
6289;505;"C";"int smallestDistancePair(int* nums, int numsSize, 
int k){
 
}";"";"2020-03-25 15:18:19"
6290;505;"Scala";"object Solution {
    def smallestDistancePair(nums: Array[Int], k: 
Int): Int = {
 
    }
}";"";"2020-03-25 15:18:19"
6291;505;"Go";"func smallestDistancePair(nums []int, k int) int {
 
}";"";"2020-03-25 15:18:19"
6292;505;"Kotlin";"class Solution {
    fun smallestDistancePair(nums: IntArray, k: Int)
: Int {
 
    }
}";"";"2020-03-25 15:18:19"
6293;505;"Python3";"class Solution:
    def smallestDistancePair(self, nums: List[int], 
k: int) -> int:";"";"2020-03-25 15:18:19"
6294;505;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
var smallestDistancePair = function(nums, k) {
 
};";"";"2020-03-25 15:18:19"
6295;505;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer $k
     * @return Integer
     */
    function smallestDistancePair($nums, $k) {
        
    }
}";"";"2020-03-25 15:18:19"
6296;505;"Swift";"class Solution {
    func smallestDistancePair(_ nums: [Int], _ k: 
Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:19"
6297;505;"Ruby";"# @param {Integer[]} nums
# @param {Integer} k
# @return {Integer}
def smallest_distance_pair(nums, k)
 
end";"";"2020-03-25 15:18:19"
6298;505;"Python";"class Solution(object):
    def smallestDistancePair(self, nums, k):
        """"""
        :type nums: List[int]
        :type k: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:19"
6299;506;"C#";"public class StackOfPlates {
 
    public StackOfPlates(int cap) {
 
    }
    
    public void Push(int val) {
 
    }
    
    public int Pop() {
 
    }
    
    public int PopAt(int index) {
 
    }
}
 
/**
 * Your StackOfPlates object will be instantiated 
and called as such:
 * StackOfPlates obj = new StackOfPlates(cap);
 * obj.Push(val);
 * int param_2 = obj.Pop();
 * int param_3 = obj.PopAt(index);";"";"2020-03-25 15:18:19"
6300;506;"Java";"class StackOfPlates {
 
    public StackOfPlates(int cap) {
 
    }
    
    public void push(int val) {
 
    }
    
    public int pop() {
 
    }
    
    public int popAt(int index) {
 
    }
}
 
/**
 * Your StackOfPlates object will be instantiated 
and called as such:
 * StackOfPlates obj = new StackOfPlates(cap);
 * obj.push(val);
 * int param_2 = obj.pop();
 * int param_3 = obj.popAt(index);";"";"2020-03-25 15:18:19"
6301;506;"Rust";"struct StackOfPlates {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl StackOfPlates {
 
    fn new(cap: i32) -> Self {
 
    }
    
    fn push(&self, val: i32) {
 
    }
    
    fn pop(&self) -> i32 {
 
    }
    
    fn pop_at(&self, index: i32) -> i32 {";"";"2020-03-25 15:18:19"
6302;506;"C";"typedef struct {
 
} StackOfPlates;
 
 
StackOfPlates* stackOfPlatesCreate(int cap) {
 
}
 
void stackOfPlatesPush(StackOfPlates* obj, int val) 
{
 
}
 
int stackOfPlatesPop(StackOfPlates* obj) {
 
}
 
int stackOfPlatesPopAt(StackOfPlates* obj, int 
index) {
 
}
 
void stackOfPlatesFree(StackOfPlates* obj) {
 
}";"";"2020-03-25 15:18:19"
6303;506;"Scala";"class StackOfPlates(_cap: Int) {
 
    def push(`val`: Int) {
 
    }
 
    def pop(): Int = {
 
    }
 
    def popAt(index: Int): Int = {
 
    }
 
}
 
/**
 * Your StackOfPlates object will be instantiated 
and called as such:
 * var obj = new StackOfPlates(cap)
 * obj.push(`val`)
 * var param_2 = obj.pop()
 * var param_3 = obj.popAt(index)
 */";"";"2020-03-25 15:18:19"
6304;506;"Go";"type StackOfPlates struct {
 
}
 
 
func Constructor(cap int) StackOfPlates {
 
}
 
 
func (this *StackOfPlates) Push(val int)  {
 
}
 
 
func (this *StackOfPlates) Pop() int {
 
}
 
 
func (this *StackOfPlates) PopAt(index int) int {
 
}
 
 
/**";"";"2020-03-25 15:18:19"
6305;506;"Kotlin";"class StackOfPlates(cap: Int) {
 
    fun push(`val`: Int) {
 
    }
 
    fun pop(): Int {
 
    }
 
    fun popAt(index: Int): Int {
 
    }
 
}
 
/**
 * Your StackOfPlates object will be instantiated 
and called as such:
 * var obj = StackOfPlates(cap)
 * obj.push(`val`)
 * var param_2 = obj.pop()
 * var param_3 = obj.popAt(index)
 */";"";"2020-03-25 15:18:19"
6306;506;"Python3";"class StackOfPlates:
 
    def __init__(self, cap: int):
 
 
    def push(self, val: int) -> None:
 
 
    def pop(self) -> int:
 
 
    def popAt(self, index: int) -> int:
 
 
 
# Your StackOfPlates object will be instantiated 
and called as such:
# obj = StackOfPlates(cap)
# obj.push(val)
# param_2 = obj.pop()
# param_3 = obj.popAt(index)";"";"2020-03-25 15:18:19"
6307;506;"JavaScript";"/**
 * @param {number} cap
 */
var StackOfPlates = function(cap) {
 
};
 
/** 
 * @param {number} val
 * @return {void}
 */
StackOfPlates.prototype.push = function(val) {
 
};
 
/**
 * @return {number}
 */
StackOfPlates.prototype.pop = function() {
 
};
 
/** 
 * @param {number} index
 * @return {number}
 */";"";"2020-03-25 15:18:19"
6308;506;"PHP";"class StackOfPlates {
    /**
     * @param Integer $cap
     */
    function __construct($cap) {
 
    }
 
    /**
     * @param Integer $val
     * @return NULL
     */
    function push($val) {
 
    }
 
    /**
     * @return Integer
     */
    function pop() {
 
    }
 
    /**
     * @param Integer $index
     * @return Integer";"";"2020-03-25 15:18:19"
6309;506;"Swift";"class StackOfPlates {
 
    init(_ cap: Int) {
 
    }
    
    func push(_ val: Int) {
 
    }
    
    func pop() -> Int {
 
    }
    
    func popAt(_ index: Int) -> Int {
 
    }
}
 
/**
 * Your StackOfPlates object will be instantiated 
and called as such:
 * let obj = StackOfPlates(cap)
 * obj.push(val)
 * let ret_2: Int = obj.pop()
 * let ret_3: Int = obj.popAt(index)";"";"2020-03-25 15:18:19"
6310;506;"Ruby";"class StackOfPlates
 
=begin
    :type cap: Integer
=end
    def initialize(cap)
 
    end
 
 
=begin
    :type val: Integer
    :rtype: Void
=end
    def push(val)
 
    end
 
 
=begin
    :rtype: Integer
=end
    def pop()
 
    end
 ";"";"2020-03-25 15:18:19"
6311;506;"Python";"class StackOfPlates(object):
 
    def __init__(self, cap):
        """"""
        :type cap: int
        """"""
 
 
    def push(self, val):
        """"""
        :type val: int
        :rtype: None
        """"""
 
 
    def pop(self):
        """"""
        :rtype: int
        """"""
 
 
    def popAt(self, index):
        """"""
        :type index: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:19"
6312;507;"C#";"public class Solution {
    public bool SplitArraySameAverage(int[] A) {
 
    }
}";"";"2020-03-25 15:18:19"
6313;507;"Java";"class Solution {
    public boolean splitArraySameAverage(int[] A) {
 
    }
}";"";"2020-03-25 15:18:19"
6314;507;"Rust";"impl Solution {
    pub fn split_array_same_average(a: Vec<i32>) -> 
bool {
        
    }
}";"";"2020-03-25 15:18:19"
6315;507;"C";"bool splitArraySameAverage(int* A, int ASize){
 
}";"";"2020-03-25 15:18:19"
6316;507;"Scala";"object Solution {
    def splitArraySameAverage(A: Array[Int]): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:19"
6317;507;"Python3";"class Solution:
    def splitArraySameAverage(self, A: List[int]) 
-> bool:";"";"2020-03-25 15:18:19"
6318;507;"JavaScript";"/**
 * @param {number[]} A
 * @return {boolean}
 */
var splitArraySameAverage = function(A) {
 
};";"";"2020-03-25 15:18:19"
6319;507;"Go";"func splitArraySameAverage(A []int) bool {
 
}";"";"2020-03-25 15:18:19"
6320;507;"PHP";"class Solution {";"";"2020-03-25 15:18:19"
6321;507;"Ruby";"# @param {Integer[]} a
# @return {Boolean}
def split_array_same_average(a)
 
end";"";"2020-03-25 15:18:19"
6322;507;"Kotlin";"class Solution {
    fun splitArraySameAverage(A: IntArray): Boolean 
{
 
    }
}";"";"2020-03-25 15:18:19"
6323;507;"Python";"class Solution(object):
    def splitArraySameAverage(self, A):
        """"""
        :type A: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:19"
6324;508;"C#";"public class Solution {
    public bool CheckInclusion(string s1, string s2)
 {
 
    }
}";"";"2020-03-25 15:18:19"
6325;508;"Java";"class Solution {
    public boolean checkInclusion(String s1, String 
s2) {
 
    }
}";"";"2020-03-25 15:18:19"
6326;508;"Rust";"impl Solution {
    pub fn check_inclusion(s1: String, s2: String) 
-> bool {
        
    }
}";"";"2020-03-25 15:18:19"
6327;508;"C";"bool checkInclusion(char * s1, char * s2){
 
}";"";"2020-03-25 15:18:19"
6328;508;"Scala";"object Solution {
    def checkInclusion(s1: String, s2: String): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:19"
6329;508;"Go";"func checkInclusion(s1 string, s2 string) bool {
 
}";"";"2020-03-25 15:18:19"
6330;508;"Kotlin";"class Solution {
    fun checkInclusion(s1: String, s2: String): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:19"
6331;508;"Python3";"class Solution:
    def checkInclusion(self, s1: str, s2: str) -> 
bool:";"";"2020-03-25 15:18:19"
6332;508;"JavaScript";"/**
 * @param {string} s1
 * @param {string} s2
 * @return {boolean}
 */
var checkInclusion = function(s1, s2) {
 
};";"";"2020-03-25 15:18:19"
6333;508;"PHP";"class Solution {";"";"2020-03-25 15:18:19"
6334;508;"Swift";"class Solution {
    func checkInclusion(_ s1: String, _ s2: String) 
-> Bool {
        
    }
}";"";"2020-03-25 15:18:19"
6335;508;"Ruby";"# @param {String} s1
# @param {String} s2
# @return {Boolean}
def check_inclusion(s1, s2)
 
end";"";"2020-03-25 15:18:19"
6336;508;"Python";"class Solution(object):
    def checkInclusion(self, s1, s2):
        """"""
        :type s1: str
        :type s2: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:19"
6337;509;"MySQL";"# Write your MySQL query statement below";"";"2020-03-25 15:18:19"
6338;509;"MS SQL Server";"/* Write your T-SQL query statement below */";"";"2020-03-25 15:18:19"
6339;509;"Oracle";"/* Write your PL/SQL query statement below */";"";"2020-03-25 15:18:19"
6340;510;"C#";"public class Solution {
    public uint reverseBits(uint n) {
        
    }
}";"";"2020-03-25 15:18:19"
6341;510;"Java";"public class Solution {
    // you need treat n as an unsigned value
    public int reverseBits(int n) {
        
    }
}";"";"2020-03-25 15:18:19"
6342;510;"C++";"class Solution {";"";"2020-03-25 15:18:19"
6343;510;"C";"uint32_t reverseBits(uint32_t n) {
    
}";"";"2020-03-25 15:18:19"
6344;510;"Python3";"class Solution:
    def reverseBits(self, n: int) -> int:";"";"2020-03-25 15:18:19"
6345;510;"JavaScript";"/**
 * @param {number} n - a positive integer
 * @return {number} - a positive integer
 */
var reverseBits = function(n) {
    
};";"";"2020-03-25 15:18:19"
6346;510;"Go";"func reverseBits(num uint32) uint32 {
    
}";"";"2020-03-25 15:18:19"
6347;510;"Swift";"class Solution {
    func reverseBits(_ n: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:19"
6348;510;"Ruby";"# @param {Integer} n, a positive integer
# @return {Integer}
def reverse_bits(n)
    
end";"";"2020-03-25 15:18:19"
6349;510;"Python";"class Solution:
    # @param n, an integer
    # @return an integer
    def reverseBits(self, n):";"";"2020-03-25 15:18:19"
6350;511;"C#";"public class Solution {
    public int MissingNumber(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:20"
6351;511;"Java";"class Solution {
    public int missingNumber(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:20"
6352;511;"C";"int missingNumber(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:20"
6353;511;"Rust";"impl Solution {
    pub fn missing_number(nums: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:20"
6354;511;"Scala";"object Solution {
    def missingNumber(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:20"
6355;511;"Go";"func missingNumber(nums []int) int {
 
}";"";"2020-03-25 15:18:20"
6356;511;"Kotlin";"class Solution {
    fun missingNumber(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:20"
6357;511;"Python3";"class Solution:
    def missingNumber(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:20"
6358;511;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var missingNumber = function(nums) {
 
};";"";"2020-03-25 15:18:20"
6359;511;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function missingNumber($nums) {
 
    }
}";"";"2020-03-25 15:18:20"
6360;511;"Swift";"class Solution {
    func missingNumber(_ nums: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:20"
6361;511;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def missing_number(nums)
 
end";"";"2020-03-25 15:18:20"
6362;511;"Python";"class Solution(object):
    def missingNumber(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:20"
6363;512;"C#";"public class Solution {
    public bool HasAlternatingBits(int n) {
 
    }
}";"";"2020-03-25 15:18:20"
6364;512;"Java";"class Solution {
    public boolean hasAlternatingBits(int n) {
 
    }
}";"";"2020-03-25 15:18:20"
6365;512;"C";"bool hasAlternatingBits(int n){
 
}";"";"2020-03-25 15:18:20"
6366;512;"Rust";"impl Solution {
    pub fn has_alternating_bits(n: i32) -> bool {
        
    }
}";"";"2020-03-25 15:18:20"
6367;512;"Scala";"object Solution {
    def hasAlternatingBits(n: Int): Boolean = {
 
    }
}";"";"2020-03-25 15:18:20"
6368;512;"Go";"func hasAlternatingBits(n int) bool {
 
}";"";"2020-03-25 15:18:20"
6369;512;"Kotlin";"class Solution {
    fun hasAlternatingBits(n: Int): Boolean {
 
    }
}";"";"2020-03-25 15:18:20"
6370;512;"Python3";"class Solution:
    def hasAlternatingBits(self, n: int) -> bool:";"";"2020-03-25 15:18:20"
6371;512;"JavaScript";"/**
 * @param {number} n
 * @return {boolean}
 */
var hasAlternatingBits = function(n) {
 
};";"";"2020-03-25 15:18:20"
6372;512;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Boolean
     */
    function hasAlternatingBits($n) {
        
    }
}";"";"2020-03-25 15:18:20"
6373;512;"Swift";"class Solution {
    func hasAlternatingBits(_ n: Int) -> Bool {
        
    }
}";"";"2020-03-25 15:18:20"
6374;512;"Ruby";"# @param {Integer} n
# @return {Boolean}
def has_alternating_bits(n)
 
end";"";"2020-03-25 15:18:20"
6375;512;"Python";"class Solution(object):
    def hasAlternatingBits(self, n):
        """"""
        :type n: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:20"
6376;513;"C#";"public class Solution {
    public string CrackSafe(int n, int k) {
 
    }
}";"";"2020-03-25 15:18:20"
6377;513;"Java";"class Solution {
    public String crackSafe(int n, int k) {
 
    }
}";"";"2020-03-25 15:18:20"
6378;513;"C";"char * crackSafe(int n, int k){
 
}";"";"2020-03-25 15:18:20"
6379;513;"Rust";"impl Solution {
    pub fn crack_safe(n: i32, k: i32) -> String {
        
    }
}";"";"2020-03-25 15:18:20"
6380;513;"Scala";"object Solution {
    def crackSafe(n: Int, k: Int): String = {
 
    }
}";"";"2020-03-25 15:18:20"
6381;513;"Python3";"class Solution:
    def crackSafe(self, n: int, k: int) -> str:";"";"2020-03-25 15:18:20"
6382;513;"JavaScript";"/**
 * @param {number} n
 * @param {number} k
 * @return {string}
 */
var crackSafe = function(n, k) {
 
};";"";"2020-03-25 15:18:20"
6383;513;"Go";"func crackSafe(n int, k int) string {
 
}";"";"2020-03-25 15:18:20"
6384;513;"Swift";"class Solution {
    func crackSafe(_ n: Int, _ k: Int) -> String {
        
    }
}";"";"2020-03-25 15:18:20"
6385;513;"Ruby";"# @param {Integer} n
# @param {Integer} k
# @return {String}
def crack_safe(n, k)
 
end";"";"2020-03-25 15:18:20"
6386;513;"Python";"class Solution(object):
    def crackSafe(self, n, k):
        """"""
        :type n: int
        :type k: int
        :rtype: str
        """"""";"";"2020-03-25 15:18:20"
6387;513;"Kotlin";"class Solution {
    fun crackSafe(n: Int, k: Int): String {
 
    }
}";"";"2020-03-25 15:18:20"
6388;514;"C#";"public class Solution {
    public IList<string> FindLadders(string 
beginWord, string endWord, IList<string> wordList) {
 
    }
}";"";"2020-03-25 15:18:20"
6389;514;"Java";"class Solution {
    public List<String> findLadders(String 
beginWord, String endWord, List<String> wordList) {
 
    }
}";"";"2020-03-25 15:18:20"
6390;514;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char** findLadders(char* beginWord, char* endWord, 
char** wordList, int wordListSize, int* returnSize){
 
}";"";"2020-03-25 15:18:20"
6391;514;"Rust";"impl Solution {
    pub fn find_ladders(begin_word: String, 
end_word: String, word_list: Vec<String>) -> 
Vec<String> {
 
    }
}";"";"2020-03-25 15:18:20"
6392;514;"Scala";"object Solution {
    def findLadders(beginWord: String, endWord: 
String, wordList: List[String]): List[String] = {
 
    }
}";"";"2020-03-25 15:18:20"
6393;514;"Go";"func findLadders(beginWord string, endWord string, 
wordList []string) []string {
 
}";"";"2020-03-25 15:18:20"
6394;514;"Kotlin";"class Solution {
    fun findLadders(beginWord: String, endWord: 
String, wordList: List<String>): List<String> {
 
    }
}";"";"2020-03-25 15:18:20"
6395;514;"Python3";"class Solution:
    def findLadders(self, beginWord: str, endWord: 
str, wordList: List[str]) -> List[str]:";"";"2020-03-25 15:18:20"
6396;514;"JavaScript";"/**
 * @param {string} beginWord
 * @param {string} endWord
 * @param {string[]} wordList
 * @return {string[]}
 */
var findLadders = function(beginWord, endWord, 
wordList) {
 
};";"";"2020-03-25 15:18:20"
6397;514;"PHP";"class Solution {
 
    /**
     * @param String $beginWord
     * @param String $endWord
     * @param String[] $wordList
     * @return String[]
     */
    function findLadders($beginWord, $endWord, 
$wordList) {
 
    }
}";"";"2020-03-25 15:18:20"
6398;514;"Swift";"class Solution {
    func findLadders(_ beginWord: String, _ 
endWord: String, _ wordList: [String]) -> [String] {
 
    }
}";"";"2020-03-25 15:18:20"
6399;514;"Ruby";"# @param {String} begin_word";"";"2020-03-25 15:18:20"
6400;514;"Python";"class Solution(object):
    def findLadders(self, beginWord, endWord, 
wordList):
        """"""
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:20"
6401;515;"C#";"public class Solution {
    public int LargestValsFromLabels(int[] values, 
int[] labels, int num_wanted, int use_limit) {
 
    }
}";"";"2020-03-25 15:18:20"
6402;515;"Java";"class Solution {
    public int largestValsFromLabels(int[] values, 
int[] labels, int num_wanted, int use_limit) {
 
    }
}";"";"2020-03-25 15:18:20"
6403;515;"Rust";"impl Solution {
    pub fn largest_vals_from_labels(values: 
Vec<i32>, labels: Vec<i32>, num_wanted: i32, 
use_limit: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:20"
6404;515;"C";"int largestValsFromLabels(int* values, int 
valuesSize, int* labels, int labelsSize, int 
num_wanted, int use_limit){
 
}";"";"2020-03-25 15:18:20"
6405;515;"Scala";"object Solution {
    def largestValsFromLabels(values: Array[Int], 
labels: Array[Int], num_wanted: Int, use_limit: Int)
: Int = {
 
    }
}";"";"2020-03-25 15:18:20"
6406;515;"Go";"func largestValsFromLabels(values []int, labels []
int, num_wanted int, use_limit int) int {
 
}";"";"2020-03-25 15:18:20"
6407;515;"Kotlin";"class Solution {
    fun largestValsFromLabels(values: IntArray, 
labels: IntArray, num_wanted: Int, use_limit: Int): 
Int {
 
    }
}";"";"2020-03-25 15:18:20"
6408;515;"Python3";"class Solution:
    def largestValsFromLabels(self, values: List
[int], labels: List[int], num_wanted: int, 
use_limit: int) -> int:";"";"2020-03-25 15:18:20"
6409;515;"JavaScript";"/**
 * @param {number[]} values
 * @param {number[]} labels
 * @param {number} num_wanted
 * @param {number} use_limit
 * @return {number}
 */
var largestValsFromLabels = function(values, labels,
 num_wanted, use_limit) {
 
};";"";"2020-03-25 15:18:20"
6410;515;"PHP";"class Solution {";"";"2020-03-25 15:18:20"
6411;515;"Swift";"class Solution {
    func largestValsFromLabels(_ values: [Int], _ 
labels: [Int], _ num_wanted: Int, _ use_limit: Int) 
-> Int {
        
    }
}";"";"2020-03-25 15:18:20"
6412;515;"Ruby";"# @param {Integer[]} values
# @param {Integer[]} labels
# @param {Integer} num_wanted
# @param {Integer} use_limit
# @return {Integer}
def largest_vals_from_labels(values, labels, 
num_wanted, use_limit)
 
end";"";"2020-03-25 15:18:20"
6413;515;"Python";"class Solution(object):
    def largestValsFromLabels(self, values, labels, 
num_wanted, use_limit):
        """"""
        :type values: List[int]
        :type labels: List[int]
        :type num_wanted: int
        :type use_limit: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:20"
6414;516;"C#";"public class Solution {
    public int SuperEggDrop(int K, int N) {
 
    }
}";"";"2020-03-25 15:18:20"
6415;516;"Java";"class Solution {
    public int superEggDrop(int K, int N) {
 
    }
}";"";"2020-03-25 15:18:20"
6416;516;"C";"int superEggDrop(int K, int N){
 
}";"";"2020-03-25 15:18:20"
6417;516;"Rust";"impl Solution {
    pub fn super_egg_drop(k: i32, n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:20"
6418;516;"Scala";"object Solution {
    def superEggDrop(K: Int, N: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:20"
6419;516;"Go";"func superEggDrop(K int, N int) int {
 
}";"";"2020-03-25 15:18:20"
6420;516;"Kotlin";"class Solution {
    fun superEggDrop(K: Int, N: Int): Int {
 
    }
}";"";"2020-03-25 15:18:20"
6421;516;"Python3";"class Solution:
    def superEggDrop(self, K: int, N: int) -> int:";"";"2020-03-25 15:18:20"
6422;516;"JavaScript";"/**
 * @param {number} K
 * @param {number} N
 * @return {number}
 */
var superEggDrop = function(K, N) {
 
};";"";"2020-03-25 15:18:20"
6423;516;"PHP";"class Solution {
 
    /**
     * @param Integer $K
     * @param Integer $N
     * @return Integer
     */
    function superEggDrop($K, $N) {
        
    }
}";"";"2020-03-25 15:18:20"
6424;516;"Swift";"class Solution {
    func superEggDrop(_ K: Int, _ N: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:20"
6425;516;"Ruby";"# @param {Integer} k";"";"2020-03-25 15:18:20"
6426;516;"Python";"class Solution(object):
    def superEggDrop(self, K, N):
        """"""
        :type K: int
        :type N: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:20"
6427;517;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public bool BtreeGameWinningMove(TreeNode root, 
int n, int x) {
 
    }
}";"";"2020-03-25 15:18:20"
6428;517;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean btreeGameWinningMove(TreeNode 
root, int n, int x) {
 
    }
}";"";"2020-03-25 15:18:20"
6429;517;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn btree_game_winning_move(root: 
Option<Rc<RefCell<TreeNode>>>, n: i32, x: i32) -> 
bool {
        
    }";"";"2020-03-25 15:18:20"
6430;517;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
bool btreeGameWinningMove(struct TreeNode* root, 
int n, int x){
 
}";"";"2020-03-25 15:18:20"
6431;517;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def btreeGameWinningMove(root: TreeNode, n: Int,
 x: Int): Boolean = {
 
    }
}";"";"2020-03-25 15:18:20"
6432;517;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func btreeGameWinningMove(root *TreeNode, n int, x 
int) bool {
 
}";"";"2020-03-25 15:18:20"
6433;517;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun btreeGameWinningMove(root: TreeNode?, n: 
Int, x: Int): Boolean {
 
    }
}";"";"2020-03-25 15:18:20"
6434;517;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def btreeGameWinningMove(self, root: TreeNode, 
n: int, x: int) -> bool:";"";"2020-03-25 15:18:20"
6435;517;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} n
 * @param {number} x
 * @return {boolean}
 */
var btreeGameWinningMove = function(root, n, x) {
 
};";"";"2020-03-25 15:18:20"
6436;517;"PHP";"/**";"";"2020-03-25 15:18:20"
6437;517;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func btreeGameWinningMove(_ root: TreeNode?, _ 
n: Int, _ x: Int) -> Bool {
        
    }
}";"";"2020-03-25 15:18:20"
6438;517;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @param {Integer} n
# @param {Integer} x
# @return {Boolean}
def btree_game_winning_move(root, n, x)
 
end";"";"2020-03-25 15:18:20"
6439;517;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def btreeGameWinningMove(self, root, n, x):
        """"""
        :type root: TreeNode
        :type n: int
        :type x: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:20"
6440;518;"C#";"public class Solution {
    public int Rob(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:20"
6441;518;"Java";"class Solution {
    public int rob(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:20"
6442;518;"C";"int rob(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:20"
6443;518;"Rust";"impl Solution {
    pub fn rob(nums: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:20"
6444;518;"Scala";"object Solution {
    def rob(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:20"
6445;518;"Go";"func rob(nums []int) int {
 
}";"";"2020-03-25 15:18:20"
6446;518;"Kotlin";"class Solution {
    fun rob(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:20"
6447;518;"Python3";"class Solution:
    def rob(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:20"
6448;518;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var rob = function(nums) {
 
};";"";"2020-03-25 15:18:20"
6449;518;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function rob($nums) {
 
    }
}";"";"2020-03-25 15:18:20"
6450;518;"Swift";"class Solution {
    func rob(_ nums: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:20"
6451;518;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def rob(nums)
 
end";"";"2020-03-25 15:18:20"
6452;518;"Python";"class Solution(object):
    def rob(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:20"
6453;519;"C#";"public class Solution {
    public bool IsPossibleDivide(int[] nums, int k) 
{
 
    }
}";"";"2020-03-25 15:18:20"
6454;519;"Java";"class Solution {
    public boolean isPossibleDivide(int[] nums, int 
k) {
 
    }
}";"";"2020-03-25 15:18:20"
6455;519;"C";"bool isPossibleDivide(int* nums, int numsSize, int 
k){
 
}";"";"2020-03-25 15:18:20"
6456;519;"Rust";"impl Solution {
    pub fn is_possible_divide(nums: Vec<i32>, k: 
i32) -> bool {
 
    }
}";"";"2020-03-25 15:18:20"
6457;519;"Scala";"object Solution {
    def isPossibleDivide(nums: Array[Int], k: Int): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:20"
6458;519;"Go";"func isPossibleDivide(nums []int, k int) bool {
 
}";"";"2020-03-25 15:18:20"
6459;519;"Kotlin";"class Solution {
    fun isPossibleDivide(nums: IntArray, k: Int): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:20"
6460;519;"Python3";"class Solution:
    def isPossibleDivide(self, nums: List[int], k: 
int) -> bool:";"";"2020-03-25 15:18:20"
6461;519;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} k
 * @return {boolean}
 */
var isPossibleDivide = function(nums, k) {
 
};";"";"2020-03-25 15:18:20"
6462;519;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer $k
     * @return Boolean
     */
    function isPossibleDivide($nums, $k) {
 
    }
}";"";"2020-03-25 15:18:20"
6463;519;"Swift";"class Solution {
    func isPossibleDivide(_ nums: [Int], _ k: Int) 
-> Bool {
 
    }
}";"";"2020-03-25 15:18:20"
6464;519;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:18:20"
6465;519;"Python";"class Solution(object):
    def isPossibleDivide(self, nums, k):
        """"""
        :type nums: List[int]
        :type k: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:20"
6466;520;"C#";"public class Solution {
    public bool IncreasingTriplet(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:20"
6467;520;"Java";"class Solution {
    public boolean increasingTriplet(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:20"
6468;520;"Rust";"impl Solution {
    pub fn increasing_triplet(nums: Vec<i32>) -> 
bool {
        
    }
}";"";"2020-03-25 15:18:20"
6469;520;"C";"bool increasingTriplet(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:20"
6470;520;"Scala";"object Solution {
    def increasingTriplet(nums: Array[Int]): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:20"
6471;520;"Go";"func increasingTriplet(nums []int) bool {
 
}";"";"2020-03-25 15:18:20"
6472;520;"Kotlin";"class Solution {
    fun increasingTriplet(nums: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:20"
6473;520;"Python3";"class Solution:
    def increasingTriplet(self, nums: List[int]) -> 
bool:";"";"2020-03-25 15:18:20"
6474;520;"JavaScript";"/**
 * @param {number[]} nums
 * @return {boolean}
 */
var increasingTriplet = function(nums) {
 
};";"";"2020-03-25 15:18:20"
6475;520;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Boolean
     */
    function increasingTriplet($nums) {
        
    }
}";"";"2020-03-25 15:18:20"
6476;520;"Swift";"class Solution {
    func increasingTriplet(_ nums: [Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:20"
6477;520;"Ruby";"# @param {Integer[]} nums
# @return {Boolean}
def increasing_triplet(nums)
 
end";"";"2020-03-25 15:18:20"
6478;520;"Python";"class Solution(object):
    def increasingTriplet(self, nums):
        """"""
        :type nums: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:20"
6479;521;"C#";"public class Solution {
    public int FindKthNumber(int n, int k) {
 
    }
}";"";"2020-03-25 15:18:20"
6480;521;"Java";"class Solution {
    public int findKthNumber(int n, int k) {
 
    }
}";"";"2020-03-25 15:18:20"
6481;521;"Rust";"impl Solution {
    pub fn find_kth_number(n: i32, k: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:20"
6482;521;"C";"int findKthNumber(int n, int k){
 
}";"";"2020-03-25 15:18:20"
6483;521;"Scala";"object Solution {
    def findKthNumber(n: Int, k: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:20"
6484;521;"Go";"func findKthNumber(n int, k int) int {
 
}";"";"2020-03-25 15:18:20"
6485;521;"Kotlin";"class Solution {
    fun findKthNumber(n: Int, k: Int): Int {
 
    }
}";"";"2020-03-25 15:18:20"
6486;521;"Python3";"class Solution:
    def findKthNumber(self, n: int, k: int) -> int:";"";"2020-03-25 15:18:20"
6487;521;"JavaScript";"/**
 * @param {number} n
 * @param {number} k
 * @return {number}
 */
var findKthNumber = function(n, k) {
 
};";"";"2020-03-25 15:18:20"
6488;521;"PHP";"class Solution {";"";"2020-03-25 15:18:20"
6489;521;"Swift";"class Solution {
    func findKthNumber(_ n: Int, _ k: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:20"
6490;521;"Ruby";"# @param {Integer} n
# @param {Integer} k
# @return {Integer}
def find_kth_number(n, k)
 
end";"";"2020-03-25 15:18:20"
6491;521;"Python";"class Solution(object):
    def findKthNumber(self, n, k):
        """"""
        :type n: int
        :type k: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:20"
6492;522;"C#";"public class Solution {
    public int[][] MatrixBlockSum(int[][] mat, int 
K) {
        
    }
}";"";"2020-03-25 15:18:20"
6493;522;"Java";"class Solution {
    public int[][] matrixBlockSum(int[][] mat, int 
K) {
 
    }
}";"";"2020-03-25 15:18:20"
6494;522;"Rust";"impl Solution {
    pub fn matrix_block_sum(mat: Vec<Vec<i32>>, k: 
i32) -> Vec<Vec<i32>> {
 
    }
}";"";"2020-03-25 15:18:20"
6495;522;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** matrixBlockSum(int** mat, int matSize, int* 
matColSize, int K, int* returnSize, int** 
returnColumnSizes){
 
}";"";"2020-03-25 15:18:20"
6496;522;"Scala";"object Solution {
    def matrixBlockSum(mat: Array[Array[Int]], K: 
Int): Array[Array[Int]] = {
 
    }
}";"";"2020-03-25 15:18:20"
6497;522;"Go";"func matrixBlockSum(mat [][]int, K int) [][]int {
 
}";"";"2020-03-25 15:18:20"
6498;522;"Kotlin";"class Solution {
    fun matrixBlockSum(mat: Array<IntArray>, K: Int)
: Array<IntArray> {
 
    }
}";"";"2020-03-25 15:18:20"
6499;522;"Python3";"class Solution:
    def matrixBlockSum(self, mat: List[List[int]], 
K: int) -> List[List[int]]:";"";"2020-03-25 15:18:20"
6500;522;"JavaScript";"/**
 * @param {number[][]} mat
 * @param {number} K
 * @return {number[][]}
 */
var matrixBlockSum = function(mat, K) {
    
};";"";"2020-03-25 15:18:20"
6501;522;"PHP";"class Solution {";"";"2020-03-25 15:18:20"
6502;522;"Swift";"class Solution {
    func matrixBlockSum(_ mat: [[Int]], _ K: Int) 
-> [[Int]] {
 
    }
}";"";"2020-03-25 15:18:20"
6503;522;"Ruby";"# @param {Integer[][]} mat
# @param {Integer} k
# @return {Integer[][]}
def matrix_block_sum(mat, k)
    
end";"";"2020-03-25 15:18:20"
6504;522;"Python";"class Solution(object):
    def matrixBlockSum(self, mat, K):
        """"""
        :type mat: List[List[int]]
        :type K: int
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:20"
6505;523;"C#";"public class Solution {
    public IList<IList<int>> GetSkyline(int[][] 
buildings) {
 
    }
}";"";"2020-03-25 15:18:20"
6506;523;"Java";"class Solution {
    public List<List<Integer>> getSkyline(int[][] 
buildings) {
 
    }
}";"";"2020-03-25 15:18:20"
6507;523;"Rust";"impl Solution {
    pub fn get_skyline(buildings: Vec<Vec<i32>>) -> 
Vec<Vec<i32>> {
 
    }
}";"";"2020-03-25 15:18:20"
6508;523;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** getSkyline(int** buildings, int buildingsSize,
 int* buildingsColSize, int* returnSize, int** 
returnColumnSizes){
 
}";"";"2020-03-25 15:18:20"
6509;523;"Scala";"object Solution {
    def getSkyline(buildings: Array[Array[Int]]): 
List[List[Int]] = {
 
    }
}";"";"2020-03-25 15:18:20"
6510;523;"Go";"func getSkyline(buildings [][]int) [][]int {
 
}";"";"2020-03-25 15:18:20"
6511;523;"Kotlin";"class Solution {
    fun getSkyline(buildings: Array<IntArray>): 
List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:20"
6512;523;"Python3";"class Solution:
    def getSkyline(self, buildings: List[List[int]])
 -> List[List[int]]:";"";"2020-03-25 15:18:20"
6513;523;"JavaScript";"/**
 * @param {number[][]} buildings
 * @return {number[][]}
 */
var getSkyline = function(buildings) {
 
};";"";"2020-03-25 15:18:20"
6514;523;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $buildings
     * @return Integer[][]
     */
    function getSkyline($buildings) {
 
    }
}";"";"2020-03-25 15:18:20"
6515;523;"Swift";"class Solution {
    func getSkyline(_ buildings: [[Int]]) -> [[Int]]
 {
 
    }
}";"";"2020-03-25 15:18:20"
6516;523;"Ruby";"# @param {Integer[][]} buildings
# @return {Integer[][]}
def get_skyline(buildings)
 
end";"";"2020-03-25 15:18:20"
6517;523;"Python";"class Solution(object):
    def getSkyline(self, buildings):
        """"""
        :type buildings: List[List[int]]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:20"
6518;524;"C#";"public class Solution {
    public int MinSteps(int n) {
 
    }
}";"";"2020-03-25 15:18:20"
6519;524;"Java";"class Solution {
    public int minSteps(int n) {
 
    }
}";"";"2020-03-25 15:18:20"
6520;524;"Rust";"impl Solution {
    pub fn min_steps(n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:20"
6521;524;"C";"int minSteps(int n){
 
}";"";"2020-03-25 15:18:20"
6522;524;"Scala";"object Solution {
    def minSteps(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:20"
6523;524;"Go";"func minSteps(n int) int {
 
}";"";"2020-03-25 15:18:20"
6524;524;"Kotlin";"class Solution {
    fun minSteps(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:20"
6525;524;"Python3";"class Solution:
    def minSteps(self, n: int) -> int:";"";"2020-03-25 15:18:20"
6526;524;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var minSteps = function(n) {
 
};";"";"2020-03-25 15:18:20"
6527;524;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function minSteps($n) {
        
    }
}";"";"2020-03-25 15:18:20"
6528;524;"Swift";"class Solution {
    func minSteps(_ n: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:20"
6529;524;"Ruby";"# @param {Integer} n
# @return {Integer}
def min_steps(n)
 
end";"";"2020-03-25 15:18:20"
6530;524;"Python";"class Solution(object):
    def minSteps(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:20"
6531;525;"C#";"public class Solution {
    public int BinaryGap(int N) {
 
    }
}";"";"2020-03-25 15:18:20"
6532;525;"Java";"class Solution {
    public int binaryGap(int N) {
 
    }
}";"";"2020-03-25 15:18:20"
6533;525;"Rust";"impl Solution {
    pub fn binary_gap(n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:20"
6534;525;"C";"int binaryGap(int N){
 
}";"";"2020-03-25 15:18:20"
6535;525;"Scala";"object Solution {
    def binaryGap(N: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:20"
6536;525;"Go";"func binaryGap(N int) int {
 
}";"";"2020-03-25 15:18:20"
6537;525;"Kotlin";"class Solution {
    fun binaryGap(N: Int): Int {
 
    }
}";"";"2020-03-25 15:18:20"
6538;525;"Python3";"class Solution:
    def binaryGap(self, N: int) -> int:";"";"2020-03-25 15:18:20"
6539;525;"JavaScript";"/**
 * @param {number} N
 * @return {number}
 */
var binaryGap = function(N) {
 
};";"";"2020-03-25 15:18:20"
6540;525;"PHP";"class Solution {";"";"2020-03-25 15:18:20"
6541;525;"Swift";"class Solution {
    func binaryGap(_ N: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:20"
6542;525;"Ruby";"# @param {Integer} n
# @return {Integer}
def binary_gap(n)
 
end";"";"2020-03-25 15:18:20"
6543;525;"Python";"class Solution(object):
    def binaryGap(self, N):
        """"""
        :type N: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:20"
6544;526;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode DetectCycle(ListNode head) {
        
    }
}";"";"2020-03-25 15:18:20"
6545;526;"Java";"/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        
    }
}";"";"2020-03-25 15:18:20"
6546;526;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode *detectCycle(struct ListNode *head) 
{
    
}";"";"2020-03-25 15:18:20"
6547;526;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def detectCycle(self, head: ListNode) -> 
ListNode:";"";"2020-03-25 15:18:20"
6548;526;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
 
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var detectCycle = function(head) {
    
};";"";"2020-03-25 15:18:20"
6549;526;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func detectCycle(head *ListNode) *ListNode {
    
}";"";"2020-03-25 15:18:20"
6550;526;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def detectCycle(self, head):
        """"""
        :type head: ListNode
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:20"
6551;527;"Java";"class Solution {
    public int kInversePairs(int n, int k) {
 
    }
}";"";"2020-03-25 15:18:20"
6552;527;"Rust";"impl Solution {
    pub fn k_inverse_pairs(n: i32, k: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:20"
6553;527;"C";"int kInversePairs(int n, int k){
 
}";"";"2020-03-25 15:18:20"
6554;527;"Scala";"object Solution {
    def kInversePairs(n: Int, k: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:20"
6555;527;"Python3";"class Solution:
    def kInversePairs(self, n: int, k: int) -> int:";"";"2020-03-25 15:18:20"
6556;527;"JavaScript";"/**
 * @param {number} n
 * @param {number} k
 * @return {number}
 */
var kInversePairs = function(n, k) {
 
};";"";"2020-03-25 15:18:20"
6557;527;"Go";"func kInversePairs(n int, k int) int {
 
}";"";"2020-03-25 15:18:20"
6558;527;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @param Integer $k
     * @return Integer
     */
    function kInversePairs($n, $k) {
        
    }
}";"";"2020-03-25 15:18:20"
6559;527;"Swift";"class Solution {
    func kInversePairs(_ n: Int, _ k: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:20"
6560;527;"Ruby";"# @param {Integer} n
# @param {Integer} k
# @return {Integer}
def k_inverse_pairs(n, k)
 
end";"";"2020-03-25 15:18:20"
6561;527;"Kotlin";"class Solution {
    fun kInversePairs(n: Int, k: Int): Int {
 
    }
}";"";"2020-03-25 15:18:20"
6562;527;"Python";"class Solution(object):
    def kInversePairs(self, n, k):
        """"""
        :type n: int
        :type k: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:20"
6563;528;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public bool HasCycle(ListNode head) {
        
    }
}";"";"2020-03-25 15:18:20"
6564;528;"Java";"/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        
    }
}";"";"2020-03-25 15:18:20"
6565;528;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
bool hasCycle(struct ListNode *head) {
    
}";"";"2020-03-25 15:18:20"
6566;528;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
 
object Solution {
    def hasCycle(head: ListNode): Boolean = {
        
    }
}";"";"2020-03-25 15:18:20"
6567;528;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
 
/**
 * @param {ListNode} head
 * @return {boolean}
 */
var hasCycle = function(head) {
    
};";"";"2020-03-25 15:18:20"
6568;528;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def hasCycle(self, head: ListNode) -> bool:";"";"2020-03-25 15:18:20"
6569;528;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func hasCycle(head *ListNode) bool {
    
}";"";"2020-03-25 15:18:20"
6570;528;"PHP";"/**";"";"2020-03-25 15:18:20"
6571;528;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
 
class Solution {
    func hasCycle(_ head: ListNode?) -> Bool {
        
    }
}";"";"2020-03-25 15:18:20"
6572;528;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# @param {ListNode} head
# @return {Boolean}
def hasCycle(head)
    
end";"";"2020-03-25 15:18:20"
6573;528;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
 
class Solution {
    fun hasCycle(head: ListNode?): Boolean {
        
    }
}";"";"2020-03-25 15:18:20"
6574;528;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def hasCycle(self, head):
        """"""
        :type head: ListNode
        :rtype: bool
        """"""";"";"2020-03-25 15:18:20"
6575;529;"PHP";"";"";"2020-03-25 15:18:20"
6576;530;"C#";"public class Solution {
    public string ToGoatLatin(string S) {
 
    }
}";"";"2020-03-25 15:18:20"
6577;530;"Java";"class Solution {
    public String toGoatLatin(String S) {
 
    }
}";"";"2020-03-25 15:18:20"
6578;530;"C";"char * toGoatLatin(char * S){
 
}";"";"2020-03-25 15:18:20"
6579;530;"Rust";"impl Solution {
    pub fn to_goat_latin(s: String) -> String {
        
    }
}";"";"2020-03-25 15:18:20"
6580;530;"Scala";"object Solution {
    def toGoatLatin(S: String): String = {
 
    }
}";"";"2020-03-25 15:18:20"
6581;530;"Go";"func toGoatLatin(S string) string {
 
}";"";"2020-03-25 15:18:20"
6582;530;"Kotlin";"class Solution {
    fun toGoatLatin(S: String): String {
 
    }
}";"";"2020-03-25 15:18:20"
6583;530;"Python3";"class Solution:
    def toGoatLatin(self, S: str) -> str:";"";"2020-03-25 15:18:20"
6584;530;"JavaScript";"/**
 * @param {string} S
 * @return {string}
 */
var toGoatLatin = function(S) {
 
};";"";"2020-03-25 15:18:20"
6585;530;"PHP";"class Solution {
 
    /**
     * @param String $S
     * @return String
     */
    function toGoatLatin($S) {
        
    }
}";"";"2020-03-25 15:18:20"
6586;530;"Swift";"class Solution {
    func toGoatLatin(_ S: String) -> String {
        
    }
}";"";"2020-03-25 15:18:20"
6587;530;"Ruby";"# @param {String} s
# @return {String}
def to_goat_latin(s)
 
end";"";"2020-03-25 15:18:20"
6588;530;"Python";"class Solution(object):
    def toGoatLatin(self, S):
        """"""
        :type S: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:20"
6589;531;"C#";"public class Solution {
    public int CountBattleships(char[][] board) {
 
    }
}";"";"2020-03-25 15:18:20"
6590;531;"Java";"class Solution {
    public int countBattleships(char[][] board) {
 
    }
}";"";"2020-03-25 15:18:20"
6591;531;"Rust";"impl Solution {
    pub fn count_battleships(board: Vec<Vec<char>>) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:20"
6592;531;"C";"int countBattleships(char** board, int boardSize, 
int* boardColSize){
 
}";"";"2020-03-25 15:18:20"
6593;531;"Scala";"object Solution {
    def countBattleships(board: Array[Array[Char]])
: Int = {
 
    }
}";"";"2020-03-25 15:18:20"
6594;531;"Go";"func countBattleships(board [][]byte) int {
 
}";"";"2020-03-25 15:18:20"
6595;531;"Kotlin";"class Solution {
    fun countBattleships(board: Array<CharArray>): 
Int {
 
    }
}";"";"2020-03-25 15:18:20"
6596;531;"Python3";"class Solution:
    def countBattleships(self, board: List[List[str]
]) -> int:";"";"2020-03-25 15:18:20"
6597;531;"JavaScript";"/**
 * @param {character[][]} board
 * @return {number}
 */
var countBattleships = function(board) {
 
};";"";"2020-03-25 15:18:20"
6598;531;"PHP";"";"";"2020-03-25 15:18:20"
6599;531;"Swift";"class Solution {
    func countBattleships(_ board: [[Character]]) 
-> Int {
        
    }
}";"";"2020-03-25 15:18:20"
6600;531;"Ruby";"# @param {Character[][]} board
# @return {Integer}
def count_battleships(board)
 
end";"";"2020-03-25 15:18:20"
6601;531;"Python";"class Solution(object):
    def countBattleships(self, board):
        """"""
        :type board: List[List[str]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:20"
6602;532;"C#";"public class Solution {
    public bool IsNumber(string s) {
 
    }
}";"";"2020-03-25 15:18:21"
6603;532;"Java";"class Solution {
    public boolean isNumber(String s) {
 
    }
}";"";"2020-03-25 15:18:21"
6604;532;"C";"bool isNumber(char * s){
 
}";"";"2020-03-25 15:18:21"
6605;532;"Rust";"impl Solution {
    pub fn is_number(s: String) -> bool {
        
    }
}";"";"2020-03-25 15:18:21"
6606;532;"Scala";"object Solution {
    def isNumber(s: String): Boolean = {
 
    }
}";"";"2020-03-25 15:18:21"
6607;532;"Go";"func isNumber(s string) bool {
 
}";"";"2020-03-25 15:18:21"
6608;532;"Kotlin";"class Solution {
    fun isNumber(s: String): Boolean {
 
    }
}";"";"2020-03-25 15:18:21"
6609;532;"Python3";"class Solution:
    def isNumber(self, s: str) -> bool:";"";"2020-03-25 15:18:21"
6610;532;"JavaScript";"/**
 * @param {string} s
 * @return {boolean}
 */
var isNumber = function(s) {
 
};";"";"2020-03-25 15:18:21"
6611;532;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return Boolean
     */
    function isNumber($s) {
        
    }
}";"";"2020-03-25 15:18:21"
6612;532;"Swift";"class Solution {
    func isNumber(_ s: String) -> Bool {
        
    }
}";"";"2020-03-25 15:18:21"
6613;532;"Ruby";"# @param {String} s";"";"2020-03-25 15:18:21"
6614;532;"Python";"class Solution(object):
    def isNumber(self, s):
        """"""
        :type s: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:21"
6615;533;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public bool IsValidBST(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:21"
6616;533;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:21"
6617;533;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn is_valid_bst(root: 
Option<Rc<RefCell<TreeNode>>>) -> bool {
 
    }
}";"";"2020-03-25 15:18:21"
6618;533;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
bool isValidBST(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:21"
6619;533;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def isValidBST(root: TreeNode): Boolean = {
 
    }
}";"";"2020-03-25 15:18:21"
6620;533;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func isValidBST(root *TreeNode) bool {
 
}";"";"2020-03-25 15:18:21"
6621;533;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun isValidBST(root: TreeNode?): Boolean {
 
    }
}";"";"2020-03-25 15:18:21"
6622;533;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def isValidBST(self, root: TreeNode) -> bool:";"";"2020-03-25 15:18:21"
6623;533;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isValidBST = function(root) {
 
};";"";"2020-03-25 15:18:21"
6624;533;"PHP";"/**";"";"2020-03-25 15:18:21"
6625;533;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func isValidBST(_ root: TreeNode?) -> Bool {
 
    }
}";"";"2020-03-25 15:18:21"
6626;533;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Boolean}
def is_valid_bst(root)
 
end";"";"2020-03-25 15:18:21"
6627;533;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def isValidBST(self, root):
        """"""
        :type root: TreeNode
        :rtype: bool
        """"""";"";"2020-03-25 15:18:21"
6628;534;"Java";"class Solution {
    public String shiftingLetters(String S, int[] 
shifts) {
 
    }
}";"";"2020-03-25 15:18:21"
6629;534;"C";"char * shiftingLetters(char * S, int* shifts, int 
shiftsSize){
 
}";"";"2020-03-25 15:18:21"
6630;534;"Rust";"impl Solution {
    pub fn shifting_letters(s: String, shifts: 
Vec<i32>) -> String {
        
    }
}";"";"2020-03-25 15:18:21"
6631;534;"Scala";"object Solution {
    def shiftingLetters(S: String, shifts: Array
[Int]): String = {
 
    }
}";"";"2020-03-25 15:18:21"
6632;534;"Python3";"class Solution:
    def shiftingLetters(self, S: str, shifts: List
[int]) -> str:";"";"2020-03-25 15:18:21"
6633;534;"JavaScript";"/**
 * @param {string} S
 * @param {number[]} shifts
 * @return {string}
 */
var shiftingLetters = function(S, shifts) {
 
};";"";"2020-03-25 15:18:21"
6634;534;"Go";"func shiftingLetters(S string, shifts []int) string 
{
 
}";"";"2020-03-25 15:18:21"
6635;534;"PHP";"class Solution {
 
    /**
     * @param String $S
     * @param Integer[] $shifts
     * @return String
     */
    function shiftingLetters($S, $shifts) {
        
    }
}";"";"2020-03-25 15:18:21"
6636;534;"Swift";"class Solution {
    func shiftingLetters(_ S: String, _ shifts: 
[Int]) -> String {
        
    }
}";"";"2020-03-25 15:18:21"
6637;534;"Ruby";"# @param {String} s";"";"2020-03-25 15:18:21"
6638;534;"Python";"class Solution(object):
    def shiftingLetters(self, S, shifts):
        """"""
        :type S: str
        :type shifts: List[int]
        :rtype: str
        """"""";"";"2020-03-25 15:18:21"
6639;534;"Kotlin";"class Solution {
    fun shiftingLetters(S: String, shifts: IntArray)
: String {
 
    }
}";"";"2020-03-25 15:18:21"
6640;535;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int KthToLast(ListNode head, int k) {
 
    }
}";"";"2020-03-25 15:18:21"
6641;535;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public int kthToLast(ListNode head, int k) {
 
    }
}";"";"2020-03-25 15:18:21"
6642;535;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn kth_to_last(head: Option<Box<ListNode>>, 
k: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:21"
6643;535;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
int kthToLast(struct ListNode* head, int k){
 
}";"";"2020-03-25 15:18:21"
6644;535;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def kthToLast(head: ListNode, k: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:21"
6645;535;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func kthToLast(head *ListNode, k int) int {
 
}";"";"2020-03-25 15:18:21"
6646;535;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun kthToLast(head: ListNode?, k: Int): Int {
 
    }
}";"";"2020-03-25 15:18:21"
6647;535;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def kthToLast(self, head: ListNode, k: int) -> 
int:";"";"2020-03-25 15:18:21"
6648;535;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @param {number} k
 * @return {number}
 */
var kthToLast = function(head, k) {
 
};";"";"2020-03-25 15:18:21"
6649;535;"PHP";"/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
class Solution {
 
    /**
     * @param ListNode $head
     * @param Integer $k
     * @return Integer
     */
    function kthToLast($head, $k) {
 
    }
}";"";"2020-03-25 15:18:21"
6650;535;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func kthToLast(_ head: ListNode?, _ k: Int) -> 
Int {
 
    }
}";"";"2020-03-25 15:18:21"
6651;535;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# @param {ListNode} head
# @param {Integer} k
# @return {Integer}
def kth_to_last(head, k)
 
end";"";"2020-03-25 15:18:21"
6652;535;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def kthToLast(self, head, k):
        """"""
        :type head: ListNode
        :type k: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:21"
6653;536;"C#";"public class Solution {
    public int LastRemaining(int n, int m) {
 
    }
}";"";"2020-03-25 15:18:21"
6654;536;"Java";"class Solution {
    public int lastRemaining(int n, int m) {
 
    }
}";"";"2020-03-25 15:18:21"
6655;536;"Rust";"impl Solution {
    pub fn last_remaining(n: i32, m: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:21"
6656;536;"C";"int lastRemaining(int n, int m){
 
}";"";"2020-03-25 15:18:21"
6657;536;"Scala";"object Solution {
    def lastRemaining(n: Int, m: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:21"
6658;536;"Go";"func lastRemaining(n int, m int) int {
 
}";"";"2020-03-25 15:18:21"
6659;536;"Kotlin";"class Solution {
    fun lastRemaining(n: Int, m: Int): Int {
 
    }
}";"";"2020-03-25 15:18:21"
6660;536;"Python3";"class Solution:
    def lastRemaining(self, n: int, m: int) -> int:";"";"2020-03-25 15:18:21"
6661;536;"JavaScript";"/**
 * @param {number} n
 * @param {number} m
 * @return {number}
 */
var lastRemaining = function(n, m) {
 
};";"";"2020-03-25 15:18:21"
6662;536;"PHP";"class Solution {";"";"2020-03-25 15:18:21"
6663;536;"Swift";"class Solution {
    func lastRemaining(_ n: Int, _ m: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:21"
6664;536;"Ruby";"# @param {Integer} n
# @param {Integer} m
# @return {Integer}
def last_remaining(n, m)
 
end";"";"2020-03-25 15:18:21"
6665;536;"Python";"class Solution(object):
    def lastRemaining(self, n, m):
        """"""
        :type n: int
        :type m: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:21"
6666;537;"C#";"public class Solution {
    public int[][] UpdateMatrix(int[][] matrix) {
 
    }
}";"";"2020-03-25 15:18:21"
6667;537;"Java";"class Solution {
    public int[][] updateMatrix(int[][] matrix) {
 
    }
}";"";"2020-03-25 15:18:21"
6668;537;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** updateMatrix(int** matrix, int matrixSize, 
int* matrixColSize, int* returnSize, int** 
returnColumnSizes){
 
}";"";"2020-03-25 15:18:21"
6669;537;"Rust";"impl Solution {
    pub fn update_matrix(matrix: Vec<Vec<i32>>) -> 
Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:21"
6670;537;"Scala";"object Solution {
    def updateMatrix(matrix: Array[Array[Int]]): 
Array[Array[Int]] = {
 
    }
}";"";"2020-03-25 15:18:21"
6671;537;"Go";"func updateMatrix(matrix [][]int) [][]int {
 
}";"";"2020-03-25 15:18:21"
6672;537;"Kotlin";"class Solution {
    fun updateMatrix(matrix: Array<IntArray>): 
Array<IntArray> {
 
    }
}";"";"2020-03-25 15:18:21"
6673;537;"Python3";"class Solution:
    def updateMatrix(self, matrix: List[List[int]]) 
-> List[List[int]]:";"";"2020-03-25 15:18:21"
6674;537;"JavaScript";"/**
 * @param {number[][]} matrix
 * @return {number[][]}
 */
var updateMatrix = function(matrix) {
 
};";"";"2020-03-25 15:18:21"
6675;537;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $matrix
     * @return Integer[][]
     */
    function updateMatrix($matrix) {
        
    }
}";"";"2020-03-25 15:18:21"
6676;537;"Swift";"class Solution {
    func updateMatrix(_ matrix: [[Int]]) -> [[Int]] 
{
        
    }
}";"";"2020-03-25 15:18:21"
6677;537;"Ruby";"# @param {Integer[][]} matrix";"";"2020-03-25 15:18:21"
6678;537;"Python";"class Solution(object):
    def updateMatrix(self, matrix):
        """"""
        :type matrix: List[List[int]]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:21"
6679;538;"C#";"public class Solution {
    public bool LemonadeChange(int[] bills) {
 
    }
}";"";"2020-03-25 15:18:21"
6680;538;"Java";"class Solution {
    public boolean lemonadeChange(int[] bills) {
 
    }
}";"";"2020-03-25 15:18:21"
6681;538;"C";"bool lemonadeChange(int* bills, int billsSize){
 
}";"";"2020-03-25 15:18:21"
6682;538;"Rust";"impl Solution {
    pub fn lemonade_change(bills: Vec<i32>) -> bool 
{
        
    }
}";"";"2020-03-25 15:18:21"
6683;538;"Scala";"object Solution {
    def lemonadeChange(bills: Array[Int]): Boolean 
= {
 
    }
}";"";"2020-03-25 15:18:21"
6684;538;"Python3";"class Solution:
    def lemonadeChange(self, bills: List[int]) -> 
bool:";"";"2020-03-25 15:18:21"
6685;538;"JavaScript";"/**
 * @param {number[]} bills
 * @return {boolean}
 */
var lemonadeChange = function(bills) {
 
};";"";"2020-03-25 15:18:21"
6686;538;"Go";"func lemonadeChange(bills []int) bool {
 
}";"";"2020-03-25 15:18:21"
6687;538;"PHP";"class Solution {
 
    /**
     * @param Integer[] $bills
     * @return Boolean
     */
    function lemonadeChange($bills) {
        
    }
}";"";"2020-03-25 15:18:21"
6688;538;"Ruby";"# @param {Integer[]} bills";"";"2020-03-25 15:18:21"
6689;538;"Python";"class Solution(object):
    def lemonadeChange(self, bills):
        """"""
        :type bills: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:21"
6690;538;"Kotlin";"class Solution {
    fun lemonadeChange(bills: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:21"
6691;539;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode GetIntersectionNode(ListNode 
headA, ListNode headB) {
        
    }
}";"";"2020-03-25 15:18:21"
6692;539;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode 
headA, ListNode headB) {
        
    }
}";"";"2020-03-25 15:18:21"
6693;539;"C++";"/**";"";"2020-03-25 15:18:21"
6694;539;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode *getIntersectionNode(struct 
ListNode *headA, struct ListNode *headB) {
    
}";"";"2020-03-25 15:18:21"
6695;539;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def getIntersectionNode(self, headA: ListNode, 
headB: ListNode) -> ListNode:";"";"2020-03-25 15:18:21"
6696;539;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
 
/**
 * @param {ListNode} headA
 * @param {ListNode} headB
 * @return {ListNode}
 */
var getIntersectionNode = function(headA, headB) {
    
};";"";"2020-03-25 15:18:21"
6697;539;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func getIntersectionNode(headA, headB *ListNode) 
*ListNode {
    
}";"";"2020-03-25 15:18:21"
6698;539;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
 
class Solution {
    func getIntersectionNode(_ headA: ListNode?, _ 
headB: ListNode?) -> ListNode? {
        
    }
}";"";"2020-03-25 15:18:21"
6699;539;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """"""
        :type head1, head1: ListNode
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:21"
6700;540;"C#";"public class Solution {
    public int[] BestLine(int[][] points) {
 
    }
}";"";"2020-03-25 15:18:21"
6701;540;"Java";"class Solution {
    public int[] bestLine(int[][] points) {
 
    }
}";"";"2020-03-25 15:18:21"
6702;540;"Rust";"impl Solution {
    pub fn best_line(points: Vec<Vec<i32>>) -> 
Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:21"
6703;540;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* bestLine(int** points, int pointsSize, int* 
pointsColSize, int* returnSize){
 
}";"";"2020-03-25 15:18:21"
6704;540;"Scala";"object Solution {
    def bestLine(points: Array[Array[Int]]): Array
[Int] = {
 
    }
}";"";"2020-03-25 15:18:21"
6705;540;"Go";"func bestLine(points [][]int) []int {
 
}";"";"2020-03-25 15:18:21"
6706;540;"Kotlin";"class Solution {
    fun bestLine(points: Array<IntArray>): IntArray 
{
 
    }
}";"";"2020-03-25 15:18:21"
6707;540;"Python3";"class Solution:
    def bestLine(self, points: List[List[int]]) -> 
List[int]:";"";"2020-03-25 15:18:21"
6708;540;"JavaScript";"/**
 * @param {number[][]} points
 * @return {number[]}
 */
var bestLine = function(points) {
 
};";"";"2020-03-25 15:18:21"
6709;540;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $points
     * @return Integer[]
     */
    function bestLine($points) {
 
    }
}";"";"2020-03-25 15:18:21"
6710;540;"Swift";"class Solution {
    func bestLine(_ points: [[Int]]) -> [Int] {
 
    }
}";"";"2020-03-25 15:18:21"
6711;540;"Ruby";"# @param {Integer[][]} points
# @return {Integer[]}
def best_line(points)
 
end";"";"2020-03-25 15:18:21"
6712;540;"Python";"class Solution(object):
    def bestLine(self, points):
        """"""
        :type points: List[List[int]]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:21"
6713;541;"C#";"public class Solution {
    public int FindRepeatNumber(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:21"
6714;541;"Java";"class Solution {
    public int findRepeatNumber(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:21"
6715;541;"C";"int findRepeatNumber(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:21"
6716;541;"Rust";"impl Solution {
    pub fn find_repeat_number(nums: Vec<i32>) -> 
i32 {
 
    }
}";"";"2020-03-25 15:18:21"
6717;541;"Scala";"object Solution {
    def findRepeatNumber(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:21"
6718;541;"Go";"func findRepeatNumber(nums []int) int {
 
}";"";"2020-03-25 15:18:21"
6719;541;"Kotlin";"class Solution {
    fun findRepeatNumber(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:21"
6720;541;"Python3";"class Solution:
    def findRepeatNumber(self, nums: List[int]) -> 
int:";"";"2020-03-25 15:18:21"
6721;541;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var findRepeatNumber = function(nums) {
 
};";"";"2020-03-25 15:18:21"
6722;541;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function findRepeatNumber($nums) {
 
    }
}";"";"2020-03-25 15:18:21"
6723;541;"Swift";"class Solution {
    func findRepeatNumber(_ nums: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:21"
6724;541;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:18:21"
6725;541;"Python";"class Solution(object):
    def findRepeatNumber(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:21"
6726;542;"C#";"public class Solution {
    public int MaxIncreaseKeepingSkyline(int[][] 
grid) {
 
    }
}";"";"2020-03-25 15:18:21"
6727;542;"Java";"class Solution {
    public int maxIncreaseKeepingSkyline(int[][] 
grid) {
 
    }
}";"";"2020-03-25 15:18:21"
6728;542;"Rust";"impl Solution {
    pub fn max_increase_keeping_skyline(grid: 
Vec<Vec<i32>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:21"
6729;542;"C";"int maxIncreaseKeepingSkyline(int** grid, int 
gridSize, int* gridColSize){
 
}";"";"2020-03-25 15:18:21"
6730;542;"Scala";"object Solution {
    def maxIncreaseKeepingSkyline(grid: Array[Array
[Int]]): Int = {
 
    }
}";"";"2020-03-25 15:18:21"
6731;542;"Go";"func maxIncreaseKeepingSkyline(grid [][]int) int {
 
}";"";"2020-03-25 15:18:21"
6732;542;"Kotlin";"class Solution {
    fun maxIncreaseKeepingSkyline(grid: 
Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:21"
6733;542;"Python3";"class Solution:
    def maxIncreaseKeepingSkyline(self, grid: List
[List[int]]) -> int:";"";"2020-03-25 15:18:21"
6734;542;"JavaScript";"/**
 * @param {number[][]} grid
 * @return {number}
 */
var maxIncreaseKeepingSkyline = function(grid) {
 
};";"";"2020-03-25 15:18:21"
6735;542;"PHP";"class Solution {";"";"2020-03-25 15:18:21"
6736;542;"Swift";"class Solution {
    func maxIncreaseKeepingSkyline(_ grid: [[Int]]) 
-> Int {
        
    }
}";"";"2020-03-25 15:18:21"
6737;542;"Ruby";"# @param {Integer[][]} grid
# @return {Integer}
def max_increase_keeping_skyline(grid)
 
end";"";"2020-03-25 15:18:21"
6738;542;"Python";"class Solution(object):
    def maxIncreaseKeepingSkyline(self, grid):
        """"""
        :type grid: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:21"
6739;543;"C#";"public class Solution {
    public IList<string> GenerateParenthesis(int n) 
{
 
    }
}";"";"2020-03-25 15:18:21"
6740;543;"Java";"class Solution {
    public List<String> generateParenthesis(int n) {
 
    }
}";"";"2020-03-25 15:18:21"
6741;543;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char** generateParenthesis(int n, int* returnSize){
 
}";"";"2020-03-25 15:18:21"
6742;543;"Rust";"impl Solution {
    pub fn generate_parenthesis(n: i32) -> 
Vec<String> {
 
    }
}";"";"2020-03-25 15:18:21"
6743;543;"Scala";"object Solution {
    def generateParenthesis(n: Int): List[String] = 
{
 
    }
}";"";"2020-03-25 15:18:21"
6744;543;"Go";"func generateParenthesis(n int) []string {
 
}";"";"2020-03-25 15:18:21"
6745;543;"Kotlin";"class Solution {
    fun generateParenthesis(n: Int): List<String> {
 
    }
}";"";"2020-03-25 15:18:21"
6746;543;"Python3";"class Solution:
    def generateParenthesis(self, n: int) -> List
[str]:";"";"2020-03-25 15:18:21"
6747;543;"JavaScript";"/**
 * @param {number} n
 * @return {string[]}
 */
var generateParenthesis = function(n) {
 
};";"";"2020-03-25 15:18:21"
6748;543;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return String[]
     */
    function generateParenthesis($n) {
 
    }
}";"";"2020-03-25 15:18:21"
6749;543;"Swift";"class Solution {
    func generateParenthesis(_ n: Int) -> [String] {
 
    }
}";"";"2020-03-25 15:18:21"
6750;543;"Ruby";"# @param {Integer} n";"";"2020-03-25 15:18:21"
6751;543;"Python";"class Solution(object):
    def generateParenthesis(self, n):
        """"""
        :type n: int
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:21"
6752;544;"C#";"public class Solution {
    public int Maximum(int a, int b) {
 
    }
}";"";"2020-03-25 15:18:21"
6753;544;"Java";"class Solution {
    public int maximum(int a, int b) {
 
    }
}";"";"2020-03-25 15:18:21"
6754;544;"C";"int maximum(int a, int b){
 
}";"";"2020-03-25 15:18:21"
6755;544;"Rust";"impl Solution {
    pub fn maximum(a: i32, b: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:21"
6756;544;"Scala";"object Solution {
    def maximum(a: Int, b: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:21"
6757;544;"Go";"func maximum(a int, b int) int {
 
}";"";"2020-03-25 15:18:21"
6758;544;"Kotlin";"class Solution {
    fun maximum(a: Int, b: Int): Int {
 
    }
}";"";"2020-03-25 15:18:21"
6759;544;"Python3";"class Solution:
    def maximum(self, a: int, b: int) -> int:";"";"2020-03-25 15:18:21"
6760;544;"JavaScript";"/**
 * @param {number} a
 * @param {number} b
 * @return {number}
 */
var maximum = function(a, b) {
 
};";"";"2020-03-25 15:18:21"
6761;544;"PHP";"class Solution {
 
    /**
     * @param Integer $a
     * @param Integer $b
     * @return Integer
     */
    function maximum($a, $b) {
 
    }
}";"";"2020-03-25 15:18:21"
6762;544;"Swift";"class Solution {
    func maximum(_ a: Int, _ b: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:21"
6763;544;"Ruby";"# @param {Integer} a
# @param {Integer} b
# @return {Integer}
def maximum(a, b)
 
end";"";"2020-03-25 15:18:21"
6764;544;"Python";"class Solution(object):
    def maximum(self, a, b):
        """"""
        :type a: int
        :type b: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:21"
6765;545;"C#";"public class Solution {
    public int SubarraysDivByK(int[] A, int K) {
 
    }
}";"";"2020-03-25 15:18:21"
6766;545;"Java";"class Solution {
    public int subarraysDivByK(int[] A, int K) {
 
    }
}";"";"2020-03-25 15:18:21"
6767;545;"Rust";"impl Solution {
    pub fn subarrays_div_by_k(a: Vec<i32>, k: i32) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:21"
6768;545;"C";"int subarraysDivByK(int* A, int ASize, int K){
 
}";"";"2020-03-25 15:18:21"
6769;545;"Scala";"object Solution {
    def subarraysDivByK(A: Array[Int], K: Int): Int 
= {
 
    }
}";"";"2020-03-25 15:18:21"
6770;545;"Go";"func subarraysDivByK(A []int, K int) int {
 
}";"";"2020-03-25 15:18:21"
6771;545;"Kotlin";"class Solution {
    fun subarraysDivByK(A: IntArray, K: Int): Int {
 
    }
}";"";"2020-03-25 15:18:21"
6772;545;"Python3";"class Solution:
    def subarraysDivByK(self, A: List[int], K: int) 
-> int:";"";"2020-03-25 15:18:21"
6773;545;"JavaScript";"/**
 * @param {number[]} A
 * @param {number} K
 * @return {number}
 */
var subarraysDivByK = function(A, K) {
 
};";"";"2020-03-25 15:18:21"
6774;545;"PHP";"class Solution {";"";"2020-03-25 15:18:21"
6775;545;"Swift";"class Solution {
    func subarraysDivByK(_ A: [Int], _ K: Int) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:21"
6776;545;"Ruby";"# @param {Integer[]} a
# @param {Integer} k
# @return {Integer}
def subarrays_div_by_k(a, k)
 
end";"";"2020-03-25 15:18:21"
6777;545;"Python";"class Solution(object):
    def subarraysDivByK(self, A, K):
        """"""
        :type A: List[int]
        :type K: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:21"
6778;546;"C#";"public class Solution {
    public int NumberOfSubarrays(int[] nums, int k) 
{
 
    }
}";"";"2020-03-25 15:18:21"
6779;546;"Java";"class Solution {
    public int numberOfSubarrays(int[] nums, int k) 
{
 
    }
}";"";"2020-03-25 15:18:21"
6780;546;"Rust";"impl Solution {
    pub fn number_of_subarrays(nums: Vec<i32>, k: 
i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:21"
6781;546;"C";"int numberOfSubarrays(int* nums, int numsSize, int 
k){
 
}";"";"2020-03-25 15:18:21"
6782;546;"Scala";"object Solution {
    def numberOfSubarrays(nums: Array[Int], k: Int)
: Int = {
 
    }
}";"";"2020-03-25 15:18:21"
6783;546;"Go";"func numberOfSubarrays(nums []int, k int) int {
 
}";"";"2020-03-25 15:18:21"
6784;546;"Kotlin";"class Solution {
    fun numberOfSubarrays(nums: IntArray, k: Int): 
Int {
 
    }
}";"";"2020-03-25 15:18:21"
6785;546;"Python3";"class Solution:
    def numberOfSubarrays(self, nums: List[int], k: 
int) -> int:";"";"2020-03-25 15:18:21"
6786;546;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
var numberOfSubarrays = function(nums, k) {
 
};";"";"2020-03-25 15:18:21"
6787;546;"PHP";"class Solution {";"";"2020-03-25 15:18:21"
6788;546;"Swift";"class Solution {
    func numberOfSubarrays(_ nums: [Int], _ k: Int) 
-> Int {
 
    }
}";"";"2020-03-25 15:18:21"
6789;546;"Ruby";"# @param {Integer[]} nums
# @param {Integer} k
# @return {Integer}
def number_of_subarrays(nums, k)
 
end";"";"2020-03-25 15:18:21"
6790;546;"Python";"class Solution(object):
    def numberOfSubarrays(self, nums, k):
        """"""
        :type nums: List[int]
        :type k: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:21"
6791;547;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode RemoveDuplicateNodes(ListNode 
head) {
 
    }
}";"";"2020-03-25 15:18:21"
6792;547;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode removeDuplicateNodes(ListNode 
head) {
 
    }
}";"";"2020-03-25 15:18:21"
6793;547;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
struct ListNode* removeDuplicateNodes(struct 
ListNode* head){
 
}";"";"2020-03-25 15:18:21"
6794;547;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn remove_duplicate_nodes(head: 
Option<Box<ListNode>>) -> Option<Box<ListNode>> {
 
    }
}";"";"2020-03-25 15:18:21"
6795;547;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def removeDuplicateNodes(head: ListNode): 
ListNode = {
 
    }
}";"";"2020-03-25 15:18:21"
6796;547;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func removeDuplicateNodes(head *ListNode) *ListNode 
{
 
}";"";"2020-03-25 15:18:21"
6797;547;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun removeDuplicateNodes(head: ListNode?): 
ListNode? {
 
    }
}";"";"2020-03-25 15:18:21"
6798;547;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def removeDuplicateNodes(self, head: ListNode) 
-> ListNode:";"";"2020-03-25 15:18:21"
6799;547;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var removeDuplicateNodes = function(head) {
 
};";"";"2020-03-25 15:18:21"
6800;547;"PHP";"/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
class Solution {
 
    /**
     * @param ListNode $head
     * @return ListNode
     */
    function removeDuplicateNodes($head) {
 
    }
}";"";"2020-03-25 15:18:21"
6801;547;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func removeDuplicateNodes(_ head: ListNode?) -> 
ListNode? {
 
    }
}";"";"2020-03-25 15:18:21"
6802;547;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# @param {ListNode} head
# @return {ListNode}
def remove_duplicate_nodes(head)
 
end";"";"2020-03-25 15:18:21"
6803;547;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def removeDuplicateNodes(self, head):
        """"""
        :type head: ListNode
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:21"
6804;548;"C#";"public class Solution {
    public int CountNumbersWithUniqueDigits(int n) {
 
    }
}";"";"2020-03-25 15:18:21"
6805;548;"Java";"class Solution {
    public int countNumbersWithUniqueDigits(int n) {
 
    }
}";"";"2020-03-25 15:18:21"
6806;548;"C";"int countNumbersWithUniqueDigits(int n){
 
}";"";"2020-03-25 15:18:21"
6807;548;"Rust";"impl Solution {
    pub fn count_numbers_with_unique_digits(n: i32) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:21"
6808;548;"Scala";"object Solution {
    def countNumbersWithUniqueDigits(n: Int): Int = 
{
 
    }
}";"";"2020-03-25 15:18:21"
6809;548;"Go";"func countNumbersWithUniqueDigits(n int) int {
 
}";"";"2020-03-25 15:18:21"
6810;548;"Kotlin";"class Solution {
    fun countNumbersWithUniqueDigits(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:21"
6811;548;"Python3";"class Solution:
    def countNumbersWithUniqueDigits(self, n: int) 
-> int:";"";"2020-03-25 15:18:21"
6812;548;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var countNumbersWithUniqueDigits = function(n) {
 
};";"";"2020-03-25 15:18:21"
6813;548;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function countNumbersWithUniqueDigits($n) {
        
    }
}";"";"2020-03-25 15:18:21"
6814;548;"Swift";"class Solution {
    func countNumbersWithUniqueDigits(_ n: Int) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:21"
6815;548;"Ruby";"# @param {Integer} n
# @return {Integer}
def count_numbers_with_unique_digits(n)
 
end";"";"2020-03-25 15:18:21"
6816;548;"Python";"class Solution(object):
    def countNumbersWithUniqueDigits(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:21"
6817;549;"C#";"public class Solution {
    public int Fib(int N) {
 
    }
}";"";"2020-03-25 15:18:21"
6818;549;"Java";"class Solution {
    public int fib(int N) {
 
    }
}";"";"2020-03-25 15:18:21"
6819;549;"C";"int fib(int N){
 
}";"";"2020-03-25 15:18:21"
6820;549;"Rust";"impl Solution {
    pub fn fib(n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:21"
6821;549;"Scala";"object Solution {
    def fib(N: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:21"
6822;549;"Go";"func fib(N int) int {
 
}";"";"2020-03-25 15:18:21"
6823;549;"Kotlin";"class Solution {
    fun fib(N: Int): Int {
 
    }
}";"";"2020-03-25 15:18:21"
6824;549;"Python3";"class Solution:
    def fib(self, N: int) -> int:";"";"2020-03-25 15:18:21"
6825;549;"JavaScript";"/**
 * @param {number} N
 * @return {number}
 */
var fib = function(N) {
 
};";"";"2020-03-25 15:18:21"
6826;549;"PHP";"class Solution {
 
    /**
     * @param Integer $N
     * @return Integer
     */
    function fib($N) {
        
    }
}";"";"2020-03-25 15:18:21"
6827;549;"Swift";"class Solution {
    func fib(_ N: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:21"
6828;549;"Ruby";"# @param {Integer} n
# @return {Integer}
def fib(n)
 
end";"";"2020-03-25 15:18:21"
6829;549;"Python";"class Solution(object):
    def fib(self, N):
        """"""
        :type N: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:21"
6830;550;"C#";"public class Solution {
    public bool IsAlienSorted(string[] words, 
string order) {
 
    }
}";"";"2020-03-25 15:18:21"
6831;550;"Java";"class Solution {
    public boolean isAlienSorted(String[] words, 
String order) {
 
    }
}";"";"2020-03-25 15:18:21"
6832;550;"C";"bool isAlienSorted(char ** words, int wordsSize, 
char * order){
 
}";"";"2020-03-25 15:18:21"
6833;550;"Rust";"impl Solution {
    pub fn is_alien_sorted(words: Vec<String>, 
order: String) -> bool {
        
    }
}";"";"2020-03-25 15:18:21"
6834;550;"Scala";"object Solution {
    def isAlienSorted(words: Array[String], order: 
String): Boolean = {
 
    }
}";"";"2020-03-25 15:18:21"
6835;550;"Go";"func isAlienSorted(words []string, order string) 
bool {
 
}";"";"2020-03-25 15:18:21"
6836;550;"Kotlin";"class Solution {
    fun isAlienSorted(words: Array<String>, order: 
String): Boolean {
 
    }
}";"";"2020-03-25 15:18:21"
6837;550;"Python3";"class Solution:
    def isAlienSorted(self, words: List[str], 
order: str) -> bool:";"";"2020-03-25 15:18:21"
6838;550;"JavaScript";"/**
 * @param {string[]} words
 * @param {string} order
 * @return {boolean}
 */
var isAlienSorted = function(words, order) {
 
};";"";"2020-03-25 15:18:21"
6839;550;"PHP";"class Solution {
 
    /**
     * @param String[] $words
     * @param String $order
     * @return Boolean
     */
    function isAlienSorted($words, $order) {
        
    }
}";"";"2020-03-25 15:18:21"
6840;550;"Swift";"class Solution {
    func isAlienSorted(_ words: [String], _ order: 
String) -> Bool {
        
    }
}";"";"2020-03-25 15:18:21"
6841;550;"Ruby";"# @param {String[]} words";"";"2020-03-25 15:18:21"
6842;550;"Python";"class Solution(object):
    def isAlienSorted(self, words, order):
        """"""
        :type words: List[str]
        :type order: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:21"
6843;551;"C#";"public class Solution {
    public bool UniqueOccurrences(int[] arr) {
 
    }
}";"";"2020-03-25 15:18:22"
6844;551;"Java";"class Solution {
    public boolean uniqueOccurrences(int[] arr) {
 
    }
}";"";"2020-03-25 15:18:22"
6845;551;"C";"bool uniqueOccurrences(int* arr, int arrSize){
 
}";"";"2020-03-25 15:18:22"
6846;551;"Rust";"impl Solution {
    pub fn unique_occurrences(arr: Vec<i32>) -> 
bool {
 
    }
}";"";"2020-03-25 15:18:22"
6847;551;"Scala";"object Solution {
    def uniqueOccurrences(arr: Array[Int]): Boolean 
= {
 
    }
}";"";"2020-03-25 15:18:22"
6848;551;"Go";"func uniqueOccurrences(arr []int) bool {
 
}";"";"2020-03-25 15:18:22"
6849;551;"Kotlin";"class Solution {
    fun uniqueOccurrences(arr: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:22"
6850;551;"Python3";"class Solution:
    def uniqueOccurrences(self, arr: List[int]) -> 
bool:";"";"2020-03-25 15:18:22"
6851;551;"JavaScript";"/**
 * @param {number[]} arr
 * @return {boolean}
 */
var uniqueOccurrences = function(arr) {
 
};";"";"2020-03-25 15:18:22"
6852;551;"PHP";"class Solution {
 
    /**
     * @param Integer[] $arr
     * @return Boolean
     */
    function uniqueOccurrences($arr) {
 
    }
}";"";"2020-03-25 15:18:22"
6853;551;"Swift";"class Solution {
    func uniqueOccurrences(_ arr: [Int]) -> Bool {
 
    }
}";"";"2020-03-25 15:18:22"
6854;551;"Ruby";"# @param {Integer[]} arr";"";"2020-03-25 15:18:22"
6855;551;"Python";"class Solution(object):
    def uniqueOccurrences(self, arr):
        """"""
        :type arr: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:22"
6856;552;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
 
    // Encodes a tree to a single string.
    public string serialize(TreeNode root) {
        
    }
 
    // Decodes your encoded data to tree.
    public TreeNode deserialize(string data) {
        
    }
}
 
// Your Codec object will be instantiated and 
called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));";"";"2020-03-25 15:18:22"
6857;552;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
 
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        
    }
 
    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        
    }
}
 
// Your Codec object will be instantiated and 
called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));";"";"2020-03-25 15:18:22"
6858;552;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
/** Encodes a tree to a single string. */
char* serialize(struct TreeNode* root) {
    
}
 
/** Decodes your encoded data to tree. */
struct TreeNode* deserialize(char* data) {
    
}
 
// Your functions will be called as such:
// char* data = serialize(root);
// deserialize(data);";"";"2020-03-25 15:18:22"
6859;552;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
 
/**
 * Encodes a tree to a single string.
 *
 * @param {TreeNode} root
 * @return {string}
 */
var serialize = function(root) {
    
};
 
/**
 * Decodes your encoded data to tree.
 *
 * @param {string} data
 * @return {TreeNode}
 */
var deserialize = function(data) {
    ";"";"2020-03-25 15:18:22"
6860;552;"Python3";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Codec:
 
    def serialize(self, root):
        """"""Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """"""
        
 
    def deserialize(self, data):
        """"""Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """"""
        
 
# Your Codec object will be instantiated and called ";"";"2020-03-25 15:18:22"
6861;552;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
 
type Codec struct {
    
}
 
func Constructor() Codec {
    
}
 
// Serializes a tree to a single string.
func (this *Codec) serialize(root *TreeNode) string 
{
    
}
 
// Deserializes your encoded data to tree.
func (this *Codec) deserialize(data string) 
*TreeNode {    ";"";"2020-03-25 15:18:22"
6862;552;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
 
class Codec {
    function __construct() {
        
    }
  
    /**
     * @param TreeNode $root
     * @return String
     */
    function serialize($root) {
        
    }
  
    /**
     * @param String $data";"";"2020-03-25 15:18:22"
6863;552;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# Encodes a tree to a single string.
#
# @param {TreeNode} root
# @return {string}
def serialize(root)
    
end
 
# Decodes your encoded data to tree.
#
# @param {string} data
# @return {TreeNode}
def deserialize(data)
    
end
 
 ";"";"2020-03-25 15:18:22"
6864;552;"Kotlin";"/**
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
 
class Codec() {
    // Encodes a URL to a shortened URL.
    fun serialize(root: TreeNode?): String {
        
    }
 
    // Decodes your encoded data to tree.
    fun deserialize(data: String): TreeNode? {
        
    }
}
 
/**
 * Your Codec object will be instantiated and 
called as such:
 * var obj = Codec()
 * var data = obj.encode(longUrl)
 * var ans = obj.decode(data)";"";"2020-03-25 15:18:22"
6865;552;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Codec:
 
    def serialize(self, root):
        """"""Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """"""
        
 
    def deserialize(self, data):
        """"""Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """"""
        
 
# Your Codec object will be instantiated and called ";"";"2020-03-25 15:18:22"
6866;553;"C#";"public class Solution {
    public int MaxFreq(string s, int maxLetters, 
int minSize, int maxSize) {
 
    }
}";"";"2020-03-25 15:18:22"
6867;553;"Java";"class Solution {
    public int maxFreq(String s, int maxLetters, 
int minSize, int maxSize) {
 
    }
}";"";"2020-03-25 15:18:22"
6868;553;"Rust";"impl Solution {
    pub fn max_freq(s: String, max_letters: i32, 
min_size: i32, max_size: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:22"
6869;553;"C";"int maxFreq(char * s, int maxLetters, int minSize, 
int maxSize){
 
}";"";"2020-03-25 15:18:22"
6870;553;"Scala";"object Solution {
    def maxFreq(s: String, maxLetters: Int, 
minSize: Int, maxSize: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:22"
6871;553;"Go";"func maxFreq(s string, maxLetters int, minSize int, 
maxSize int) int {
 
}";"";"2020-03-25 15:18:22"
6872;553;"Kotlin";"class Solution {
    fun maxFreq(s: String, maxLetters: Int, 
minSize: Int, maxSize: Int): Int {
 
    }
}";"";"2020-03-25 15:18:22"
6873;553;"Python3";"class Solution:
    def maxFreq(self, s: str, maxLetters: int, 
minSize: int, maxSize: int) -> int:";"";"2020-03-25 15:18:22"
6874;553;"JavaScript";"/**
 * @param {string} s
 * @param {number} maxLetters
 * @param {number} minSize
 * @param {number} maxSize
 * @return {number}
 */
var maxFreq = function(s, maxLetters, minSize, 
maxSize) {
 
};";"";"2020-03-25 15:18:22"
6875;553;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @param Integer $maxLetters
     * @param Integer $minSize
     * @param Integer $maxSize
     * @return Integer
     */
    function maxFreq($s, $maxLetters, $minSize, 
$maxSize) {
 
    }
}";"";"2020-03-25 15:18:22"
6876;553;"Swift";"class Solution {
    func maxFreq(_ s: String, _ maxLetters: Int, _ 
minSize: Int, _ maxSize: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:22"
6877;553;"Ruby";"# @param {String} s
# @param {Integer} max_letters
# @param {Integer} min_size
# @param {Integer} max_size
# @return {Integer}
def max_freq(s, max_letters, min_size, max_size)
 
end";"";"2020-03-25 15:18:22"
6878;553;"Python";"class Solution(object):
    def maxFreq(self, s, maxLetters, minSize, 
maxSize):
        """"""
        :type s: str
        :type maxLetters: int
        :type minSize: int
        :type maxSize: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:22"
6879;554;"C#";"/*
// Definition for a Node.
public class Node {
    public int val;
    public Node next;
    public Node random;
 
    public Node(){}
    public Node(int _val,Node _next,Node _random) {
        val = _val;
        next = _next;
        random = _random;
    }
}
*/
public class Solution {
    public Node CopyRandomList(Node head) {
 
    }
}";"";"2020-03-25 15:18:22"
6880;554;"Java";"/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;
 
    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/
class Solution {
    public Node copyRandomList(Node head) {
        
    }
}";"";"2020-03-25 15:18:22"
6881;554;"Python3";"""""""
# Definition for a Node.
class Node:
    def __init__(self, x: int, next: 'Node' = None, 
random: 'Node' = None):
        self.val = int(x)
        self.next = next
        self.random = random
""""""
class Solution:
    def copyRandomList(self, head: 'Node') -> 
'Node':";"";"2020-03-25 15:18:22"
6882;554;"JavaScript";"/**
 * // Definition for a Node.
 * function Node(val,next,random) {
 *    this.val = val;
 *    this.next = next;
 *    this.random = random;
 * };
 */
/**
 * @param {Node} head
 * @return {Node}
 */
var copyRandomList = function(head) {
 
};";"";"2020-03-25 15:18:22"
6883;554;"PHP";"/*
// Definition for a Node.
class Node {
    public $val;
    public $next;
    public $random;
 
    @param Integer $val
    @param Node $next
    @param Node $random
    function __construct($val, $next, $random) {
        $this->val = $val;
        $this->next = $next;
        $this->random = $random;
    }
}
*/
class Solution {
 
    /**
     * @param Node $head
     * @return Node
     */
    function copyRandomList($head) {
 
    }";"";"2020-03-25 15:18:22"
6884;554;"Python";"""""""
# Definition for a Node.
class Node:
    def __init__(self, x, next=None, random=None):
        self.val = int(x)
        self.next = next
        self.random = random
""""""
class Solution(object):
    def copyRandomList(self, head):
        """"""
        :type head: Node
        :rtype: Node
        """"""";"";"2020-03-25 15:18:22"
6885;555;"C#";"public class Solution {
    public int MaximalSquare(char[][] matrix) {
 
    }
}";"";"2020-03-25 15:18:22"
6886;555;"Java";"class Solution {
    public int maximalSquare(char[][] matrix) {
 
    }
}";"";"2020-03-25 15:18:22"
6887;555;"C";"int maximalSquare(char** matrix, int matrixSize, 
int* matrixColSize){
 
}";"";"2020-03-25 15:18:22"
6888;555;"Rust";"impl Solution {
    pub fn maximal_square(matrix: Vec<Vec<char>>) 
-> i32 {
 
    }
}";"";"2020-03-25 15:18:22"
6889;555;"Scala";"object Solution {
    def maximalSquare(matrix: Array[Array[Char]]): 
Int = {
 
    }
}";"";"2020-03-25 15:18:22"
6890;555;"Go";"func maximalSquare(matrix [][]byte) int {
 
}";"";"2020-03-25 15:18:22"
6891;555;"Kotlin";"class Solution {
    fun maximalSquare(matrix: Array<CharArray>): 
Int {
 
    }
}";"";"2020-03-25 15:18:22"
6892;555;"Python3";"class Solution:
    def maximalSquare(self, matrix: List[List[str]])
 -> int:";"";"2020-03-25 15:18:22"
6893;555;"JavaScript";"/**
 * @param {character[][]} matrix
 * @return {number}
 */
var maximalSquare = function(matrix) {
 
};";"";"2020-03-25 15:18:22"
6894;555;"PHP";"class Solution {
 
    /**
     * @param String[][] $matrix
     * @return Integer
     */
    function maximalSquare($matrix) {
 
    }
}";"";"2020-03-25 15:18:22"
6895;555;"Swift";"class Solution {
    func maximalSquare(_ matrix: [[Character]]) -> 
Int {
 
    }
}";"";"2020-03-25 15:18:22"
6896;555;"Ruby";"# @param {Character[][]} matrix
# @return {Integer}
def maximal_square(matrix)
 
end";"";"2020-03-25 15:18:22"
6897;555;"Python";"class Solution(object):
    def maximalSquare(self, matrix):
        """"""
        :type matrix: List[List[str]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:22"
6898;556;"C#";"public class Solution {
    public int TitleToNumber(string s) {
 
    }
}";"";"2020-03-25 15:18:22"
6899;556;"Java";"class Solution {
    public int titleToNumber(String s) {
 
    }
}";"";"2020-03-25 15:18:22"
6900;556;"C";"int titleToNumber(char * s){
 
}";"";"2020-03-25 15:18:22"
6901;556;"Rust";"impl Solution {
    pub fn title_to_number(s: String) -> i32 {
 
    }
}";"";"2020-03-25 15:18:22"
6902;556;"Scala";"object Solution {
    def titleToNumber(s: String): Int = {
 
    }
}";"";"2020-03-25 15:18:22"
6903;556;"Go";"func titleToNumber(s string) int {
 
}";"";"2020-03-25 15:18:22"
6904;556;"Kotlin";"class Solution {
    fun titleToNumber(s: String): Int {
 
    }
}";"";"2020-03-25 15:18:22"
6905;556;"Python3";"class Solution:
    def titleToNumber(self, s: str) -> int:";"";"2020-03-25 15:18:22"
6906;556;"JavaScript";"/**
 * @param {string} s
 * @return {number}
 */
var titleToNumber = function(s) {
 
};";"";"2020-03-25 15:18:22"
6907;556;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return Integer
     */
    function titleToNumber($s) {
 
    }
}";"";"2020-03-25 15:18:22"
6908;556;"Swift";"class Solution {
    func titleToNumber(_ s: String) -> Int {
 
    }
}";"";"2020-03-25 15:18:22"
6909;556;"Ruby";"# @param {String} s";"";"2020-03-25 15:18:22"
6910;556;"Python";"class Solution(object):
    def titleToNumber(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:22"
6911;557;"C#";"public class ZeroEvenOdd {
    private int n;
    
    public ZeroEvenOdd(int n) {
        this.n = n;
    }
 
    // printNumber(x) outputs ""x"", where x is an 
integer.
    public void Zero(Action<int> printNumber) {
        
    }
 
    public void Even(Action<int> printNumber) {
        
    }
 
    public void Odd(Action<int> printNumber) {
        
    }
}";"";"2020-03-25 15:18:22"
6912;557;"Java";"class ZeroEvenOdd {
    private int n;
    
    public ZeroEvenOdd(int n) {
        this.n = n;
    }
 
    // printNumber.accept(x) outputs ""x"", where x 
is an integer.
    public void zero(IntConsumer printNumber) 
throws InterruptedException {
        
    }
 
    public void even(IntConsumer printNumber) 
throws InterruptedException {
        
    }
 
    public void odd(IntConsumer printNumber) throws 
InterruptedException {
        
    }
}";"";"2020-03-25 15:18:22"
6913;557;"C";"typedef struct {
    int n;
} ZeroEvenOdd;
 
ZeroEvenOdd* zeroEvenOddCreate(int n) {
    ZeroEvenOdd* obj = (ZeroEvenOdd*) malloc(sizeof
(ZeroEvenOdd));
    obj->n = n;
    return obj;
}
 
// You may call global function `void printNumber
(int x)`
// to output ""x"", where x is an integer.
 
void zero(ZeroEvenOdd* obj) {
    
}
 
void even(ZeroEvenOdd* obj) {
    
}
 
void odd(ZeroEvenOdd* obj) {
    
}";"";"2020-03-25 15:18:22"
6914;557;"Python3";"class ZeroEvenOdd:
    def __init__(self, n):
        self.n = n
        
        
    # printNumber(x) outputs ""x"", where x is an 
integer.
    def zero(self, printNumber: 'Callable[[int], 
None]') -> None:
        
        
        
    def even(self, printNumber: 'Callable[[int], 
None]') -> None:
        
        
        
    def odd(self, printNumber: 'Callable[[int], 
None]') -> None:";"";"2020-03-25 15:18:22"
6915;557;"Python";"class ZeroEvenOdd(object):
    def __init__(self, n):
        self.n = n
        
        
    # printNumber(x) outputs ""x"", where x is an 
integer.
    def zero(self, printNumber):
        """"""
        :type printNumber: method
        :rtype: void
        """"""
        
        
        
    def even(self, printNumber):
        """"""
        :type printNumber: method
        :rtype: void
        """"""
        
        
        
    def odd(self, printNumber):
        """"""
        :type printNumber: method";"";"2020-03-25 15:18:22"
6916;558;"C#";"public class Solution {
    public int BagOfTokensScore(int[] tokens, int P)
 {
 
    }
}";"";"2020-03-25 15:18:22"
6917;558;"Java";"class Solution {
    public int bagOfTokensScore(int[] tokens, int P)
 {
 
    }
}";"";"2020-03-25 15:18:22"
6918;558;"Rust";"impl Solution {
    pub fn bag_of_tokens_score(tokens: Vec<i32>, p: 
i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:22"
6919;558;"C";"int bagOfTokensScore(int* tokens, int tokensSize, 
int P){
 
}";"";"2020-03-25 15:18:22"
6920;558;"Scala";"object Solution {
    def bagOfTokensScore(tokens: Array[Int], P: Int)
: Int = {
 
    }
}";"";"2020-03-25 15:18:22"
6921;558;"Go";"func bagOfTokensScore(tokens []int, P int) int {
 
}";"";"2020-03-25 15:18:22"
6922;558;"Kotlin";"class Solution {
    fun bagOfTokensScore(tokens: IntArray, P: Int): 
Int {
 
    }
}";"";"2020-03-25 15:18:22"
6923;558;"Python3";"class Solution:
    def bagOfTokensScore(self, tokens: List[int], 
P: int) -> int:";"";"2020-03-25 15:18:22"
6924;558;"JavaScript";"/**
 * @param {number[]} tokens
 * @param {number} P
 * @return {number}
 */
var bagOfTokensScore = function(tokens, P) {
 
};";"";"2020-03-25 15:18:22"
6925;558;"PHP";"class Solution {";"";"2020-03-25 15:18:22"
6926;558;"Swift";"class Solution {
    func bagOfTokensScore(_ tokens: [Int], _ P: Int)
 -> Int {
        
    }
}";"";"2020-03-25 15:18:22"
6927;558;"Ruby";"# @param {Integer[]} tokens
# @param {Integer} p
# @return {Integer}
def bag_of_tokens_score(tokens, p)
 
end";"";"2020-03-25 15:18:22"
6928;558;"Python";"class Solution(object):
    def bagOfTokensScore(self, tokens, P):
        """"""
        :type tokens: List[int]
        :type P: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:22"
6929;559;"C#";"public class Solution {
    public IList<IList<int>> FindSubsequences(int[] 
nums) {
 
    }
}";"";"2020-03-25 15:18:22"
6930;559;"Java";"class Solution {
    public List<List<Integer>> findSubsequences(int
[] nums) {
 
    }
}";"";"2020-03-25 15:18:22"
6931;559;"Rust";"impl Solution {
    pub fn find_subsequences(nums: Vec<i32>) -> 
Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:22"
6932;559;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** findSubsequences(int* nums, int numsSize, 
int* returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:22"
6933;559;"Scala";"object Solution {
    def findSubsequences(nums: Array[Int]): List
[List[Int]] = {
 
    }
}";"";"2020-03-25 15:18:22"
6934;559;"Go";"func findSubsequences(nums []int) [][]int {
 
}";"";"2020-03-25 15:18:22"
6935;559;"Kotlin";"class Solution {
    fun findSubsequences(nums: IntArray): 
List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:22"
6936;559;"Python3";"class Solution:
    def findSubsequences(self, nums: List[int]) -> 
List[List[int]]:";"";"2020-03-25 15:18:22"
6937;559;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number[][]}
 */
var findSubsequences = function(nums) {
 
};";"";"2020-03-25 15:18:22"
6938;559;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer[][]
     */
    function findSubsequences($nums) {
        
    }
}";"";"2020-03-25 15:18:22"
6939;559;"Swift";"class Solution {
    func findSubsequences(_ nums: [Int]) -> [[Int]] 
{
        
    }
}";"";"2020-03-25 15:18:22"
6940;559;"Ruby";"# @param {Integer[]} nums
# @return {Integer[][]}
def find_subsequences(nums)
 
end";"";"2020-03-25 15:18:22"
6941;559;"Python";"class Solution(object):
    def findSubsequences(self, nums):
        """"""
        :type nums: List[int]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:22"
6942;560;"C#";"public class Solution {
    public int LargestOverlap(int[][] A, int[][] B) 
{
 
    }
}";"";"2020-03-25 15:18:22"
6943;560;"Java";"class Solution {
    public int largestOverlap(int[][] A, int[][] B) 
{
 
    }
}";"";"2020-03-25 15:18:22"
6944;560;"Rust";"impl Solution {
    pub fn largest_overlap(a: Vec<Vec<i32>>, b: 
Vec<Vec<i32>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:22"
6945;560;"C";"int largestOverlap(int** A, int ASize, int* 
AColSize, int** B, int BSize, int* BColSize){
 
}";"";"2020-03-25 15:18:22"
6946;560;"Scala";"object Solution {
    def largestOverlap(A: Array[Array[Int]], B: 
Array[Array[Int]]): Int = {
 
    }
}";"";"2020-03-25 15:18:22"
6947;560;"Go";"func largestOverlap(A [][]int, B [][]int) int {
 
}";"";"2020-03-25 15:18:22"
6948;560;"Kotlin";"class Solution {
    fun largestOverlap(A: Array<IntArray>, B: 
Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:22"
6949;560;"Python3";"class Solution:
    def largestOverlap(self, A: List[List[int]], B: 
List[List[int]]) -> int:";"";"2020-03-25 15:18:22"
6950;560;"JavaScript";"/**
 * @param {number[][]} A
 * @param {number[][]} B
 * @return {number}
 */
var largestOverlap = function(A, B) {
 
};";"";"2020-03-25 15:18:22"
6951;560;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $A
     * @param Integer[][] $B
     * @return Integer
     */
    function largestOverlap($A, $B) {
        
    }
}";"";"2020-03-25 15:18:22"
6952;560;"Swift";"class Solution {
    func largestOverlap(_ A: [[Int]], _ B: [[Int]]) 
-> Int {
        
    }
}";"";"2020-03-25 15:18:22"
6953;560;"Ruby";"# @param {Integer[][]} a
# @param {Integer[][]} b
# @return {Integer}
def largest_overlap(a, b)
 
end";"";"2020-03-25 15:18:22"
6954;560;"Python";"class Solution(object):
    def largestOverlap(self, A, B):
        """"""
        :type A: List[List[int]]
        :type B: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:22"
6955;561;"C#";"public class Solution {
    public int MinimumSwap(string s1, string s2) {
 
    }
}";"";"2020-03-25 15:18:22"
6956;561;"Java";"class Solution {
    public int minimumSwap(String s1, String s2) {
 
    }
}";"";"2020-03-25 15:18:22"
6957;561;"C";"int minimumSwap(char * s1, char * s2){
 
}";"";"2020-03-25 15:18:22"
6958;561;"Rust";"impl Solution {
    pub fn minimum_swap(s1: String, s2: String) -> 
i32 {
 
    }
}";"";"2020-03-25 15:18:22"
6959;561;"Scala";"object Solution {
    def minimumSwap(s1: String, s2: String): Int = {
 
    }
}";"";"2020-03-25 15:18:22"
6960;561;"Go";"func minimumSwap(s1 string, s2 string) int {
 
}";"";"2020-03-25 15:18:22"
6961;561;"Kotlin";"class Solution {
    fun minimumSwap(s1: String, s2: String): Int {
 
    }
}";"";"2020-03-25 15:18:22"
6962;561;"Python3";"class Solution:
    def minimumSwap(self, s1: str, s2: str) -> int:";"";"2020-03-25 15:18:22"
6963;561;"JavaScript";"/**
 * @param {string} s1
 * @param {string} s2
 * @return {number}
 */
var minimumSwap = function(s1, s2) {
 
};";"";"2020-03-25 15:18:22"
6964;561;"PHP";"class Solution {
 
    /**
     * @param String $s1
     * @param String $s2
     * @return Integer
     */
    function minimumSwap($s1, $s2) {
 
    }
}";"";"2020-03-25 15:18:22"
6965;561;"Swift";"class Solution {
    func minimumSwap(_ s1: String, _ s2: String) -> 
Int {
 
    }
}";"";"2020-03-25 15:18:22"
6966;561;"Ruby";"# @param {String} s1
# @param {String} s2
# @return {Integer}
def minimum_swap(s1, s2)
 
end";"";"2020-03-25 15:18:22"
6967;561;"Python";"class Solution(object):
    def minimumSwap(self, s1, s2):
        """"""
        :type s1: str
        :type s2: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:22"
6968;562;"C#";"public class Solution {
    public string DefangIPaddr(string address) {
 
    }
}";"";"2020-03-25 15:18:22"
6969;562;"Java";"class Solution {
    public String defangIPaddr(String address) {
 
    }
}";"";"2020-03-25 15:18:22"
6970;562;"C";"char * defangIPaddr(char * address){
 
}";"";"2020-03-25 15:18:22"
6971;562;"Rust";"impl Solution {
    pub fn defang_i_paddr(address: String) -> 
String {
        
    }
}";"";"2020-03-25 15:18:22"
6972;562;"Scala";"object Solution {
    def defangIPaddr(address: String): String = {
 
    }
}";"";"2020-03-25 15:18:22"
6973;562;"Go";"func defangIPaddr(address string) string {
 
}";"";"2020-03-25 15:18:22"
6974;562;"Kotlin";"class Solution {
    fun defangIPaddr(address: String): String {
 
    }
}";"";"2020-03-25 15:18:22"
6975;562;"Python3";"class Solution:
    def defangIPaddr(self, address: str) -> str:";"";"2020-03-25 15:18:22"
6976;562;"JavaScript";"/**
 * @param {string} address
 * @return {string}
 */
var defangIPaddr = function(address) {
 
};";"";"2020-03-25 15:18:22"
6977;562;"PHP";"class Solution {
 
    /**
     * @param String $address
     * @return String
     */
    function defangIPaddr($address) {
        
    }
}";"";"2020-03-25 15:18:22"
6978;562;"Swift";"class Solution {
    func defangIPaddr(_ address: String) -> String {
        
    }
}";"";"2020-03-25 15:18:22"
6979;562;"Ruby";"# @param {String} address";"";"2020-03-25 15:18:22"
6980;562;"Python";"class Solution(object):
    def defangIPaddr(self, address):
        """"""
        :type address: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:22"
6981;563;"C#";"public class Solution {
    public int DominantIndex(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:22"
6982;563;"Java";"class Solution {
    public int dominantIndex(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:22"
6983;563;"C";"int dominantIndex(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:22"
6984;563;"Rust";"impl Solution {
    pub fn dominant_index(nums: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:22"
6985;563;"Scala";"object Solution {
    def dominantIndex(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:22"
6986;563;"Go";"func dominantIndex(nums []int) int {
 
}";"";"2020-03-25 15:18:22"
6987;563;"Kotlin";"class Solution {
    fun dominantIndex(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:22"
6988;563;"Python3";"class Solution:
    def dominantIndex(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:22"
6989;563;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var dominantIndex = function(nums) {
 
};";"";"2020-03-25 15:18:22"
6990;563;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function dominantIndex($nums) {
        
    }
}";"";"2020-03-25 15:18:22"
6991;563;"Swift";"class Solution {
    func dominantIndex(_ nums: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:22"
6992;563;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def dominant_index(nums)
 
end";"";"2020-03-25 15:18:22"
6993;563;"Python";"class Solution(object):
    def dominantIndex(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:22"
6994;564;"C#";"public class Solution {
    public int MinAddToMakeValid(string S) {
 
    }
}";"";"2020-03-25 15:18:22"
6995;564;"Java";"class Solution {
    public int minAddToMakeValid(String S) {
 
    }
}";"";"2020-03-25 15:18:22"
6996;564;"C";"int minAddToMakeValid(char * S){
 
}";"";"2020-03-25 15:18:22"
6997;564;"Rust";"impl Solution {
    pub fn min_add_to_make_valid(s: String) -> i32 {
        
    }
}";"";"2020-03-25 15:18:22"
6998;564;"Scala";"object Solution {
    def minAddToMakeValid(S: String): Int = {
 
    }
}";"";"2020-03-25 15:18:22"
6999;564;"Go";"func minAddToMakeValid(S string) int {
 
}";"";"2020-03-25 15:18:22"
7000;564;"Kotlin";"class Solution {
    fun minAddToMakeValid(S: String): Int {
 
    }
}";"";"2020-03-25 15:18:22"
7001;564;"Python3";"class Solution:
    def minAddToMakeValid(self, S: str) -> int:";"";"2020-03-25 15:18:22"
7002;564;"JavaScript";"/**
 * @param {string} S
 * @return {number}
 */
var minAddToMakeValid = function(S) {
 
};";"";"2020-03-25 15:18:22"
7003;564;"PHP";"class Solution {
 
    /**
     * @param String $S
     * @return Integer
     */
    function minAddToMakeValid($S) {
        
    }
}";"";"2020-03-25 15:18:22"
7004;564;"Swift";"class Solution {
    func minAddToMakeValid(_ S: String) -> Int {
        
    }
}";"";"2020-03-25 15:18:22"
7005;564;"Ruby";"# @param {String} s";"";"2020-03-25 15:18:22"
7006;564;"Python";"class Solution(object):
    def minAddToMakeValid(self, S):
        """"""
        :type S: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:22"
7007;565;"C#";"public class Solution {
    public int MinFallingPathSum(int[][] A) {
 
    }
}";"";"2020-03-25 15:18:22"
7008;565;"Java";"class Solution {
    public int minFallingPathSum(int[][] A) {
 
    }
}";"";"2020-03-25 15:18:22"
7009;565;"Rust";"impl Solution {
    pub fn min_falling_path_sum(a: Vec<Vec<i32>>) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:22"
7010;565;"C";"int minFallingPathSum(int** A, int ASize, int* 
AColSize){
 
}";"";"2020-03-25 15:18:22"
7011;565;"Scala";"object Solution {
    def minFallingPathSum(A: Array[Array[Int]]): 
Int = {
 
    }
}";"";"2020-03-25 15:18:22"
7012;565;"Go";"func minFallingPathSum(A [][]int) int {
 
}";"";"2020-03-25 15:18:22"
7013;565;"Kotlin";"class Solution {
    fun minFallingPathSum(A: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:22"
7014;565;"Python3";"class Solution:
    def minFallingPathSum(self, A: List[List[int]]) 
-> int:";"";"2020-03-25 15:18:22"
7015;565;"JavaScript";"/**
 * @param {number[][]} A
 * @return {number}
 */
var minFallingPathSum = function(A) {
 
};";"";"2020-03-25 15:18:22"
7016;565;"PHP";"class Solution {";"";"2020-03-25 15:18:22"
7017;565;"Swift";"class Solution {
    func minFallingPathSum(_ A: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:22"
7018;565;"Ruby";"# @param {Integer[][]} a
# @return {Integer}
def min_falling_path_sum(a)
 
end";"";"2020-03-25 15:18:22"
7019;565;"Python";"class Solution(object):
    def minFallingPathSum(self, A):
        """"""
        :type A: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:22"
7020;566;"C#";"public class Solution {
    public int CountDigitOne(int n) {
 
    }
}";"";"2020-03-25 15:18:22"
7021;566;"Java";"class Solution {
    public int countDigitOne(int n) {
 
    }
}";"";"2020-03-25 15:18:22"
7022;566;"C";"int countDigitOne(int n){
 
}";"";"2020-03-25 15:18:22"
7023;566;"Rust";"impl Solution {
    pub fn count_digit_one(n: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:22"
7024;566;"Scala";"object Solution {
    def countDigitOne(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:22"
7025;566;"Go";"func countDigitOne(n int) int {
 
}";"";"2020-03-25 15:18:22"
7026;566;"Kotlin";"class Solution {
    fun countDigitOne(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:22"
7027;566;"Python3";"class Solution:
    def countDigitOne(self, n: int) -> int:";"";"2020-03-25 15:18:22"
7028;566;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var countDigitOne = function(n) {
 
};";"";"2020-03-25 15:18:22"
7029;566;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function countDigitOne($n) {
 
    }
}";"";"2020-03-25 15:18:22"
7030;566;"Swift";"class Solution {
    func countDigitOne(_ n: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:22"
7031;566;"Ruby";"# @param {Integer} n
# @return {Integer}
def count_digit_one(n)
 
end";"";"2020-03-25 15:18:22"
7032;566;"Python";"class Solution(object):
    def countDigitOne(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:22"
7033;567;"C#";"public class Solution {
    public int Trap(int[] height) {
 
    }
}";"";"2020-03-25 15:18:22"
7034;567;"Java";"class Solution {
    public int trap(int[] height) {
 
    }
}";"";"2020-03-25 15:18:22"
7035;567;"Rust";"impl Solution {
    pub fn trap(height: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:22"
7036;567;"C";"int trap(int* height, int heightSize){
 
}";"";"2020-03-25 15:18:22"
7037;567;"Scala";"object Solution {
    def trap(height: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:22"
7038;567;"Go";"func trap(height []int) int {
 
}";"";"2020-03-25 15:18:22"
7039;567;"Kotlin";"class Solution {
    fun trap(height: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:22"
7040;567;"Python3";"class Solution:
    def trap(self, height: List[int]) -> int:";"";"2020-03-25 15:18:22"
7041;567;"JavaScript";"/**
 * @param {number[]} height
 * @return {number}
 */
var trap = function(height) {
 
};";"";"2020-03-25 15:18:22"
7042;567;"PHP";"class Solution {
 
    /**
     * @param Integer[] $height
     * @return Integer
     */
    function trap($height) {
 
    }
}";"";"2020-03-25 15:18:22"
7043;567;"Swift";"class Solution {
    func trap(_ height: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:22"
7044;567;"Ruby";"# @param {Integer[]} height
# @return {Integer}
def trap(height)
 
end";"";"2020-03-25 15:18:22"
7045;567;"Python";"class Solution(object):
    def trap(self, height):
        """"""
        :type height: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:22"
7046;568;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<IList<int>> PathSum(TreeNode root, 
int sum) {
 
    }
}";"";"2020-03-25 15:18:22"
7047;568;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode 
root, int sum) {
 
    }
}";"";"2020-03-25 15:18:22"
7048;568;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn path_sum(root: 
Option<Rc<RefCell<TreeNode>>>, sum: i32) -> 
Vec<Vec<i32>> {
        
    }";"";"2020-03-25 15:18:22"
7049;568;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** pathSum(struct TreeNode* root, int sum, int* 
returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:22"
7050;568;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def pathSum(root: TreeNode, sum: Int): List[List
[Int]] = {
 
    }
}";"";"2020-03-25 15:18:22"
7051;568;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func pathSum(root *TreeNode, sum int) [][]int {
 
}";"";"2020-03-25 15:18:22"
7052;568;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun pathSum(root: TreeNode?, sum: Int): 
List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:22"
7053;568;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def pathSum(self, root: TreeNode, sum: int) -> 
List[List[int]]:";"";"2020-03-25 15:18:22"
7054;568;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} sum
 * @return {number[][]}
 */
var pathSum = function(root, sum) {
 
};";"";"2020-03-25 15:18:22"
7055;568;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @param Integer $sum
     * @return Integer[][]
     */
    function pathSum($root, $sum) {
        
    }
}";"";"2020-03-25 15:18:22"
7056;568;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func pathSum(_ root: TreeNode?, _ sum: Int) -> [
[Int]] {
        
    }
}";"";"2020-03-25 15:18:22"
7057;568;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @param {Integer} sum
# @return {Integer[][]}
def path_sum(root, sum)
 
end";"";"2020-03-25 15:18:22"
7058;568;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def pathSum(self, root, sum):
        """"""
        :type root: TreeNode
        :type sum: int
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:22"
7059;569;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int DistributeCoins(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:22"
7060;569;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int distributeCoins(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:22"
7061;569;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn distribute_coins(root: 
Option<Rc<RefCell<TreeNode>>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:22"
7062;569;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int distributeCoins(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:22"
7063;569;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def distributeCoins(root: TreeNode): Int = {
 
    }
}";"";"2020-03-25 15:18:22"
7064;569;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func distributeCoins(root *TreeNode) int {
 
}";"";"2020-03-25 15:18:22"
7065;569;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun distributeCoins(root: TreeNode?): Int {
 
    }
}";"";"2020-03-25 15:18:22"
7066;569;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def distributeCoins(self, root: TreeNode) -> 
int:";"";"2020-03-25 15:18:22"
7067;569;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var distributeCoins = function(root) {
 
};";"";"2020-03-25 15:18:22"
7068;569;"PHP";"/**";"";"2020-03-25 15:18:22"
7069;569;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func distributeCoins(_ root: TreeNode?) -> Int {
        
    }
}";"";"2020-03-25 15:18:22"
7070;569;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer}
def distribute_coins(root)
 
end";"";"2020-03-25 15:18:22"
7071;569;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def distributeCoins(self, root):
        """"""
        :type root: TreeNode
        :rtype: int
        """"""";"";"2020-03-25 15:18:22"
7072;570;"C#";"/**
 * The Rand7() API is already defined in the parent 
class SolBase.
 * public int Rand7();
 * @return a random integer in the range 1 to 7
 */
public class Solution : SolBase {
    public int Rand10() {
        
    }
}";"";"2020-03-25 15:18:23"
7073;570;"Java";"/**
 * The rand7() API is already defined in the parent 
class SolBase.
 * public int rand7();
 * @return a random integer in the range 1 to 7
 */
class Solution extends SolBase {
    public int rand10() {
        
    }
}";"";"2020-03-25 15:18:23"
7074;570;"C++";"// The rand7() API is already defined for you.
// int rand7();
// @return a random integer in the range 1 to 7
 
class Solution {
public:
    int rand10() {
        
    }
};";"";"2020-03-25 15:18:23"
7075;570;"C";"// The rand7() API is already defined for you.
// int rand7();
// @return a random integer in the range 1 to 7
 
int rand10() {
    
}";"";"2020-03-25 15:18:23"
7076;570;"Scala";"/**
 * The rand7() API is already defined in the parent 
class SolBase.
 * def rand7(): Int = {}
 * @return a random integer in the range 1 to 7
 */
object Solution extends SolBase {
    def rand10(): Int = {
        
    }
}";"";"2020-03-25 15:18:23"
7077;570;"Python3";"# The rand7() API is already defined for you.
# def rand7():
# @return a random integer in the range 1 to 7
 
class Solution:
    def rand10(self):
        """"""
        :rtype: int
        """"""";"";"2020-03-25 15:18:23"
7078;570;"JavaScript";"/**
 * The rand7() API is already defined for you.
 * var rand7 = function() {}
 * @return {number} a random integer in the range 1 
to 7
 */
var rand10 = function() {
    
};";"";"2020-03-25 15:18:23"
7079;570;"Go";"func rand10() int {
    
}";"";"2020-03-25 15:18:23"
7080;570;"Swift";"/**
 * The rand7() API is already defined in the parent 
class SolBase.
 * func rand7() -> Int = {}
 * @return a random integer in the range 1 to 7
 */
class Solution : SolBase {
    func rand10() -> Int {
        
    }
}";"";"2020-03-25 15:18:23"
7081;570;"Ruby";"# The rand7() API is already defined for you.
# def rand7()
# @return {Integer} a random integer in the range 1 
to 7
 
def rand10()
    
end";"";"2020-03-25 15:18:23"
7082;570;"Python";"# The rand7() API is already defined for you.
# def rand7():
# @return a random integer in the range 1 to 7
 
class Solution(object):
    def rand10(self):
        """"""
        :rtype: int
        """"""";"";"2020-03-25 15:18:23"
7083;570;"Kotlin";"/**
 * The rand7() API is already defined in the parent 
class SolBase.
 * fun rand7(): Int {}
 * @return a random integer in the range 1 to 7
 */
class Solution : SolBase() {
    fun rand10(): Int {
        
    }
}";"";"2020-03-25 15:18:23"
7084;571;"C#";"public class Solution {
    public int CombinationSum4(int[] nums, int 
target) {
 
    }
}";"";"2020-03-25 15:18:23"
7085;571;"Java";"class Solution {
    public int combinationSum4(int[] nums, int 
target) {
 
    }
}";"";"2020-03-25 15:18:23"
7086;571;"Rust";"impl Solution {
    pub fn combination_sum4(nums: Vec<i32>, target: 
i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:23"
7087;571;"C";"int combinationSum4(int* nums, int numsSize, int 
target){
 
}";"";"2020-03-25 15:18:23"
7088;571;"Scala";"object Solution {
    def combinationSum4(nums: Array[Int], target: 
Int): Int = {
 
    }
}";"";"2020-03-25 15:18:23"
7089;571;"Go";"func combinationSum4(nums []int, target int) int {
 
}";"";"2020-03-25 15:18:23"
7090;571;"Kotlin";"class Solution {
    fun combinationSum4(nums: IntArray, target: Int)
: Int {
 
    }
}";"";"2020-03-25 15:18:23"
7091;571;"Python3";"class Solution:
    def combinationSum4(self, nums: List[int], 
target: int) -> int:";"";"2020-03-25 15:18:23"
7092;571;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */
var combinationSum4 = function(nums, target) {
 
};";"";"2020-03-25 15:18:23"
7093;571;"PHP";"class Solution {";"";"2020-03-25 15:18:23"
7094;571;"Swift";"class Solution {
    func combinationSum4(_ nums: [Int], _ target: 
Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:23"
7095;571;"Ruby";"# @param {Integer[]} nums
# @param {Integer} target
# @return {Integer}
def combination_sum4(nums, target)
 
end";"";"2020-03-25 15:18:23"
7096;571;"Python";"class Solution(object):
    def combinationSum4(self, nums, target):
        """"""
        :type nums: List[int]
        :type target: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:23"
7097;572;"C#";"public class Solution {
    public void DuplicateZeros(int[] arr) {
 
    }
}";"";"2020-03-25 15:18:23"
7098;572;"Java";"class Solution {
    public void duplicateZeros(int[] arr) {
 
    }
}";"";"2020-03-25 15:18:23"
7099;572;"C";"void duplicateZeros(int* arr, int arrSize){
 
}";"";"2020-03-25 15:18:23"
7100;572;"Rust";"impl Solution {
    pub fn duplicate_zeros(arr: &mut Vec<i32>) {
        
    }
}";"";"2020-03-25 15:18:23"
7101;572;"Scala";"object Solution {
    def duplicateZeros(arr: Array[Int]): Unit = {
 
    }
}";"";"2020-03-25 15:18:23"
7102;572;"Go";"func duplicateZeros(arr []int)  {
 
}";"";"2020-03-25 15:18:23"
7103;572;"Kotlin";"class Solution {
    fun duplicateZeros(arr: IntArray): Unit {
 
    }
}";"";"2020-03-25 15:18:23"
7104;572;"Python3";"class Solution:
    def duplicateZeros(self, arr: List[int]) -> 
None:
        """"""
        Do not return anything, modify arr in-place 
instead.
        """"""";"";"2020-03-25 15:18:23"
7105;572;"JavaScript";"/**
 * @param {number[]} arr
 * @return {void} Do not return anything, modify 
arr in-place instead.
 */
var duplicateZeros = function(arr) {
 
};";"";"2020-03-25 15:18:23"
7106;572;"PHP";"class Solution {
 
    /**
     * @param Integer[] $arr
     * @return NULL
     */
    function duplicateZeros(&$arr) {
        
    }
}";"";"2020-03-25 15:18:23"
7107;572;"Swift";"class Solution {
    func duplicateZeros(_ arr: inout [Int]) {
        
    }
}";"";"2020-03-25 15:18:23"
7108;572;"Ruby";"# @param {Integer[]} arr";"";"2020-03-25 15:18:23"
7109;572;"Python";"class Solution(object):
    def duplicateZeros(self, arr):
        """"""
        :type arr: List[int]
        :rtype: None Do not return anything, modify 
arr in-place instead.
        """"""";"";"2020-03-25 15:18:23"
7110;573;"C#";"public class Solution {
    public int Calculate(string s) {
 
    }
}";"";"2020-03-25 15:18:23"
7111;573;"Java";"class Solution {
    public int calculate(String s) {
 
    }
}";"";"2020-03-25 15:18:23"
7112;573;"Rust";"impl Solution {
    pub fn calculate(s: String) -> i32 {
 
    }
}";"";"2020-03-25 15:18:23"
7113;573;"C";"int calculate(char * s){
 
}";"";"2020-03-25 15:18:23"
7114;573;"Scala";"object Solution {
    def calculate(s: String): Int = {
 
    }
}";"";"2020-03-25 15:18:23"
7115;573;"Go";"func calculate(s string) int {
 
}";"";"2020-03-25 15:18:23"
7116;573;"Kotlin";"class Solution {
    fun calculate(s: String): Int {
 
    }
}";"";"2020-03-25 15:18:23"
7117;573;"Python3";"class Solution:
    def calculate(self, s: str) -> int:";"";"2020-03-25 15:18:23"
7118;573;"JavaScript";"/**
 * @param {string} s
 * @return {number}
 */
var calculate = function(s) {
 
};";"";"2020-03-25 15:18:23"
7119;573;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return Integer
     */
    function calculate($s) {
 
    }
}";"";"2020-03-25 15:18:23"
7120;573;"Swift";"class Solution {
    func calculate(_ s: String) -> Int {
 
    }
}";"";"2020-03-25 15:18:23"
7121;573;"Ruby";"# @param {String} s
# @return {Integer}
def calculate(s)
 
end";"";"2020-03-25 15:18:23"
7122;573;"Python";"class Solution(object):
    def calculate(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:23"
7123;574;"C#";"public class Solution {
    public int PartitionDisjoint(int[] A) {
 
    }
}";"";"2020-03-25 15:18:23"
7124;574;"Java";"class Solution {
    public int partitionDisjoint(int[] A) {
 
    }
}";"";"2020-03-25 15:18:23"
7125;574;"C";"int partitionDisjoint(int* A, int ASize){
 
}";"";"2020-03-25 15:18:23"
7126;574;"Rust";"impl Solution {
    pub fn partition_disjoint(a: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:23"
7127;574;"Scala";"object Solution {
    def partitionDisjoint(A: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:23"
7128;574;"Go";"func partitionDisjoint(A []int) int {
 
}";"";"2020-03-25 15:18:23"
7129;574;"Kotlin";"class Solution {
    fun partitionDisjoint(A: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:23"
7130;574;"Python3";"class Solution:
    def partitionDisjoint(self, A: List[int]) -> 
int:";"";"2020-03-25 15:18:23"
7131;574;"JavaScript";"/**
 * @param {number[]} A
 * @return {number}
 */
var partitionDisjoint = function(A) {
 
};";"";"2020-03-25 15:18:23"
7132;574;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @return Integer
     */
    function partitionDisjoint($A) {
        
    }
}";"";"2020-03-25 15:18:23"
7133;574;"Swift";"class Solution {
    func partitionDisjoint(_ A: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:23"
7134;574;"Ruby";"# @param {Integer[]} a";"";"2020-03-25 15:18:23"
7135;574;"Python";"class Solution(object):
    def partitionDisjoint(self, A):
        """"""
        :type A: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:23"
7136;575;"C#";"public class Solution {
    public void Hanota(IList<int> A, IList<int> B, 
IList<int> C) {
 
    }
}";"";"2020-03-25 15:18:23"
7137;575;"Java";"class Solution {
    public void hanota(List<Integer> A, 
List<Integer> B, List<Integer> C) {
 
    }
}";"";"2020-03-25 15:18:23"
7138;575;"Rust";"impl Solution {
    pub fn hanota(a: &mut Vec<i32>, b: &mut 
Vec<i32>, c: &mut Vec<i32>) {
 
    }
}";"";"2020-03-25 15:18:23"
7139;575;"C";"void hanota(int* A, int ASize, int* B, int BSize, 
int* C, int CSize){
 
}";"";"2020-03-25 15:18:23"
7140;575;"Scala";"object Solution {
    def hanota(A: List[Int], B: List[Int], C: List
[Int]): Unit = {
 
    }
}";"";"2020-03-25 15:18:23"
7141;575;"Go";"func hanota(A []int, B []int, C []int) []int {
 
}";"";"2020-03-25 15:18:23"
7142;575;"Kotlin";"class Solution {
    fun hanota(A: List<Int>, B: List<Int>, C: 
List<Int>): Unit {
 
    }
}";"";"2020-03-25 15:18:23"
7143;575;"Python3";"class Solution:
    def hanota(self, A: List[int], B: List[int], C: 
List[int]) -> None:
        """"""
        Do not return anything, modify C in-place 
instead.
        """"""";"";"2020-03-25 15:18:23"
7144;575;"JavaScript";"/**
 * @param {number[]} A
 * @param {number[]} B
 * @param {number[]} C
 * @return {void} Do not return anything, modify C 
in-place instead.
 */
var hanota = function(A, B, C) {
 
};";"";"2020-03-25 15:18:23"
7145;575;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @param Integer[] $B
     * @param Integer[] $C
     * @return NULL
     */
    function hanota($A, $B, $C) {
 
    }
}";"";"2020-03-25 15:18:23"
7146;575;"Swift";"class Solution {
    func hanota(_ A: [Int], _ B: [Int], _ C: [Int]) 
{
 
    }
}";"";"2020-03-25 15:18:23"
7147;575;"Ruby";"# @param {Integer[]} a
# @param {Integer[]} b
# @param {Integer[]} c
# @return {Void} Do not return anything, modify C 
in-place instead.
def hanota(a, b, c)
 
end";"";"2020-03-25 15:18:23"
7148;575;"Python";"class Solution(object):
    def hanota(self, A, B, C):
        """"""
        :type A: List[int]
        :type B: List[int]
        :type C: List[int]
        :rtype: None Do not return anything, modify 
C in-place instead.
        """"""";"";"2020-03-25 15:18:23"
7149;576;"Bash";"# Read from the file words.txt and output the word 
frequency list to stdout.";"";"2020-03-25 15:18:23"
7150;577;"C#";"public class Solution {
    public bool IsNumber(string s) {
 
    }
}";"";"2020-03-25 15:18:23"
7151;577;"Java";"class Solution {
    public boolean isNumber(String s) {
 
    }
}";"";"2020-03-25 15:18:23"
7152;577;"C";"bool isNumber(char* s){
 
}";"";"2020-03-25 15:18:23"
7153;577;"Rust";"impl Solution {
    pub fn is_number(s: String) -> bool {
 
    }
}";"";"2020-03-25 15:18:23"
7154;577;"Scala";"object Solution {
    def isNumber(s: String): Boolean = {
 
    }
}";"";"2020-03-25 15:18:23"
7155;577;"Go";"func isNumber(s string) bool {
 
}";"";"2020-03-25 15:18:23"
7156;577;"Kotlin";"class Solution {
    fun isNumber(s: String): Boolean {
 
    }
}";"";"2020-03-25 15:18:23"
7157;577;"Python3";"class Solution:
    def isNumber(self, s: str) -> bool:";"";"2020-03-25 15:18:23"
7158;577;"JavaScript";"/**
 * @param {string} s
 * @return {boolean}
 */
var isNumber = function(s) {
 
};";"";"2020-03-25 15:18:23"
7159;577;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return Boolean
     */
    function isNumber($s) {
 
    }
}";"";"2020-03-25 15:18:23"
7160;577;"Swift";"class Solution {
    func isNumber(_ s: String) -> Bool {
 
    }
}";"";"2020-03-25 15:18:23"
7161;577;"Ruby";"# @param {String} s";"";"2020-03-25 15:18:23"
7162;577;"Python";"class Solution(object):
    def isNumber(self, s):
        """"""
        :type s: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:23"
7163;578;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode MergeKLists(ListNode[] lists) {
 
    }
}";"";"2020-03-25 15:18:23"
7164;578;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
 
    }
}";"";"2020-03-25 15:18:23"
7165;578;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
struct ListNode* mergeKLists(struct ListNode** 
lists, int listsSize){
 
}";"";"2020-03-25 15:18:23"
7166;578;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn merge_k_lists(lists: 
Vec<Option<Box<ListNode>>>) -> 
Option<Box<ListNode>> {
        
    }
}";"";"2020-03-25 15:18:23"
7167;578;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def mergeKLists(lists: Array[ListNode]): 
ListNode = {
 
    }
}";"";"2020-03-25 15:18:23"
7168;578;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func mergeKLists(lists []*ListNode) *ListNode {
 
}";"";"2020-03-25 15:18:23"
7169;578;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun mergeKLists(lists: Array<ListNode?>): 
ListNode? {
 
    }
}";"";"2020-03-25 15:18:23"
7170;578;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> 
ListNode:";"";"2020-03-25 15:18:23"
7171;578;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode[]} lists
 * @return {ListNode}
 */
var mergeKLists = function(lists) {
 
};";"";"2020-03-25 15:18:23"
7172;578;"PHP";"/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
class Solution {
 
    /**
     * @param ListNode[] $lists
     * @return ListNode
     */
    function mergeKLists($lists) {
        
    }
}";"";"2020-03-25 15:18:23"
7173;578;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func mergeKLists(_ lists: [ListNode?]) -> 
ListNode? {
        
    }
}";"";"2020-03-25 15:18:23"
7174;578;"Ruby";"# Definition for singly-linked list.";"";"2020-03-25 15:18:23"
7175;578;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def mergeKLists(self, lists):
        """"""
        :type lists: List[ListNode]
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:23"
7176;579;"C#";"public class Solution {
    public int Multiply(int A, int B) {
 
    }
}";"";"2020-03-25 15:18:23"
7177;579;"Java";"class Solution {
    public int multiply(int A, int B) {
 
    }
}";"";"2020-03-25 15:18:23"
7178;579;"C";"int multiply(int A, int B){
 
}";"";"2020-03-25 15:18:23"
7179;579;"Rust";"impl Solution {
    pub fn multiply(a: i32, b: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:23"
7180;579;"Scala";"object Solution {
    def multiply(A: Int, B: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:23"
7181;579;"Go";"func multiply(A int, B int) int {
 
}";"";"2020-03-25 15:18:23"
7182;579;"Kotlin";"class Solution {
    fun multiply(A: Int, B: Int): Int {
 
    }
}";"";"2020-03-25 15:18:23"
7183;579;"Python3";"class Solution:
    def multiply(self, A: int, B: int) -> int:";"";"2020-03-25 15:18:23"
7184;579;"JavaScript";"/**
 * @param {number} A
 * @param {number} B
 * @return {number}
 */
var multiply = function(A, B) {
 
};";"";"2020-03-25 15:18:23"
7185;579;"PHP";"class Solution {
 
    /**
     * @param Integer $A
     * @param Integer $B
     * @return Integer
     */
    function multiply($A, $B) {
 
    }
}";"";"2020-03-25 15:18:23"
7186;579;"Swift";"class Solution {
    func multiply(_ A: Int, _ B: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:23"
7187;579;"Ruby";"# @param {Integer} a
# @param {Integer} b
# @return {Integer}
def multiply(a, b)
 
end";"";"2020-03-25 15:18:23"
7188;579;"Python";"class Solution(object):
    def multiply(self, A, B):
        """"""
        :type A: int
        :type B: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:23"
7189;580;"C#";"public class Solution {
    public int FindPaths(int m, int n, int N, int i,
 int j) {
 
    }
}";"";"2020-03-25 15:18:23"
7190;580;"Java";"class Solution {
    public int findPaths(int m, int n, int N, int i,
 int j) {
 
    }
}";"";"2020-03-25 15:18:23"
7191;580;"C";"int findPaths(int m, int n, int N, int i, int j){
 
}";"";"2020-03-25 15:18:23"
7192;580;"Rust";"impl Solution {
    pub fn find_paths(m: i32, n: i32, n: i32, i: 
i32, j: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:23"
7193;580;"Scala";"object Solution {
    def findPaths(m: Int, n: Int, N: Int, i: Int, 
j: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:23"
7194;580;"Go";"func findPaths(m int, n int, N int, i int, j int) 
int {
 
}";"";"2020-03-25 15:18:23"
7195;580;"Kotlin";"class Solution {
    fun findPaths(m: Int, n: Int, N: Int, i: Int, 
j: Int): Int {
 
    }
}";"";"2020-03-25 15:18:23"
7196;580;"Python3";"class Solution:
    def findPaths(self, m: int, n: int, N: int, i: 
int, j: int) -> int:";"";"2020-03-25 15:18:23"
7197;580;"JavaScript";"/**
 * @param {number} m
 * @param {number} n
 * @param {number} N
 * @param {number} i
 * @param {number} j
 * @return {number}
 */
var findPaths = function(m, n, N, i, j) {
 
};";"";"2020-03-25 15:18:23"
7198;580;"PHP";"class Solution {
 
    /**
     * @param Integer $m
     * @param Integer $n
     * @param Integer $N
     * @param Integer $i
     * @param Integer $j
     * @return Integer
     */
    function findPaths($m, $n, $N, $i, $j) {
        
    }
}";"";"2020-03-25 15:18:23"
7199;580;"Swift";"class Solution {
    func findPaths(_ m: Int, _ n: Int, _ N: Int, _ 
i: Int, _ j: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:23"
7200;580;"Ruby";"# @param {Integer} m
# @param {Integer} n
# @param {Integer} n
# @param {Integer} i
# @param {Integer} j
# @return {Integer}
def find_paths(m, n, n, i, j)
 
end";"";"2020-03-25 15:18:23"
7201;580;"Python";"class Solution(object):
    def findPaths(self, m, n, N, i, j):
        """"""
        :type m: int
        :type n: int
        :type N: int
        :type i: int
        :type j: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:23"
7202;581;"C#";"public class Solution {
    public int ReverseBits(int num) {
 
    }
}";"";"2020-03-25 15:18:23"
7203;581;"Java";"class Solution {
    public int reverseBits(int num) {
 
    }
}";"";"2020-03-25 15:18:23"
7204;581;"Rust";"impl Solution {
    pub fn reverse_bits(num: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:23"
7205;581;"C";"int reverseBits(int num){
 
}";"";"2020-03-25 15:18:23"
7206;581;"Scala";"object Solution {
    def reverseBits(num: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:23"
7207;581;"Go";"func reverseBits(num int) int {
 
}";"";"2020-03-25 15:18:23"
7208;581;"Kotlin";"class Solution {
    fun reverseBits(num: Int): Int {
 
    }
}";"";"2020-03-25 15:18:23"
7209;581;"Python3";"class Solution:
    def reverseBits(self, num: int) -> int:";"";"2020-03-25 15:18:23"
7210;581;"JavaScript";"/**
 * @param {number} num
 * @return {number}
 */
var reverseBits = function(num) {
 
};";"";"2020-03-25 15:18:23"
7211;581;"PHP";"class Solution {
 
    /**
     * @param Integer $num
     * @return Integer
     */
    function reverseBits($num) {
 
    }
}";"";"2020-03-25 15:18:23"
7212;581;"Swift";"class Solution {
    func reverseBits(_ num: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:23"
7213;581;"Ruby";"# @param {Integer} num
# @return {Integer}
def reverse_bits(num)
 
end";"";"2020-03-25 15:18:23"
7214;581;"Python";"class Solution(object):
    def reverseBits(self, num):
        """"""
        :type num: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:23"
7215;582;"C#";"public class Solution {
    public int MaxDistance(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:23"
7216;582;"Java";"class Solution {
    public int maxDistance(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:23"
7217;582;"C";"int maxDistance(int** grid, int gridSize, int* 
gridColSize){
 
}";"";"2020-03-25 15:18:23"
7218;582;"Rust";"impl Solution {
    pub fn max_distance(grid: Vec<Vec<i32>>) -> i32 
{
        
    }
}";"";"2020-03-25 15:18:23"
7219;582;"Scala";"object Solution {
    def maxDistance(grid: Array[Array[Int]]): Int = 
{
 
    }
}";"";"2020-03-25 15:18:23"
7220;582;"Go";"func maxDistance(grid [][]int) int {
 
}";"";"2020-03-25 15:18:23"
7221;582;"Kotlin";"class Solution {
    fun maxDistance(grid: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:23"
7222;582;"Python3";"class Solution:
    def maxDistance(self, grid: List[List[int]]) -> 
int:";"";"2020-03-25 15:18:23"
7223;582;"JavaScript";"/**
 * @param {number[][]} grid
 * @return {number}
 */
var maxDistance = function(grid) {
 
};";"";"2020-03-25 15:18:23"
7224;582;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $grid
     * @return Integer
     */
    function maxDistance($grid) {
        
    }
}";"";"2020-03-25 15:18:23"
7225;582;"Swift";"class Solution {
    func maxDistance(_ grid: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:23"
7226;582;"Ruby";"# @param {Integer[][]} grid";"";"2020-03-25 15:18:23"
7227;582;"Python";"class Solution(object):
    def maxDistance(self, grid):
        """"""
        :type grid: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:23"
7228;583;"C#";"public class MyLinkedList {
 
    /** Initialize your data structure here. */
    public MyLinkedList() {
 
    }
    
    /** Get the value of the index-th node in the 
linked list. If the index is invalid, return -1. */
    public int Get(int index) {
 
    }
    
    /** Add a node of value val before the first 
element of the linked list. After the insertion, 
the new node will be the first node of the linked 
list. */
    public void AddAtHead(int val) {
 
    }
    
    /** Append a node of value val to the last 
element of the linked list. */
    public void AddAtTail(int val) {
 
    }";"";"2020-03-25 15:18:23"
7229;583;"Java";"class MyLinkedList {
 
    /** Initialize your data structure here. */
    public MyLinkedList() {
 
    }
    
    /** Get the value of the index-th node in the 
linked list. If the index is invalid, return -1. */
    public int get(int index) {
 
    }
    
    /** Add a node of value val before the first 
element of the linked list. After the insertion, 
the new node will be the first node of the linked 
list. */
    public void addAtHead(int val) {
 
    }
    
    /** Append a node of value val to the last 
element of the linked list. */
    public void addAtTail(int val) {
 
    }";"";"2020-03-25 15:18:23"
7230;583;"Rust";"struct MyLinkedList {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl MyLinkedList {
 
    /** Initialize your data structure here. */
    fn new() -> Self {
        
    }
    
    /** Get the value of the index-th node in the 
linked list. If the index is invalid, return -1. */
    fn get(&self, index: i32) -> i32 {
        
    }
    
    /** Add a node of value val before the first 
element of the linked list. After the insertion, ";"";"2020-03-25 15:18:23"
7231;583;"C";"typedef struct {
    
} MyLinkedList;
 
/** Initialize your data structure here. */
 
MyLinkedList* myLinkedListCreate() {
    
}
 
/** Get the value of the index-th node in the 
linked list. If the index is invalid, return -1. */
int myLinkedListGet(MyLinkedList* obj, int index) {
  
}
 
/** Add a node of value val before the first 
element of the linked list. After the insertion, 
the new node will be the first node of the linked 
list. */
void myLinkedListAddAtHead(MyLinkedList* obj, int 
val) {
  
}
 
/** Append a node of value val to the last element ";"";"2020-03-25 15:18:23"
7232;583;"Scala";"class MyLinkedList() {
 
    /** Initialize your data structure here. */
 
 
    /** Get the value of the index-th node in the 
linked list. If the index is invalid, return -1. */
    def get(index: Int): Int = {
 
    }
 
    /** Add a node of value val before the first 
element of the linked list. After the insertion, 
the new node will be the first node of the linked 
list. */
    def addAtHead(`val`: Int) {
 
    }
 
    /** Append a node of value val to the last 
element of the linked list. */
    def addAtTail(`val`: Int) {
 
    }
 
    /** Add a node of value val before the index-th ";"";"2020-03-25 15:18:23"
7233;583;"Go";"type MyLinkedList struct {
 
}
 
 
/** Initialize your data structure here. */
func Constructor() MyLinkedList {
 
}
 
 
/** Get the value of the index-th node in the 
linked list. If the index is invalid, return -1. */
func (this *MyLinkedList) Get(index int) int {
 
}
 
 
/** Add a node of value val before the first 
element of the linked list. After the insertion, 
the new node will be the first node of the linked 
list. */
func (this *MyLinkedList) AddAtHead(val int)  {
 
}
 ";"";"2020-03-25 15:18:23"
7234;583;"Kotlin";"class MyLinkedList() {
 
    /** Initialize your data structure here. */
 
 
    /** Get the value of the index-th node in the 
linked list. If the index is invalid, return -1. */
    fun get(index: Int): Int {
 
    }
 
    /** Add a node of value val before the first 
element of the linked list. After the insertion, 
the new node will be the first node of the linked 
list. */
    fun addAtHead(`val`: Int) {
 
    }
 
    /** Append a node of value val to the last 
element of the linked list. */
    fun addAtTail(`val`: Int) {
 
    }
 
    /** Add a node of value val before the index-th ";"";"2020-03-25 15:18:23"
7235;583;"Python3";"class MyLinkedList:
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
        
 
    def get(self, index: int) -> int:
        """"""
        Get the value of the index-th node in the 
linked list. If the index is invalid, return -1.
        """"""
        
 
    def addAtHead(self, val: int) -> None:
        """"""
        Add a node of value val before the first 
element of the linked list. After the insertion, 
the new node will be the first node of the linked 
list.
        """"""
        
 
    def addAtTail(self, val: int) -> None:
        """"""";"";"2020-03-25 15:18:23"
7236;583;"JavaScript";"/**
 * Initialize your data structure here.
 */
var MyLinkedList = function() {
 
};
 
/**
 * Get the value of the index-th node in the linked 
list. If the index is invalid, return -1. 
 * @param {number} index
 * @return {number}
 */
MyLinkedList.prototype.get = function(index) {
 
};
 
/**
 * Add a node of value val before the first element 
of the linked list. After the insertion, the new 
node will be the first node of the linked list. 
 * @param {number} val
 * @return {void}
 */
MyLinkedList.prototype.addAtHead = function(val) {
 ";"";"2020-03-25 15:18:23"
7237;583;"PHP";"class MyLinkedList {
    /**
     * Initialize your data structure here.
     */
    function __construct() {
        
    }
  
    /**
     * Get the value of the index-th node in the 
linked list. If the index is invalid, return -1.
     * @param Integer $index
     * @return Integer
     */
    function get($index) {
        
    }
  
    /**
     * Add a node of value val before the first 
element of the linked list. After the insertion, 
the new node will be the first node of the linked 
list.
     * @param Integer $val
     * @return NULL
     */";"";"2020-03-25 15:18:23"
7238;583;"Swift";"class MyLinkedList {
 
    /** Initialize your data structure here. */
    init() {
        
    }
    
    /** Get the value of the index-th node in the 
linked list. If the index is invalid, return -1. */
    func get(_ index: Int) -> Int {
        
    }
    
    /** Add a node of value val before the first 
element of the linked list. After the insertion, 
the new node will be the first node of the linked 
list. */
    func addAtHead(_ val: Int) {
        
    }
    
    /** Append a node of value val to the last 
element of the linked list. */
    func addAtTail(_ val: Int) {
        
    }";"";"2020-03-25 15:18:23"
7239;583;"Ruby";"class MyLinkedList
 
=begin
    Initialize your data structure here.
=end
    def initialize()
 
    end
 
 
=begin
    Get the value of the index-th node in the 
linked list. If the index is invalid, return -1.
    :type index: Integer
    :rtype: Integer
=end
    def get(index)
 
    end
 
 
=begin
    Add a node of value val before the first 
element of the linked list. After the insertion, 
the new node will be the first node of the linked 
list.";"";"2020-03-25 15:18:23"
7240;583;"Python";"class MyLinkedList(object):
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
        
 
    def get(self, index):
        """"""
        Get the value of the index-th node in the 
linked list. If the index is invalid, return -1.
        :type index: int
        :rtype: int
        """"""
        
 
    def addAtHead(self, val):
        """"""
        Add a node of value val before the first 
element of the linked list. After the insertion, 
the new node will be the first node of the linked 
list.
        :type val: int
        :rtype: None
        """"""";"";"2020-03-25 15:18:23"
7241;584;"Java";"class Solution {
    public int bestRotation(int[] A) {
 
    }
}";"";"2020-03-25 15:18:23"
7242;584;"C";"int bestRotation(int* A, int ASize){
 
}";"";"2020-03-25 15:18:23"
7243;584;"Rust";"impl Solution {
    pub fn best_rotation(a: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:23"
7244;584;"Scala";"object Solution {
    def bestRotation(A: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:23"
7245;584;"Python3";"class Solution:
    def bestRotation(self, A: List[int]) -> int:";"";"2020-03-25 15:18:23"
7246;584;"JavaScript";"/**
 * @param {number[]} A
 * @return {number}
 */
var bestRotation = function(A) {
 
};";"";"2020-03-25 15:18:23"
7247;584;"Go";"func bestRotation(A []int) int {
 
}";"";"2020-03-25 15:18:23"
7248;584;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @return Integer
     */
    function bestRotation($A) {
        
    }
}";"";"2020-03-25 15:18:23"
7249;584;"Swift";"class Solution {
    func bestRotation(_ A: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:23"
7250;584;"Ruby";"# @param {Integer[]} a
# @return {Integer}
def best_rotation(a)
 
end";"";"2020-03-25 15:18:23"
7251;584;"Python";"class Solution(object):
    def bestRotation(self, A):
        """"""
        :type A: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:23"
7252;584;"Kotlin";"class Solution {
    fun bestRotation(A: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:23"
7253;585;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode MergeTwoLists(ListNode l1, 
ListNode l2) {
 
    }
}";"";"2020-03-25 15:18:23"
7254;585;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, 
ListNode l2) {
 
    }
}";"";"2020-03-25 15:18:23"
7255;585;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
struct ListNode* mergeTwoLists(struct ListNode* l1, 
struct ListNode* l2){
 
}";"";"2020-03-25 15:18:23"
7256;585;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn merge_two_lists(l1: 
Option<Box<ListNode>>, l2: Option<Box<ListNode>>) 
-> Option<Box<ListNode>> {
        
    }
}";"";"2020-03-25 15:18:23"
7257;585;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def mergeTwoLists(l1: ListNode, l2: ListNode): 
ListNode = {
 
    }
}";"";"2020-03-25 15:18:23"
7258;585;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func mergeTwoLists(l1 *ListNode, l2 *ListNode) 
*ListNode {
 
}";"";"2020-03-25 15:18:23"
7259;585;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun mergeTwoLists(l1: ListNode?, l2: ListNode?)
: ListNode? {
 
    }
}";"";"2020-03-25 15:18:23"
7260;585;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: 
ListNode) -> ListNode:";"";"2020-03-25 15:18:23"
7261;585;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */
var mergeTwoLists = function(l1, l2) {
 
};";"";"2020-03-25 15:18:23"
7262;585;"PHP";"/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
class Solution {
 
    /**
     * @param ListNode $l1
     * @param ListNode $l2
     * @return ListNode
     */
    function mergeTwoLists($l1, $l2) {
        
    }
}";"";"2020-03-25 15:18:23"
7263;585;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func mergeTwoLists(_ l1: ListNode?, _ l2: 
ListNode?) -> ListNode? {
        
    }
}";"";"2020-03-25 15:18:23"
7264;585;"Ruby";"# Definition for singly-linked list.";"";"2020-03-25 15:18:23"
7265;585;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def mergeTwoLists(self, l1, l2):
        """"""
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:23"
7266;586;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode SearchBST(TreeNode root, int 
val) {
 
    }
}";"";"2020-03-25 15:18:23"
7267;586;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode searchBST(TreeNode root, int 
val) {
 
    }
}";"";"2020-03-25 15:18:23"
7268;586;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* searchBST(struct TreeNode* root, 
int val){
 
}";"";"2020-03-25 15:18:23"
7269;586;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn search_bst(root: 
Option<Rc<RefCell<TreeNode>>>, val: i32) -> 
Option<Rc<RefCell<TreeNode>>> {
        
    }";"";"2020-03-25 15:18:23"
7270;586;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def searchBST(root: TreeNode, `val`: Int): 
TreeNode = {
 
    }
}";"";"2020-03-25 15:18:23"
7271;586;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def searchBST(self, root: TreeNode, val: int) 
-> TreeNode:";"";"2020-03-25 15:18:23"
7272;586;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} val
 * @return {TreeNode}
 */
var searchBST = function(root, val) {
 
};";"";"2020-03-25 15:18:23"
7273;586;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func searchBST(root *TreeNode, val int) *TreeNode {
 
}";"";"2020-03-25 15:18:23"
7274;586;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @param Integer $val
     * @return TreeNode
     */
    function searchBST($root, $val) {
        
    }
}";"";"2020-03-25 15:18:23"
7275;586;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @param {Integer} val
# @return {TreeNode}
def search_bst(root, val)
 
end";"";"2020-03-25 15:18:23"
7276;586;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def searchBST(self, root, val):
        """"""
        :type root: TreeNode
        :type val: int
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:23"
7277;586;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun searchBST(root: TreeNode?, `val`: Int): 
TreeNode? {
 
    }
}";"";"2020-03-25 15:18:23"
7278;587;"C#";"public class Solution {
    public int MinimumDeleteSum(string s1, string 
s2) {
 
    }
}";"";"2020-03-25 15:18:23"
7279;587;"Java";"class Solution {
    public int minimumDeleteSum(String s1, String 
s2) {
 
    }
}";"";"2020-03-25 15:18:23"
7280;587;"Rust";"impl Solution {
    pub fn minimum_delete_sum(s1: String, s2: 
String) -> i32 {
        
    }
}";"";"2020-03-25 15:18:23"
7281;587;"C";"int minimumDeleteSum(char * s1, char * s2){
 
}";"";"2020-03-25 15:18:23"
7282;587;"Scala";"object Solution {
    def minimumDeleteSum(s1: String, s2: String): 
Int = {
 
    }
}";"";"2020-03-25 15:18:23"
7283;587;"Go";"func minimumDeleteSum(s1 string, s2 string) int {
 
}";"";"2020-03-25 15:18:23"
7284;587;"Kotlin";"class Solution {
    fun minimumDeleteSum(s1: String, s2: String): 
Int {
 
    }
}";"";"2020-03-25 15:18:23"
7285;587;"Python3";"class Solution:
    def minimumDeleteSum(self, s1: str, s2: str) -> 
int:";"";"2020-03-25 15:18:23"
7286;587;"JavaScript";"/**
 * @param {string} s1
 * @param {string} s2
 * @return {number}
 */
var minimumDeleteSum = function(s1, s2) {
 
};";"";"2020-03-25 15:18:23"
7287;587;"PHP";"class Solution {";"";"2020-03-25 15:18:23"
7288;587;"Swift";"class Solution {
    func minimumDeleteSum(_ s1: String, _ s2: 
String) -> Int {
        
    }
}";"";"2020-03-25 15:18:23"
7289;587;"Ruby";"# @param {String} s1
# @param {String} s2
# @return {Integer}
def minimum_delete_sum(s1, s2)
 
end";"";"2020-03-25 15:18:23"
7290;587;"Python";"class Solution(object):
    def minimumDeleteSum(self, s1, s2):
        """"""
        :type s1: str
        :type s2: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:23"
7291;588;"C#";"public class Solution {
    public int MinCut(string s) {
 
    }
}";"";"2020-03-25 15:18:23"
7292;588;"Java";"class Solution {
    public int minCut(String s) {
 
    }
}";"";"2020-03-25 15:18:23"
7293;588;"C";"int minCut(char * s){
 
}";"";"2020-03-25 15:18:23"
7294;588;"Rust";"impl Solution {
    pub fn min_cut(s: String) -> i32 {
 
    }
}";"";"2020-03-25 15:18:23"
7295;588;"Scala";"object Solution {
    def minCut(s: String): Int = {
 
    }
}";"";"2020-03-25 15:18:23"
7296;588;"Go";"func minCut(s string) int {
 
}";"";"2020-03-25 15:18:23"
7297;588;"Kotlin";"class Solution {
    fun minCut(s: String): Int {
 
    }
}";"";"2020-03-25 15:18:23"
7298;588;"Python3";"class Solution:
    def minCut(self, s: str) -> int:";"";"2020-03-25 15:18:23"
7299;588;"JavaScript";"/**
 * @param {string} s
 * @return {number}
 */
var minCut = function(s) {
 
};";"";"2020-03-25 15:18:23"
7300;588;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return Integer
     */
    function minCut($s) {
 
    }
}";"";"2020-03-25 15:18:23"
7301;588;"Swift";"class Solution {
    func minCut(_ s: String) -> Int {
 
    }
}";"";"2020-03-25 15:18:23"
7302;588;"Ruby";"# @param {String} s
# @return {Integer}
def min_cut(s)
 
end";"";"2020-03-25 15:18:23"
7303;588;"Python";"class Solution(object):
    def minCut(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:23"
7304;589;"C#";"public class Solution {
    public int NumUniqueEmails(string[] emails) {
 
    }
}";"";"2020-03-25 15:18:23"
7305;589;"Java";"class Solution {
    public int numUniqueEmails(String[] emails) {
 
    }
}";"";"2020-03-25 15:18:23"
7306;589;"Rust";"impl Solution {
    pub fn num_unique_emails(emails: Vec<String>) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:23"
7307;589;"C";"int numUniqueEmails(char ** emails, int emailsSize){
 
}";"";"2020-03-25 15:18:23"
7308;589;"Scala";"object Solution {
    def numUniqueEmails(emails: Array[String]): Int 
= {
 
    }
}";"";"2020-03-25 15:18:23"
7309;589;"Go";"func numUniqueEmails(emails []string) int {
 
}";"";"2020-03-25 15:18:23"
7310;589;"Kotlin";"class Solution {
    fun numUniqueEmails(emails: Array<String>): Int 
{
 
    }
}";"";"2020-03-25 15:18:23"
7311;589;"Python3";"class Solution:
    def numUniqueEmails(self, emails: List[str]) -> 
int:";"";"2020-03-25 15:18:23"
7312;589;"JavaScript";"/**
 * @param {string[]} emails
 * @return {number}
 */
var numUniqueEmails = function(emails) {
 
};";"";"2020-03-25 15:18:23"
7313;589;"PHP";"class Solution {";"";"2020-03-25 15:18:23"
7314;589;"Swift";"class Solution {
    func numUniqueEmails(_ emails: [String]) -> Int 
{
        
    }
}";"";"2020-03-25 15:18:23"
7315;589;"Ruby";"# @param {String[]} emails
# @return {Integer}
def num_unique_emails(emails)
 
end";"";"2020-03-25 15:18:23"
7316;589;"Python";"class Solution(object):
    def numUniqueEmails(self, emails):
        """"""
        :type emails: List[str]
        :rtype: int
        """"""";"";"2020-03-25 15:18:23"
7317;590;"C#";"public class Solution {
    public int BrokenCalc(int X, int Y) {
 
    }
}";"";"2020-03-25 15:18:23"
7318;590;"Java";"class Solution {
    public int brokenCalc(int X, int Y) {
 
    }
}";"";"2020-03-25 15:18:23"
7319;590;"Rust";"impl Solution {
    pub fn broken_calc(x: i32, y: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:23"
7320;590;"C";"int brokenCalc(int X, int Y){
 
}";"";"2020-03-25 15:18:23"
7321;590;"Scala";"object Solution {
    def brokenCalc(X: Int, Y: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:23"
7322;590;"Go";"func brokenCalc(X int, Y int) int {
 
}";"";"2020-03-25 15:18:23"
7323;590;"Kotlin";"class Solution {
    fun brokenCalc(X: Int, Y: Int): Int {
 
    }
}";"";"2020-03-25 15:18:23"
7324;590;"Python3";"class Solution:
    def brokenCalc(self, X: int, Y: int) -> int:";"";"2020-03-25 15:18:23"
7325;590;"JavaScript";"/**
 * @param {number} X
 * @param {number} Y
 * @return {number}
 */
var brokenCalc = function(X, Y) {
 
};";"";"2020-03-25 15:18:23"
7326;590;"PHP";"class Solution {";"";"2020-03-25 15:18:23"
7327;590;"Swift";"class Solution {
    func brokenCalc(_ X: Int, _ Y: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:23"
7328;590;"Ruby";"# @param {Integer} x
# @param {Integer} y
# @return {Integer}
def broken_calc(x, y)
 
end";"";"2020-03-25 15:18:23"
7329;590;"Python";"class Solution(object):
    def brokenCalc(self, X, Y):
        """"""
        :type X: int
        :type Y: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:23"
7330;591;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<IList<int>> LevelOrderBottom
(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:24"
7331;591;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom
(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:24"
7332;591;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn level_order_bottom(root: 
Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:24"
7333;591;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** levelOrderBottom(struct TreeNode* root, int* 
returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:24"
7334;591;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def levelOrderBottom(root: TreeNode): List[List
[Int]] = {
 
    }
}";"";"2020-03-25 15:18:24"
7335;591;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func levelOrderBottom(root *TreeNode) [][]int {
 
}";"";"2020-03-25 15:18:24"
7336;591;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun levelOrderBottom(root: TreeNode?): 
List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:24"
7337;591;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def levelOrderBottom(self, root: TreeNode) -> 
List[List[int]]:";"";"2020-03-25 15:18:24"
7338;591;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[][]}
 */
var levelOrderBottom = function(root) {
 
};";"";"2020-03-25 15:18:24"
7339;591;"PHP";"/**";"";"2020-03-25 15:18:24"
7340;591;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func levelOrderBottom(_ root: TreeNode?) -> [
[Int]] {
        
    }
}";"";"2020-03-25 15:18:24"
7341;591;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer[][]}
def level_order_bottom(root)
 
end";"";"2020-03-25 15:18:24"
7342;591;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def levelOrderBottom(self, root):
        """"""
        :type root: TreeNode
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:24"
7343;592;"C#";"/**
 * // This is the interface that allows for 
creating nested lists.
 * // You should not implement it, or speculate 
about its implementation
 * interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds 
a single integer, rather than a nested list.
 *     bool IsInteger();
 *
 *     // @return the single integer that this 
NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a 
nested list
 *     int GetInteger();
 *
 *     // @return the nested list that this 
NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a 
single integer
 *     IList<NestedInteger> GetList();
 * }
 */
public class NestedIterator {
 ";"";"2020-03-25 15:18:24"
7344;592;"Java";"/**
 * // This is the interface that allows for 
creating nested lists.
 * // You should not implement it, or speculate 
about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds 
a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this 
NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a 
nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this 
NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a 
single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class NestedIterator implements 
Iterator<Integer> {";"";"2020-03-25 15:18:24"
7345;592;"C";"/**
 * 
****************************************************
*****************
 * // This is the interface that allows for 
creating nested lists.
 * // You should not implement it, or speculate 
about its implementation
 * 
****************************************************
*****************
 *
 * // Return true if this NestedInteger holds a 
single integer, rather than a nested list.
 * bool NestedIntegerIsInteger(struct NestedInteger 
*);
 *
 * // Return the single integer that this 
NestedInteger holds, if it holds a single integer
 * // The result is undefined if this NestedInteger 
holds a nested list
 * int NestedIntegerGetInteger(struct NestedInteger 
*);
 *
 * // Return the nested list that this 
NestedInteger holds, if it holds a nested list";"";"2020-03-25 15:18:24"
7346;592;"Python3";"# """"""
# This is the interface that allows for creating 
nested lists.
# You should not implement it, or speculate about 
its implementation
# """"""
#class NestedInteger:
#    def isInteger(self) -> bool:
#        """"""
#        @return True if this NestedInteger holds a 
single integer, rather than a nested list.
#        """"""
#
#    def getInteger(self) -> int:
#        """"""
#        @return the single integer that this 
NestedInteger holds, if it holds a single integer
#        Return None if this NestedInteger holds a 
nested list
#        """"""
#
#    def getList(self) -> [NestedInteger]:
#        """"""
#        @return the nested list that this 
NestedInteger holds, if it holds a nested list
#        Return None if this NestedInteger holds a ";"";"2020-03-25 15:18:24"
7347;592;"JavaScript";"/**
 * // This is the interface that allows for 
creating nested lists.
 * // You should not implement it, or speculate 
about its implementation
 * function NestedInteger() {
 *
 *     Return true if this NestedInteger holds a 
single integer, rather than a nested list.
 *     @return {boolean}
 *     this.isInteger = function() {
 *         ...
 *     };
 *
 *     Return the single integer that this 
NestedInteger holds, if it holds a single integer
 *     Return null if this NestedInteger holds a 
nested list
 *     @return {integer}
 *     this.getInteger = function() {
 *         ...
 *     };
 *
 *     Return the nested list that this 
NestedInteger holds, if it holds a nested list
 *     Return null if this NestedInteger holds a ";"";"2020-03-25 15:18:24"
7348;592;"Ruby";"# This is the interface that allows for creating ";"";"2020-03-25 15:18:24"
7349;592;"Python";"# """"""
# This is the interface that allows for creating 
nested lists.
# You should not implement it, or speculate about 
its implementation
# """"""
#class NestedInteger(object):
#    def isInteger(self):
#        """"""
#        @return True if this NestedInteger holds a 
single integer, rather than a nested list.
#        :rtype bool
#        """"""
#
#    def getInteger(self):
#        """"""
#        @return the single integer that this 
NestedInteger holds, if it holds a single integer
#        Return None if this NestedInteger holds a 
nested list
#        :rtype int
#        """"""
#
#    def getList(self):
#        """"""
#        @return the nested list that this ";"";"2020-03-25 15:18:24"
7350;593;"C#";"public class Solution {
    public IList<IList<int>> SubsetsWithDup(int[] 
nums) {
 
    }
}";"";"2020-03-25 15:18:24"
7351;593;"Java";"class Solution {
    public List<List<Integer>> subsetsWithDup(int[] 
nums) {
 
    }
}";"";"2020-03-25 15:18:24"
7352;593;"Rust";"impl Solution {
    pub fn subsets_with_dup(nums: Vec<i32>) -> 
Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:24"
7353;593;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** subsetsWithDup(int* nums, int numsSize, int* 
returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:24"
7354;593;"Scala";"object Solution {
    def subsetsWithDup(nums: Array[Int]): List[List
[Int]] = {
 
    }
}";"";"2020-03-25 15:18:24"
7355;593;"Go";"func subsetsWithDup(nums []int) [][]int {
 
}";"";"2020-03-25 15:18:24"
7356;593;"Kotlin";"class Solution {
    fun subsetsWithDup(nums: IntArray): 
List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:24"
7357;593;"Python3";"class Solution:
    def subsetsWithDup(self, nums: List[int]) -> 
List[List[int]]:";"";"2020-03-25 15:18:24"
7358;593;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number[][]}
 */
var subsetsWithDup = function(nums) {
 
};";"";"2020-03-25 15:18:24"
7359;593;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer[][]
     */
    function subsetsWithDup($nums) {
        
    }
}";"";"2020-03-25 15:18:24"
7360;593;"Swift";"class Solution {
    func subsetsWithDup(_ nums: [Int]) -> [[Int]] {
        
    }
}";"";"2020-03-25 15:18:24"
7361;593;"Ruby";"# @param {Integer[]} nums
# @return {Integer[][]}
def subsets_with_dup(nums)
 
end";"";"2020-03-25 15:18:24"
7362;593;"Python";"class Solution(object):
    def subsetsWithDup(self, nums):
        """"""
        :type nums: List[int]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:24"
7363;594;"C#";"public class Solution {
    public int NumberOfBoomerangs(int[][] points) {
 
    }
}";"";"2020-03-25 15:18:24"
7364;594;"Java";"class Solution {
    public int numberOfBoomerangs(int[][] points) {
 
    }
}";"";"2020-03-25 15:18:24"
7365;594;"Rust";"impl Solution {
    pub fn number_of_boomerangs(points: 
Vec<Vec<i32>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:24"
7366;594;"C";"int numberOfBoomerangs(int** points, int pointsSize,
 int* pointsColSize){
 
}";"";"2020-03-25 15:18:24"
7367;594;"Scala";"object Solution {
    def numberOfBoomerangs(points: Array[Array[Int]]
): Int = {
 
    }
}";"";"2020-03-25 15:18:24"
7368;594;"Go";"func numberOfBoomerangs(points [][]int) int {
 
}";"";"2020-03-25 15:18:24"
7369;594;"Kotlin";"class Solution {
    fun numberOfBoomerangs(points: Array<IntArray>)
: Int {
 
    }
}";"";"2020-03-25 15:18:24"
7370;594;"Python3";"class Solution:
    def numberOfBoomerangs(self, points: List[List
[int]]) -> int:";"";"2020-03-25 15:18:24"
7371;594;"JavaScript";"/**
 * @param {number[][]} points
 * @return {number}
 */
var numberOfBoomerangs = function(points) {
 
};";"";"2020-03-25 15:18:24"
7372;594;"PHP";"class Solution {";"";"2020-03-25 15:18:24"
7373;594;"Swift";"class Solution {
    func numberOfBoomerangs(_ points: [[Int]]) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:24"
7374;594;"Ruby";"# @param {Integer[][]} points
# @return {Integer}
def number_of_boomerangs(points)
 
end";"";"2020-03-25 15:18:24"
7375;594;"Python";"class Solution(object):
    def numberOfBoomerangs(self, points):
        """"""
        :type points: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:24"
7376;595;"C#";"public class Solution {
    public int[] FindRedundantConnection(int[][] 
edges) {
 
    }
}";"";"2020-03-25 15:18:24"
7377;595;"Java";"class Solution {
    public int[] findRedundantConnection(int[][] 
edges) {
 
    }
}";"";"2020-03-25 15:18:24"
7378;595;"Rust";"impl Solution {
    pub fn find_redundant_connection(edges: 
Vec<Vec<i32>>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:24"
7379;595;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* findRedundantConnection(int** edges, int 
edgesSize, int* edgesColSize, int* returnSize){
 
}";"";"2020-03-25 15:18:24"
7380;595;"Scala";"object Solution {
    def findRedundantConnection(edges: Array[Array
[Int]]): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:24"
7381;595;"Go";"func findRedundantConnection(edges [][]int) []int {
 
}";"";"2020-03-25 15:18:24"
7382;595;"Kotlin";"class Solution {
    fun findRedundantConnection(edges: 
Array<IntArray>): IntArray {
 
    }
}";"";"2020-03-25 15:18:24"
7383;595;"Python3";"class Solution:
    def findRedundantConnection(self, edges: List
[List[int]]) -> List[int]:";"";"2020-03-25 15:18:24"
7384;595;"JavaScript";"/**
 * @param {number[][]} edges
 * @return {number[]}
 */
var findRedundantConnection = function(edges) {
 
};";"";"2020-03-25 15:18:24"
7385;595;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $edges
     * @return Integer[]
     */
    function findRedundantConnection($edges) {
        
    }
}";"";"2020-03-25 15:18:24"
7386;595;"Swift";"class Solution {
    func findRedundantConnection(_ edges: [[Int]]) 
-> [Int] {
        
    }
}";"";"2020-03-25 15:18:24"
7387;595;"Ruby";"# @param {Integer[][]} edges
# @return {Integer[]}
def find_redundant_connection(edges)
 
end";"";"2020-03-25 15:18:24"
7388;595;"Python";"class Solution(object):
    def findRedundantConnection(self, edges):
        """"""
        :type edges: List[List[int]]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:24"
7389;596;"C#";"public class Solution {
    public int[] CreateTargetArray(int[] nums, int[]
 index) {
 
    }
}";"";"2020-03-25 15:18:24"
7390;596;"Java";"class Solution {
    public int[] createTargetArray(int[] nums, int[]
 index) {
 
    }
}";"";"2020-03-25 15:18:24"
7391;596;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* createTargetArray(int* nums, int numsSize, 
int* index, int indexSize, int* returnSize){
 
}";"";"2020-03-25 15:18:24"
7392;596;"Scala";"object Solution {
    def createTargetArray(nums: Array[Int], index: 
Array[Int]): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:24"
7393;596;"Python3";"class Solution:
    def createTargetArray(self, nums: List[int], 
index: List[int]) -> List[int]:";"";"2020-03-25 15:18:24"
7394;596;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number[]} index
 * @return {number[]}
 */
var createTargetArray = function(nums, index) {
 
};";"";"2020-03-25 15:18:24"
7395;596;"Go";"func createTargetArray(nums []int, index []int) []
int {
 
}";"";"2020-03-25 15:18:24"
7396;596;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer[] $index
     * @return Integer[]
     */
    function createTargetArray($nums, $index) {
 
    }
}";"";"2020-03-25 15:18:24"
7397;596;"Swift";"class Solution {
    func createTargetArray(_ nums: [Int], _ index: 
[Int]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:24"
7398;596;"Ruby";"# @param {Integer[]} nums
# @param {Integer[]} index
# @return {Integer[]}
def create_target_array(nums, index)
 
end";"";"2020-03-25 15:18:24"
7399;596;"Kotlin";"class Solution {
    fun createTargetArray(nums: IntArray, index: 
IntArray): IntArray {
 
    }
}";"";"2020-03-25 15:18:24"
7400;596;"Python";"class Solution(object):
    def createTargetArray(self, nums, index):
        """"""
        :type nums: List[int]
        :type index: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:24"
7401;597;"C#";"public class Solution {
    public int SnakesAndLadders(int[][] board) {
 
    }
}";"";"2020-03-25 15:18:24"
7402;597;"Java";"class Solution {
    public int snakesAndLadders(int[][] board) {
 
    }
}";"";"2020-03-25 15:18:24"
7403;597;"C";"int snakesAndLadders(int** board, int boardSize, 
int* boardColSize){
 
}";"";"2020-03-25 15:18:24"
7404;597;"Rust";"impl Solution {
    pub fn snakes_and_ladders(board: Vec<Vec<i32>>) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:24"
7405;597;"Scala";"object Solution {
    def snakesAndLadders(board: Array[Array[Int]]): 
Int = {
 
    }
}";"";"2020-03-25 15:18:24"
7406;597;"Go";"func snakesAndLadders(board [][]int) int {
 
}";"";"2020-03-25 15:18:24"
7407;597;"Kotlin";"class Solution {
    fun snakesAndLadders(board: Array<IntArray>): 
Int {
 
    }
}";"";"2020-03-25 15:18:24"
7408;597;"Python3";"class Solution:
    def snakesAndLadders(self, board: List[List[int]
]) -> int:";"";"2020-03-25 15:18:24"
7409;597;"JavaScript";"/**
 * @param {number[][]} board
 * @return {number}
 */
var snakesAndLadders = function(board) {
 
};";"";"2020-03-25 15:18:24"
7410;597;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $board
     * @return Integer
     */
    function snakesAndLadders($board) {
        
    }
}";"";"2020-03-25 15:18:24"
7411;597;"Swift";"class Solution {
    func snakesAndLadders(_ board: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:24"
7412;597;"Ruby";"# @param {Integer[][]} board";"";"2020-03-25 15:18:24"
7413;597;"Python";"class Solution(object):
    def snakesAndLadders(self, board):
        """"""
        :type board: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:24"
7414;598;"C#";"public class Solution {
    public int SumSubseqWidths(int[] A) {
 
    }
}";"";"2020-03-25 15:18:24"
7415;598;"Java";"class Solution {
    public int sumSubseqWidths(int[] A) {
 
    }
}";"";"2020-03-25 15:18:24"
7416;598;"C";"int sumSubseqWidths(int* A, int ASize){
 
}";"";"2020-03-25 15:18:24"
7417;598;"Rust";"impl Solution {
    pub fn sum_subseq_widths(a: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:24"
7418;598;"Scala";"object Solution {
    def sumSubseqWidths(A: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:24"
7419;598;"JavaScript";"/**
 * @param {number[]} A
 * @return {number}
 */
var sumSubseqWidths = function(A) {
 
};";"";"2020-03-25 15:18:24"
7420;598;"Go";"func sumSubseqWidths(A []int) int {
 
}";"";"2020-03-25 15:18:24"
7421;598;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @return Integer
     */
    function sumSubseqWidths($A) {
        
    }
}";"";"2020-03-25 15:18:24"
7422;598;"Swift";"class Solution {
    func sumSubseqWidths(_ A: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:24"
7423;598;"Ruby";"# @param {Integer[]} a";"";"2020-03-25 15:18:24"
7424;598;"Python";"class Solution(object):
    def sumSubseqWidths(self, A):
        """"""
        :type A: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:24"
7425;598;"Kotlin";"class Solution {
    fun sumSubseqWidths(A: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:24"
7426;599;"C#";"public class Solution {
    public int NumOfMinutes(int n, int headID, int[]
 manager, int[] informTime) {
 
    }
}";"";"2020-03-25 15:18:24"
7427;599;"Java";"class Solution {
    public int numOfMinutes(int n, int headID, int[]
 manager, int[] informTime) {
 
    }
}";"";"2020-03-25 15:18:24"
7428;599;"C";"int numOfMinutes(int n, int headID, int* manager, 
int managerSize, int* informTime, int 
informTimeSize){
 
}";"";"2020-03-25 15:18:24"
7429;599;"Rust";"impl Solution {
    pub fn num_of_minutes(n: i32, head_id: i32, 
manager: Vec<i32>, inform_time: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:24"
7430;599;"Scala";"object Solution {
    def numOfMinutes(n: Int, headID: Int, manager: 
Array[Int], informTime: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:24"
7431;599;"Go";"func numOfMinutes(n int, headID int, manager []int, 
informTime []int) int {
 
}";"";"2020-03-25 15:18:24"
7432;599;"Kotlin";"class Solution {
    fun numOfMinutes(n: Int, headID: Int, manager: 
IntArray, informTime: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:24"
7433;599;"Python3";"class Solution:
    def numOfMinutes(self, n: int, headID: int, 
manager: List[int], informTime: List[int]) -> int:";"";"2020-03-25 15:18:24"
7434;599;"JavaScript";"/**
 * @param {number} n
 * @param {number} headID
 * @param {number[]} manager
 * @param {number[]} informTime
 * @return {number}
 */
var numOfMinutes = function(n, headID, manager, 
informTime) {
 
};";"";"2020-03-25 15:18:24"
7435;599;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @param Integer $headID
     * @param Integer[] $manager
     * @param Integer[] $informTime
     * @return Integer
     */
    function numOfMinutes($n, $headID, $manager, 
$informTime) {
 
    }
}";"";"2020-03-25 15:18:24"
7436;599;"Swift";"class Solution {
    func numOfMinutes(_ n: Int, _ headID: Int, _ 
manager: [Int], _ informTime: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:24"
7437;599;"Ruby";"# @param {Integer} n";"";"2020-03-25 15:18:24"
7438;599;"Python";"class Solution(object):
    def numOfMinutes(self, n, headID, manager, 
informTime):
        """"""
        :type n: int
        :type headID: int
        :type manager: List[int]
        :type informTime: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:24"
7439;600;"C#";"public class Solution {
    public IList<int> TopKFrequent(int[] nums, int 
k) {
 
    }
}";"";"2020-03-25 15:18:24"
7440;600;"Java";"class Solution {
    public List<Integer> topKFrequent(int[] nums, 
int k) {
 
    }
}";"";"2020-03-25 15:18:24"
7441;600;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* topKFrequent(int* nums, int numsSize, int k, 
int* returnSize){
 
}";"";"2020-03-25 15:18:24"
7442;600;"Rust";"impl Solution {
    pub fn top_k_frequent(nums: Vec<i32>, k: i32) 
-> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:24"
7443;600;"Scala";"object Solution {
    def topKFrequent(nums: Array[Int], k: Int): List
[Int] = {
 
    }
}";"";"2020-03-25 15:18:24"
7444;600;"Go";"func topKFrequent(nums []int, k int) []int {
 
}";"";"2020-03-25 15:18:24"
7445;600;"Kotlin";"class Solution {
    fun topKFrequent(nums: IntArray, k: Int): 
List<Int> {
 
    }
}";"";"2020-03-25 15:18:24"
7446;600;"Python3";"class Solution:
    def topKFrequent(self, nums: List[int], k: int) 
-> List[int]:";"";"2020-03-25 15:18:24"
7447;600;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number[]}
 */
var topKFrequent = function(nums, k) {
 
};";"";"2020-03-25 15:18:24"
7448;600;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer $k
     * @return Integer[]
     */
    function topKFrequent($nums, $k) {
        
    }
}";"";"2020-03-25 15:18:24"
7449;600;"Swift";"class Solution {
    func topKFrequent(_ nums: [Int], _ k: Int) -> 
[Int] {
        
    }
}";"";"2020-03-25 15:18:24"
7450;600;"Ruby";"# @param {Integer[]} nums
# @param {Integer} k
# @return {Integer[]}
def top_k_frequent(nums, k)
 
end";"";"2020-03-25 15:18:24"
7451;600;"Python";"class Solution(object):
    def topKFrequent(self, nums, k):
        """"""
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:24"
7452;601;"C#";"public class Solution {
    public int EraseOverlapIntervals(int[][] 
intervals) {
 
    }
}";"";"2020-03-25 15:18:24"
7453;601;"Java";"class Solution {
    public int eraseOverlapIntervals(int[][] 
intervals) {
 
    }
}";"";"2020-03-25 15:18:24"
7454;601;"Rust";"impl Solution {
    pub fn erase_overlap_intervals(intervals: 
Vec<Vec<i32>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:24"
7455;601;"C";"int eraseOverlapIntervals(int** intervals, int 
intervalsSize, int* intervalsColSize){
 
}";"";"2020-03-25 15:18:24"
7456;601;"Scala";"object Solution {
    def eraseOverlapIntervals(intervals: Array[Array
[Int]]): Int = {
 
    }
}";"";"2020-03-25 15:18:24"
7457;601;"Go";"func eraseOverlapIntervals(intervals [][]int) int {
 
}";"";"2020-03-25 15:18:24"
7458;601;"Kotlin";"class Solution {
    fun eraseOverlapIntervals(intervals: 
Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:24"
7459;601;"Python3";"class Solution:
    def eraseOverlapIntervals(self, intervals: List
[List[int]]) -> int:";"";"2020-03-25 15:18:24"
7460;601;"JavaScript";"/**
 * @param {number[][]} intervals
 * @return {number}
 */
var eraseOverlapIntervals = function(intervals) {
 
};";"";"2020-03-25 15:18:24"
7461;601;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $intervals
     * @return Integer
     */
    function eraseOverlapIntervals($intervals) {
        
    }
}";"";"2020-03-25 15:18:24"
7462;601;"Swift";"class Solution {
    func eraseOverlapIntervals(_ intervals: [[Int]])
 -> Int {
        
    }
}";"";"2020-03-25 15:18:24"
7463;601;"Ruby";"# @param {Integer[][]} intervals
# @return {Integer}
def erase_overlap_intervals(intervals)
 
end";"";"2020-03-25 15:18:24"
7464;601;"Python";"class Solution(object):
    def eraseOverlapIntervals(self, intervals):
        """"""
        :type intervals: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:24"
7465;602;"C#";"public class Solution {
    public int MaxChunksToSorted(int[] arr) {
 
    }
}";"";"2020-03-25 15:18:24"
7466;602;"Java";"class Solution {
    public int maxChunksToSorted(int[] arr) {
 
    }
}";"";"2020-03-25 15:18:24"
7467;602;"C";"int maxChunksToSorted(int* arr, int arrSize){
 
}";"";"2020-03-25 15:18:24"
7468;602;"Rust";"impl Solution {
    pub fn max_chunks_to_sorted(arr: Vec<i32>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:24"
7469;602;"Scala";"object Solution {
    def maxChunksToSorted(arr: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:24"
7470;602;"Go";"func maxChunksToSorted(arr []int) int {
 
}";"";"2020-03-25 15:18:24"
7471;602;"Kotlin";"class Solution {
    fun maxChunksToSorted(arr: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:24"
7472;602;"Python3";"class Solution:
    def maxChunksToSorted(self, arr: List[int]) -> 
int:";"";"2020-03-25 15:18:24"
7473;602;"JavaScript";"/**
 * @param {number[]} arr
 * @return {number}
 */
var maxChunksToSorted = function(arr) {
 
};";"";"2020-03-25 15:18:24"
7474;602;"PHP";"class Solution {
 
    /**
     * @param Integer[] $arr
     * @return Integer
     */
    function maxChunksToSorted($arr) {
        
    }
}";"";"2020-03-25 15:18:24"
7475;602;"Swift";"class Solution {
    func maxChunksToSorted(_ arr: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:24"
7476;602;"Ruby";"# @param {Integer[]} arr
# @return {Integer}
def max_chunks_to_sorted(arr)
 
end";"";"2020-03-25 15:18:24"
7477;602;"Python";"class Solution(object):
    def maxChunksToSorted(self, arr):
        """"""
        :type arr: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:24"
7478;603;"C#";"public class Solution {
    public string SortString(string s) {
 
    }
}";"";"2020-03-25 15:18:24"
7479;603;"Java";"class Solution {
    public String sortString(String s) {
 
    }
}";"";"2020-03-25 15:18:24"
7480;603;"C";"char * sortString(char * s){
 
}";"";"2020-03-25 15:18:24"
7481;603;"Rust";"impl Solution {
    pub fn sort_string(s: String) -> String {
 
    }
}";"";"2020-03-25 15:18:24"
7482;603;"Scala";"object Solution {
    def sortString(s: String): String = {
 
    }
}";"";"2020-03-25 15:18:24"
7483;603;"Go";"func sortString(s string) string {
 
}";"";"2020-03-25 15:18:24"
7484;603;"Kotlin";"class Solution {
    fun sortString(s: String): String {
 
    }
}";"";"2020-03-25 15:18:24"
7485;603;"Python3";"class Solution:
    def sortString(self, s: str) -> str:";"";"2020-03-25 15:18:24"
7486;603;"JavaScript";"/**
 * @param {string} s
 * @return {string}
 */
var sortString = function(s) {
 
};";"";"2020-03-25 15:18:24"
7487;603;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return String
     */
    function sortString($s) {
 
    }
}";"";"2020-03-25 15:18:24"
7488;603;"Swift";"class Solution {
    func sortString(_ s: String) -> String {
        
    }
}";"";"2020-03-25 15:18:24"
7489;603;"Ruby";"# @param {String} s
# @return {String}
def sort_string(s)
 
end";"";"2020-03-25 15:18:24"
7490;603;"Python";"class Solution(object):
    def sortString(self, s):
        """"""
        :type s: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:24"
7491;604;"C#";"public class Solution {
    public bool IsBipartite(int[][] graph) {
 
    }
}";"";"2020-03-25 15:18:24"
7492;604;"Java";"class Solution {
    public boolean isBipartite(int[][] graph) {
 
    }
}";"";"2020-03-25 15:18:24"
7493;604;"Rust";"impl Solution {
    pub fn is_bipartite(graph: Vec<Vec<i32>>) -> 
bool {
        
    }
}";"";"2020-03-25 15:18:24"
7494;604;"C";"bool isBipartite(int** graph, int graphSize, int* 
graphColSize){
 
}";"";"2020-03-25 15:18:24"
7495;604;"Scala";"object Solution {
    def isBipartite(graph: Array[Array[Int]]): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:24"
7496;604;"Python3";"class Solution:
    def isBipartite(self, graph: List[List[int]]) 
-> bool:";"";"2020-03-25 15:18:24"
7497;604;"JavaScript";"/**
 * @param {number[][]} graph
 * @return {boolean}
 */
var isBipartite = function(graph) {
 
};";"";"2020-03-25 15:18:24"
7498;604;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $graph
     * @return Boolean
     */
    function isBipartite($graph) {
        
    }
}";"";"2020-03-25 15:18:24"
7499;604;"Swift";"class Solution {
    func isBipartite(_ graph: [[Int]]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:24"
7500;604;"Ruby";"# @param {Integer[][]} graph
# @return {Boolean}
def is_bipartite(graph)
 
end";"";"2020-03-25 15:18:24"
7501;604;"Kotlin";"class Solution {
    fun isBipartite(graph: Array<IntArray>): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:24"
7502;604;"Python";"class Solution(object):
    def isBipartite(self, graph):
        """"""
        :type graph: List[List[int]]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:24"
7503;605;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int Rob(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:24"
7504;605;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int rob(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:24"
7505;605;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int rob(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:24"
7506;605;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn rob(root: Option<Rc<RefCell<TreeNode>>>) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:24"
7507;605;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def rob(root: TreeNode): Int = {
 
    }
}";"";"2020-03-25 15:18:24"
7508;605;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func rob(root *TreeNode) int {
 
}";"";"2020-03-25 15:18:24"
7509;605;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun rob(root: TreeNode?): Int {
 
    }
}";"";"2020-03-25 15:18:24"
7510;605;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def rob(self, root: TreeNode) -> int:";"";"2020-03-25 15:18:24"
7511;605;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var rob = function(root) {
 
};";"";"2020-03-25 15:18:24"
7512;605;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer
     */
    function rob($root) {
        
    }
}";"";"2020-03-25 15:18:24"
7513;605;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func rob(_ root: TreeNode?) -> Int {
        
    }
}";"";"2020-03-25 15:18:24"
7514;605;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:24"
7515;605;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def rob(self, root):
        """"""
        :type root: TreeNode
        :rtype: int
        """"""";"";"2020-03-25 15:18:24"
7516;606;"C#";"public class Solution {
    public int LengthOfLIS(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:24"
7517;606;"Java";"class Solution {
    public int lengthOfLIS(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:24"
7518;606;"Rust";"impl Solution {
    pub fn length_of_lis(nums: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:24"
7519;606;"C";"int lengthOfLIS(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:24"
7520;606;"Scala";"object Solution {
    def lengthOfLIS(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:24"
7521;606;"Go";"func lengthOfLIS(nums []int) int {
 
}";"";"2020-03-25 15:18:24"
7522;606;"Kotlin";"class Solution {
    fun lengthOfLIS(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:24"
7523;606;"Python3";"class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:24"
7524;606;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var lengthOfLIS = function(nums) {
 
};";"";"2020-03-25 15:18:24"
7525;606;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function lengthOfLIS($nums) {
        
    }
}";"";"2020-03-25 15:18:24"
7526;606;"Swift";"class Solution {
    func lengthOfLIS(_ nums: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:24"
7527;606;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def length_of_lis(nums)
 
end";"";"2020-03-25 15:18:24"
7528;606;"Python";"class Solution(object):
    def lengthOfLIS(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:24"
7529;607;"C#";"public class Solution {
    public int MinMoves(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:24"
7530;607;"Java";"class Solution {
    public int minMoves(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:24"
7531;607;"Rust";"impl Solution {
    pub fn min_moves(nums: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:24"
7532;607;"C";"int minMoves(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:24"
7533;607;"Scala";"object Solution {
    def minMoves(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:24"
7534;607;"Go";"func minMoves(nums []int) int {
 
}";"";"2020-03-25 15:18:24"
7535;607;"Kotlin";"class Solution {
    fun minMoves(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:24"
7536;607;"Python3";"class Solution:
    def minMoves(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:24"
7537;607;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var minMoves = function(nums) {
 
};";"";"2020-03-25 15:18:24"
7538;607;"PHP";"";"";"2020-03-25 15:18:24"
7539;607;"Swift";"class Solution {
    func minMoves(_ nums: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:24"
7540;607;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def min_moves(nums)
 
end";"";"2020-03-25 15:18:24"
7541;607;"Python";"class Solution(object):
    def minMoves(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:24"
7542;608;"C#";"public class Solution {
    public IList<string> SummaryRanges(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:24"
7543;608;"Java";"class Solution {
    public List<String> summaryRanges(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:24"
7544;608;"Rust";"impl Solution {
    pub fn summary_ranges(nums: Vec<i32>) -> 
Vec<String> {
 
    }
}";"";"2020-03-25 15:18:24"
7545;608;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** summaryRanges(int* nums, int numsSize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:24"
7546;608;"Scala";"object Solution {
    def summaryRanges(nums: Array[Int]): List
[String] = {
 
    }
}";"";"2020-03-25 15:18:24"
7547;608;"Go";"func summaryRanges(nums []int) []string {
 
}";"";"2020-03-25 15:18:24"
7548;608;"Kotlin";"class Solution {
    fun summaryRanges(nums: IntArray): List<String> 
{
 
    }
}";"";"2020-03-25 15:18:24"
7549;608;"Python3";"class Solution:
    def summaryRanges(self, nums: List[int]) -> List
[str]:";"";"2020-03-25 15:18:24"
7550;608;"JavaScript";"/**
 * @param {number[]} nums
 * @return {string[]}
 */
var summaryRanges = function(nums) {
 
};";"";"2020-03-25 15:18:24"
7551;608;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return String[]
     */
    function summaryRanges($nums) {
 
    }
}";"";"2020-03-25 15:18:24"
7552;608;"Swift";"class Solution {
    func summaryRanges(_ nums: [Int]) -> [String] {
 
    }
}";"";"2020-03-25 15:18:24"
7553;608;"Ruby";"# @param {Integer[]} nums
# @return {String[]}
def summary_ranges(nums)
 
end";"";"2020-03-25 15:18:24"
7554;608;"Python";"class Solution(object):
    def summaryRanges(self, nums):
        """"""
        :type nums: List[int]
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:24"
7555;609;"C#";"public class Solution {
    public int FindBestValue(int[] arr, int target) 
{
 
    }
}";"";"2020-03-25 15:18:24"
7556;609;"Java";"class Solution {
    public int findBestValue(int[] arr, int target) 
{
 
    }
}";"";"2020-03-25 15:18:24"
7557;609;"C";"int findBestValue(int* arr, int arrSize, int target)
{
 
}";"";"2020-03-25 15:18:24"
7558;609;"Rust";"impl Solution {
    pub fn find_best_value(arr: Vec<i32>, target: 
i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:24"
7559;609;"Scala";"object Solution {
    def findBestValue(arr: Array[Int], target: Int)
: Int = {
 
    }
}";"";"2020-03-25 15:18:24"
7560;609;"Go";"func findBestValue(arr []int, target int) int {
 
}";"";"2020-03-25 15:18:24"
7561;609;"Kotlin";"class Solution {
    fun findBestValue(arr: IntArray, target: Int): 
Int {
 
    }
}";"";"2020-03-25 15:18:24"
7562;609;"Python3";"class Solution:
    def findBestValue(self, arr: List[int], target: 
int) -> int:";"";"2020-03-25 15:18:24"
7563;609;"JavaScript";"/**
 * @param {number[]} arr
 * @param {number} target
 * @return {number}
 */
var findBestValue = function(arr, target) {
    
};";"";"2020-03-25 15:18:24"
7564;609;"PHP";"class Solution {
 
    /**
     * @param Integer[] $arr
     * @param Integer $target
     * @return Integer
     */
    function findBestValue($arr, $target) {
        
    }
}";"";"2020-03-25 15:18:24"
7565;609;"Swift";"class Solution {
    func findBestValue(_ arr: [Int], _ target: Int) 
-> Int {
        
    }
}";"";"2020-03-25 15:18:24"
7566;609;"Ruby";"# @param {Integer[]} arr
# @param {Integer} target
# @return {Integer}
def find_best_value(arr, target)
 
end";"";"2020-03-25 15:18:24"
7567;609;"Python";"class Solution(object):
    def findBestValue(self, arr, target):
        """"""
        :type arr: List[int]
        :type target: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:24"
7568;610;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public bool IsCousins(TreeNode root, int x, int 
y) {
 
    }
}";"";"2020-03-25 15:18:24"
7569;610;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isCousins(TreeNode root, int x, 
int y) {
 
    }
}";"";"2020-03-25 15:18:24"
7570;610;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn is_cousins(root: 
Option<Rc<RefCell<TreeNode>>>, x: i32, y: i32) -> 
bool {
        
    }";"";"2020-03-25 15:18:24"
7571;610;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
bool isCousins(struct TreeNode* root, int x, int y){
 
}";"";"2020-03-25 15:18:24"
7572;610;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def isCousins(root: TreeNode, x: Int, y: Int): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:24"
7573;610;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func isCousins(root *TreeNode, x int, y int) bool {
 
}";"";"2020-03-25 15:18:24"
7574;610;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun isCousins(root: TreeNode?, x: Int, y: Int): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:24"
7575;610;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def isCousins(self, root: TreeNode, x: int, y: 
int) -> bool:";"";"2020-03-25 15:18:24"
7576;610;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} x
 * @param {number} y
 * @return {boolean}
 */
var isCousins = function(root, x, y) {
 
};";"";"2020-03-25 15:18:24"
7577;610;"PHP";"/**";"";"2020-03-25 15:18:24"
7578;610;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func isCousins(_ root: TreeNode?, _ x: Int, _ 
y: Int) -> Bool {
        
    }
}";"";"2020-03-25 15:18:24"
7579;610;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @param {Integer} x
# @param {Integer} y
# @return {Boolean}
def is_cousins(root, x, y)
 
end";"";"2020-03-25 15:18:24"
7580;610;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def isCousins(self, root, x, y):
        """"""
        :type root: TreeNode
        :type x: int
        :type y: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:24"
7581;611;"C#";"public class Solution {
    public int[] ProductExceptSelf(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:24"
7582;611;"Java";"class Solution {
    public int[] productExceptSelf(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:24"
7583;611;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* productExceptSelf(int* nums, int numsSize, 
int* returnSize){
 
}";"";"2020-03-25 15:18:24"
7584;611;"Rust";"impl Solution {
    pub fn product_except_self(nums: Vec<i32>) -> 
Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:24"
7585;611;"Scala";"object Solution {
    def productExceptSelf(nums: Array[Int]): Array
[Int] = {
 
    }
}";"";"2020-03-25 15:18:24"
7586;611;"Go";"func productExceptSelf(nums []int) []int {
 
}";"";"2020-03-25 15:18:24"
7587;611;"Kotlin";"class Solution {
    fun productExceptSelf(nums: IntArray): IntArray 
{
 
    }
}";"";"2020-03-25 15:18:24"
7588;611;"Python3";"class Solution:
    def productExceptSelf(self, nums: List[int]) -> 
List[int]:";"";"2020-03-25 15:18:24"
7589;611;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number[]}
 */
var productExceptSelf = function(nums) {
 
};";"";"2020-03-25 15:18:24"
7590;611;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer[]
     */
    function productExceptSelf($nums) {
        
    }
}";"";"2020-03-25 15:18:24"
7591;611;"Swift";"class Solution {
    func productExceptSelf(_ nums: [Int]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:24"
7592;611;"Ruby";"# @param {Integer[]} nums
# @return {Integer[]}
def product_except_self(nums)
 
end";"";"2020-03-25 15:18:24"
7593;611;"Python";"class Solution(object):
    def productExceptSelf(self, nums):
        """"""
        :type nums: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:24"
7594;612;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<IList<int>> LevelOrder(TreeNode 
root) {
 
    }
}";"";"2020-03-25 15:18:25"
7595;612;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode 
root) {
 
    }
}";"";"2020-03-25 15:18:25"
7596;612;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** levelOrder(struct TreeNode* root, int* 
returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:25"
7597;612;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn level_order(root: 
Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:25"
7598;612;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def levelOrder(root: TreeNode): List[List[Int]] 
= {
 
    }
}";"";"2020-03-25 15:18:25"
7599;612;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func levelOrder(root *TreeNode) [][]int {
 
}";"";"2020-03-25 15:18:25"
7600;612;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun levelOrder(root: TreeNode?): 
List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:25"
7601;612;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def levelOrder(self, root: TreeNode) -> List
[List[int]]:";"";"2020-03-25 15:18:25"
7602;612;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[][]}
 */
var levelOrder = function(root) {
 
};";"";"2020-03-25 15:18:25"
7603;612;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer[][]
     */
    function levelOrder($root) {
        
    }
}";"";"2020-03-25 15:18:25"
7604;612;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func levelOrder(_ root: TreeNode?) -> [[Int]] {
        
    }
}";"";"2020-03-25 15:18:25"
7605;612;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:25"
7606;612;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def levelOrder(self, root):
        """"""
        :type root: TreeNode
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:25"
7607;613;"C#";"public class Solution {
    public IList<int> CountSmaller(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:25"
7608;613;"Java";"class Solution {
    public List<Integer> countSmaller(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:25"
7609;613;"Rust";"impl Solution {
    pub fn count_smaller(nums: Vec<i32>) -> 
Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:25"
7610;613;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* countSmaller(int* nums, int numsSize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:25"
7611;613;"Scala";"object Solution {
    def countSmaller(nums: Array[Int]): List[Int] = 
{
 
    }
}";"";"2020-03-25 15:18:25"
7612;613;"Go";"func countSmaller(nums []int) []int {
 
}";"";"2020-03-25 15:18:25"
7613;613;"Kotlin";"class Solution {
    fun countSmaller(nums: IntArray): List<Int> {
 
    }
}";"";"2020-03-25 15:18:25"
7614;613;"Python3";"class Solution:
    def countSmaller(self, nums: List[int]) -> List
[int]:";"";"2020-03-25 15:18:25"
7615;613;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number[]}
 */
var countSmaller = function(nums) {
 
};";"";"2020-03-25 15:18:25"
7616;613;"PHP";"class Solution {";"";"2020-03-25 15:18:25"
7617;613;"Swift";"class Solution {
    func countSmaller(_ nums: [Int]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:25"
7618;613;"Ruby";"# @param {Integer[]} nums
# @return {Integer[]}
def count_smaller(nums)
 
end";"";"2020-03-25 15:18:25"
7619;613;"Python";"class Solution(object):
    def countSmaller(self, nums):
        """"""
        :type nums: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:25"
7620;614;"C#";"public class Solution {
    public int FindCircleNum(int[][] M) {
 
    }
}";"";"2020-03-25 15:18:25"
7621;614;"Java";"class Solution {
    public int findCircleNum(int[][] M) {
 
    }
}";"";"2020-03-25 15:18:25"
7622;614;"Rust";"impl Solution {
    pub fn find_circle_num(m: Vec<Vec<i32>>) -> i32 
{
        
    }
}";"";"2020-03-25 15:18:25"
7623;614;"C";"int findCircleNum(int** M, int MSize, int* MColSize)
{
 
}";"";"2020-03-25 15:18:25"
7624;614;"Scala";"object Solution {
    def findCircleNum(M: Array[Array[Int]]): Int = {
 
    }
}";"";"2020-03-25 15:18:25"
7625;614;"Go";"func findCircleNum(M [][]int) int {
 
}";"";"2020-03-25 15:18:25"
7626;614;"Kotlin";"class Solution {
    fun findCircleNum(M: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:25"
7627;614;"Python3";"class Solution:
    def findCircleNum(self, M: List[List[int]]) -> 
int:";"";"2020-03-25 15:18:25"
7628;614;"JavaScript";"/**
 * @param {number[][]} M
 * @return {number}
 */
var findCircleNum = function(M) {
 
};";"";"2020-03-25 15:18:25"
7629;614;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $M
     * @return Integer
     */
    function findCircleNum($M) {
        
    }
}";"";"2020-03-25 15:18:25"
7630;614;"Swift";"class Solution {
    func findCircleNum(_ M: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:25"
7631;614;"Ruby";"# @param {Integer[][]} m
# @return {Integer}
def find_circle_num(m)
 
end";"";"2020-03-25 15:18:25"
7632;614;"Python";"class Solution(object):
    def findCircleNum(self, M):
        """"""
        :type M: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:25"
7633;615;"C#";"public class Solution {
    public IList<string> WatchedVideosByFriends
(IList<IList<string>> watchedVideos, int[][] 
friends, int id, int level) {
 
    }
}";"";"2020-03-25 15:18:25"
7634;615;"Java";"class Solution {
    public List<String> watchedVideosByFriends
(List<List<String>> watchedVideos, int[][] friends, 
int id, int level) {
 
    }
}";"";"2020-03-25 15:18:25"
7635;615;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** watchedVideosByFriends(char *** 
watchedVideos, int watchedVideosSize, int* 
watchedVideosColSize, int** friends, int 
friendsSize, int* friendsColSize, int id, int level,
 int* returnSize){
 
}";"";"2020-03-25 15:18:25"
7636;615;"Rust";"impl Solution {
    pub fn watched_videos_by_friends
(watched_videos: Vec<Vec<String>>, friends: 
Vec<Vec<i32>>, id: i32, level: i32) -> Vec<String> {
 
    }
}";"";"2020-03-25 15:18:25"
7637;615;"Scala";"object Solution {
    def watchedVideosByFriends(watchedVideos: List
[List[String]], friends: Array[Array[Int]], id: Int,
 level: Int): List[String] = {
 
    }
}";"";"2020-03-25 15:18:25"
7638;615;"Go";"func watchedVideosByFriends(watchedVideos [][]
string, friends [][]int, id int, level int) []
string {
 
}";"";"2020-03-25 15:18:25"
7639;615;"Kotlin";"class Solution {
    fun watchedVideosByFriends(watchedVideos: 
List<List<String>>, friends: Array<IntArray>, id: 
Int, level: Int): List<String> {
 
    }
}";"";"2020-03-25 15:18:25"
7640;615;"Python3";"class Solution:
    def watchedVideosByFriends(self, watchedVideos: 
List[List[str]], friends: List[List[int]], id: int, 
level: int) -> List[str]:";"";"2020-03-25 15:18:25"
7641;615;"JavaScript";"/**
 * @param {string[][]} watchedVideos
 * @param {number[][]} friends
 * @param {number} id
 * @param {number} level
 * @return {string[]}
 */
var watchedVideosByFriends = function(watchedVideos,
 friends, id, level) {
 
};";"";"2020-03-25 15:18:25"
7642;615;"PHP";"class Solution {
 
    /**
     * @param String[][] $watchedVideos
     * @param Integer[][] $friends
     * @param Integer $id
     * @param Integer $level
     * @return String[]
     */
    function watchedVideosByFriends($watchedVideos, 
$friends, $id, $level) {
 
    }
}";"";"2020-03-25 15:18:25"
7643;615;"Swift";"class Solution {
    func watchedVideosByFriends(_ watchedVideos: [
[String]], _ friends: [[Int]], _ id: Int, _ level: 
Int) -> [String] {
 
    }
}";"";"2020-03-25 15:18:25"
7644;615;"Ruby";"# @param {String[][]} watched_videos";"";"2020-03-25 15:18:25"
7645;615;"Python";"class Solution(object):
    def watchedVideosByFriends(self, watchedVideos, 
friends, id, level):
        """"""
        :type watchedVideos: List[List[str]]
        :type friends: List[List[int]]
        :type id: int
        :type level: int
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:25"
7646;616;"C#";"public class Solution {
    public string Multiply(string num1, string num2)
 {
 
    }
}";"";"2020-03-25 15:18:25"
7647;616;"Java";"class Solution {
    public String multiply(String num1, String num2)
 {
 
    }
}";"";"2020-03-25 15:18:25"
7648;616;"Rust";"impl Solution {
    pub fn multiply(num1: String, num2: String) -> 
String {
        
    }
}";"";"2020-03-25 15:18:25"
7649;616;"C";"char * multiply(char * num1, char * num2){
 
}";"";"2020-03-25 15:18:25"
7650;616;"Scala";"object Solution {
    def multiply(num1: String, num2: String): 
String = {
 
    }
}";"";"2020-03-25 15:18:25"
7651;616;"Go";"func multiply(num1 string, num2 string) string {
 
}";"";"2020-03-25 15:18:25"
7652;616;"Kotlin";"class Solution {
    fun multiply(num1: String, num2: String): 
String {
 
    }
}";"";"2020-03-25 15:18:25"
7653;616;"Python3";"class Solution:
    def multiply(self, num1: str, num2: str) -> str:";"";"2020-03-25 15:18:25"
7654;616;"JavaScript";"/**
 * @param {string} num1
 * @param {string} num2
 * @return {string}
 */
var multiply = function(num1, num2) {
 
};";"";"2020-03-25 15:18:25"
7655;616;"PHP";"class Solution {";"";"2020-03-25 15:18:25"
7656;616;"Swift";"class Solution {
    func multiply(_ num1: String, _ num2: String) 
-> String {
        
    }
}";"";"2020-03-25 15:18:25"
7657;616;"Ruby";"# @param {String} num1
# @param {String} num2
# @return {String}
def multiply(num1, num2)
 
end";"";"2020-03-25 15:18:25"
7658;616;"Python";"class Solution(object):
    def multiply(self, num1, num2):
        """"""
        :type num1: str
        :type num2: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:25"
7659;617;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode RemoveElements(ListNode head, 
int val) {
 
    }
}";"";"2020-03-25 15:18:25"
7660;617;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode removeElements(ListNode head, 
int val) {
 
    }
}";"";"2020-03-25 15:18:25"
7661;617;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn remove_elements(head: 
Option<Box<ListNode>>, val: i32) -> 
Option<Box<ListNode>> {
 
    }
}";"";"2020-03-25 15:18:25"
7662;617;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
struct ListNode* removeElements(struct ListNode* 
head, int val){
 
}";"";"2020-03-25 15:18:25"
7663;617;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def removeElements(head: ListNode, `val`: Int): 
ListNode = {
 
    }
}";"";"2020-03-25 15:18:25"
7664;617;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func removeElements(head *ListNode, val int) 
*ListNode {
 
}";"";"2020-03-25 15:18:25"
7665;617;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun removeElements(head: ListNode?, `val`: Int)
: ListNode? {
 
    }
}";"";"2020-03-25 15:18:25"
7666;617;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def removeElements(self, head: ListNode, val: 
int) -> ListNode:";"";"2020-03-25 15:18:25"
7667;617;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @param {number} val
 * @return {ListNode}
 */
var removeElements = function(head, val) {
 
};";"";"2020-03-25 15:18:25"
7668;617;"PHP";"/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
class Solution {
 
    /**
     * @param ListNode $head
     * @param Integer $val
     * @return ListNode
     */
    function removeElements($head, $val) {
 
    }
}";"";"2020-03-25 15:18:25"
7669;617;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func removeElements(_ head: ListNode?, _ val: 
Int) -> ListNode? {
 
    }
}";"";"2020-03-25 15:18:25"
7670;617;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# @param {ListNode} head
# @param {Integer} val
# @return {ListNode}
def remove_elements(head, val)
 
end";"";"2020-03-25 15:18:25"
7671;617;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def removeElements(self, head, val):
        """"""
        :type head: ListNode
        :type val: int
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:25"
7672;618;"C#";"public class Solution {
    public int MinDifficulty(int[] jobDifficulty, 
int d) {
        
    }
}";"";"2020-03-25 15:18:25"
7673;618;"Java";"class Solution {
    public int minDifficulty(int[] jobDifficulty, 
int d) {
 
    }
}";"";"2020-03-25 15:18:25"
7674;618;"Rust";"impl Solution {
    pub fn min_difficulty(job_difficulty: Vec<i32>, 
d: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:25"
7675;618;"C";"int minDifficulty(int* jobDifficulty, int 
jobDifficultySize, int d){
 
}";"";"2020-03-25 15:18:25"
7676;618;"Scala";"object Solution {
    def minDifficulty(jobDifficulty: Array[Int], d: 
Int): Int = {
 
    }
}";"";"2020-03-25 15:18:25"
7677;618;"Go";"func minDifficulty(jobDifficulty []int, d int) int {
 
}";"";"2020-03-25 15:18:25"
7678;618;"Kotlin";"class Solution {
    fun minDifficulty(jobDifficulty: IntArray, d: 
Int): Int {
 
    }
}";"";"2020-03-25 15:18:25"
7679;618;"Python3";"class Solution:
    def minDifficulty(self, jobDifficulty: List[int]
, d: int) -> int:";"";"2020-03-25 15:18:25"
7680;618;"JavaScript";"/**
 * @param {number[]} jobDifficulty
 * @param {number} d
 * @return {number}
 */
var minDifficulty = function(jobDifficulty, d) {
    
};";"";"2020-03-25 15:18:25"
7681;618;"PHP";"class Solution {
 
    /**
     * @param Integer[] $jobDifficulty
     * @param Integer $d
     * @return Integer
     */
    function minDifficulty($jobDifficulty, $d) {
 
    }
}";"";"2020-03-25 15:18:25"
7682;618;"Swift";"class Solution {
    func minDifficulty(_ jobDifficulty: [Int], _ d: 
Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:25"
7683;618;"Ruby";"# @param {Integer[]} job_difficulty
# @param {Integer} d
# @return {Integer}
def min_difficulty(job_difficulty, d)
    
end";"";"2020-03-25 15:18:25"
7684;618;"Python";"class Solution(object):
    def minDifficulty(self, jobDifficulty, d):
        """"""
        :type jobDifficulty: List[int]
        :type d: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:25"
7685;619;"C#";"public class Solution {
    public int NthSuperUglyNumber(int n, int[] 
primes) {
 
    }
}";"";"2020-03-25 15:18:25"
7686;619;"Java";"class Solution {
    public int nthSuperUglyNumber(int n, int[] 
primes) {
 
    }
}";"";"2020-03-25 15:18:25"
7687;619;"C";"int nthSuperUglyNumber(int n, int* primes, int 
primesSize){
 
}";"";"2020-03-25 15:18:25"
7688;619;"Rust";"impl Solution {
    pub fn nth_super_ugly_number(n: i32, primes: 
Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:25"
7689;619;"Scala";"object Solution {
    def nthSuperUglyNumber(n: Int, primes: Array
[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:25"
7690;619;"Go";"func nthSuperUglyNumber(n int, primes []int) int {
 
}";"";"2020-03-25 15:18:25"
7691;619;"Kotlin";"class Solution {
    fun nthSuperUglyNumber(n: Int, primes: IntArray)
: Int {
 
    }
}";"";"2020-03-25 15:18:25"
7692;619;"Python3";"class Solution:
    def nthSuperUglyNumber(self, n: int, primes: 
List[int]) -> int:";"";"2020-03-25 15:18:25"
7693;619;"JavaScript";"/**
 * @param {number} n
 * @param {number[]} primes
 * @return {number}
 */
var nthSuperUglyNumber = function(n, primes) {
 
};";"";"2020-03-25 15:18:25"
7694;619;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @param Integer[] $primes
     * @return Integer
     */
    function nthSuperUglyNumber($n, $primes) {
        
    }
}";"";"2020-03-25 15:18:25"
7695;619;"Swift";"class Solution {
    func nthSuperUglyNumber(_ n: Int, _ primes: 
[Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:25"
7696;619;"Ruby";"# @param {Integer} n
# @param {Integer[]} primes
# @return {Integer}
def nth_super_ugly_number(n, primes)
 
end";"";"2020-03-25 15:18:25"
7697;619;"Python";"class Solution(object):
    def nthSuperUglyNumber(self, n, primes):
        """"""
        :type n: int
        :type primes: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:25"
7698;620;"C#";"public class Solution {
    public int CountPrimeSetBits(int L, int R) {
 
    }
}";"";"2020-03-25 15:18:25"
7699;620;"Java";"class Solution {
    public int countPrimeSetBits(int L, int R) {
 
    }
}";"";"2020-03-25 15:18:25"
7700;620;"Rust";"impl Solution {
    pub fn count_prime_set_bits(l: i32, r: i32) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:25"
7701;620;"C";"int countPrimeSetBits(int L, int R){
 
}";"";"2020-03-25 15:18:25"
7702;620;"Scala";"object Solution {
    def countPrimeSetBits(L: Int, R: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:25"
7703;620;"Go";"func countPrimeSetBits(L int, R int) int {
 
}";"";"2020-03-25 15:18:25"
7704;620;"Kotlin";"class Solution {
    fun countPrimeSetBits(L: Int, R: Int): Int {
 
    }
}";"";"2020-03-25 15:18:25"
7705;620;"Python3";"class Solution:
    def countPrimeSetBits(self, L: int, R: int) -> 
int:";"";"2020-03-25 15:18:25"
7706;620;"JavaScript";"/**
 * @param {number} L
 * @param {number} R
 * @return {number}
 */
var countPrimeSetBits = function(L, R) {
 
};";"";"2020-03-25 15:18:25"
7707;620;"PHP";"class Solution {
 
    /**
     * @param Integer $L
     * @param Integer $R
     * @return Integer
     */
    function countPrimeSetBits($L, $R) {
        
    }
}";"";"2020-03-25 15:18:25"
7708;620;"Swift";"class Solution {
    func countPrimeSetBits(_ L: Int, _ R: Int) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:25"
7709;620;"Ruby";"# @param {Integer} l
# @param {Integer} r
# @return {Integer}
def count_prime_set_bits(l, r)
 
end";"";"2020-03-25 15:18:25"
7710;620;"Python";"class Solution(object):
    def countPrimeSetBits(self, L, R):
        """"""
        :type L: int
        :type R: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:25"
7711;621;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int[] FindMode(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:25"
7712;621;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int[] findMode(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:25"
7713;621;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* findMode(struct TreeNode* root, int* 
returnSize){
 
}";"";"2020-03-25 15:18:25"
7714;621;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn find_mode(root: 
Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:25"
7715;621;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def findMode(root: TreeNode): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:25"
7716;621;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func findMode(root *TreeNode) []int {
 
}";"";"2020-03-25 15:18:25"
7717;621;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun findMode(root: TreeNode?): IntArray {
 
    }
}";"";"2020-03-25 15:18:25"
7718;621;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def findMode(self, root: TreeNode) -> List[int]:";"";"2020-03-25 15:18:25"
7719;621;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[]}
 */
var findMode = function(root) {
 
};";"";"2020-03-25 15:18:25"
7720;621;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer[]
     */
    function findMode($root) {
        
    }
}";"";"2020-03-25 15:18:25"
7721;621;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func findMode(_ root: TreeNode?) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:25"
7722;621;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer[]}
def find_mode(root)
 
end";"";"2020-03-25 15:18:25"
7723;621;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def findMode(self, root):
        """"""
        :type root: TreeNode
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:25"
7724;622;"Rust";"impl Solution {
    pub fn max_area_of_island(grid: Vec<Vec<i32>>) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:25"
7725;622;"Scala";"object Solution {
    def maxAreaOfIsland(grid: Array[Array[Int]]): 
Int = {
 
    }
}";"";"2020-03-25 15:18:25"
7726;622;"Go";"func maxAreaOfIsland(grid [][]int) int {
 
}";"";"2020-03-25 15:18:25"
7727;622;"PHP";"class Solution {";"";"2020-03-25 15:18:25"
7728;622;"Swift";"class Solution {
    func maxAreaOfIsland(_ grid: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:25"
7729;622;"Ruby";"# @param {Integer[][]} grid
# @return {Integer}
def max_area_of_island(grid)
 
end";"";"2020-03-25 15:18:25"
7730;622;"Kotlin";"class Solution {
    fun maxAreaOfIsland(grid: Array<IntArray>): Int 
{
 
    }
}";"";"2020-03-25 15:18:25"
7731;623;"C#";"public class Solution {
    public bool IsPalindrome(int x) {
 
    }
}";"";"2020-03-25 15:18:25"
7732;623;"Java";"class Solution {
    public boolean isPalindrome(int x) {
 
    }
}";"";"2020-03-25 15:18:25"
7733;623;"C";"bool isPalindrome(int x){
 
}";"";"2020-03-25 15:18:25"
7734;623;"Rust";"impl Solution {
    pub fn is_palindrome(x: i32) -> bool {
        
    }
}";"";"2020-03-25 15:18:25"
7735;623;"Scala";"object Solution {
    def isPalindrome(x: Int): Boolean = {
 
    }
}";"";"2020-03-25 15:18:25"
7736;623;"JavaScript";"/**";"";"2020-03-25 15:18:25"
7737;623;"Python3";"class Solution:
    def isPalindrome(self, x: int) -> bool:";"";"2020-03-25 15:18:25"
7738;623;"Go";"func isPalindrome(x int) bool {
 
}";"";"2020-03-25 15:18:25"
7739;623;"Swift";"class Solution {
    func isPalindrome(_ x: Int) -> Bool {
        
    }
}";"";"2020-03-25 15:18:25"
7740;623;"Ruby";"# @param {Integer} x
# @return {Boolean}
def is_palindrome(x)
 
end";"";"2020-03-25 15:18:25"
7741;623;"Python";"class Solution(object):
    def isPalindrome(self, x):
        """"""
        :type x: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:25"
7742;623;"Kotlin";"class Solution {
    fun isPalindrome(x: Int): Boolean {
 
    }
}";"";"2020-03-25 15:18:25"
7743;624;"C#";"public class Solution {
    public double MincostToHireWorkers(int[] 
quality, int[] wage, int K) {
 
    }
}";"";"2020-03-25 15:18:25"
7744;624;"Java";"class Solution {
    public double mincostToHireWorkers(int[] 
quality, int[] wage, int K) {
 
    }
}";"";"2020-03-25 15:18:25"
7745;624;"Rust";"impl Solution {
    pub fn mincost_to_hire_workers(quality: 
Vec<i32>, wage: Vec<i32>, k: i32) -> f64 {
        
    }
}";"";"2020-03-25 15:18:25"
7746;624;"C";"double mincostToHireWorkers(int* quality, int 
qualitySize, int* wage, int wageSize, int K){
 
}";"";"2020-03-25 15:18:25"
7747;624;"Scala";"object Solution {
    def mincostToHireWorkers(quality: Array[Int], 
wage: Array[Int], K: Int): Double = {
 
    }
}";"";"2020-03-25 15:18:25"
7748;624;"Go";"func mincostToHireWorkers(quality []int, wage []int,
 K int) float64 {
 
}";"";"2020-03-25 15:18:25"
7749;624;"Kotlin";"class Solution {
    fun mincostToHireWorkers(quality: IntArray, 
wage: IntArray, K: Int): Double {
 
    }
}";"";"2020-03-25 15:18:25"
7750;624;"Python3";"class Solution:
    def mincostToHireWorkers(self, quality: List
[int], wage: List[int], K: int) -> float:";"";"2020-03-25 15:18:25"
7751;624;"JavaScript";"/**
 * @param {number[]} quality
 * @param {number[]} wage
 * @param {number} K
 * @return {number}
 */
var mincostToHireWorkers = function(quality, wage, 
K) {
 
};";"";"2020-03-25 15:18:25"
7752;624;"PHP";"class Solution {";"";"2020-03-25 15:18:25"
7753;624;"Swift";"class Solution {
    func mincostToHireWorkers(_ quality: [Int], _ 
wage: [Int], _ K: Int) -> Double {
        
    }
}";"";"2020-03-25 15:18:25"
7754;624;"Ruby";"# @param {Integer[]} quality
# @param {Integer[]} wage
# @param {Integer} k
# @return {Float}
def mincost_to_hire_workers(quality, wage, k)
 
end";"";"2020-03-25 15:18:25"
7755;624;"Python";"class Solution(object):
    def mincostToHireWorkers(self, quality, wage, K)
:
        """"""
        :type quality: List[int]
        :type wage: List[int]
        :type K: int
        :rtype: float
        """"""";"";"2020-03-25 15:18:25"
7756;625;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int FindTilt(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:25"
7757;625;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int findTilt(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:25"
7758;625;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn find_tilt(root: 
Option<Rc<RefCell<TreeNode>>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:25"
7759;625;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int findTilt(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:25"
7760;625;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def findTilt(root: TreeNode): Int = {
 
    }
}";"";"2020-03-25 15:18:25"
7761;625;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func findTilt(root *TreeNode) int {
 
}";"";"2020-03-25 15:18:25"
7762;625;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun findTilt(root: TreeNode?): Int {
 
    }
}";"";"2020-03-25 15:18:25"
7763;625;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def findTilt(self, root: TreeNode) -> int:";"";"2020-03-25 15:18:25"
7764;625;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var findTilt = function(root) {
 
};";"";"2020-03-25 15:18:25"
7765;625;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer
     */
    function findTilt($root) {
        
    }
}";"";"2020-03-25 15:18:25"
7766;625;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func findTilt(_ root: TreeNode?) -> Int {
        
    }
}";"";"2020-03-25 15:18:25"
7767;625;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer}
def find_tilt(root)
 
end";"";"2020-03-25 15:18:25"
7768;625;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def findTilt(self, root):
        """"""
        :type root: TreeNode
        :rtype: int
        """"""";"";"2020-03-25 15:18:25"
7769;626;"C#";"public class Solution {
    public int FourSumCount(int[] A, int[] B, int[] 
C, int[] D) {
 
    }
}";"";"2020-03-25 15:18:25"
7770;626;"Java";"class Solution {
    public int fourSumCount(int[] A, int[] B, int[] 
C, int[] D) {
 
    }
}";"";"2020-03-25 15:18:25"
7771;626;"C";"int fourSumCount(int* A, int ASize, int* B, int 
BSize, int* C, int CSize, int* D, int DSize){
 
}";"";"2020-03-25 15:18:25"
7772;626;"Rust";"impl Solution {
    pub fn four_sum_count(a: Vec<i32>, b: Vec<i32>, 
c: Vec<i32>, d: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:25"
7773;626;"Scala";"object Solution {
    def fourSumCount(A: Array[Int], B: Array[Int], 
C: Array[Int], D: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:25"
7774;626;"Go";"func fourSumCount(A []int, B []int, C []int, D []
int) int {
 
}";"";"2020-03-25 15:18:25"
7775;626;"Kotlin";"class Solution {
    fun fourSumCount(A: IntArray, B: IntArray, C: 
IntArray, D: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:25"
7776;626;"Python3";"class Solution:
    def fourSumCount(self, A: List[int], B: List
[int], C: List[int], D: List[int]) -> int:";"";"2020-03-25 15:18:25"
7777;626;"JavaScript";"/**
 * @param {number[]} A
 * @param {number[]} B
 * @param {number[]} C
 * @param {number[]} D
 * @return {number}
 */
var fourSumCount = function(A, B, C, D) {
 
};";"";"2020-03-25 15:18:25"
7778;626;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @param Integer[] $B
     * @param Integer[] $C
     * @param Integer[] $D
     * @return Integer
     */
    function fourSumCount($A, $B, $C, $D) {
        
    }
}";"";"2020-03-25 15:18:25"
7779;626;"Swift";"class Solution {
    func fourSumCount(_ A: [Int], _ B: [Int], _ C: 
[Int], _ D: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:25"
7780;626;"Ruby";"# @param {Integer[]} a
# @param {Integer[]} b
# @param {Integer[]} c
# @param {Integer[]} d
# @return {Integer}
def four_sum_count(a, b, c, d)
 
end";"";"2020-03-25 15:18:25"
7781;626;"Python";"class Solution(object):
    def fourSumCount(self, A, B, C, D):
        """"""
        :type A: List[int]
        :type B: List[int]
        :type C: List[int]
        :type D: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:25"
7782;627;"C#";"public class Solution {
    public int Calculate(string s) {
 
    }
}";"";"2020-03-25 15:18:25"
7783;627;"Java";"class Solution {
    public int calculate(String s) {
 
    }
}";"";"2020-03-25 15:18:25"
7784;627;"C";"int calculate(char * s){
 
}";"";"2020-03-25 15:18:25"
7785;627;"Rust";"impl Solution {
    pub fn calculate(s: String) -> i32 {
 
    }
}";"";"2020-03-25 15:18:25"
7786;627;"Scala";"object Solution {
    def calculate(s: String): Int = {
 
    }
}";"";"2020-03-25 15:18:25"
7787;627;"Go";"func calculate(s string) int {
 
}";"";"2020-03-25 15:18:25"
7788;627;"Kotlin";"class Solution {
    fun calculate(s: String): Int {
 
    }
}";"";"2020-03-25 15:18:25"
7789;627;"Python3";"class Solution:
    def calculate(self, s: str) -> int:";"";"2020-03-25 15:18:25"
7790;627;"JavaScript";"/**
 * @param {string} s
 * @return {number}
 */
var calculate = function(s) {
 
};";"";"2020-03-25 15:18:25"
7791;627;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return Integer
     */
    function calculate($s) {
 
    }
}";"";"2020-03-25 15:18:25"
7792;627;"Swift";"class Solution {
    func calculate(_ s: String) -> Int {
 
    }
}";"";"2020-03-25 15:18:25"
7793;627;"Ruby";"# @param {String} s
# @return {Integer}
def calculate(s)
 
end";"";"2020-03-25 15:18:25"
7794;627;"Python";"class Solution(object):
    def calculate(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:25"
7795;628;"C#";"public class Solution {
    public int FindLongestChain(int[][] pairs) {
 
    }
}";"";"2020-03-25 15:18:25"
7796;628;"Java";"class Solution {
    public int findLongestChain(int[][] pairs) {
 
    }
}";"";"2020-03-25 15:18:25"
7797;628;"Rust";"impl Solution {
    pub fn find_longest_chain(pairs: Vec<Vec<i32>>) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:25"
7798;628;"C";"int findLongestChain(int** pairs, int pairsSize, 
int* pairsColSize){
 
}";"";"2020-03-25 15:18:25"
7799;628;"Scala";"object Solution {
    def findLongestChain(pairs: Array[Array[Int]]): 
Int = {
 
    }
}";"";"2020-03-25 15:18:25"
7800;628;"Go";"func findLongestChain(pairs [][]int) int {
 
}";"";"2020-03-25 15:18:25"
7801;628;"Kotlin";"class Solution {
    fun findLongestChain(pairs: Array<IntArray>): 
Int {
 
    }
}";"";"2020-03-25 15:18:25"
7802;628;"Python3";"class Solution:
    def findLongestChain(self, pairs: List[List[int]
]) -> int:";"";"2020-03-25 15:18:25"
7803;628;"JavaScript";"/**
 * @param {number[][]} pairs
 * @return {number}
 */
var findLongestChain = function(pairs) {
 
};";"";"2020-03-25 15:18:25"
7804;628;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $pairs
     * @return Integer
     */
    function findLongestChain($pairs) {
        
    }
}";"";"2020-03-25 15:18:25"
7805;628;"Swift";"class Solution {
    func findLongestChain(_ pairs: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:25"
7806;628;"Ruby";"# @param {Integer[][]} pairs
# @return {Integer}
def find_longest_chain(pairs)
 
end";"";"2020-03-25 15:18:25"
7807;628;"Python";"class Solution(object):
    def findLongestChain(self, pairs):
        """"""
        :type pairs: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:25"
7808;629;"C#";"public class Solution {
    public int MaxPerformance(int n, int[] speed, 
int[] efficiency, int k) {
 
    }
}";"";"2020-03-25 15:18:25"
7809;629;"Java";"class Solution {
    public int maxPerformance(int n, int[] speed, 
int[] efficiency, int k) {
 
    }
}";"";"2020-03-25 15:18:25"
7810;629;"Rust";"impl Solution {
    pub fn max_performance(n: i32, speed: Vec<i32>, 
efficiency: Vec<i32>, k: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:25"
7811;629;"C";"int maxPerformance(int n, int* speed, int speedSize,
 int* efficiency, int efficiencySize, int k){
 
}";"";"2020-03-25 15:18:25"
7812;629;"Scala";"object Solution {
    def maxPerformance(n: Int, speed: Array[Int], 
efficiency: Array[Int], k: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:25"
7813;629;"Go";"func maxPerformance(n int, speed []int, efficiency 
[]int, k int) int {
 
}";"";"2020-03-25 15:18:25"
7814;629;"Kotlin";"class Solution {
    fun maxPerformance(n: Int, speed: IntArray, 
efficiency: IntArray, k: Int): Int {
 
    }
}";"";"2020-03-25 15:18:25"
7815;629;"Python3";"class Solution:
    def maxPerformance(self, n: int, speed: List
[int], efficiency: List[int], k: int) -> int:";"";"2020-03-25 15:18:25"
7816;629;"JavaScript";"/**
 * @param {number} n
 * @param {number[]} speed
 * @param {number[]} efficiency
 * @param {number} k
 * @return {number}
 */
var maxPerformance = function(n, speed, efficiency, 
k) {
 
};";"";"2020-03-25 15:18:25"
7817;629;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @param Integer[] $speed
     * @param Integer[] $efficiency
     * @param Integer $k
     * @return Integer
     */
    function maxPerformance($n, $speed, $efficiency,
 $k) {
 
    }
}";"";"2020-03-25 15:18:25"
7818;629;"Swift";"class Solution {
    func maxPerformance(_ n: Int, _ speed: [Int], _ 
efficiency: [Int], _ k: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:25"
7819;629;"Ruby";"# @param {Integer} n
# @param {Integer[]} speed
# @param {Integer[]} efficiency
# @param {Integer} k
# @return {Integer}
def max_performance(n, speed, efficiency, k)
 
end";"";"2020-03-25 15:18:25"
7820;629;"Python";"class Solution(object):
    def maxPerformance(self, n, speed, efficiency, 
k):
        """"""
        :type n: int
        :type speed: List[int]
        :type efficiency: List[int]
        :type k: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:25"
7821;630;"C#";"public class Solution {
    public string RemoveDuplicateLetters(string s) {
 
    }
}";"";"2020-03-25 15:18:25"
7822;630;"Java";"class Solution {
    public String removeDuplicateLetters(String s) {
 
    }
}";"";"2020-03-25 15:18:25"
7823;630;"C";"char * removeDuplicateLetters(char * s){
 
}";"";"2020-03-25 15:18:25"
7824;630;"Rust";"impl Solution {
    pub fn remove_duplicate_letters(s: String) -> 
String {
        
    }
}";"";"2020-03-25 15:18:25"
7825;630;"Scala";"object Solution {
    def removeDuplicateLetters(s: String): String = 
{
 
    }
}";"";"2020-03-25 15:18:25"
7826;630;"Go";"func removeDuplicateLetters(s string) string {
 
}";"";"2020-03-25 15:18:25"
7827;630;"Kotlin";"class Solution {
    fun removeDuplicateLetters(s: String): String {
 
    }
}";"";"2020-03-25 15:18:25"
7828;630;"Python3";"class Solution:
    def removeDuplicateLetters(self, s: str) -> str:";"";"2020-03-25 15:18:25"
7829;630;"JavaScript";"/**
 * @param {string} s
 * @return {string}
 */
var removeDuplicateLetters = function(s) {
 
};";"";"2020-03-25 15:18:25"
7830;630;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return String
     */
    function removeDuplicateLetters($s) {
        
    }
}";"";"2020-03-25 15:18:25"
7831;630;"Swift";"class Solution {
    func removeDuplicateLetters(_ s: String) -> 
String {
        
    }
}";"";"2020-03-25 15:18:25"
7832;630;"Ruby";"# @param {String} s
# @return {String}
def remove_duplicate_letters(s)
 
end";"";"2020-03-25 15:18:25"
7833;630;"Python";"class Solution(object):
    def removeDuplicateLetters(self, s):
        """"""
        :type s: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:25"
7834;631;"C#";"public class Solution {
    public int Add(int a, int b) {
 
    }
}";"";"2020-03-25 15:18:25"
7835;631;"Java";"class Solution {
    public int add(int a, int b) {
 
    }
}";"";"2020-03-25 15:18:25"
7836;631;"Rust";"impl Solution {
    pub fn add(a: i32, b: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:25"
7837;631;"C";"int add(int a, int b){
 
}";"";"2020-03-25 15:18:25"
7838;631;"Scala";"object Solution {
    def add(a: Int, b: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:25"
7839;631;"Go";"func add(a int, b int) int {
 
}";"";"2020-03-25 15:18:25"
7840;631;"Kotlin";"class Solution {
    fun add(a: Int, b: Int): Int {
 
    }
}";"";"2020-03-25 15:18:25"
7841;631;"Python3";"class Solution:
    def add(self, a: int, b: int) -> int:";"";"2020-03-25 15:18:25"
7842;631;"JavaScript";"/**
 * @param {number} a
 * @param {number} b
 * @return {number}
 */
var add = function(a, b) {
 
};";"";"2020-03-25 15:18:25"
7843;631;"PHP";"class Solution {";"";"2020-03-25 15:18:25"
7844;631;"Swift";"class Solution {
    func add(_ a: Int, _ b: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:25"
7845;631;"Ruby";"# @param {Integer} a
# @param {Integer} b
# @return {Integer}
def add(a, b)
 
end";"";"2020-03-25 15:18:25"
7846;631;"Python";"class Solution(object):
    def add(self, a, b):
        """"""
        :type a: int
        :type b: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:25"
7847;632;"C#";"/*
// Definition for a Node.
public class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;
 
    public Node() {}
 
    public Node(int _val) {
        val = _val;
    }
 
    public Node(int _val, Node _left, Node _right, 
Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
}
*/
public class Solution {
    public Node Connect(Node root) {
        ";"";"2020-03-25 15:18:26"
7848;632;"Java";"/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;
 
    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }
 
    public Node(int _val, Node _left, Node _right, 
Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/
class Solution {
    public Node connect(Node root) {
        ";"";"2020-03-25 15:18:26"
7849;632;"C++";"/*";"";"2020-03-25 15:18:26"
7850;632;"Python3";"""""""
# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = 
None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
""""""
class Solution:
    def connect(self, root: 'Node') -> 'Node':";"";"2020-03-25 15:18:26"
7851;632;"JavaScript";"/**
 * // Definition for a Node.
 * function Node(val, left, right, next) {
 *    this.val = val === undefined ? null : val;
 *    this.left = left === undefined ? null : left;
 *    this.right = right === undefined ? null : 
right;
 *    this.next = next === undefined ? null : next;
 * };
 */
/**
 * @param {Node} root
 * @return {Node}
 */
var connect = function(root) {
    
};";"";"2020-03-25 15:18:26"
7852;632;"Go";"/**
 * Definition for a Node.
 * type Node struct {
 *     Val int
 *     Left *Node
 *     Right *Node
 *     Next *Node
 * }
 */
 
func connect(root *Node) *Node {
    
}";"";"2020-03-25 15:18:26"
7853;632;"Swift";"/**
 * Definition for a Node.
 * public class Node {
 *     public var val: Int
 *     public var left: Node?
 *     public var right: Node?
 *     public var next: Node?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *         self.next = nil
 *     }
 * }
 */
 
class Solution {
    func connect(_ root: Node?) -> Node? {
        
    }
}";"";"2020-03-25 15:18:26"
7854;632;"Python";"""""""
# Definition for a Node.
class Node(object):
    def __init__(self, val=0, left=None, right=None,
 next=None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
""""""
class Solution(object):
    def connect(self, root):
        """"""
        :type root: Node
        :rtype: Node
        """"""";"";"2020-03-25 15:18:26"
7855;633;"C#";"public class Solution {
    public IList<string> ComputeSimilarities(int[][]
 docs) {
 
    }
}";"";"2020-03-25 15:18:26"
7856;633;"Java";"class Solution {
    public List<String> computeSimilarities(int[][] 
docs) {
 
    }
}";"";"2020-03-25 15:18:26"
7857;633;"Rust";"impl Solution {
    pub fn compute_similarities(docs: Vec<Vec<i32>>)
 -> Vec<String> {
 
    }
}";"";"2020-03-25 15:18:26"
7858;633;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char** computeSimilarities(int** docs, int docsSize,
 int* docsColSize, int* returnSize){
 
}";"";"2020-03-25 15:18:26"
7859;633;"Scala";"object Solution {
    def computeSimilarities(docs: Array[Array[Int]])
: List[String] = {
 
    }
}";"";"2020-03-25 15:18:26"
7860;633;"Go";"func computeSimilarities(docs [][]int) []string {
 
}";"";"2020-03-25 15:18:26"
7861;633;"Kotlin";"class Solution {
    fun computeSimilarities(docs: Array<IntArray>): 
List<String> {
 
    }
}";"";"2020-03-25 15:18:26"
7862;633;"Python3";"class Solution:
    def computeSimilarities(self, docs: List[List
[int]]) -> List[str]:";"";"2020-03-25 15:18:26"
7863;633;"JavaScript";"/**
 * @param {number[][]} docs
 * @return {string[]}
 */
var computeSimilarities = function(docs) {
 
};";"";"2020-03-25 15:18:26"
7864;633;"PHP";"class Solution {";"";"2020-03-25 15:18:26"
7865;633;"Swift";"class Solution {
    func computeSimilarities(_ docs: [[Int]]) -> 
[String] {
 
    }
}";"";"2020-03-25 15:18:26"
7866;633;"Ruby";"# @param {Integer[][]} docs
# @return {String[]}
def compute_similarities(docs)
 
end";"";"2020-03-25 15:18:26"
7867;633;"Python";"class Solution(object):
    def computeSimilarities(self, docs):
        """"""
        :type docs: List[List[int]]
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:26"
7868;634;"C#";"public class Solution {
    public int CountTriplets(int[] A) {
 
    }
}";"";"2020-03-25 15:18:26"
7869;634;"Java";"class Solution {
    public int countTriplets(int[] A) {
 
    }
}";"";"2020-03-25 15:18:26"
7870;634;"C";"int countTriplets(int* A, int ASize){
 
}";"";"2020-03-25 15:18:26"
7871;634;"Rust";"impl Solution {
    pub fn count_triplets(a: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:26"
7872;634;"Scala";"object Solution {
    def countTriplets(A: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:26"
7873;634;"Go";"func countTriplets(A []int) int {
 
}";"";"2020-03-25 15:18:26"
7874;634;"Kotlin";"class Solution {
    fun countTriplets(A: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:26"
7875;634;"Python3";"class Solution:
    def countTriplets(self, A: List[int]) -> int:";"";"2020-03-25 15:18:26"
7876;634;"JavaScript";"/**
 * @param {number[]} A
 * @return {number}
 */
var countTriplets = function(A) {
 
};";"";"2020-03-25 15:18:26"
7877;634;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @return Integer
     */
    function countTriplets($A) {
        
    }
}";"";"2020-03-25 15:18:26"
7878;634;"Swift";"class Solution {
    func countTriplets(_ A: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:26"
7879;634;"Ruby";"# @param {Integer[]} a";"";"2020-03-25 15:18:26"
7880;634;"Python";"class Solution(object):
    def countTriplets(self, A):
        """"""
        :type A: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:26"
7881;635;"C#";"public class Solution {
    public IList<IList<int>> QueensAttacktheKing(int
[][] queens, int[] king) {
 
    }
}";"";"2020-03-25 15:18:26"
7882;635;"Java";"class Solution {
    public List<List<Integer>> queensAttacktheKing
(int[][] queens, int[] king) {
 
    }
}";"";"2020-03-25 15:18:26"
7883;635;"Rust";"impl Solution {
    pub fn queens_attackthe_king(queens: 
Vec<Vec<i32>>, king: Vec<i32>) -> Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:26"
7884;635;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** queensAttacktheKing(int** queens, int 
queensSize, int* queensColSize, int* king, int 
kingSize, int* returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:26"
7885;635;"Scala";"object Solution {
    def queensAttacktheKing(queens: Array[Array[Int]
], king: Array[Int]): List[List[Int]] = {
 
    }
}";"";"2020-03-25 15:18:26"
7886;635;"Go";"func queensAttacktheKing(queens [][]int, king []int)
 [][]int {
 
}";"";"2020-03-25 15:18:26"
7887;635;"Kotlin";"class Solution {
    fun queensAttacktheKing(queens: Array<IntArray>,
 king: IntArray): List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:26"
7888;635;"Python3";"class Solution:
    def queensAttacktheKing(self, queens: List[List
[int]], king: List[int]) -> List[List[int]]:";"";"2020-03-25 15:18:26"
7889;635;"JavaScript";"/**
 * @param {number[][]} queens
 * @param {number[]} king
 * @return {number[][]}
 */
var queensAttacktheKing = function(queens, king) {
 
};";"";"2020-03-25 15:18:26"
7890;635;"PHP";"class Solution {";"";"2020-03-25 15:18:26"
7891;635;"Swift";"class Solution {
    func queensAttacktheKing(_ queens: [[Int]], _ 
king: [Int]) -> [[Int]] {
 
    }
}";"";"2020-03-25 15:18:26"
7892;635;"Ruby";"# @param {Integer[][]} queens
# @param {Integer[]} king
# @return {Integer[][]}
def queens_attackthe_king(queens, king)
 
end";"";"2020-03-25 15:18:26"
7893;635;"Python";"class Solution(object):
    def queensAttacktheKing(self, queens, king):
        """"""
        :type queens: List[List[int]]
        :type king: List[int]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:26"
7894;636;"C#";"public class Solution {
    public int MaxProfit(int[] prices) {
 
    }
}";"";"2020-03-25 15:18:26"
7895;636;"Java";"class Solution {
    public int maxProfit(int[] prices) {
 
    }
}";"";"2020-03-25 15:18:26"
7896;636;"Rust";"impl Solution {
    pub fn max_profit(prices: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:26"
7897;636;"C";"int maxProfit(int* prices, int pricesSize){
 
}";"";"2020-03-25 15:18:26"
7898;636;"Scala";"object Solution {
    def maxProfit(prices: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:26"
7899;636;"Go";"func maxProfit(prices []int) int {
 
}";"";"2020-03-25 15:18:26"
7900;636;"Kotlin";"class Solution {
    fun maxProfit(prices: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:26"
7901;636;"Python3";"class Solution:
    def maxProfit(self, prices: List[int]) -> int:";"";"2020-03-25 15:18:26"
7902;636;"JavaScript";"/**
 * @param {number[]} prices
 * @return {number}
 */
var maxProfit = function(prices) {
 
};";"";"2020-03-25 15:18:26"
7903;636;"PHP";"class Solution {";"";"2020-03-25 15:18:26"
7904;636;"Swift";"class Solution {
    func maxProfit(_ prices: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:26"
7905;636;"Ruby";"# @param {Integer[]} prices
# @return {Integer}
def max_profit(prices)
 
end";"";"2020-03-25 15:18:26"
7906;636;"Python";"class Solution(object):
    def maxProfit(self, prices):
        """"""
        :type prices: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:26"
7907;637;"C#";"/**
 * // This is the Master's API interface.
 * // You should not implement it, or speculate 
about its implementation
 * class Master {
 *     public int Guess(string word);
 * }
 */
class Solution {
    public void FindSecretWord(string[] wordlist, 
Master master) {
        
    }
}";"";"2020-03-25 15:18:26"
7908;637;"Java";"/**
 * // This is the Master's API interface.
 * // You should not implement it, or speculate 
about its implementation
 * interface Master {
 *     public int guess(String word) {}
 * }
 */
class Solution {
    public void findSecretWord(String[] wordlist, 
Master master) {
        
    }
}";"";"2020-03-25 15:18:26"
7909;637;"C";"/**
 * 
****************************************************
*****************
 * // This is the Master's API interface.
 * // You should not implement it, or speculate 
about its implementation
 * 
****************************************************
*****************
 *
 * int guess(Master *, char *word);
 */
void findSecretWord(char** wordlist, int 
wordlistSize, Master* master) {
    
}";"";"2020-03-25 15:18:26"
7910;637;"Scala";"/**
 * // This is the Master's API interface.
 * // You should not implement it, or speculate 
about its implementation
 * class Master {
 *
 *   def guess(word: String): Int = {}
 *
 * }
 */
object Solution {
    def findSecretWord(wordlist: Array[String], 
master: Master): Unit = {
        
    }
}";"";"2020-03-25 15:18:26"
7911;637;"JavaScript";"/**
 * // This is the master's API interface.
 * // You should not implement it, or speculate 
about its implementation
 * function Master() {
 *
 *     @param {string[]} wordlist
 *     @param {Master} master
 *     @return {integer}
 *     this.guess = function(word) {
 *         ...
 *     };
 * };
 */
/**
 * @param {string[]} wordlist
 * @param {Master} master
 * @return {void}
 */
var findSecretWord = function(wordlist, master) {
    
};";"";"2020-03-25 15:18:26"
7912;637;"Python3";"# """"""
# This is Master's API interface.
# You should not implement it, or speculate about 
its implementation
# """"""
# class Master:
#     def guess(self, word: str) -> int:
 
class Solution:
    def findSecretWord(self, wordlist: List[str], 
master: 'Master') -> None:";"";"2020-03-25 15:18:26"
7913;637;"Go";"/**
 * // This is the Master's API interface.
 * // You should not implement it, or speculate 
about its implementation
 * type Master struct {
 * }
 *
 * func (this *Master) Guess(word string) int {}
 */
func findSecretWord(wordlist []string, master 
*Master) {
    
}";"";"2020-03-25 15:18:26"
7914;637;"PHP";"/**";"";"2020-03-25 15:18:26"
7915;637;"Swift";"/**
 * // This is the Master's API interface.
 * // You should not implement it, or speculate 
about its implementation
 * class Master {
 *     public func guess(word: String) -> Int {}
 * }
 */
class Solution {
    func findSecretWord(_ wordlist: [String], _ 
master: Master) {
        
    }
}";"";"2020-03-25 15:18:26"
7916;637;"Ruby";"#    This is Master's API interface.
#    You should not implement it, or speculate 
about its implementation
#
# class Master
# =begin
#     :type word: String
#     :rtype: Integer
# =end
#     def guess(word)
#         ...
#     end
# end
#
 
# @param {String[]} wordlist
# @param {Master} master
# @return {Void}
def find_secret_word(wordlist, master)
    
end";"";"2020-03-25 15:18:26"
7917;637;"Kotlin";"/**
 * // This is the Master's API interface.
 * // You should not implement it, or speculate 
about its implementation
 * interface Master {
 *     fun guess(word: String): Int {}
 * }
 */
class Solution {
    fun findSecretWord(wordlist: Array<String>, 
master: Master) {
        
    }
}";"";"2020-03-25 15:18:26"
7918;637;"Python";"# """"""
# This is Master's API interface.
# You should not implement it, or speculate about 
its implementation
# """"""
#class Master(object):
#    def guess(self, word):
#        """"""
#        :type word: str
#        :rtype int
#        """"""
 
class Solution(object):
    def findSecretWord(self, wordlist, master):
        """"""
        :type wordlist: List[Str]
        :type master: Master
        :rtype: None
        """"""";"";"2020-03-25 15:18:26"
7919;638;"C#";"/*
// Definition for a Node.
public class Node {
    public int val;
    public IList<Node> neighbors;
    
    public Node() {
        val = 0;
        neighbors = new List<Node>();
    }
 
    public Node(int _val) {
        val = _val;
        neighbors = new List<Node>();
    }
    
    public Node(int _val, List<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/
public class Solution {
    public Node CloneGraph(Node node) {
        
    }";"";"2020-03-25 15:18:26"
7920;638;"Java";"/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val, ArrayList<Node> 
_neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/
class Solution {
    public Node cloneGraph(Node node) {
        ";"";"2020-03-25 15:18:26"
7921;638;"C++";"/*";"";"2020-03-25 15:18:26"
7922;638;"Python3";"""""""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = []):
        self.val = val
        self.neighbors = neighbors
""""""
class Solution:
    def cloneGraph(self, node: 'Node') -> 'Node':";"";"2020-03-25 15:18:26"
7923;638;"JavaScript";"/**
 * // Definition for a Node.
 * function Node(val, neighbors) {
 *    this.val = val === undefined ? 0 : val;
 *    this.neighbors = neighbors === undefined ? [] 
: neighbors;
 * };
 */
/**
 * @param {Node} node
 * @return {Node}
 */
var cloneGraph = function(node) {
    
};";"";"2020-03-25 15:18:26"
7924;638;"Go";"/**
 * Definition for a Node.
 * type Node struct {
 *     Val int
 *     Neighbors []*Node
 * }
 */
 
func cloneGraph(node *Node) *Node {
    
}";"";"2020-03-25 15:18:26"
7925;638;"Swift";"/**
 * Definition for a Node.
 * public class Node {
 *     public var val: Int
 *     public var neighbors: [Node?]
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.neighbors = []
 *     }
 * }
 */
 
class Solution {
    func cloneGraph(_ node: Node?) -> Node? {
        
    }
}";"";"2020-03-25 15:18:26"
7926;638;"Python";"""""""
# Definition for a Node.
class Node(object):
    def __init__(self, val = 0, neighbors = []):
        self.val = val
        self.neighbors = neighbors
""""""
class Solution(object):
    def cloneGraph(self, node):
        """"""
        :type node: Node
        :rtype: Node
        """"""";"";"2020-03-25 15:18:26"
7927;639;"C#";"public class Solution {
    public int[][] OuterTrees(int[][] points) {
 
    }
}";"";"2020-03-25 15:18:26"
7928;639;"Java";"class Solution {
    public int[][] outerTrees(int[][] points) {
 
    }
}";"";"2020-03-25 15:18:26"
7929;639;"Rust";"impl Solution {
    pub fn outer_trees(points: Vec<Vec<i32>>) -> 
Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:26"
7930;639;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** outerTrees(int** points, int pointsSize, int* 
pointsColSize, int* returnSize, int** 
returnColumnSizes){
 
}";"";"2020-03-25 15:18:26"
7931;639;"Scala";"object Solution {
    def outerTrees(points: Array[Array[Int]]): Array
[Array[Int]] = {
 
    }
}";"";"2020-03-25 15:18:26"
7932;639;"Go";"func outerTrees(points [][]int) [][]int {
 
}";"";"2020-03-25 15:18:26"
7933;639;"Kotlin";"class Solution {
    fun outerTrees(points: Array<IntArray>): 
Array<IntArray> {
 
    }
}";"";"2020-03-25 15:18:26"
7934;639;"Python3";"class Solution:
    def outerTrees(self, points: List[List[int]]) 
-> List[List[int]]:";"";"2020-03-25 15:18:26"
7935;639;"JavaScript";"/**
 * @param {number[][]} points
 * @return {number[][]}
 */
var outerTrees = function(points) {
 
};";"";"2020-03-25 15:18:26"
7936;639;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $points
     * @return Integer[][]
     */
    function outerTrees($points) {
        
    }
}";"";"2020-03-25 15:18:26"
7937;639;"Swift";"class Solution {
    func outerTrees(_ points: [[Int]]) -> [[Int]] {
        
    }
}";"";"2020-03-25 15:18:26"
7938;639;"Ruby";"# @param {Integer[][]} points
# @return {Integer[][]}
def outer_trees(points)
 
end";"";"2020-03-25 15:18:26"
7939;639;"Python";"class Solution(object):
    def outerTrees(self, points):
        """"""
        :type points: List[List[int]]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:26"
7940;640;"C#";"public class Solution {
    public int RepeatedNTimes(int[] A) {
 
    }
}";"";"2020-03-25 15:18:26"
7941;640;"Java";"class Solution {
    public int repeatedNTimes(int[] A) {
 
    }
}";"";"2020-03-25 15:18:26"
7942;640;"C";"int repeatedNTimes(int* A, int ASize){
 
}";"";"2020-03-25 15:18:26"
7943;640;"Rust";"impl Solution {
    pub fn repeated_n_times(a: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:26"
7944;640;"Scala";"object Solution {
    def repeatedNTimes(A: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:26"
7945;640;"Go";"func repeatedNTimes(A []int) int {
 
}";"";"2020-03-25 15:18:26"
7946;640;"Kotlin";"class Solution {
    fun repeatedNTimes(A: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:26"
7947;640;"Python3";"class Solution:
    def repeatedNTimes(self, A: List[int]) -> int:";"";"2020-03-25 15:18:26"
7948;640;"JavaScript";"/**
 * @param {number[]} A
 * @return {number}
 */
var repeatedNTimes = function(A) {
 
};";"";"2020-03-25 15:18:26"
7949;640;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @return Integer
     */
    function repeatedNTimes($A) {
        
    }
}";"";"2020-03-25 15:18:26"
7950;640;"Swift";"class Solution {
    func repeatedNTimes(_ A: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:26"
7951;640;"Ruby";"# @param {Integer[]} a";"";"2020-03-25 15:18:26"
7952;640;"Python";"class Solution(object):
    def repeatedNTimes(self, A):
        """"""
        :type A: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:26"
7953;641;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int MaxProduct(TreeNode root) {
        
    }
}";"";"2020-03-25 15:18:26"
7954;641;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int maxProduct(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:26"
7955;641;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int maxProduct(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:26"
7956;641;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn max_product(root: 
Option<Rc<RefCell<TreeNode>>>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:26"
7957;641;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def maxProduct(root: TreeNode): Int = {
 
    }
}";"";"2020-03-25 15:18:26"
7958;641;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func maxProduct(root *TreeNode) int {
 
}";"";"2020-03-25 15:18:26"
7959;641;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun maxProduct(root: TreeNode?): Int {
 
    }
}";"";"2020-03-25 15:18:26"
7960;641;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def maxProduct(self, root: TreeNode) -> int:";"";"2020-03-25 15:18:26"
7961;641;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var maxProduct = function(root) {
    
};";"";"2020-03-25 15:18:26"
7962;641;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer
     */
    function maxProduct($root) {
 
    }
}";"";"2020-03-25 15:18:26"
7963;641;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func maxProduct(_ root: TreeNode?) -> Int {
 
    }
}";"";"2020-03-25 15:18:26"
7964;641;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:26"
7965;641;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def maxProduct(self, root):
        """"""
        :type root: TreeNode
        :rtype: int
        """"""";"";"2020-03-25 15:18:26"
7966;642;"C#";"public class Solution {
    public string GetHint(string secret, string 
guess) {
 
    }
}";"";"2020-03-25 15:18:26"
7967;642;"Java";"class Solution {
    public String getHint(String secret, String 
guess) {
 
    }
}";"";"2020-03-25 15:18:26"
7968;642;"C";"char * getHint(char * secret, char * guess){
 
}";"";"2020-03-25 15:18:26"
7969;642;"Rust";"impl Solution {
    pub fn get_hint(secret: String, guess: String) 
-> String {
        
    }
}";"";"2020-03-25 15:18:26"
7970;642;"Scala";"object Solution {
    def getHint(secret: String, guess: String): 
String = {
 
    }
}";"";"2020-03-25 15:18:26"
7971;642;"Go";"func getHint(secret string, guess string) string {
 
}";"";"2020-03-25 15:18:26"
7972;642;"Kotlin";"class Solution {
    fun getHint(secret: String, guess: String): 
String {
 
    }
}";"";"2020-03-25 15:18:26"
7973;642;"Python3";"class Solution:
    def getHint(self, secret: str, guess: str) -> 
str:";"";"2020-03-25 15:18:26"
7974;642;"JavaScript";"/**
 * @param {string} secret
 * @param {string} guess
 * @return {string}
 */
var getHint = function(secret, guess) {
 
};";"";"2020-03-25 15:18:26"
7975;642;"PHP";"class Solution {
 
    /**
     * @param String $secret
     * @param String $guess
     * @return String
     */
    function getHint($secret, $guess) {
        
    }
}";"";"2020-03-25 15:18:26"
7976;642;"Swift";"class Solution {
    func getHint(_ secret: String, _ guess: String) 
-> String {
        
    }
}";"";"2020-03-25 15:18:26"
7977;642;"Ruby";"# @param {String} secret";"";"2020-03-25 15:18:26"
7978;642;"Python";"class Solution(object):
    def getHint(self, secret, guess):
        """"""
        :type secret: str
        :type guess: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:26"
7979;643;"C#";"public class Solution {
    public IList<string> InvalidTransactions(string
[] transactions) {
 
    }
}";"";"2020-03-25 15:18:26"
7980;643;"Java";"class Solution {
    public List<String> invalidTransactions(String[]
 transactions) {
 
    }
}";"";"2020-03-25 15:18:26"
7981;643;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** invalidTransactions(char ** transactions, 
int transactionsSize, int* returnSize){
 
}";"";"2020-03-25 15:18:26"
7982;643;"Rust";"impl Solution {
    pub fn invalid_transactions(transactions: 
Vec<String>) -> Vec<String> {
        
    }
}";"";"2020-03-25 15:18:26"
7983;643;"Scala";"object Solution {
    def invalidTransactions(transactions: Array
[String]): List[String] = {
 
    }
}";"";"2020-03-25 15:18:26"
7984;643;"Go";"func invalidTransactions(transactions []string) []
string {
 
}";"";"2020-03-25 15:18:26"
7985;643;"Kotlin";"class Solution {
    fun invalidTransactions(transactions: 
Array<String>): List<String> {
 
    }
}";"";"2020-03-25 15:18:26"
7986;643;"Python3";"class Solution:
    def invalidTransactions(self, transactions: List
[str]) -> List[str]:";"";"2020-03-25 15:18:26"
7987;643;"JavaScript";"/**
 * @param {string[]} transactions
 * @return {string[]}
 */
var invalidTransactions = function(transactions) {
 
};";"";"2020-03-25 15:18:26"
7988;643;"PHP";"class Solution {
 
    /**
     * @param String[] $transactions
     * @return String[]
     */
    function invalidTransactions($transactions) {
        
    }
}";"";"2020-03-25 15:18:26"
7989;643;"Swift";"class Solution {
    func invalidTransactions(_ transactions: 
[String]) -> [String] {
        
    }
}";"";"2020-03-25 15:18:26"
7990;643;"Ruby";"# @param {String[]} transactions";"";"2020-03-25 15:18:26"
7991;643;"Python";"class Solution(object):
    def invalidTransactions(self, transactions):
        """"""
        :type transactions: List[str]
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:26"
7992;644;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int[] LevelOrder(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:26"
7993;644;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int[] levelOrder(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:26"
7994;644;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* levelOrder(struct TreeNode* root, int* 
returnSize){
 
}";"";"2020-03-25 15:18:26"
7995;644;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn level_order(root: 
Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:26"
7996;644;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def levelOrder(root: TreeNode): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:26"
7997;644;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def levelOrder(self, root: TreeNode) -> List
[int]:";"";"2020-03-25 15:18:26"
7998;644;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[]}
 */
var levelOrder = function(root) {
 
};";"";"2020-03-25 15:18:26"
7999;644;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func levelOrder(root *TreeNode) []int {
 
}";"";"2020-03-25 15:18:26"
8000;644;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer[]
     */
    function levelOrder($root) {
 
    }
}";"";"2020-03-25 15:18:26"
8001;644;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer[]}
def level_order(root)
 
end";"";"2020-03-25 15:18:26"
8002;644;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def levelOrder(self, root):
        """"""
        :type root: TreeNode
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:26"
8003;644;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun levelOrder(root: TreeNode?): IntArray {
 
    }
}";"";"2020-03-25 15:18:26"
8004;645;"C#";"public class Solution {
    public int Calculate(string s) {
 
    }
}";"";"2020-03-25 15:18:26"
8005;645;"Java";"class Solution {
    public int calculate(String s) {
 
    }
}";"";"2020-03-25 15:18:26"
8006;645;"C";"int calculate(char* s){
 
}";"";"2020-03-25 15:18:26"
8007;645;"Rust";"impl Solution {
    pub fn calculate(s: String) -> i32 {
 
    }
}";"";"2020-03-25 15:18:26"
8008;645;"Scala";"object Solution {
    def calculate(s: String): Int = {
 
    }
}";"";"2020-03-25 15:18:26"
8009;645;"Go";"func calculate(s string) int {
 
}";"";"2020-03-25 15:18:26"
8010;645;"Kotlin";"class Solution {
    fun calculate(s: String): Int {
 
    }
}";"";"2020-03-25 15:18:26"
8011;645;"Python3";"class Solution:
    def calculate(self, s: str) -> int:";"";"2020-03-25 15:18:26"
8012;645;"JavaScript";"/**
 * @param {string} s
 * @return {number}
 */
var calculate = function(s) {
 
};";"";"2020-03-25 15:18:26"
8013;645;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return Integer
     */
    function calculate($s) {
 
    }
}";"";"2020-03-25 15:18:26"
8014;645;"Swift";"class Solution {
    func calculate(_ s: String) -> Int {
 
    }
}";"";"2020-03-25 15:18:26"
8015;645;"Ruby";"# @param {String} s";"";"2020-03-25 15:18:26"
8016;645;"Python";"class Solution(object):
    def calculate(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:26"
8017;646;"C#";"public class Solution {
    public bool IsRectangleOverlap(int[] rec1, int[]
 rec2) {
 
    }
}";"";"2020-03-25 15:18:26"
8018;646;"Java";"class Solution {
    public boolean isRectangleOverlap(int[] rec1, 
int[] rec2) {
 
    }
}";"";"2020-03-25 15:18:26"
8019;646;"C";"bool isRectangleOverlap(int* rec1, int rec1Size, 
int* rec2, int rec2Size){
 
}";"";"2020-03-25 15:18:26"
8020;646;"Rust";"impl Solution {
    pub fn is_rectangle_overlap(rec1: Vec<i32>, 
rec2: Vec<i32>) -> bool {
        
    }
}";"";"2020-03-25 15:18:26"
8021;646;"Scala";"object Solution {
    def isRectangleOverlap(rec1: Array[Int], rec2: 
Array[Int]): Boolean = {
 
    }
}";"";"2020-03-25 15:18:26"
8022;646;"Go";"func isRectangleOverlap(rec1 []int, rec2 []int) 
bool {
 
}";"";"2020-03-25 15:18:26"
8023;646;"Kotlin";"class Solution {
    fun isRectangleOverlap(rec1: IntArray, rec2: 
IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:26"
8024;646;"Python3";"class Solution:
    def isRectangleOverlap(self, rec1: List[int], 
rec2: List[int]) -> bool:";"";"2020-03-25 15:18:26"
8025;646;"JavaScript";"/**
 * @param {number[]} rec1
 * @param {number[]} rec2
 * @return {boolean}
 */
var isRectangleOverlap = function(rec1, rec2) {
 
};";"";"2020-03-25 15:18:26"
8026;646;"PHP";"class Solution {
 
    /**
     * @param Integer[] $rec1
     * @param Integer[] $rec2
     * @return Boolean
     */
    function isRectangleOverlap($rec1, $rec2) {
        
    }
}";"";"2020-03-25 15:18:26"
8027;646;"Swift";"class Solution {
    func isRectangleOverlap(_ rec1: [Int], _ rec2: 
[Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:26"
8028;646;"Ruby";"# @param {Integer[]} rec1
# @param {Integer[]} rec2
# @return {Boolean}
def is_rectangle_overlap(rec1, rec2)
 
end";"";"2020-03-25 15:18:26"
8029;646;"Python";"class Solution(object):
    def isRectangleOverlap(self, rec1, rec2):
        """"""
        :type rec1: List[int]
        :type rec2: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:26"
8030;647;"C#";"public class Solution {
    public int FindPeakElement(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:26"
8031;647;"Java";"class Solution {
    public int findPeakElement(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:26"
8032;647;"C";"int findPeakElement(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:26"
8033;647;"Python3";"class Solution:
    def findPeakElement(self, nums: List[int]) -> 
int:";"";"2020-03-25 15:18:26"
8034;647;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var findPeakElement = function(nums) {
 
};";"";"2020-03-25 15:18:26"
8035;647;"Go";"func findPeakElement(nums []int) int {";"";"2020-03-25 15:18:26"
8036;647;"Swift";"class Solution {
    func findPeakElement(_ nums: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:26"
8037;647;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def find_peak_element(nums)
 
end";"";"2020-03-25 15:18:26"
8038;647;"Python";"class Solution(object):
    def findPeakElement(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:26"
8039;648;"C#";"public class Solution {
    public int[] AdvantageCount(int[] A, int[] B) {
 
    }
}";"";"2020-03-25 15:18:26"
8040;648;"Java";"class Solution {
    public int[] advantageCount(int[] A, int[] B) {
 
    }
}";"";"2020-03-25 15:18:26"
8041;648;"Rust";"impl Solution {
    pub fn advantage_count(a: Vec<i32>, b: Vec<i32>)
 -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:26"
8042;648;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* advantageCount(int* A, int ASize, int* B, int 
BSize, int* returnSize){
 
}";"";"2020-03-25 15:18:26"
8043;648;"Scala";"object Solution {
    def advantageCount(A: Array[Int], B: Array[Int])
: Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:26"
8044;648;"Go";"func advantageCount(A []int, B []int) []int {
 
}";"";"2020-03-25 15:18:26"
8045;648;"Kotlin";"class Solution {
    fun advantageCount(A: IntArray, B: IntArray): 
IntArray {
 
    }
}";"";"2020-03-25 15:18:26"
8046;648;"Python3";"class Solution:
    def advantageCount(self, A: List[int], B: List
[int]) -> List[int]:";"";"2020-03-25 15:18:26"
8047;648;"JavaScript";"/**
 * @param {number[]} A
 * @param {number[]} B
 * @return {number[]}
 */
var advantageCount = function(A, B) {
 
};";"";"2020-03-25 15:18:26"
8048;648;"PHP";"class Solution {";"";"2020-03-25 15:18:26"
8049;648;"Swift";"class Solution {
    func advantageCount(_ A: [Int], _ B: [Int]) -> 
[Int] {
        
    }
}";"";"2020-03-25 15:18:26"
8050;648;"Ruby";"# @param {Integer[]} a
# @param {Integer[]} b
# @return {Integer[]}
def advantage_count(a, b)
 
end";"";"2020-03-25 15:18:26"
8051;648;"Python";"class Solution(object):
    def advantageCount(self, A, B):
        """"""
        :type A: List[int]
        :type B: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:26"
8052;649;"MS SQL Server";"/* Write your T-SQL query statement below */";"";"2020-03-25 15:18:26"
8053;649;"Oracle";"/* Write your PL/SQL query statement below */";"";"2020-03-25 15:18:26"
8054;650;"C#";"public class Solution {
    public bool FindNumberIn2DArray(int[][] matrix, 
int target) {
 
    }
}";"";"2020-03-25 15:18:26"
8055;650;"Java";"class Solution {
    public boolean findNumberIn2DArray(int[][] 
matrix, int target) {
 
    }
}";"";"2020-03-25 15:18:26"
8056;650;"Rust";"impl Solution {
    pub fn find_number_in2_d_array(matrix: 
Vec<Vec<i32>>, target: i32) -> bool {
 
    }
}";"";"2020-03-25 15:18:26"
8057;650;"C";"bool findNumberIn2DArray(int** matrix, int 
matrixSize, int* matrixColSize, int target){
 
}";"";"2020-03-25 15:18:26"
8058;650;"Scala";"object Solution {
    def findNumberIn2DArray(matrix: Array[Array[Int]
], target: Int): Boolean = {
 
    }
}";"";"2020-03-25 15:18:26"
8059;650;"Go";"func findNumberIn2DArray(matrix [][]int, target int)
 bool {
 
}";"";"2020-03-25 15:18:26"
8060;650;"Kotlin";"class Solution {
    fun findNumberIn2DArray(matrix: Array<IntArray>,
 target: Int): Boolean {
 
    }
}";"";"2020-03-25 15:18:26"
8061;650;"Python3";"class Solution:
    def findNumberIn2DArray(self, matrix: List[List
[int]], target: int) -> bool:";"";"2020-03-25 15:18:26"
8062;650;"JavaScript";"/**
 * @param {number[][]} matrix
 * @param {number} target
 * @return {boolean}
 */
var findNumberIn2DArray = function(matrix, target) {
 
};";"";"2020-03-25 15:18:26"
8063;650;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $matrix
     * @param Integer $target
     * @return Boolean
     */
    function findNumberIn2DArray($matrix, $target) {
 
    }
}";"";"2020-03-25 15:18:26"
8064;650;"Swift";"class Solution {
    func findNumberIn2DArray(_ matrix: [[Int]], _ 
target: Int) -> Bool {
 
    }
}";"";"2020-03-25 15:18:26"
8065;650;"Ruby";"# @param {Integer[][]} matrix
# @param {Integer} target
# @return {Boolean}
def find_number_in2_d_array(matrix, target)
 
end";"";"2020-03-25 15:18:26"
8066;650;"Python";"class Solution(object):
    def findNumberIn2DArray(self, matrix, target):
        """"""
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:26"
8067;651;"C#";"public class Solution {
    public IList<string> RemoveInvalidParentheses
(string s) {
 
    }
}";"";"2020-03-25 15:18:26"
8068;651;"Java";"class Solution {
    public List<String> removeInvalidParentheses
(String s) {
 
    }
}";"";"2020-03-25 15:18:26"
8069;651;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** removeInvalidParentheses(char * s, int* 
returnSize){
 
}";"";"2020-03-25 15:18:26"
8070;651;"Rust";"impl Solution {
    pub fn remove_invalid_parentheses(s: String) -> 
Vec<String> {
        
    }
}";"";"2020-03-25 15:18:26"
8071;651;"Scala";"object Solution {
    def removeInvalidParentheses(s: String): List
[String] = {
 
    }
}";"";"2020-03-25 15:18:26"
8072;651;"Go";"func removeInvalidParentheses(s string) []string {
 
}";"";"2020-03-25 15:18:26"
8073;651;"Kotlin";"class Solution {
    fun removeInvalidParentheses(s: String): 
List<String> {
 
    }
}";"";"2020-03-25 15:18:26"
8074;651;"Python3";"class Solution:
    def removeInvalidParentheses(self, s: str) -> 
List[str]:";"";"2020-03-25 15:18:26"
8075;651;"JavaScript";"/**
 * @param {string} s
 * @return {string[]}
 */
var removeInvalidParentheses = function(s) {
 
};";"";"2020-03-25 15:18:26"
8076;651;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return String[]
     */
    function removeInvalidParentheses($s) {
        
    }
}";"";"2020-03-25 15:18:26"
8077;651;"Swift";"class Solution {
    func removeInvalidParentheses(_ s: String) -> 
[String] {
        
    }
}";"";"2020-03-25 15:18:26"
8078;651;"Ruby";"# @param {String} s
# @return {String[]}
def remove_invalid_parentheses(s)
 
end";"";"2020-03-25 15:18:26"
8079;651;"Python";"class Solution(object):
    def removeInvalidParentheses(self, s):
        """"""
        :type s: str
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:26"
8080;652;"C#";"public class MyHashMap {
 
    /** Initialize your data structure here. */
    public MyHashMap() {
 
    }
    
    /** value will always be non-negative. */
    public void Put(int key, int value) {
 
    }
    
    /** Returns the value to which the specified 
key is mapped, or -1 if this map contains no 
mapping for the key */
    public int Get(int key) {
 
    }
    
    /** Removes the mapping of the specified value 
key if this map contains a mapping for the key */
    public void Remove(int key) {
 
    }
}
 ";"";"2020-03-25 15:18:26"
8081;652;"Java";"class MyHashMap {
 
    /** Initialize your data structure here. */
    public MyHashMap() {
 
    }
    
    /** value will always be non-negative. */
    public void put(int key, int value) {
 
    }
    
    /** Returns the value to which the specified 
key is mapped, or -1 if this map contains no 
mapping for the key */
    public int get(int key) {
 
    }
    
    /** Removes the mapping of the specified value 
key if this map contains a mapping for the key */
    public void remove(int key) {
 
    }
}
 ";"";"2020-03-25 15:18:26"
8082;652;"C";"typedef struct {
    
} MyHashMap;
 
/** Initialize your data structure here. */
 
MyHashMap* myHashMapCreate() {
    
}
 
/** value will always be non-negative. */
void myHashMapPut(MyHashMap* obj, int key, int 
value) {
  
}
 
/** Returns the value to which the specified key is 
mapped, or -1 if this map contains no mapping for 
the key */
int myHashMapGet(MyHashMap* obj, int key) {
  
}
 
/** Removes the mapping of the specified value key 
if this map contains a mapping for the key */
void myHashMapRemove(MyHashMap* obj, int key) {";"";"2020-03-25 15:18:26"
8083;652;"Rust";"struct MyHashMap {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl MyHashMap {
 
    /** Initialize your data structure here. */
    fn new() -> Self {
        
    }
    
    /** value will always be non-negative. */
    fn put(&self, key: i32, value: i32) {
        
    }
    
    /** Returns the value to which the specified 
key is mapped, or -1 if this map contains no 
mapping for the key */";"";"2020-03-25 15:18:26"
8084;652;"Scala";"class MyHashMap() {
 
    /** Initialize your data structure here. */
 
 
    /** value will always be non-negative. */
    def put(key: Int, value: Int) {
 
    }
 
    /** Returns the value to which the specified 
key is mapped, or -1 if this map contains no 
mapping for the key */
    def get(key: Int): Int = {
 
    }
 
    /** Removes the mapping of the specified value 
key if this map contains a mapping for the key */
    def remove(key: Int) {
 
    }
 
}
 
/**";"";"2020-03-25 15:18:26"
8085;652;"Go";"type MyHashMap struct {
 
}
 
 
/** Initialize your data structure here. */
func Constructor() MyHashMap {
 
}
 
 
/** value will always be non-negative. */
func (this *MyHashMap) Put(key int, value int)  {
 
}
 
 
/** Returns the value to which the specified key is 
mapped, or -1 if this map contains no mapping for 
the key */
func (this *MyHashMap) Get(key int) int {
 
}
 
 
/** Removes the mapping of the specified value key ";"";"2020-03-25 15:18:26"
8086;652;"Kotlin";"class MyHashMap() {
 
    /** Initialize your data structure here. */
 
 
    /** value will always be non-negative. */
    fun put(key: Int, value: Int) {
 
    }
 
    /** Returns the value to which the specified 
key is mapped, or -1 if this map contains no 
mapping for the key */
    fun get(key: Int): Int {
 
    }
 
    /** Removes the mapping of the specified value 
key if this map contains a mapping for the key */
    fun remove(key: Int) {
 
    }
 
}
 
/**";"";"2020-03-25 15:18:26"
8087;652;"Python3";"class MyHashMap:
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
        
 
    def put(self, key: int, value: int) -> None:
        """"""
        value will always be non-negative.
        """"""
        
 
    def get(self, key: int) -> int:
        """"""
        Returns the value to which the specified 
key is mapped, or -1 if this map contains no 
mapping for the key
        """"""
        
 
    def remove(self, key: int) -> None:
        """"""
        Removes the mapping of the specified value 
key if this map contains a mapping for the key";"";"2020-03-25 15:18:26"
8088;652;"JavaScript";"/**
 * Initialize your data structure here.
 */
var MyHashMap = function() {
 
};
 
/**
 * value will always be non-negative. 
 * @param {number} key 
 * @param {number} value
 * @return {void}
 */
MyHashMap.prototype.put = function(key, value) {
 
};
 
/**
 * Returns the value to which the specified key is 
mapped, or -1 if this map contains no mapping for 
the key 
 * @param {number} key
 * @return {number}
 */
MyHashMap.prototype.get = function(key) {
 ";"";"2020-03-25 15:18:26"
8089;652;"PHP";"class MyHashMap {
    /**
     * Initialize your data structure here.
     */
    function __construct() {
        
    }
  
    /**
     * value will always be non-negative.
     * @param Integer $key
     * @param Integer $value
     * @return NULL
     */
    function put($key, $value) {
        
    }
  
    /**
     * Returns the value to which the specified key 
is mapped, or -1 if this map contains no mapping 
for the key
     * @param Integer $key
     * @return Integer
     */
    function get($key) {";"";"2020-03-25 15:18:26"
8090;652;"Swift";"class MyHashMap {
 
    /** Initialize your data structure here. */
    init() {
        
    }
    
    /** value will always be non-negative. */
    func put(_ key: Int, _ value: Int) {
        
    }
    
    /** Returns the value to which the specified 
key is mapped, or -1 if this map contains no 
mapping for the key */
    func get(_ key: Int) -> Int {
        
    }
    
    /** Removes the mapping of the specified value 
key if this map contains a mapping for the key */
    func remove(_ key: Int) {
        
    }
}
 ";"";"2020-03-25 15:18:26"
8091;652;"Ruby";"class MyHashMap
 
=begin
    Initialize your data structure here.
=end
    def initialize()
 
    end
 
 
=begin
    value will always be non-negative.
    :type key: Integer
    :type value: Integer
    :rtype: Void
=end
    def put(key, value)
 
    end
 
 
=begin
    Returns the value to which the specified key is 
mapped, or -1 if this map contains no mapping for 
the key
    :type key: Integer";"";"2020-03-25 15:18:26"
8092;652;"Python";"class MyHashMap(object):
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
        
 
    def put(self, key, value):
        """"""
        value will always be non-negative.
        :type key: int
        :type value: int
        :rtype: None
        """"""
        
 
    def get(self, key):
        """"""
        Returns the value to which the specified 
key is mapped, or -1 if this map contains no 
mapping for the key
        :type key: int
        :rtype: int
        """"""
        ";"";"2020-03-25 15:18:26"
8093;653;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int KthSmallest(TreeNode root, int k) {
 
    }
}";"";"2020-03-25 15:18:26"
8094;653;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int kthSmallest(TreeNode root, int k) {
 
    }
}";"";"2020-03-25 15:18:26"
8095;653;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn kth_smallest(root: 
Option<Rc<RefCell<TreeNode>>>, k: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:26"
8096;653;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int kthSmallest(struct TreeNode* root, int k){
 
}";"";"2020-03-25 15:18:26"
8097;653;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def kthSmallest(root: TreeNode, k: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:26"
8098;653;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func kthSmallest(root *TreeNode, k int) int {
 
}";"";"2020-03-25 15:18:26"
8099;653;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun kthSmallest(root: TreeNode?, k: Int): Int {
 
    }
}";"";"2020-03-25 15:18:26"
8100;653;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def kthSmallest(self, root: TreeNode, k: int) 
-> int:";"";"2020-03-25 15:18:26"
8101;653;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} k
 * @return {number}
 */
var kthSmallest = function(root, k) {
 
};";"";"2020-03-25 15:18:26"
8102;653;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @param Integer $k
     * @return Integer
     */
    function kthSmallest($root, $k) {
 
    }
}";"";"2020-03-25 15:18:26"
8103;653;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func kthSmallest(_ root: TreeNode?, _ k: Int) 
-> Int {
 
    }
}";"";"2020-03-25 15:18:26"
8104;653;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @param {Integer} k
# @return {Integer}
def kth_smallest(root, k)
 
end";"";"2020-03-25 15:18:26"
8105;653;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def kthSmallest(self, root, k):
        """"""
        :type root: TreeNode
        :type k: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:26"
8106;654;"C#";"public class LRUCache {
 
    public LRUCache(int capacity) {
 
    }
    
    public int Get(int key) {
 
    }
    
    public void Put(int key, int value) {
 
    }
}
 
/**
 * Your LRUCache object will be instantiated and 
called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.Get(key);
 * obj.Put(key,value);
 */";"";"2020-03-25 15:18:27"
8107;654;"Java";"class LRUCache {
 
    public LRUCache(int capacity) {
 
    }
    
    public int get(int key) {
 
    }
    
    public void put(int key, int value) {
 
    }
}
 
/**
 * Your LRUCache object will be instantiated and 
called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */";"";"2020-03-25 15:18:27"
8108;654;"Rust";"struct LRUCache {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl LRUCache {
 
    fn new(capacity: i32) -> Self {
 
    }
    
    fn get(&self, key: i32) -> i32 {
 
    }
    
    fn put(&self, key: i32, value: i32) {
 
    }
}
 ";"";"2020-03-25 15:18:27"
8109;654;"C";"typedef struct {
 
} LRUCache;
 
 
LRUCache* lRUCacheCreate(int capacity) {
 
}
 
int lRUCacheGet(LRUCache* obj, int key) {
 
}
 
void lRUCachePut(LRUCache* obj, int key, int value) 
{
 
}
 
void lRUCacheFree(LRUCache* obj) {
 
}
 
/**
 * Your LRUCache struct will be instantiated and 
called as such:
 * LRUCache* obj = lRUCacheCreate(capacity);";"";"2020-03-25 15:18:27"
8110;654;"Scala";"class LRUCache(_capacity: Int) {
 
    def get(key: Int): Int = {
 
    }
 
    def put(key: Int, value: Int) {
 
    }
 
}
 
/**
 * Your LRUCache object will be instantiated and 
called as such:
 * var obj = new LRUCache(capacity)
 * var param_1 = obj.get(key)
 * obj.put(key,value)
 */";"";"2020-03-25 15:18:27"
8111;654;"Go";"type LRUCache struct {
 
}
 
 
func Constructor(capacity int) LRUCache {
 
}
 
 
func (this *LRUCache) Get(key int) int {
 
}
 
 
func (this *LRUCache) Put(key int, value int)  {
 
}
 
 
/**
 * Your LRUCache object will be instantiated and 
called as such:
 * obj := Constructor(capacity);
 * param_1 := obj.Get(key);
 * obj.Put(key,value);";"";"2020-03-25 15:18:27"
8112;654;"Kotlin";"class LRUCache(capacity: Int) {
 
    fun get(key: Int): Int {
 
    }
 
    fun put(key: Int, value: Int) {
 
    }
 
}
 
/**
 * Your LRUCache object will be instantiated and 
called as such:
 * var obj = LRUCache(capacity)
 * var param_1 = obj.get(key)
 * obj.put(key,value)
 */";"";"2020-03-25 15:18:27"
8113;654;"Python3";"class LRUCache:
 
    def __init__(self, capacity: int):
 
 
    def get(self, key: int) -> int:
 
 
    def put(self, key: int, value: int) -> None:
 
 
 
# Your LRUCache object will be instantiated and 
called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)";"";"2020-03-25 15:18:27"
8114;654;"JavaScript";"/**
 * @param {number} capacity
 */
var LRUCache = function(capacity) {
 
};
 
/** 
 * @param {number} key
 * @return {number}
 */
LRUCache.prototype.get = function(key) {
 
};
 
/** 
 * @param {number} key 
 * @param {number} value
 * @return {void}
 */
LRUCache.prototype.put = function(key, value) {
 
};
 
/**
 * Your LRUCache object will be instantiated and ";"";"2020-03-25 15:18:27"
8115;654;"PHP";"class LRUCache {";"";"2020-03-25 15:18:27"
8116;654;"Swift";"class LRUCache {
 
    init(_ capacity: Int) {
 
    }
    
    func get(_ key: Int) -> Int {
 
    }
    
    func put(_ key: Int, _ value: Int) {
 
    }
}
 
/**
 * Your LRUCache object will be instantiated and 
called as such:
 * let obj = LRUCache(capacity)
 * let ret_1: Int = obj.get(key)
 * obj.put(key, value)
 */";"";"2020-03-25 15:18:27"
8117;654;"Ruby";"class LRUCache
 
=begin
    :type capacity: Integer
=end
    def initialize(capacity)
 
    end
 
 
=begin
    :type key: Integer
    :rtype: Integer
=end
    def get(key)
 
    end
 
 
=begin
    :type key: Integer
    :type value: Integer
    :rtype: Void
=end
    def put(key, value)
 ";"";"2020-03-25 15:18:27"
8118;654;"Python";"class LRUCache(object):
 
    def __init__(self, capacity):
        """"""
        :type capacity: int
        """"""
 
 
    def get(self, key):
        """"""
        :type key: int
        :rtype: int
        """"""
 
 
    def put(self, key, value):
        """"""
        :type key: int
        :type value: int
        :rtype: None
        """"""
 
 
 
# Your LRUCache object will be instantiated and 
called as such:";"";"2020-03-25 15:18:27"
8119;655;"C#";"public class Solution {
    public IList<IList<string>> Partition(string s) 
{
 
    }
}";"";"2020-03-25 15:18:27"
8120;655;"Java";"class Solution {
    public List<List<String>> partition(String s) {
 
    }
}";"";"2020-03-25 15:18:27"
8121;655;"Rust";"impl Solution {
    pub fn partition(s: String) -> Vec<Vec<String>> 
{
 
    }
}";"";"2020-03-25 15:18:27"
8122;655;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
char *** partition(char * s, int* returnSize, int** 
returnColumnSizes){
 
}";"";"2020-03-25 15:18:27"
8123;655;"Scala";"object Solution {
    def partition(s: String): List[List[String]] = {
 
    }
}";"";"2020-03-25 15:18:27"
8124;655;"Go";"func partition(s string) [][]string {
 
}";"";"2020-03-25 15:18:27"
8125;655;"Kotlin";"class Solution {
    fun partition(s: String): List<List<String>> {
 
    }
}";"";"2020-03-25 15:18:27"
8126;655;"Python3";"class Solution:
    def partition(self, s: str) -> List[List[str]]:";"";"2020-03-25 15:18:27"
8127;655;"JavaScript";"/**
 * @param {string} s
 * @return {string[][]}
 */
var partition = function(s) {
 
};";"";"2020-03-25 15:18:27"
8128;655;"PHP";"class Solution {";"";"2020-03-25 15:18:27"
8129;655;"Swift";"class Solution {
    func partition(_ s: String) -> [[String]] {
 
    }
}";"";"2020-03-25 15:18:27"
8130;655;"Ruby";"# @param {String} s
# @return {String[][]}
def partition(s)
 
end";"";"2020-03-25 15:18:27"
8131;655;"Python";"class Solution(object):
    def partition(self, s):
        """"""
        :type s: str
        :rtype: List[List[str]]
        """"""";"";"2020-03-25 15:18:27"
8132;656;"C#";"public class Solution {
    public bool Search(int[] nums, int target) {
 
    }
}";"";"2020-03-25 15:18:27"
8133;656;"Java";"class Solution {
    public boolean search(int[] nums, int target) {
 
    }
}";"";"2020-03-25 15:18:27"
8134;656;"C";"bool search(int* nums, int numsSize, int target){
 
}";"";"2020-03-25 15:18:27"
8135;656;"Rust";"impl Solution {
    pub fn search(nums: Vec<i32>, target: i32) -> 
bool {
        
    }
}";"";"2020-03-25 15:18:27"
8136;656;"Scala";"object Solution {
    def search(nums: Array[Int], target: Int): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:27"
8137;656;"Go";"func search(nums []int, target int) bool {
 
}";"";"2020-03-25 15:18:27"
8138;656;"Kotlin";"class Solution {
    fun search(nums: IntArray, target: Int): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:27"
8139;656;"Python3";"class Solution:
    def search(self, nums: List[int], target: int) 
-> bool:";"";"2020-03-25 15:18:27"
8140;656;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} target
 * @return {boolean}
 */
var search = function(nums, target) {
 
};";"";"2020-03-25 15:18:27"
8141;656;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer $target
     * @return Boolean
     */
    function search($nums, $target) {
        
    }
}";"";"2020-03-25 15:18:27"
8142;656;"Swift";"class Solution {
    func search(_ nums: [Int], _ target: Int) -> 
Bool {
        
    }
}";"";"2020-03-25 15:18:27"
8143;656;"Ruby";"# @param {Integer[]} nums
# @param {Integer} target
# @return {Boolean}
def search(nums, target)
 
end";"";"2020-03-25 15:18:27"
8144;656;"Python";"class Solution(object):
    def search(self, nums, target):
        """"""
        :type nums: List[int]
        :type target: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:27"
8145;657;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode BuildTree(int[] preorder, int[] 
inorder) {
 
    }
}";"";"2020-03-25 15:18:27"
8146;657;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] 
inorder) {
 
    }
}";"";"2020-03-25 15:18:27"
8147;657;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn build_tree(preorder: Vec<i32>, inorder: 
Vec<i32>) -> Option<Rc<RefCell<TreeNode>>> {
 
    }
}";"";"2020-03-25 15:18:27"
8148;657;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* buildTree(int* preorder, int 
preorderSize, int* inorder, int inorderSize){
 
}";"";"2020-03-25 15:18:27"
8149;657;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def buildTree(preorder: Array[Int], inorder: 
Array[Int]): TreeNode = {
 
    }
}";"";"2020-03-25 15:18:27"
8150;657;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func buildTree(preorder []int, inorder []int) 
*TreeNode {
 
}";"";"2020-03-25 15:18:27"
8151;657;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun buildTree(preorder: IntArray, inorder: 
IntArray): TreeNode? {
 
    }
}";"";"2020-03-25 15:18:27"
8152;657;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def buildTree(self, preorder: List[int], 
inorder: List[int]) -> TreeNode:";"";"2020-03-25 15:18:27"
8153;657;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {number[]} preorder
 * @param {number[]} inorder
 * @return {TreeNode}
 */
var buildTree = function(preorder, inorder) {
 
};";"";"2020-03-25 15:18:27"
8154;657;"PHP";"/**";"";"2020-03-25 15:18:27"
8155;657;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func buildTree(_ preorder: [Int], _ inorder: 
[Int]) -> TreeNode? {
 
    }
}";"";"2020-03-25 15:18:27"
8156;657;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {Integer[]} preorder
# @param {Integer[]} inorder
# @return {TreeNode}
def build_tree(preorder, inorder)
 
end";"";"2020-03-25 15:18:27"
8157;657;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def buildTree(self, preorder, inorder):
        """"""
        :type preorder: List[int]
        :type inorder: List[int]
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:27"
8158;658;"C#";"public class Solution {
    public IList<string> TopKFrequent(string[] 
words, int k) {
 
    }
}";"";"2020-03-25 15:18:27"
8159;658;"Java";"class Solution {
    public List<String> topKFrequent(String[] words,
 int k) {
 
    }
}";"";"2020-03-25 15:18:27"
8160;658;"Rust";"impl Solution {
    pub fn top_k_frequent(words: Vec<String>, k: 
i32) -> Vec<String> {
        
    }
}";"";"2020-03-25 15:18:27"
8161;658;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** topKFrequent(char ** words, int wordsSize, 
int k, int* returnSize){
 
}";"";"2020-03-25 15:18:27"
8162;658;"Scala";"object Solution {
    def topKFrequent(words: Array[String], k: Int): 
List[String] = {
 
    }
}";"";"2020-03-25 15:18:27"
8163;658;"Go";"func topKFrequent(words []string, k int) []string {
 
}";"";"2020-03-25 15:18:27"
8164;658;"Kotlin";"class Solution {
    fun topKFrequent(words: Array<String>, k: Int): 
List<String> {
 
    }
}";"";"2020-03-25 15:18:27"
8165;658;"Python3";"class Solution:
    def topKFrequent(self, words: List[str], k: int)
 -> List[str]:";"";"2020-03-25 15:18:27"
8166;658;"JavaScript";"/**
 * @param {string[]} words
 * @param {number} k
 * @return {string[]}
 */
var topKFrequent = function(words, k) {
 
};";"";"2020-03-25 15:18:27"
8167;658;"PHP";"class Solution {";"";"2020-03-25 15:18:27"
8168;658;"Swift";"class Solution {
    func topKFrequent(_ words: [String], _ k: Int) 
-> [String] {
        
    }
}";"";"2020-03-25 15:18:27"
8169;658;"Ruby";"# @param {String[]} words
# @param {Integer} k
# @return {String[]}
def top_k_frequent(words, k)
 
end";"";"2020-03-25 15:18:27"
8170;658;"Python";"class Solution(object):
    def topKFrequent(self, words, k):
        """"""
        :type words: List[str]
        :type k: int
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:27"
8171;659;"C#";"public class Solution {
    public int MinMoves2(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:27"
8172;659;"Java";"class Solution {
    public int minMoves2(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:27"
8173;659;"Rust";"impl Solution {
    pub fn min_moves2(nums: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:27"
8174;659;"C";"int minMoves2(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:27"
8175;659;"Scala";"object Solution {
    def minMoves2(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:27"
8176;659;"Go";"func minMoves2(nums []int) int {
 
}";"";"2020-03-25 15:18:27"
8177;659;"Kotlin";"class Solution {
    fun minMoves2(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:27"
8178;659;"Python3";"class Solution:
    def minMoves2(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:27"
8179;659;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var minMoves2 = function(nums) {
 
};";"";"2020-03-25 15:18:27"
8180;659;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function minMoves2($nums) {
        
    }
}";"";"2020-03-25 15:18:27"
8181;659;"Swift";"class Solution {
    func minMoves2(_ nums: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:27"
8182;659;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def min_moves2(nums)
 
end";"";"2020-03-25 15:18:27"
8183;659;"Python";"class Solution(object):
    def minMoves2(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:27"
8184;660;"C#";"public class Solution {
    public int FindMaxForm(string[] strs, int m, 
int n) {
 
    }
}";"";"2020-03-25 15:18:27"
8185;660;"Java";"class Solution {
    public int findMaxForm(String[] strs, int m, 
int n) {
 
    }
}";"";"2020-03-25 15:18:27"
8186;660;"Rust";"impl Solution {
    pub fn find_max_form(strs: Vec<String>, m: i32, 
n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:27"
8187;660;"C";"int findMaxForm(char ** strs, int strsSize, int m, 
int n){
 
}";"";"2020-03-25 15:18:27"
8188;660;"Scala";"object Solution {
    def findMaxForm(strs: Array[String], m: Int, n: 
Int): Int = {
 
    }
}";"";"2020-03-25 15:18:27"
8189;660;"Go";"func findMaxForm(strs []string, m int, n int) int {
 
}";"";"2020-03-25 15:18:27"
8190;660;"Kotlin";"class Solution {
    fun findMaxForm(strs: Array<String>, m: Int, n: 
Int): Int {
 
    }
}";"";"2020-03-25 15:18:27"
8191;660;"Python3";"class Solution:
    def findMaxForm(self, strs: List[str], m: int, 
n: int) -> int:";"";"2020-03-25 15:18:27"
8192;660;"JavaScript";"/**
 * @param {string[]} strs
 * @param {number} m
 * @param {number} n
 * @return {number}
 */
var findMaxForm = function(strs, m, n) {
 
};";"";"2020-03-25 15:18:27"
8193;660;"PHP";"class Solution {
 
    /**
     * @param String[] $strs
     * @param Integer $m
     * @param Integer $n
     * @return Integer
     */
    function findMaxForm($strs, $m, $n) {
        
    }
}";"";"2020-03-25 15:18:27"
8194;660;"Swift";"class Solution {
    func findMaxForm(_ strs: [String], _ m: Int, _ 
n: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:27"
8195;660;"Ruby";"# @param {String[]} strs
# @param {Integer} m
# @param {Integer} n
# @return {Integer}
def find_max_form(strs, m, n)
 
end";"";"2020-03-25 15:18:27"
8196;660;"Python";"class Solution(object):
    def findMaxForm(self, strs, m, n):
        """"""
        :type strs: List[str]
        :type m: int
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:27"
8197;661;"C#";"public class Solution {
    public int MaxChunksToSorted(int[] arr) {
 
    }
}";"";"2020-03-25 15:18:27"
8198;661;"Java";"class Solution {
    public int maxChunksToSorted(int[] arr) {
 
    }
}";"";"2020-03-25 15:18:27"
8199;661;"Rust";"impl Solution {
    pub fn max_chunks_to_sorted(arr: Vec<i32>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:27"
8200;661;"C";"int maxChunksToSorted(int* arr, int arrSize){
 
}";"";"2020-03-25 15:18:27"
8201;661;"Scala";"object Solution {
    def maxChunksToSorted(arr: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:27"
8202;661;"Go";"func maxChunksToSorted(arr []int) int {
 
}";"";"2020-03-25 15:18:27"
8203;661;"Kotlin";"class Solution {
    fun maxChunksToSorted(arr: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:27"
8204;661;"Python3";"class Solution:
    def maxChunksToSorted(self, arr: List[int]) -> 
int:";"";"2020-03-25 15:18:27"
8205;661;"JavaScript";"/**
 * @param {number[]} arr
 * @return {number}
 */
var maxChunksToSorted = function(arr) {
 
};";"";"2020-03-25 15:18:27"
8206;661;"PHP";"class Solution {
 
    /**
     * @param Integer[] $arr
     * @return Integer
     */
    function maxChunksToSorted($arr) {
        
    }
}";"";"2020-03-25 15:18:27"
8207;661;"Swift";"class Solution {
    func maxChunksToSorted(_ arr: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:27"
8208;661;"Ruby";"# @param {Integer[]} arr
# @return {Integer}
def max_chunks_to_sorted(arr)
 
end";"";"2020-03-25 15:18:27"
8209;661;"Python";"class Solution(object):
    def maxChunksToSorted(self, arr):
        """"""
        :type arr: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:27"
8210;662;"C#";"public class Solution {
    public int[] PondSizes(int[][] land) {
 
    }
}";"";"2020-03-25 15:18:27"
8211;662;"Java";"class Solution {
    public int[] pondSizes(int[][] land) {
 
    }
}";"";"2020-03-25 15:18:27"
8212;662;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* pondSizes(int** land, int landSize, int* 
landColSize, int* returnSize){
 
}";"";"2020-03-25 15:18:27"
8213;662;"Rust";"impl Solution {
    pub fn pond_sizes(land: Vec<Vec<i32>>) -> 
Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:27"
8214;662;"Scala";"object Solution {
    def pondSizes(land: Array[Array[Int]]): Array
[Int] = {
 
    }
}";"";"2020-03-25 15:18:27"
8215;662;"Go";"func pondSizes(land [][]int) []int {
 
}";"";"2020-03-25 15:18:27"
8216;662;"Kotlin";"class Solution {
    fun pondSizes(land: Array<IntArray>): IntArray {
 
    }
}";"";"2020-03-25 15:18:27"
8217;662;"Python3";"class Solution:
    def pondSizes(self, land: List[List[int]]) -> 
List[int]:";"";"2020-03-25 15:18:27"
8218;662;"JavaScript";"/**
 * @param {number[][]} land
 * @return {number[]}
 */
var pondSizes = function(land) {
 
};";"";"2020-03-25 15:18:27"
8219;662;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $land
     * @return Integer[]
     */
    function pondSizes($land) {
 
    }
}";"";"2020-03-25 15:18:27"
8220;662;"Swift";"class Solution {
    func pondSizes(_ land: [[Int]]) -> [Int] {
 
    }
}";"";"2020-03-25 15:18:27"
8221;662;"Ruby";"# @param {Integer[][]} land";"";"2020-03-25 15:18:27"
8222;662;"Python";"class Solution(object):
    def pondSizes(self, land):
        """"""
        :type land: List[List[int]]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:27"
8223;663;"C#";"public class Solution {
    public int LongestPalindromeSubseq(string s) {
 
    }
}";"";"2020-03-25 15:18:27"
8224;663;"Java";"class Solution {
    public int longestPalindromeSubseq(String s) {
 
    }
}";"";"2020-03-25 15:18:27"
8225;663;"C";"int longestPalindromeSubseq(char * s){
 
}";"";"2020-03-25 15:18:27"
8226;663;"Rust";"impl Solution {
    pub fn longest_palindrome_subseq(s: String) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:27"
8227;663;"Scala";"object Solution {
    def longestPalindromeSubseq(s: String): Int = {
 
    }
}";"";"2020-03-25 15:18:27"
8228;663;"Go";"func longestPalindromeSubseq(s string) int {
 
}";"";"2020-03-25 15:18:27"
8229;663;"Kotlin";"class Solution {
    fun longestPalindromeSubseq(s: String): Int {
 
    }
}";"";"2020-03-25 15:18:27"
8230;663;"Python3";"class Solution:
    def longestPalindromeSubseq(self, s: str) -> 
int:";"";"2020-03-25 15:18:27"
8231;663;"JavaScript";"/**
 * @param {string} s
 * @return {number}
 */
var longestPalindromeSubseq = function(s) {
 
};";"";"2020-03-25 15:18:27"
8232;663;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return Integer
     */
    function longestPalindromeSubseq($s) {
        
    }
}";"";"2020-03-25 15:18:27"
8233;663;"Swift";"class Solution {
    func longestPalindromeSubseq(_ s: String) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:27"
8234;663;"Ruby";"# @param {String} s
# @return {Integer}
def longest_palindrome_subseq(s)
 
end";"";"2020-03-25 15:18:27"
8235;663;"Python";"class Solution(object):
    def longestPalindromeSubseq(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:27"
8236;664;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public bool IsSymmetric(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:27"
8237;664;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:27"
8238;664;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
bool isSymmetric(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:27"
8239;664;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn is_symmetric(root: 
Option<Rc<RefCell<TreeNode>>>) -> bool {
 
    }
}";"";"2020-03-25 15:18:27"
8240;664;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def isSymmetric(root: TreeNode): Boolean = {
 
    }
}";"";"2020-03-25 15:18:27"
8241;664;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func isSymmetric(root *TreeNode) bool {
 
}";"";"2020-03-25 15:18:27"
8242;664;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun isSymmetric(root: TreeNode?): Boolean {
 
    }
}";"";"2020-03-25 15:18:27"
8243;664;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def isSymmetric(self, root: TreeNode) -> bool:";"";"2020-03-25 15:18:27"
8244;664;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isSymmetric = function(root) {
 
};";"";"2020-03-25 15:18:27"
8245;664;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Boolean
     */
    function isSymmetric($root) {
 
    }
}";"";"2020-03-25 15:18:27"
8246;664;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func isSymmetric(_ root: TreeNode?) -> Bool {
 
    }
}";"";"2020-03-25 15:18:27"
8247;664;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Boolean}
def is_symmetric(root)
 
end";"";"2020-03-25 15:18:27"
8248;664;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def isSymmetric(self, root):
        """"""
        :type root: TreeNode
        :rtype: bool
        """"""";"";"2020-03-25 15:18:27"
8249;665;"C#";"/** 
 * Forward declaration of guess API.
 * @param  num   your guess
 * @return       -1 if num is lower than the guess 
number
 *                1 if num is higher than the guess 
number
 *               otherwise return 0
 * int guess(int num);
 */
 
public class Solution : GuessGame {
    public int GuessNumber(int n) {
        
    }
}";"";"2020-03-25 15:18:27"
8250;665;"Java";"/** 
 * Forward declaration of guess API.
 * @param  num   your guess
 * @return       -1 if num is lower than the guess 
number
 *                1 if num is higher than the guess 
number
 *               otherwise return 0
 * int guess(int num);
 */
 
public class Solution extends GuessGame {
    public int guessNumber(int n) {
        
    }
}";"";"2020-03-25 15:18:27"
8251;665;"C++";"/** 
 * Forward declaration of guess API.
 * @param  num   your guess
 * @return       -1 if num is lower than the guess 
number
 *                1 if num is higher than the guess 
number
 *               otherwise return 0
 * int guess(int num);
 */
 
class Solution {
public:
    int guessNumber(int n) {
        
    }
};";"";"2020-03-25 15:18:27"
8252;665;"C";"/** 
 * Forward declaration of guess API.
 * @param  num   your guess
 * @return       -1 if num is lower than the guess 
number
 *                1 if num is higher than the guess 
number
 *               otherwise return 0
 * int guess(int num);
 */
 
int guessNumber(int n){
 
}";"";"2020-03-25 15:18:27"
8253;665;"Python3";"# The guess API is already defined for you.
# @param num, your guess
# @return -1 if my number is lower, 1 if my number 
is higher, otherwise return 0
# def guess(num: int) -> int:
 
class Solution:
    def guessNumber(self, n: int) -> int:";"";"2020-03-25 15:18:27"
8254;665;"JavaScript";"/** 
 * Forward declaration of guess API.
 * @param {number} num   your guess
 * @return              -1 if num is lower than the 
guess number
 *                       1 if num is higher than 
the guess number
 *                       otherwise return 0
 * var guess = function(num) {}
 */
 
/**
 * @param {number} n
 * @return {number}
 */
var guessNumber = function(n) {
    
};";"";"2020-03-25 15:18:27"
8255;665;"Go";"/** 
 * Forward declaration of guess API.
 * @param  num   your guess
 * @return       -1 if num is lower than the guess 
number
 *                1 if num is higher than the guess 
number
 *               otherwise return 0
 * func guess(num int) int;
 */
 
func guessNumber(n int) int {
    
}";"";"2020-03-25 15:18:27"
8256;665;"Python";"# The guess API is already defined for you.
# @param num, your guess
# @return -1 if my number is lower, 1 if my number 
is higher, otherwise return 0
# def guess(num):
 
class Solution(object):
    def guessNumber(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:27"
8257;666;"C#";"public class Solution {
    public int FindTheCity(int n, int[][] edges, 
int distanceThreshold) {
        
    }
}";"";"2020-03-25 15:18:27"
8258;666;"Java";"class Solution {
    public int findTheCity(int n, int[][] edges, 
int distanceThreshold) {
 
    }
}";"";"2020-03-25 15:18:27"
8259;666;"C";"int findTheCity(int n, int** edges, int edgesSize, 
int* edgesColSize, int distanceThreshold){
 
}";"";"2020-03-25 15:18:27"
8260;666;"Rust";"impl Solution {
    pub fn find_the_city(n: i32, edges: 
Vec<Vec<i32>>, distance_threshold: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:27"
8261;666;"Scala";"object Solution {
    def findTheCity(n: Int, edges: Array[Array[Int]]
, distanceThreshold: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:27"
8262;666;"Go";"func findTheCity(n int, edges [][]int, 
distanceThreshold int) int {
 
}";"";"2020-03-25 15:18:27"
8263;666;"Kotlin";"class Solution {
    fun findTheCity(n: Int, edges: Array<IntArray>, 
distanceThreshold: Int): Int {
 
    }
}";"";"2020-03-25 15:18:27"
8264;666;"Python3";"class Solution:
    def findTheCity(self, n: int, edges: List[List
[int]], distanceThreshold: int) -> int:";"";"2020-03-25 15:18:27"
8265;666;"JavaScript";"/**
 * @param {number} n
 * @param {number[][]} edges
 * @param {number} distanceThreshold
 * @return {number}
 */
var findTheCity = function(n, edges, 
distanceThreshold) {
    
};";"";"2020-03-25 15:18:27"
8266;666;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @param Integer[][] $edges
     * @param Integer $distanceThreshold
     * @return Integer
     */
    function findTheCity($n, $edges, 
$distanceThreshold) {
 
    }
}";"";"2020-03-25 15:18:27"
8267;666;"Swift";"class Solution {
    func findTheCity(_ n: Int, _ edges: [[Int]], _ 
distanceThreshold: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:27"
8268;666;"Ruby";"# @param {Integer} n";"";"2020-03-25 15:18:27"
8269;666;"Python";"class Solution(object):
    def findTheCity(self, n, edges, 
distanceThreshold):
        """"""
        :type n: int
        :type edges: List[List[int]]
        :type distanceThreshold: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:27"
8270;667;"C#";"public class Solution {
    public int LengthOfLongestSubstring(string s) {
 
    }
}";"";"2020-03-25 15:18:27"
8271;667;"Java";"class Solution {
    public int lengthOfLongestSubstring(String s) {
 
    }
}";"";"2020-03-25 15:18:27"
8272;667;"C";"int lengthOfLongestSubstring(char * s){
 
}";"";"2020-03-25 15:18:27"
8273;667;"Rust";"impl Solution {
    pub fn length_of_longest_substring(s: String) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:27"
8274;667;"Scala";"object Solution {
    def lengthOfLongestSubstring(s: String): Int = {
 
    }
}";"";"2020-03-25 15:18:27"
8275;667;"JavaScript";"/**";"";"2020-03-25 15:18:27"
8276;667;"Python3";"class Solution:
    def lengthOfLongestSubstring(self, s: str) -> 
int:";"";"2020-03-25 15:18:27"
8277;667;"Go";"func lengthOfLongestSubstring(s string) int {
 
}";"";"2020-03-25 15:18:27"
8278;667;"Swift";"class Solution {
    func lengthOfLongestSubstring(_ s: String) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:27"
8279;667;"Ruby";"# @param {String} s
# @return {Integer}
def length_of_longest_substring(s)
 
end";"";"2020-03-25 15:18:27"
8280;667;"Python";"class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:27"
8281;667;"Kotlin";"class Solution {
    fun lengthOfLongestSubstring(s: String): Int {
 
    }
}";"";"2020-03-25 15:18:27"
8282;668;"C#";"public class MedianFinder {
 
    /** initialize your data structure here. */
    public MedianFinder() {
 
    }
    
    public void AddNum(int num) {
 
    }
    
    public double FindMedian() {
 
    }
}
 
/**
 * Your MedianFinder object will be instantiated 
and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.AddNum(num);
 * double param_2 = obj.FindMedian();
 */";"";"2020-03-25 15:18:27"
8283;668;"Java";"class MedianFinder {
 
    /** initialize your data structure here. */
    public MedianFinder() {
 
    }
    
    public void addNum(int num) {
 
    }
    
    public double findMedian() {
 
    }
}
 
/**
 * Your MedianFinder object will be instantiated 
and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */";"";"2020-03-25 15:18:27"
8284;668;"C";"typedef struct {
    
} MedianFinder;
 
/** initialize your data structure here. */
 
MedianFinder* medianFinderCreate() {
    
}
 
void medianFinderAddNum(MedianFinder* obj, int num) 
{
  
}
 
double medianFinderFindMedian(MedianFinder* obj) {
  
}
 
void medianFinderFree(MedianFinder* obj) {
    
}
 
/**
 * Your MedianFinder struct will be instantiated 
and called as such:";"";"2020-03-25 15:18:27"
8285;668;"Rust";"struct MedianFinder {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl MedianFinder {
 
    /** initialize your data structure here. */
    fn new() -> Self {
        
    }
    
    fn add_num(&self, num: i32) {
        
    }
    
    fn find_median(&self) -> f64 {
        
    }
}";"";"2020-03-25 15:18:27"
8286;668;"Scala";"class MedianFinder() {
 
    /** initialize your data structure here. */
 
 
    def addNum(num: Int) {
 
    }
 
    def findMedian(): Double = {
 
    }
 
}
 
/**
 * Your MedianFinder object will be instantiated 
and called as such:
 * var obj = new MedianFinder()
 * obj.addNum(num)
 * var param_2 = obj.findMedian()
 */";"";"2020-03-25 15:18:27"
8287;668;"Go";"type MedianFinder struct {
 
}
 
 
/** initialize your data structure here. */
func Constructor() MedianFinder {
 
}
 
 
func (this *MedianFinder) AddNum(num int)  {
 
}
 
 
func (this *MedianFinder) FindMedian() float64 {
 
}
 
 
/**
 * Your MedianFinder object will be instantiated 
and called as such:
 * obj := Constructor();
 * obj.AddNum(num);";"";"2020-03-25 15:18:27"
8288;668;"Kotlin";"class MedianFinder() {
 
    /** initialize your data structure here. */
 
 
    fun addNum(num: Int) {
 
    }
 
    fun findMedian(): Double {
 
    }
 
}
 
/**
 * Your MedianFinder object will be instantiated 
and called as such:
 * var obj = MedianFinder()
 * obj.addNum(num)
 * var param_2 = obj.findMedian()
 */";"";"2020-03-25 15:18:27"
8289;668;"Python3";"class MedianFinder:
 
    def __init__(self):
        """"""
        initialize your data structure here.
        """"""
        
 
    def addNum(self, num: int) -> None:
        
 
    def findMedian(self) -> float:
        
 
 
# Your MedianFinder object will be instantiated and 
called as such:
# obj = MedianFinder()
# obj.addNum(num)
# param_2 = obj.findMedian()";"";"2020-03-25 15:18:27"
8290;668;"JavaScript";"/**
 * initialize your data structure here.
 */
var MedianFinder = function() {
 
};
 
/** 
 * @param {number} num
 * @return {void}
 */
MedianFinder.prototype.addNum = function(num) {
 
};
 
/**
 * @return {number}
 */
MedianFinder.prototype.findMedian = function() {
 
};
 
/**
 * Your MedianFinder object will be instantiated 
and called as such:
 * var obj = new MedianFinder()";"";"2020-03-25 15:18:27"
8291;668;"PHP";"class MedianFinder {
    /**
     * initialize your data structure here.
     */
    function __construct() {
        
    }
  
    /**
     * @param Integer $num
     * @return NULL
     */
    function addNum($num) {
        
    }
  
    /**
     * @return Float
     */
    function findMedian() {
        
    }
}
 
/**
 * Your MedianFinder object will be instantiated ";"";"2020-03-25 15:18:27"
8292;668;"Swift";"class MedianFinder {
 
    /** initialize your data structure here. */
    init() {
        
    }
    
    func addNum(_ num: Int) {
        
    }
    
    func findMedian() -> Double {
        
    }
}
 
/**
 * Your MedianFinder object will be instantiated 
and called as such:
 * let obj = MedianFinder()
 * obj.addNum(num)
 * let ret_2: Double = obj.findMedian()
 */";"";"2020-03-25 15:18:27"
8293;668;"Ruby";"class MedianFinder";"";"2020-03-25 15:18:27"
8294;668;"Python";"class MedianFinder(object):
 
    def __init__(self):
        """"""
        initialize your data structure here.
        """"""
        
 
    def addNum(self, num):
        """"""
        :type num: int
        :rtype: None
        """"""
        
 
    def findMedian(self):
        """"""
        :rtype: float
        """"""
        
 
 
# Your MedianFinder object will be instantiated and 
called as such:
# obj = MedianFinder()
# obj.addNum(num)";"";"2020-03-25 15:18:27"
8295;669;"C#";"public class Solution {
    public int[] MaxSlidingWindow(int[] nums, int k)
 {
 
    }
}";"";"2020-03-25 15:18:27"
8296;669;"Java";"class Solution {
    public int[] maxSlidingWindow(int[] nums, int k)
 {
 
    }
}";"";"2020-03-25 15:18:27"
8297;669;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* maxSlidingWindow(int* nums, int numsSize, int 
k, int* returnSize){
 
}";"";"2020-03-25 15:18:27"
8298;669;"Python3";"class Solution:
    def maxSlidingWindow(self, nums: List[int], k: 
int) -> List[int]:";"";"2020-03-25 15:18:27"
8299;669;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number[]}
 */
var maxSlidingWindow = function(nums, k) {
 
};";"";"2020-03-25 15:18:27"
8300;669;"Ruby";"# @param {Integer[]} nums
# @param {Integer} k
# @return {Integer[]}
def max_sliding_window(nums, k)
 
end";"";"2020-03-25 15:18:27"
8301;669;"Python";"class Solution(object):
    def maxSlidingWindow(self, nums, k):
        """"""
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:27"
8302;670;"C#";"public class Solution {
    public int CountRangeSum(int[] nums, int lower, 
int upper) {
 
    }
}";"";"2020-03-25 15:18:27"
8303;670;"Java";"class Solution {
    public int countRangeSum(int[] nums, int lower, 
int upper) {
 
    }
}";"";"2020-03-25 15:18:27"
8304;670;"Rust";"impl Solution {
    pub fn count_range_sum(nums: Vec<i32>, lower: 
i32, upper: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:27"
8305;670;"C";"int countRangeSum(int* nums, int numsSize, int 
lower, int upper){
 
}";"";"2020-03-25 15:18:27"
8306;670;"Scala";"object Solution {
    def countRangeSum(nums: Array[Int], lower: Int, 
upper: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:27"
8307;670;"Go";"func countRangeSum(nums []int, lower int, upper int)
 int {
 
}";"";"2020-03-25 15:18:27"
8308;670;"Kotlin";"class Solution {
    fun countRangeSum(nums: IntArray, lower: Int, 
upper: Int): Int {
 
    }
}";"";"2020-03-25 15:18:27"
8309;670;"Python3";"class Solution:
    def countRangeSum(self, nums: List[int], lower: 
int, upper: int) -> int:";"";"2020-03-25 15:18:27"
8310;670;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} lower
 * @param {number} upper
 * @return {number}
 */
var countRangeSum = function(nums, lower, upper) {
 
};";"";"2020-03-25 15:18:27"
8311;670;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer $lower
     * @param Integer $upper
     * @return Integer
     */
    function countRangeSum($nums, $lower, $upper) {
        
    }
}";"";"2020-03-25 15:18:27"
8312;670;"Swift";"class Solution {
    func countRangeSum(_ nums: [Int], _ lower: Int, 
_ upper: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:27"
8313;670;"Ruby";"# @param {Integer[]} nums
# @param {Integer} lower
# @param {Integer} upper
# @return {Integer}
def count_range_sum(nums, lower, upper)
 
end";"";"2020-03-25 15:18:27"
8314;670;"Python";"class Solution(object):
    def countRangeSum(self, nums, lower, upper):
        """"""
        :type nums: List[int]
        :type lower: int
        :type upper: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:27"
8315;671;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode ConvertBST(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:27"
8316;671;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode convertBST(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:27"
8317;671;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* convertBST(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:27"
8318;671;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn convert_bst(root: 
Option<Rc<RefCell<TreeNode>>>) -> 
Option<Rc<RefCell<TreeNode>>> {
        
    }";"";"2020-03-25 15:18:27"
8319;671;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def convertBST(root: TreeNode): TreeNode = {
 
    }
}";"";"2020-03-25 15:18:27"
8320;671;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func convertBST(root *TreeNode) *TreeNode {
 
}";"";"2020-03-25 15:18:27"
8321;671;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun convertBST(root: TreeNode?): TreeNode? {
 
    }
}";"";"2020-03-25 15:18:27"
8322;671;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def convertBST(self, root: TreeNode) -> 
TreeNode:";"";"2020-03-25 15:18:27"
8323;671;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {TreeNode}
 */
var convertBST = function(root) {
 
};";"";"2020-03-25 15:18:27"
8324;671;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return TreeNode
     */
    function convertBST($root) {
        
    }
}";"";"2020-03-25 15:18:27"
8325;671;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func convertBST(_ root: TreeNode?) -> TreeNode? 
{
        
    }
}";"";"2020-03-25 15:18:27"
8326;671;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {TreeNode}
def convert_bst(root)
 
end";"";"2020-03-25 15:18:27"
8327;671;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def convertBST(self, root):
        """"""
        :type root: TreeNode
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:27"
8328;672;"C#";"public class Solution {
    public int LenLongestFibSubseq(int[] A) {
 
    }
}";"";"2020-03-25 15:18:27"
8329;672;"Java";"class Solution {
    public int lenLongestFibSubseq(int[] A) {
 
    }
}";"";"2020-03-25 15:18:27"
8330;672;"C";"int lenLongestFibSubseq(int* A, int ASize){
 
}";"";"2020-03-25 15:18:27"
8331;672;"Rust";"impl Solution {
    pub fn len_longest_fib_subseq(a: Vec<i32>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:27"
8332;672;"Scala";"object Solution {
    def lenLongestFibSubseq(A: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:27"
8333;672;"Go";"func lenLongestFibSubseq(A []int) int {
 
}";"";"2020-03-25 15:18:27"
8334;672;"Kotlin";"class Solution {
    fun lenLongestFibSubseq(A: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:27"
8335;672;"Python3";"class Solution:
    def lenLongestFibSubseq(self, A: List[int]) -> 
int:";"";"2020-03-25 15:18:27"
8336;672;"JavaScript";"/**
 * @param {number[]} A
 * @return {number}
 */
var lenLongestFibSubseq = function(A) {
 
};";"";"2020-03-25 15:18:27"
8337;672;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @return Integer
     */
    function lenLongestFibSubseq($A) {
        
    }
}";"";"2020-03-25 15:18:27"
8338;672;"Swift";"class Solution {
    func lenLongestFibSubseq(_ A: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:27"
8339;672;"Ruby";"# @param {Integer[]} a";"";"2020-03-25 15:18:27"
8340;672;"Python";"class Solution(object):
    def lenLongestFibSubseq(self, A):
        """"""
        :type A: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:27"
8341;673;"C#";"public class LRUCache {
 
    public LRUCache(int capacity) {
 
    }
    
    public int Get(int key) {
 
    }
    
    public void Put(int key, int value) {
 
    }
}
 
/**
 * Your LRUCache object will be instantiated and 
called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.Get(key);
 * obj.Put(key,value);
 */";"";"2020-03-25 15:18:27"
8342;673;"Java";"class LRUCache {
 
    public LRUCache(int capacity) {
 
    }
    
    public int get(int key) {
 
    }
    
    public void put(int key, int value) {
 
    }
}
 
/**
 * Your LRUCache object will be instantiated and 
called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */";"";"2020-03-25 15:18:27"
8343;673;"Rust";"struct LRUCache {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl LRUCache {
 
    fn new(capacity: i32) -> Self {
 
    }
    
    fn get(&self, key: i32) -> i32 {
 
    }
    
    fn put(&self, key: i32, value: i32) {
 
    }
}
 ";"";"2020-03-25 15:18:27"
8344;673;"C";"typedef struct {
 
} LRUCache;
 
 
LRUCache* lRUCacheCreate(int capacity) {
 
}
 
int lRUCacheGet(LRUCache* obj, int key) {
 
}
 
void lRUCachePut(LRUCache* obj, int key, int value) 
{
 
}
 
void lRUCacheFree(LRUCache* obj) {
 
}
 
/**
 * Your LRUCache struct will be instantiated and 
called as such:
 * LRUCache* obj = lRUCacheCreate(capacity);";"";"2020-03-25 15:18:27"
8345;673;"Scala";"class LRUCache(_capacity: Int) {
 
    def get(key: Int): Int = {
 
    }
 
    def put(key: Int, value: Int) {
 
    }
 
}
 
/**
 * Your LRUCache object will be instantiated and 
called as such:
 * var obj = new LRUCache(capacity)
 * var param_1 = obj.get(key)
 * obj.put(key,value)
 */";"";"2020-03-25 15:18:27"
8346;673;"Go";"type LRUCache struct {
 
}
 
 
func Constructor(capacity int) LRUCache {
 
}
 
 
func (this *LRUCache) Get(key int) int {
 
}
 
 
func (this *LRUCache) Put(key int, value int)  {
 
}
 
 
/**
 * Your LRUCache object will be instantiated and 
called as such:
 * obj := Constructor(capacity);
 * param_1 := obj.Get(key);
 * obj.Put(key,value);";"";"2020-03-25 15:18:27"
8347;673;"Kotlin";"class LRUCache(capacity: Int) {
 
    fun get(key: Int): Int {
 
    }
 
    fun put(key: Int, value: Int) {
 
    }
 
}
 
/**
 * Your LRUCache object will be instantiated and 
called as such:
 * var obj = LRUCache(capacity)
 * var param_1 = obj.get(key)
 * obj.put(key,value)
 */";"";"2020-03-25 15:18:27"
8348;673;"Python3";"class LRUCache:
 
    def __init__(self, capacity: int):
 
 
    def get(self, key: int) -> int:
 
 
    def put(self, key: int, value: int) -> None:
 
 
 
# Your LRUCache object will be instantiated and 
called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)";"";"2020-03-25 15:18:27"
8349;673;"JavaScript";"/**
 * @param {number} capacity
 */
var LRUCache = function(capacity) {
 
};
 
/** 
 * @param {number} key
 * @return {number}
 */
LRUCache.prototype.get = function(key) {
 
};
 
/** 
 * @param {number} key 
 * @param {number} value
 * @return {void}
 */
LRUCache.prototype.put = function(key, value) {
 
};
 
/**
 * Your LRUCache object will be instantiated and ";"";"2020-03-25 15:18:27"
8350;673;"PHP";"class LRUCache {";"";"2020-03-25 15:18:27"
8351;673;"Swift";"class LRUCache {
 
    init(_ capacity: Int) {
 
    }
    
    func get(_ key: Int) -> Int {
 
    }
    
    func put(_ key: Int, _ value: Int) {
 
    }
}
 
/**
 * Your LRUCache object will be instantiated and 
called as such:
 * let obj = LRUCache(capacity)
 * let ret_1: Int = obj.get(key)
 * obj.put(key, value)
 */";"";"2020-03-25 15:18:27"
8352;673;"Ruby";"class LRUCache
 
=begin
    :type capacity: Integer
=end
    def initialize(capacity)
 
    end
 
 
=begin
    :type key: Integer
    :rtype: Integer
=end
    def get(key)
 
    end
 
 
=begin
    :type key: Integer
    :type value: Integer
    :rtype: Void
=end
    def put(key, value)
 ";"";"2020-03-25 15:18:27"
8353;673;"Python";"class LRUCache(object):
 
    def __init__(self, capacity):
        """"""
        :type capacity: int
        """"""
 
 
    def get(self, key):
        """"""
        :type key: int
        :rtype: int
        """"""
 
 
    def put(self, key, value):
        """"""
        :type key: int
        :type value: int
        :rtype: None
        """"""
 
 
 
# Your LRUCache object will be instantiated and 
called as such:";"";"2020-03-25 15:18:27"
8354;674;"C#";"public class Solution {
    public int MinCostClimbingStairs(int[] cost) {
 
    }
}";"";"2020-03-25 15:18:27"
8355;674;"Java";"class Solution {
    public int minCostClimbingStairs(int[] cost) {
 
    }
}";"";"2020-03-25 15:18:27"
8356;674;"Rust";"impl Solution {
    pub fn min_cost_climbing_stairs(cost: Vec<i32>) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:27"
8357;674;"C";"int minCostClimbingStairs(int* cost, int costSize){
 
}";"";"2020-03-25 15:18:27"
8358;674;"Scala";"object Solution {
    def minCostClimbingStairs(cost: Array[Int]): 
Int = {
 
    }
}";"";"2020-03-25 15:18:27"
8359;674;"Go";"func minCostClimbingStairs(cost []int) int {
 
}";"";"2020-03-25 15:18:27"
8360;674;"Kotlin";"class Solution {
    fun minCostClimbingStairs(cost: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:27"
8361;674;"Python3";"class Solution:
    def minCostClimbingStairs(self, cost: List[int])
 -> int:";"";"2020-03-25 15:18:27"
8362;674;"JavaScript";"/**
 * @param {number[]} cost
 * @return {number}
 */
var minCostClimbingStairs = function(cost) {
 
};";"";"2020-03-25 15:18:27"
8363;674;"PHP";"class Solution {
 
    /**
     * @param Integer[] $cost
     * @return Integer
     */
    function minCostClimbingStairs($cost) {
        
    }
}";"";"2020-03-25 15:18:27"
8364;674;"Swift";"class Solution {
    func minCostClimbingStairs(_ cost: [Int]) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:27"
8365;674;"Ruby";"# @param {Integer[]} cost
# @return {Integer}
def min_cost_climbing_stairs(cost)
 
end";"";"2020-03-25 15:18:27"
8366;674;"Python";"class Solution(object):
    def minCostClimbingStairs(self, cost):
        """"""
        :type cost: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:27"
8367;675;"C#";"public class Solution {
    public int GetMoneyAmount(int n) {
 
    }
}";"";"2020-03-25 15:18:28"
8368;675;"Java";"class Solution {
    public int getMoneyAmount(int n) {
 
    }
}";"";"2020-03-25 15:18:28"
8369;675;"C";"int getMoneyAmount(int n){
 
}";"";"2020-03-25 15:18:28"
8370;675;"Python3";"class Solution:
    def getMoneyAmount(self, n: int) -> int:";"";"2020-03-25 15:18:28"
8371;675;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var getMoneyAmount = function(n) {
 
};";"";"2020-03-25 15:18:28"
8372;675;"Go";"func getMoneyAmount(n int) int {
 
}";"";"2020-03-25 15:18:28"
8373;675;"Swift";"class Solution {
    func getMoneyAmount(_ n: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:28"
8374;675;"Ruby";"# @param {Integer} n
# @return {Integer}
def get_money_amount(n)
 
end";"";"2020-03-25 15:18:28"
8375;675;"Python";"class Solution(object):
    def getMoneyAmount(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:28"
8376;676;"Java";"class Solution {
    public boolean robot(String command, int[][] 
obstacles, int x, int y) {
 
    }
}";"";"2020-03-25 15:18:28"
8377;676;"C";"bool robot(char * command, int** obstacles, int 
obstaclesSize, int* obstaclesColSize, int x, int y){
 
}";"";"2020-03-25 15:18:28"
8378;676;"Python3";"class Solution:
    def robot(self, command: str, obstacles: List
[List[int]], x: int, y: int) -> bool:";"";"2020-03-25 15:18:28"
8379;676;"JavaScript";"/**
 * @param {string} command
 * @param {number[][]} obstacles
 * @param {number} x
 * @param {number} y
 * @return {boolean}
 */
var robot = function(command, obstacles, x, y) {
 
};";"";"2020-03-25 15:18:28"
8380;676;"Go";"func robot(command string, obstacles [][]int, x int,
 y int) bool {
 
}";"";"2020-03-25 15:18:28"
8381;676;"Python";"class Solution(object):
    def robot(self, command, obstacles, x, y):
        """"""
        :type command: str
        :type obstacles: List[List[int]]
        :type x: int
        :type y: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:28"
8382;677;"C#";"public class Solution {
    public int LongestArithSeqLength(int[] A) {
 
    }
}";"";"2020-03-25 15:18:28"
8383;677;"Java";"class Solution {
    public int longestArithSeqLength(int[] A) {
 
    }
}";"";"2020-03-25 15:18:28"
8384;677;"Rust";"impl Solution {
    pub fn longest_arith_seq_length(a: Vec<i32>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:28"
8385;677;"C";"int longestArithSeqLength(int* A, int ASize){
 
}";"";"2020-03-25 15:18:28"
8386;677;"Scala";"object Solution {
    def longestArithSeqLength(A: Array[Int]): Int = 
{
 
    }
}";"";"2020-03-25 15:18:28"
8387;677;"Go";"func longestArithSeqLength(A []int) int {
 
}";"";"2020-03-25 15:18:28"
8388;677;"Kotlin";"class Solution {
    fun longestArithSeqLength(A: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:28"
8389;677;"Python3";"class Solution:
    def longestArithSeqLength(self, A: List[int]) 
-> int:";"";"2020-03-25 15:18:28"
8390;677;"JavaScript";"/**
 * @param {number[]} A
 * @return {number}
 */
var longestArithSeqLength = function(A) {
 
};";"";"2020-03-25 15:18:28"
8391;677;"PHP";"class Solution {";"";"2020-03-25 15:18:28"
8392;677;"Swift";"class Solution {
    func longestArithSeqLength(_ A: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:28"
8393;677;"Ruby";"# @param {Integer[]} a
# @return {Integer}
def longest_arith_seq_length(a)
 
end";"";"2020-03-25 15:18:28"
8394;677;"Python";"class Solution(object):
    def longestArithSeqLength(self, A):
        """"""
        :type A: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:28"
8395;678;"C#";"public class Solution {
    public bool CanPermutePalindrome(string s) {
 
    }
}";"";"2020-03-25 15:18:28"
8396;678;"Java";"class Solution {
    public boolean canPermutePalindrome(String s) {
 
    }
}";"";"2020-03-25 15:18:28"
8397;678;"C";"bool canPermutePalindrome(char* s){
 
}";"";"2020-03-25 15:18:28"
8398;678;"Rust";"impl Solution {
    pub fn can_permute_palindrome(s: String) -> 
bool {
 
    }
}";"";"2020-03-25 15:18:28"
8399;678;"Scala";"object Solution {
    def canPermutePalindrome(s: String): Boolean = {
 
    }
}";"";"2020-03-25 15:18:28"
8400;678;"Go";"func canPermutePalindrome(s string) bool {
 
}";"";"2020-03-25 15:18:28"
8401;678;"Kotlin";"class Solution {
    fun canPermutePalindrome(s: String): Boolean {
 
    }
}";"";"2020-03-25 15:18:28"
8402;678;"Python3";"class Solution:
    def canPermutePalindrome(self, s: str) -> bool:";"";"2020-03-25 15:18:28"
8403;678;"JavaScript";"/**
 * @param {string} s
 * @return {boolean}
 */
var canPermutePalindrome = function(s) {
 
};";"";"2020-03-25 15:18:28"
8404;678;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return Boolean
     */
    function canPermutePalindrome($s) {
 
    }
}";"";"2020-03-25 15:18:28"
8405;678;"Swift";"class Solution {
    func canPermutePalindrome(_ s: String) -> Bool {
 
    }
}";"";"2020-03-25 15:18:28"
8406;678;"Ruby";"# @param {String} s
# @return {Boolean}
def can_permute_palindrome(s)
 
end";"";"2020-03-25 15:18:28"
8407;678;"Python";"class Solution(object):
    def canPermutePalindrome(self, s):
        """"""
        :type s: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:28"
8408;679;"C#";"public class Solution {
    public int[] MaxSumOfThreeSubarrays(int[] nums, 
int k) {
 
    }
}";"";"2020-03-25 15:18:28"
8409;679;"Java";"class Solution {
    public int[] maxSumOfThreeSubarrays(int[] nums, 
int k) {
 
    }
}";"";"2020-03-25 15:18:28"
8410;679;"Rust";"impl Solution {
    pub fn max_sum_of_three_subarrays(nums: 
Vec<i32>, k: i32) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:28"
8411;679;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* maxSumOfThreeSubarrays(int* nums, int numsSize,
 int k, int* returnSize){
 
}";"";"2020-03-25 15:18:28"
8412;679;"Python3";"class Solution:
    def maxSumOfThreeSubarrays(self, nums: List[int]
, k: int) -> List[int]:";"";"2020-03-25 15:18:28"
8413;679;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number[]}
 */
var maxSumOfThreeSubarrays = function(nums, k) {
 
};";"";"2020-03-25 15:18:28"
8414;679;"Go";"func maxSumOfThreeSubarrays(nums []int, k int) []
int {
 
}";"";"2020-03-25 15:18:28"
8415;679;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer $k
     * @return Integer[]
     */
    function maxSumOfThreeSubarrays($nums, $k) {
        
    }
}";"";"2020-03-25 15:18:28"
8416;679;"Swift";"class Solution {
    func maxSumOfThreeSubarrays(_ nums: [Int], _ k: 
Int) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:28"
8417;679;"Ruby";"# @param {Integer[]} nums
# @param {Integer} k
# @return {Integer[]}
def max_sum_of_three_subarrays(nums, k)
 
end";"";"2020-03-25 15:18:28"
8418;679;"Kotlin";"class Solution {
    fun maxSumOfThreeSubarrays(nums: IntArray, k: 
Int): IntArray {
 
    }
}";"";"2020-03-25 15:18:28"
8419;679;"Python";"class Solution(object):
    def maxSumOfThreeSubarrays(self, nums, k):
        """"""
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:28"
8420;680;"C#";"public class Solution {
    public int[] NextGreaterElements(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:28"
8421;680;"Java";"class Solution {
    public int[] nextGreaterElements(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:28"
8422;680;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* nextGreaterElements(int* nums, int numsSize, 
int* returnSize){
 
}";"";"2020-03-25 15:18:28"
8423;680;"Rust";"impl Solution {
    pub fn next_greater_elements(nums: Vec<i32>) -> 
Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:28"
8424;680;"Scala";"object Solution {
    def nextGreaterElements(nums: Array[Int]): Array
[Int] = {
 
    }
}";"";"2020-03-25 15:18:28"
8425;680;"Go";"func nextGreaterElements(nums []int) []int {
 
}";"";"2020-03-25 15:18:28"
8426;680;"Kotlin";"class Solution {
    fun nextGreaterElements(nums: IntArray): 
IntArray {
 
    }
}";"";"2020-03-25 15:18:28"
8427;680;"Python3";"class Solution:
    def nextGreaterElements(self, nums: List[int]) 
-> List[int]:";"";"2020-03-25 15:18:28"
8428;680;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number[]}
 */
var nextGreaterElements = function(nums) {
 
};";"";"2020-03-25 15:18:28"
8429;680;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer[]
     */
    function nextGreaterElements($nums) {
        
    }
}";"";"2020-03-25 15:18:28"
8430;680;"Swift";"class Solution {
    func nextGreaterElements(_ nums: [Int]) -> [Int]
 {
        
    }
}";"";"2020-03-25 15:18:28"
8431;680;"Ruby";"# @param {Integer[]} nums
# @return {Integer[]}
def next_greater_elements(nums)
 
end";"";"2020-03-25 15:18:28"
8432;680;"Python";"class Solution(object):
    def nextGreaterElements(self, nums):
        """"""
        :type nums: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:28"
8433;681;"C#";"public class SnapshotArray {
 
    public SnapshotArray(int length) {
 
    }
    
    public void Set(int index, int val) {
 
    }
    
    public int Snap() {
 
    }
    
    public int Get(int index, int snap_id) {
 
    }
}
 
/**
 * Your SnapshotArray object will be instantiated 
and called as such:
 * SnapshotArray obj = new SnapshotArray(length);
 * obj.Set(index,val);
 * int param_2 = obj.Snap();
 * int param_3 = obj.Get(index,snap_id);";"";"2020-03-25 15:18:28"
8434;681;"Java";"class SnapshotArray {
 
    public SnapshotArray(int length) {
 
    }
    
    public void set(int index, int val) {
 
    }
    
    public int snap() {
 
    }
    
    public int get(int index, int snap_id) {
 
    }
}
 
/**
 * Your SnapshotArray object will be instantiated 
and called as such:
 * SnapshotArray obj = new SnapshotArray(length);
 * obj.set(index,val);
 * int param_2 = obj.snap();
 * int param_3 = obj.get(index,snap_id);";"";"2020-03-25 15:18:28"
8435;681;"C";"typedef struct {
    
} SnapshotArray;
 
 
SnapshotArray* snapshotArrayCreate(int length) {
    
}
 
void snapshotArraySet(SnapshotArray* obj, int index,
 int val) {
  
}
 
int snapshotArraySnap(SnapshotArray* obj) {
  
}
 
int snapshotArrayGet(SnapshotArray* obj, int index, 
int snap_id) {
  
}
 
void snapshotArrayFree(SnapshotArray* obj) {
    
}";"";"2020-03-25 15:18:28"
8436;681;"Rust";"struct SnapshotArray {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl SnapshotArray {
 
    fn new(length: i32) -> Self {
 
    }
    
    fn set(&self, index: i32, val: i32) {
 
    }
    
    fn snap(&self) -> i32 {
 
    }
    
    fn get(&self, index: i32, snap_id: i32) -> i32 {";"";"2020-03-25 15:18:28"
8437;681;"Scala";"class SnapshotArray(_length: Int) {
 
    def set(index: Int, `val`: Int) {
 
    }
 
    def snap(): Int = {
 
    }
 
    def get(index: Int, snap_id: Int): Int = {
 
    }
 
}
 
/**
 * Your SnapshotArray object will be instantiated 
and called as such:
 * var obj = new SnapshotArray(length)
 * obj.set(index,`val`)
 * var param_2 = obj.snap()
 * var param_3 = obj.get(index,snap_id)
 */";"";"2020-03-25 15:18:28"
8438;681;"Go";"type SnapshotArray struct {
 
}
 
 
func Constructor(length int) SnapshotArray {
 
}
 
 
func (this *SnapshotArray) Set(index int, val int)  
{
 
}
 
 
func (this *SnapshotArray) Snap() int {
 
}
 
 
func (this *SnapshotArray) Get(index int, snap_id 
int) int {
 
}
 ";"";"2020-03-25 15:18:28"
8439;681;"Kotlin";"class SnapshotArray(length: Int) {
 
    fun set(index: Int, `val`: Int) {
 
    }
 
    fun snap(): Int {
 
    }
 
    fun get(index: Int, snap_id: Int): Int {
 
    }
 
}
 
/**
 * Your SnapshotArray object will be instantiated 
and called as such:
 * var obj = SnapshotArray(length)
 * obj.set(index,`val`)
 * var param_2 = obj.snap()
 * var param_3 = obj.get(index,snap_id)
 */";"";"2020-03-25 15:18:28"
8440;681;"Python3";"class SnapshotArray:
 
    def __init__(self, length: int):
        
 
    def set(self, index: int, val: int) -> None:
        
 
    def snap(self) -> int:
        
 
    def get(self, index: int, snap_id: int) -> int:
        
 
 
# Your SnapshotArray object will be instantiated 
and called as such:
# obj = SnapshotArray(length)
# obj.set(index,val)
# param_2 = obj.snap()
# param_3 = obj.get(index,snap_id)";"";"2020-03-25 15:18:28"
8441;681;"JavaScript";"/**
 * @param {number} length
 */
var SnapshotArray = function(length) {
 
};
 
/** 
 * @param {number} index 
 * @param {number} val
 * @return {void}
 */
SnapshotArray.prototype.set = function(index, val) {
 
};
 
/**
 * @return {number}
 */
SnapshotArray.prototype.snap = function() {
 
};
 
/** 
 * @param {number} index 
 * @param {number} snap_id";"";"2020-03-25 15:18:28"
8442;681;"PHP";"class SnapshotArray {
    /**
     * @param Integer $length
     */
    function __construct($length) {
        
    }
  
    /**
     * @param Integer $index
     * @param Integer $val
     * @return NULL
     */
    function set($index, $val) {
        
    }
  
    /**
     * @return Integer
     */
    function snap() {
        
    }
  
    /**
     * @param Integer $index";"";"2020-03-25 15:18:28"
8443;681;"Swift";"class SnapshotArray {
 
    init(_ length: Int) {
 
    }
    
    func set(_ index: Int, _ val: Int) {
 
    }
    
    func snap() -> Int {
 
    }
    
    func get(_ index: Int, _ snap_id: Int) -> Int {
 
    }
}
 
/**
 * Your SnapshotArray object will be instantiated 
and called as such:
 * let obj = SnapshotArray(length)
 * obj.set(index, val)
 * let ret_2: Int = obj.snap()
 * let ret_3: Int = obj.get(index, snap_id)";"";"2020-03-25 15:18:28"
8444;681;"Ruby";"class SnapshotArray";"";"2020-03-25 15:18:28"
8445;681;"Python";"class SnapshotArray(object):
 
    def __init__(self, length):
        """"""
        :type length: int
        """"""
        
 
    def set(self, index, val):
        """"""
        :type index: int
        :type val: int
        :rtype: None
        """"""
        
 
    def snap(self):
        """"""
        :rtype: int
        """"""
        
 
    def get(self, index, snap_id):
        """"""
        :type index: int
        :type snap_id: int";"";"2020-03-25 15:18:28"
8446;682;"C#";"public class Solution {
    public string CountOfAtoms(string formula) {
 
    }
}";"";"2020-03-25 15:18:28"
8447;682;"Java";"class Solution {
    public String countOfAtoms(String formula) {
 
    }
}";"";"2020-03-25 15:18:28"
8448;682;"Rust";"impl Solution {
    pub fn count_of_atoms(formula: String) -> 
String {
        
    }
}";"";"2020-03-25 15:18:28"
8449;682;"C";"char * countOfAtoms(char * formula){
 
}";"";"2020-03-25 15:18:28"
8450;682;"Scala";"object Solution {
    def countOfAtoms(formula: String): String = {
 
    }
}";"";"2020-03-25 15:18:28"
8451;682;"Go";"func countOfAtoms(formula string) string {
 
}";"";"2020-03-25 15:18:28"
8452;682;"Kotlin";"class Solution {
    fun countOfAtoms(formula: String): String {
 
    }
}";"";"2020-03-25 15:18:28"
8453;682;"Python3";"class Solution:
    def countOfAtoms(self, formula: str) -> str:";"";"2020-03-25 15:18:28"
8454;682;"JavaScript";"/**
 * @param {string} formula
 * @return {string}
 */
var countOfAtoms = function(formula) {
 
};";"";"2020-03-25 15:18:28"
8455;682;"PHP";"class Solution {";"";"2020-03-25 15:18:28"
8456;682;"Swift";"class Solution {
    func countOfAtoms(_ formula: String) -> String {
        
    }
}";"";"2020-03-25 15:18:28"
8457;682;"Ruby";"# @param {String} formula
# @return {String}
def count_of_atoms(formula)
 
end";"";"2020-03-25 15:18:28"
8458;682;"Python";"class Solution(object):
    def countOfAtoms(self, formula):
        """"""
        :type formula: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:28"
8459;683;"C#";"public class Solution {
    public int MaxSumAfterPartitioning(int[] A, int 
K) {
 
    }
}";"";"2020-03-25 15:18:28"
8460;683;"Java";"class Solution {
    public int maxSumAfterPartitioning(int[] A, int 
K) {
 
    }
}";"";"2020-03-25 15:18:28"
8461;683;"C";"int maxSumAfterPartitioning(int* A, int ASize, int 
K){
 
}";"";"2020-03-25 15:18:28"
8462;683;"Rust";"impl Solution {
    pub fn max_sum_after_partitioning(a: Vec<i32>, 
k: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:28"
8463;683;"Scala";"object Solution {
    def maxSumAfterPartitioning(A: Array[Int], K: 
Int): Int = {
 
    }
}";"";"2020-03-25 15:18:28"
8464;683;"Go";"func maxSumAfterPartitioning(A []int, K int) int {
 
}";"";"2020-03-25 15:18:28"
8465;683;"Kotlin";"class Solution {
    fun maxSumAfterPartitioning(A: IntArray, K: Int)
: Int {
 
    }
}";"";"2020-03-25 15:18:28"
8466;683;"Python3";"class Solution:
    def maxSumAfterPartitioning(self, A: List[int], 
K: int) -> int:";"";"2020-03-25 15:18:28"
8467;683;"JavaScript";"/**
 * @param {number[]} A
 * @param {number} K
 * @return {number}
 */
var maxSumAfterPartitioning = function(A, K) {
 
};";"";"2020-03-25 15:18:28"
8468;683;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @param Integer $K
     * @return Integer
     */
    function maxSumAfterPartitioning($A, $K) {
        
    }
}";"";"2020-03-25 15:18:28"
8469;683;"Swift";"class Solution {
    func maxSumAfterPartitioning(_ A: [Int], _ K: 
Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:28"
8470;683;"Ruby";"# @param {Integer[]} a";"";"2020-03-25 15:18:28"
8471;683;"Python";"class Solution(object):
    def maxSumAfterPartitioning(self, A, K):
        """"""
        :type A: List[int]
        :type K: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:28"
8472;684;"C#";"public class Solution {
    public int HammingWeight(uint n) {
        
    }
}";"";"2020-03-25 15:18:28"
8473;684;"Java";"public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
        
    }
}";"";"2020-03-25 15:18:28"
8474;684;"C";"int hammingWeight(uint32_t n) {
    
}";"";"2020-03-25 15:18:28"
8475;684;"Python3";"class Solution:
    def hammingWeight(self, n: int) -> int:";"";"2020-03-25 15:18:28"
8476;684;"JavaScript";"/**
 * @param {number} n - a positive integer
 * @return {number}
 */
var hammingWeight = function(n) {
    
};";"";"2020-03-25 15:18:28"
8477;684;"Ruby";"# @param {Integer} n, a positive integer
# @return {Integer}
def hamming_weight(n)
    
end";"";"2020-03-25 15:18:28"
8478;684;"Python";"class Solution(object):
    def hammingWeight(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:28"
8479;685;"C#";"public class Solution {
    public int MaxProfit(int[] prices, int fee) {
 
    }
}";"";"2020-03-25 15:18:28"
8480;685;"Java";"class Solution {
    public int maxProfit(int[] prices, int fee) {
 
    }
}";"";"2020-03-25 15:18:28"
8481;685;"Rust";"impl Solution {
    pub fn max_profit(prices: Vec<i32>, fee: i32) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:28"
8482;685;"C";"int maxProfit(int* prices, int pricesSize, int fee){
 
}";"";"2020-03-25 15:18:28"
8483;685;"Scala";"object Solution {
    def maxProfit(prices: Array[Int], fee: Int): 
Int = {
 
    }
}";"";"2020-03-25 15:18:28"
8484;685;"Go";"func maxProfit(prices []int, fee int) int {
 
}";"";"2020-03-25 15:18:28"
8485;685;"Kotlin";"class Solution {
    fun maxProfit(prices: IntArray, fee: Int): Int {
 
    }
}";"";"2020-03-25 15:18:28"
8486;685;"Python3";"class Solution:
    def maxProfit(self, prices: List[int], fee: int)
 -> int:";"";"2020-03-25 15:18:28"
8487;685;"JavaScript";"/**
 * @param {number[]} prices
 * @param {number} fee
 * @return {number}
 */
var maxProfit = function(prices, fee) {
 
};";"";"2020-03-25 15:18:28"
8488;685;"PHP";"class Solution {";"";"2020-03-25 15:18:28"
8489;685;"Swift";"class Solution {
    func maxProfit(_ prices: [Int], _ fee: Int) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:28"
8490;685;"Ruby";"# @param {Integer[]} prices
# @param {Integer} fee
# @return {Integer}
def max_profit(prices, fee)
 
end";"";"2020-03-25 15:18:28"
8491;685;"Python";"class Solution(object):
    def maxProfit(self, prices, fee):
        """"""
        :type prices: List[int]
        :type fee: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:28"
8492;686;"C#";"public class Solution {
    public int[] RelativeSortArray(int[] arr1, int[]
 arr2) {
 
    }
}";"";"2020-03-25 15:18:28"
8493;686;"Java";"class Solution {
    public int[] relativeSortArray(int[] arr1, int[]
 arr2) {
 
    }
}";"";"2020-03-25 15:18:28"
8494;686;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* relativeSortArray(int* arr1, int arr1Size, 
int* arr2, int arr2Size, int* returnSize){
 
}";"";"2020-03-25 15:18:28"
8495;686;"Rust";"impl Solution {
    pub fn relative_sort_array(arr1: Vec<i32>, 
arr2: Vec<i32>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:28"
8496;686;"Scala";"object Solution {
    def relativeSortArray(arr1: Array[Int], arr2: 
Array[Int]): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:28"
8497;686;"Go";"func relativeSortArray(arr1 []int, arr2 []int) []
int {
 
}";"";"2020-03-25 15:18:28"
8498;686;"Kotlin";"class Solution {
    fun relativeSortArray(arr1: IntArray, arr2: 
IntArray): IntArray {
 
    }
}";"";"2020-03-25 15:18:28"
8499;686;"Python3";"class Solution:
    def relativeSortArray(self, arr1: List[int], 
arr2: List[int]) -> List[int]:";"";"2020-03-25 15:18:28"
8500;686;"JavaScript";"/**
 * @param {number[]} arr1
 * @param {number[]} arr2
 * @return {number[]}
 */
var relativeSortArray = function(arr1, arr2) {
 
};";"";"2020-03-25 15:18:28"
8501;686;"PHP";"class Solution {
 
    /**
     * @param Integer[] $arr1
     * @param Integer[] $arr2
     * @return Integer[]
     */
    function relativeSortArray($arr1, $arr2) {
        
    }
}";"";"2020-03-25 15:18:28"
8502;686;"Swift";"class Solution {
    func relativeSortArray(_ arr1: [Int], _ arr2: 
[Int]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:28"
8503;686;"Ruby";"# @param {Integer[]} arr1
# @param {Integer[]} arr2
# @return {Integer[]}
def relative_sort_array(arr1, arr2)
 
end";"";"2020-03-25 15:18:28"
8504;686;"Python";"class Solution(object):
    def relativeSortArray(self, arr1, arr2):
        """"""
        :type arr1: List[int]
        :type arr2: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:28"
8505;687;"C#";"public class Solution {
    public int RemoveElement(int[] nums, int val) {
 
    }
}";"";"2020-03-25 15:18:28"
8506;687;"Java";"class Solution {
    public int removeElement(int[] nums, int val) {
 
    }
}";"";"2020-03-25 15:18:28"
8507;687;"Rust";"impl Solution {
    pub fn remove_element(nums: &mut Vec<i32>, val: 
i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:28"
8508;687;"Scala";"object Solution {
    def removeElement(nums: Array[Int], `val`: Int)
: Int = {
 
    }
}";"";"2020-03-25 15:18:28"
8509;687;"Python3";"class Solution:
    def removeElement(self, nums: List[int], val: 
int) -> int:";"";"2020-03-25 15:18:28"
8510;687;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} val
 * @return {number}
 */
var removeElement = function(nums, val) {
 
};";"";"2020-03-25 15:18:28"
8511;687;"Go";"func removeElement(nums []int, val int) int {
 
}";"";"2020-03-25 15:18:28"
8512;687;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer $val
     * @return Integer
     */
    function removeElement(&$nums, $val) {
        
    }
}";"";"2020-03-25 15:18:28"
8513;687;"Swift";"class Solution {
    func removeElement(_ nums: inout [Int], _ val: 
Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:28"
8514;687;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:18:28"
8515;687;"Python";"class Solution(object):
    def removeElement(self, nums, val):
        """"""
        :type nums: List[int]
        :type val: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:28"
8516;687;"Kotlin";"class Solution {
    fun removeElement(nums: IntArray, `val`: Int): 
Int {
 
    }
}";"";"2020-03-25 15:18:28"
8517;688;"C#";"public class Solution {
    public int FindPoisonedDuration(int[] 
timeSeries, int duration) {
 
    }
}";"";"2020-03-25 15:18:28"
8518;688;"Java";"class Solution {
    public int findPoisonedDuration(int[] 
timeSeries, int duration) {
 
    }
}";"";"2020-03-25 15:18:28"
8519;688;"Rust";"impl Solution {
    pub fn find_poisoned_duration(time_series: 
Vec<i32>, duration: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:28"
8520;688;"C";"int findPoisonedDuration(int* timeSeries, int 
timeSeriesSize, int duration){
 
}";"";"2020-03-25 15:18:28"
8521;688;"Scala";"object Solution {
    def findPoisonedDuration(timeSeries: Array[Int],
 duration: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:28"
8522;688;"Go";"func findPoisonedDuration(timeSeries []int, 
duration int) int {
 
}";"";"2020-03-25 15:18:28"
8523;688;"Kotlin";"class Solution {
    fun findPoisonedDuration(timeSeries: IntArray, 
duration: Int): Int {
 
    }
}";"";"2020-03-25 15:18:28"
8524;688;"Python3";"class Solution:
    def findPoisonedDuration(self, timeSeries: List
[int], duration: int) -> int:";"";"2020-03-25 15:18:28"
8525;688;"JavaScript";"/**
 * @param {number[]} timeSeries
 * @param {number} duration
 * @return {number}
 */
var findPoisonedDuration = function(timeSeries, 
duration) {
 
};";"";"2020-03-25 15:18:28"
8526;688;"PHP";"class Solution {
 
    /**
     * @param Integer[] $timeSeries
     * @param Integer $duration
     * @return Integer
     */
    function findPoisonedDuration($timeSeries, 
$duration) {
        
    }
}";"";"2020-03-25 15:18:28"
8527;688;"Swift";"class Solution {
    func findPoisonedDuration(_ timeSeries: [Int], 
_ duration: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:28"
8528;688;"Ruby";"# @param {Integer[]} time_series
# @param {Integer} duration
# @return {Integer}
def find_poisoned_duration(time_series, duration)
 
end";"";"2020-03-25 15:18:28"
8529;688;"Python";"class Solution(object):
    def findPoisonedDuration(self, timeSeries, 
duration):
        """"""
        :type timeSeries: List[int]
        :type duration: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:28"
8530;689;"C#";"public class Solution {
    public int[] SpiralOrder(int[][] matrix) {
 
    }
}";"";"2020-03-25 15:18:28"
8531;689;"Java";"class Solution {
    public int[] spiralOrder(int[][] matrix) {
 
    }
}";"";"2020-03-25 15:18:28"
8532;689;"Rust";"impl Solution {
    pub fn spiral_order(matrix: Vec<Vec<i32>>) -> 
Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:28"
8533;689;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* spiralOrder(int** matrix, int matrixSize, int* 
matrixColSize, int* returnSize){
 
}";"";"2020-03-25 15:18:28"
8534;689;"Scala";"object Solution {
    def spiralOrder(matrix: Array[Array[Int]]): 
Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:28"
8535;689;"Go";"func spiralOrder(matrix [][]int) []int {
 
}";"";"2020-03-25 15:18:28"
8536;689;"Kotlin";"class Solution {
    fun spiralOrder(matrix: Array<IntArray>): 
IntArray {
 
    }
}";"";"2020-03-25 15:18:28"
8537;689;"Python3";"class Solution:
    def spiralOrder(self, matrix: List[List[int]]) 
-> List[int]:";"";"2020-03-25 15:18:28"
8538;689;"JavaScript";"/**
 * @param {number[][]} matrix
 * @return {number[]}
 */
var spiralOrder = function(matrix) {
 
};";"";"2020-03-25 15:18:28"
8539;689;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $matrix
     * @return Integer[]
     */
    function spiralOrder($matrix) {
 
    }
}";"";"2020-03-25 15:18:28"
8540;689;"Swift";"class Solution {
    func spiralOrder(_ matrix: [[Int]]) -> [Int] {
 
    }
}";"";"2020-03-25 15:18:28"
8541;689;"Ruby";"# @param {Integer[][]} matrix
# @return {Integer[]}
def spiral_order(matrix)
 
end";"";"2020-03-25 15:18:28"
8542;689;"Python";"class Solution(object):
    def spiralOrder(self, matrix):
        """"""
        :type matrix: List[List[int]]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:28"
8543;690;"C#";"public class Solution {
    public int[] GetLeastNumbers(int[] arr, int k) {
 
    }
}";"";"2020-03-25 15:18:28"
8544;690;"Java";"class Solution {
    public int[] getLeastNumbers(int[] arr, int k) {
 
    }
}";"";"2020-03-25 15:18:28"
8545;690;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* getLeastNumbers(int* arr, int arrSize, int k, 
int* returnSize){
 
}";"";"2020-03-25 15:18:28"
8546;690;"Rust";"impl Solution {
    pub fn get_least_numbers(arr: Vec<i32>, k: i32) 
-> Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:28"
8547;690;"Scala";"object Solution {
    def getLeastNumbers(arr: Array[Int], k: Int): 
Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:28"
8548;690;"Go";"func getLeastNumbers(arr []int, k int) []int {
 
}";"";"2020-03-25 15:18:28"
8549;690;"Kotlin";"class Solution {
    fun getLeastNumbers(arr: IntArray, k: Int): 
IntArray {
 
    }
}";"";"2020-03-25 15:18:28"
8550;690;"Python3";"class Solution:
    def getLeastNumbers(self, arr: List[int], k: 
int) -> List[int]:";"";"2020-03-25 15:18:28"
8551;690;"JavaScript";"/**
 * @param {number[]} arr
 * @param {number} k
 * @return {number[]}
 */
var getLeastNumbers = function(arr, k) {
 
};";"";"2020-03-25 15:18:28"
8552;690;"PHP";"class Solution {
 
    /**
     * @param Integer[] $arr
     * @param Integer $k
     * @return Integer[]
     */
    function getLeastNumbers($arr, $k) {
 
    }
}";"";"2020-03-25 15:18:28"
8553;690;"Swift";"class Solution {
    func getLeastNumbers(_ arr: [Int], _ k: Int) -> 
[Int] {
 
    }
}";"";"2020-03-25 15:18:28"
8554;690;"Ruby";"# @param {Integer[]} arr";"";"2020-03-25 15:18:28"
8555;690;"Python";"class Solution(object):
    def getLeastNumbers(self, arr, k):
        """"""
        :type arr: List[int]
        :type k: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:28"
8556;691;"Java";"class Solution {
    public int domino(int n, int m, int[][] broken) 
{
 
    }
}";"";"2020-03-25 15:18:28"
8557;691;"C";"int domino(int n, int m, int** broken, int 
brokenSize, int* brokenColSize){
 
}";"";"2020-03-25 15:18:28"
8558;691;"Python3";"class Solution:
    def domino(self, n: int, m: int, broken: List
[List[int]]) -> int:";"";"2020-03-25 15:18:28"
8559;691;"JavaScript";"/**
 * @param {number} n
 * @param {number} m
 * @param {number[][]} broken
 * @return {number}
 */
var domino = function(n, m, broken) {
 
};";"";"2020-03-25 15:18:28"
8560;691;"Go";"func domino(n int, m int, broken [][]int) int {
 
}";"";"2020-03-25 15:18:28"
8561;691;"Python";"class Solution(object):
    def domino(self, n, m, broken):
        """"""
        :type n: int
        :type m: int
        :type broken: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:28"
8562;692;"C#";"public class Solution {
    public int MinimumLengthEncoding(string[] words)
 {
 
    }
}";"";"2020-03-25 15:18:28"
8563;692;"Java";"class Solution {
    public int minimumLengthEncoding(String[] words)
 {
 
    }
}";"";"2020-03-25 15:18:28"
8564;692;"C";"int minimumLengthEncoding(char ** words, int 
wordsSize){
 
}";"";"2020-03-25 15:18:28"
8565;692;"Rust";"impl Solution {
    pub fn minimum_length_encoding(words: 
Vec<String>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:28"
8566;692;"Scala";"object Solution {
    def minimumLengthEncoding(words: Array[String])
: Int = {
 
    }
}";"";"2020-03-25 15:18:28"
8567;692;"Go";"func minimumLengthEncoding(words []string) int {
 
}";"";"2020-03-25 15:18:28"
8568;692;"Kotlin";"class Solution {
    fun minimumLengthEncoding(words: Array<String>)
: Int {
 
    }
}";"";"2020-03-25 15:18:28"
8569;692;"Python3";"class Solution:
    def minimumLengthEncoding(self, words: List[str]
) -> int:";"";"2020-03-25 15:18:28"
8570;692;"JavaScript";"/**
 * @param {string[]} words
 * @return {number}
 */
var minimumLengthEncoding = function(words) {
 
};";"";"2020-03-25 15:18:28"
8571;692;"PHP";"class Solution {
 
    /**
     * @param String[] $words
     * @return Integer
     */
    function minimumLengthEncoding($words) {
        
    }
}";"";"2020-03-25 15:18:28"
8572;692;"Swift";"class Solution {
    func minimumLengthEncoding(_ words: [String]) 
-> Int {
        
    }
}";"";"2020-03-25 15:18:28"
8573;692;"Ruby";"";"";"2020-03-25 15:18:28"
8574;692;"Python";"class Solution(object):
    def minimumLengthEncoding(self, words):
        """"""
        :type words: List[str]
        :rtype: int
        """"""";"";"2020-03-25 15:18:28"
8575;693;"C#";"public class Solution {
    public int FindLengthOfLCIS(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:28"
8576;693;"Java";"class Solution {
    public int findLengthOfLCIS(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:28"
8577;693;"Rust";"impl Solution {
    pub fn find_length_of_lcis(nums: Vec<i32>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:28"
8578;693;"C";"int findLengthOfLCIS(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:28"
8579;693;"Scala";"object Solution {
    def findLengthOfLCIS(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:28"
8580;693;"Go";"func findLengthOfLCIS(nums []int) int {
 
}";"";"2020-03-25 15:18:28"
8581;693;"Kotlin";"class Solution {
    fun findLengthOfLCIS(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:28"
8582;693;"Python3";"class Solution:
    def findLengthOfLCIS(self, nums: List[int]) -> 
int:";"";"2020-03-25 15:18:28"
8583;693;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var findLengthOfLCIS = function(nums) {
 
};";"";"2020-03-25 15:18:28"
8584;693;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function findLengthOfLCIS($nums) {
        
    }
}";"";"2020-03-25 15:18:28"
8585;693;"Swift";"class Solution {
    func findLengthOfLCIS(_ nums: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:28"
8586;693;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def find_length_of_lcis(nums)
 
end";"";"2020-03-25 15:18:28"
8587;693;"Python";"class Solution(object):
    def findLengthOfLCIS(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:28"
8588;694;"C#";"public class Solution {
    public IList<IList<string>> SuggestedProducts
(string[] products, string searchWord) {
 
    }
}";"";"2020-03-25 15:18:28"
8589;694;"Java";"class Solution {
    public List<List<String>> suggestedProducts
(String[] products, String searchWord) {
 
    }
}";"";"2020-03-25 15:18:28"
8590;694;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
char *** suggestedProducts(char ** products, int 
productsSize, char * searchWord, int* returnSize, 
int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:28"
8591;694;"Rust";"impl Solution {
    pub fn suggested_products(products: Vec<String>,
 search_word: String) -> Vec<Vec<String>> {
 
    }
}";"";"2020-03-25 15:18:28"
8592;694;"Scala";"object Solution {
    def suggestedProducts(products: Array[String], 
searchWord: String): List[List[String]] = {
 
    }
}";"";"2020-03-25 15:18:28"
8593;694;"Go";"func suggestedProducts(products []string, 
searchWord string) [][]string {
 
}";"";"2020-03-25 15:18:28"
8594;694;"Kotlin";"class Solution {
    fun suggestedProducts(products: Array<String>, 
searchWord: String): List<List<String>> {
 
    }
}";"";"2020-03-25 15:18:28"
8595;694;"Python3";"class Solution:
    def suggestedProducts(self, products: List[str],
 searchWord: str) -> List[List[str]]:";"";"2020-03-25 15:18:28"
8596;694;"JavaScript";"/**
 * @param {string[]} products
 * @param {string} searchWord
 * @return {string[][]}
 */
var suggestedProducts = function(products, 
searchWord) {
 
};";"";"2020-03-25 15:18:28"
8597;694;"PHP";"class Solution {
 
    /**
     * @param String[] $products
     * @param String $searchWord
     * @return String[][]
     */
    function suggestedProducts($products, 
$searchWord) {
 
    }
}";"";"2020-03-25 15:18:28"
8598;694;"Swift";"class Solution {
    func suggestedProducts(_ products: [String], _ 
searchWord: String) -> [[String]] {
 
    }
}";"";"2020-03-25 15:18:28"
8599;694;"Ruby";"# @param {String[]} products
# @param {String} search_word
# @return {String[][]}
def suggested_products(products, search_word)
 
end";"";"2020-03-25 15:18:28"
8600;694;"Python";"class Solution(object):
    def suggestedProducts(self, products, 
searchWord):
        """"""
        :type products: List[str]
        :type searchWord: str
        :rtype: List[List[str]]
        """"""";"";"2020-03-25 15:18:28"
8601;695;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<TreeNode> FindDuplicateSubtrees
(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:29"
8602;695;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<TreeNode> findDuplicateSubtrees
(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:29"
8603;695;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
struct TreeNode** findDuplicateSubtrees(struct 
TreeNode* root, int* returnSize){
 
}";"";"2020-03-25 15:18:29"
8604;695;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn find_duplicate_subtrees(root: 
Option<Rc<RefCell<TreeNode>>>) -> 
Vec<Option<Rc<RefCell<TreeNode>>>> {
        
    }";"";"2020-03-25 15:18:29"
8605;695;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def findDuplicateSubtrees(root: TreeNode): List
[TreeNode] = {
 
    }
}";"";"2020-03-25 15:18:29"
8606;695;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func findDuplicateSubtrees(root *TreeNode) []
*TreeNode {
 
}";"";"2020-03-25 15:18:29"
8607;695;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun findDuplicateSubtrees(root: TreeNode?): 
List<TreeNode?> {
 
    }
}";"";"2020-03-25 15:18:29"
8608;695;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def findDuplicateSubtrees(self, root: TreeNode) 
-> List[TreeNode]:";"";"2020-03-25 15:18:29"
8609;695;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {TreeNode[]}
 */
var findDuplicateSubtrees = function(root) {
 
};";"";"2020-03-25 15:18:29"
8610;695;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return TreeNode[]
     */
    function findDuplicateSubtrees($root) {
        
    }
}";"";"2020-03-25 15:18:29"
8611;695;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func findDuplicateSubtrees(_ root: TreeNode?) 
-> [TreeNode?] {
        
    }
}";"";"2020-03-25 15:18:29"
8612;695;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:29"
8613;695;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def findDuplicateSubtrees(self, root):
        """"""
        :type root: TreeNode
        :rtype: List[TreeNode]
        """"""";"";"2020-03-25 15:18:29"
8614;696;"C#";"public class Solution {
    public int ArrayNesting(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:29"
8615;696;"Java";"class Solution {
    public int arrayNesting(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:29"
8616;696;"Rust";"impl Solution {
    pub fn array_nesting(nums: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:29"
8617;696;"C";"int arrayNesting(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:29"
8618;696;"Scala";"object Solution {
    def arrayNesting(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:29"
8619;696;"Go";"func arrayNesting(nums []int) int {
 
}";"";"2020-03-25 15:18:29"
8620;696;"Kotlin";"class Solution {
    fun arrayNesting(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:29"
8621;696;"Python3";"class Solution:
    def arrayNesting(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:29"
8622;696;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var arrayNesting = function(nums) {
 
};";"";"2020-03-25 15:18:29"
8623;696;"PHP";"class Solution {";"";"2020-03-25 15:18:29"
8624;696;"Swift";"class Solution {
    func arrayNesting(_ nums: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:29"
8625;696;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def array_nesting(nums)
 
end";"";"2020-03-25 15:18:29"
8626;696;"Python";"class Solution(object):
    def arrayNesting(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:29"
8627;697;"C#";"public class Solution {
    public int LongestIncreasingPath(int[][] matrix)
 {
 
    }
}";"";"2020-03-25 15:18:29"
8628;697;"Java";"class Solution {
    public int longestIncreasingPath(int[][] matrix)
 {
 
    }
}";"";"2020-03-25 15:18:29"
8629;697;"Rust";"impl Solution {
    pub fn longest_increasing_path(matrix: 
Vec<Vec<i32>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:29"
8630;697;"C";"int longestIncreasingPath(int** matrix, int 
matrixSize, int* matrixColSize){
 
}";"";"2020-03-25 15:18:29"
8631;697;"Scala";"object Solution {
    def longestIncreasingPath(matrix: Array[Array
[Int]]): Int = {
 
    }
}";"";"2020-03-25 15:18:29"
8632;697;"Go";"func longestIncreasingPath(matrix [][]int) int {
 
}";"";"2020-03-25 15:18:29"
8633;697;"Kotlin";"class Solution {
    fun longestIncreasingPath(matrix: 
Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:29"
8634;697;"Python3";"class Solution:
    def longestIncreasingPath(self, matrix: List
[List[int]]) -> int:";"";"2020-03-25 15:18:29"
8635;697;"JavaScript";"/**
 * @param {number[][]} matrix
 * @return {number}
 */
var longestIncreasingPath = function(matrix) {
 
};";"";"2020-03-25 15:18:29"
8636;697;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $matrix
     * @return Integer
     */
    function longestIncreasingPath($matrix) {
        
    }
}";"";"2020-03-25 15:18:29"
8637;697;"Swift";"class Solution {
    func longestIncreasingPath(_ matrix: [[Int]]) 
-> Int {
        
    }
}";"";"2020-03-25 15:18:29"
8638;697;"Ruby";"# @param {Integer[][]} matrix
# @return {Integer}
def longest_increasing_path(matrix)
 
end";"";"2020-03-25 15:18:29"
8639;697;"Python";"class Solution(object):
    def longestIncreasingPath(self, matrix):
        """"""
        :type matrix: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:29"
8640;698;"MySQL";"# Write your MySQL query statement below";"";"2020-03-25 15:18:29"
8641;698;"MS SQL Server";"/* Write your T-SQL query statement below */";"";"2020-03-25 15:18:29"
8642;698;"Oracle";"/* Write your PL/SQL query statement below */";"";"2020-03-25 15:18:29"
8643;699;"C#";"public class Solution {
    public int[] MaxDepthAfterSplit(string seq) {
 
    }
}";"";"2020-03-25 15:18:29"
8644;699;"Java";"class Solution {
    public int[] maxDepthAfterSplit(String seq) {
 
    }
}";"";"2020-03-25 15:18:29"
8645;699;"Rust";"impl Solution {
    pub fn max_depth_after_split(seq: String) -> 
Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:29"
8646;699;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* maxDepthAfterSplit(char * seq, int* returnSize)
{
 
}";"";"2020-03-25 15:18:29"
8647;699;"Scala";"object Solution {
    def maxDepthAfterSplit(seq: String): Array[Int] 
= {
 
    }
}";"";"2020-03-25 15:18:29"
8648;699;"Go";"func maxDepthAfterSplit(seq string) []int {
 
}";"";"2020-03-25 15:18:29"
8649;699;"Kotlin";"class Solution {
    fun maxDepthAfterSplit(seq: String): IntArray {
 
    }
}";"";"2020-03-25 15:18:29"
8650;699;"Python3";"class Solution:
    def maxDepthAfterSplit(self, seq: str) -> List
[int]:";"";"2020-03-25 15:18:29"
8651;699;"JavaScript";"/**
 * @param {string} seq
 * @return {number[]}
 */
var maxDepthAfterSplit = function(seq) {
 
};";"";"2020-03-25 15:18:29"
8652;699;"PHP";"class Solution {
 
    /**
     * @param String $seq
     * @return Integer[]
     */
    function maxDepthAfterSplit($seq) {
        
    }
}";"";"2020-03-25 15:18:29"
8653;699;"Swift";"class Solution {
    func maxDepthAfterSplit(_ seq: String) -> [Int] 
{
        
    }
}";"";"2020-03-25 15:18:29"
8654;699;"Ruby";"# @param {String} seq
# @return {Integer[]}
def max_depth_after_split(seq)
 
end";"";"2020-03-25 15:18:29"
8655;699;"Python";"class Solution(object):
    def maxDepthAfterSplit(self, seq):
        """"""
        :type seq: str
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:29"
8656;700;"C#";"public class Solution {
    public string CustomSortString(string S, string 
T) {
 
    }
}";"";"2020-03-25 15:18:29"
8657;700;"Java";"class Solution {
    public String customSortString(String S, String 
T) {
 
    }
}";"";"2020-03-25 15:18:29"
8658;700;"Rust";"impl Solution {
    pub fn custom_sort_string(s: String, t: String) 
-> String {
        
    }
}";"";"2020-03-25 15:18:29"
8659;700;"C";"char * customSortString(char * S, char * T){
 
}";"";"2020-03-25 15:18:29"
8660;700;"Scala";"object Solution {
    def customSortString(S: String, T: String): 
String = {
 
    }
}";"";"2020-03-25 15:18:29"
8661;700;"Go";"func customSortString(S string, T string) string {
 
}";"";"2020-03-25 15:18:29"
8662;700;"Kotlin";"class Solution {
    fun customSortString(S: String, T: String): 
String {
 
    }
}";"";"2020-03-25 15:18:29"
8663;700;"Python3";"class Solution:
    def customSortString(self, S: str, T: str) -> 
str:";"";"2020-03-25 15:18:29"
8664;700;"JavaScript";"/**
 * @param {string} S
 * @param {string} T
 * @return {string}
 */
var customSortString = function(S, T) {
 
};";"";"2020-03-25 15:18:29"
8665;700;"PHP";"class Solution {
 
    /**
     * @param String $S
     * @param String $T
     * @return String
     */
    function customSortString($S, $T) {
        
    }
}";"";"2020-03-25 15:18:29"
8666;700;"Swift";"class Solution {
    func customSortString(_ S: String, _ T: String) 
-> String {
        
    }
}";"";"2020-03-25 15:18:29"
8667;700;"Ruby";"# @param {String} s
# @param {String} t
# @return {String}
def custom_sort_string(s, t)
 
end";"";"2020-03-25 15:18:29"
8668;700;"Python";"class Solution(object):
    def customSortString(self, S, T):
        """"""
        :type S: str
        :type T: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:29"
8669;701;"C#";"public class Solution {
    public int FindNumbers(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:29"
8670;701;"Java";"class Solution {
    public int findNumbers(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:29"
8671;701;"Rust";"impl Solution {
    pub fn find_numbers(nums: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:29"
8672;701;"C";"int findNumbers(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:29"
8673;701;"Scala";"object Solution {
    def findNumbers(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:29"
8674;701;"Go";"func findNumbers(nums []int) int {
 
}";"";"2020-03-25 15:18:29"
8675;701;"Kotlin";"class Solution {
    fun findNumbers(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:29"
8676;701;"Python3";"class Solution:
    def findNumbers(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:29"
8677;701;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var findNumbers = function(nums) {
 
};";"";"2020-03-25 15:18:29"
8678;701;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function findNumbers($nums) {
 
    }
}";"";"2020-03-25 15:18:29"
8679;701;"Swift";"class Solution {
    func findNumbers(_ nums: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:29"
8680;701;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def find_numbers(nums)
 
end";"";"2020-03-25 15:18:29"
8681;701;"Python";"class Solution(object):
    def findNumbers(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:29"
8682;702;"C#";"public class Solution {
    public string DecodeAtIndex(string S, int K) {
 
    }
}";"";"2020-03-25 15:18:29"
8683;702;"Java";"class Solution {
    public String decodeAtIndex(String S, int K) {
 
    }
}";"";"2020-03-25 15:18:29"
8684;702;"C";"char * decodeAtIndex(char * S, int K){
 
}";"";"2020-03-25 15:18:29"
8685;702;"Rust";"impl Solution {
    pub fn decode_at_index(s: String, k: i32) -> 
String {
        
    }
}";"";"2020-03-25 15:18:29"
8686;702;"Scala";"object Solution {
    def decodeAtIndex(S: String, K: Int): String = {
 
    }
}";"";"2020-03-25 15:18:29"
8687;702;"Go";"func decodeAtIndex(S string, K int) string {
 
}";"";"2020-03-25 15:18:29"
8688;702;"Kotlin";"class Solution {
    fun decodeAtIndex(S: String, K: Int): String {
 
    }
}";"";"2020-03-25 15:18:29"
8689;702;"Python3";"class Solution:
    def decodeAtIndex(self, S: str, K: int) -> str:";"";"2020-03-25 15:18:29"
8690;702;"JavaScript";"/**
 * @param {string} S
 * @param {number} K
 * @return {string}
 */
var decodeAtIndex = function(S, K) {
 
};";"";"2020-03-25 15:18:29"
8691;702;"PHP";"class Solution {
 
    /**
     * @param String $S
     * @param Integer $K
     * @return String
     */
    function decodeAtIndex($S, $K) {
        
    }
}";"";"2020-03-25 15:18:29"
8692;702;"Swift";"class Solution {
    func decodeAtIndex(_ S: String, _ K: Int) -> 
String {
        
    }
}";"";"2020-03-25 15:18:29"
8693;702;"Ruby";"# @param {String} s";"";"2020-03-25 15:18:29"
8694;702;"Python";"class Solution(object):
    def decodeAtIndex(self, S, K):
        """"""
        :type S: str
        :type K: int
        :rtype: str
        """"""";"";"2020-03-25 15:18:29"
8695;703;"C#";"public class Twitter {
 
    /** Initialize your data structure here. */
    public Twitter() {
 
    }
    
    /** Compose a new tweet. */
    public void PostTweet(int userId, int tweetId) {
 
    }
    
    /** Retrieve the 10 most recent tweet ids in 
the user's news feed. Each item in the news feed 
must be posted by users who the user followed or by 
the user herself. Tweets must be ordered from most 
recent to least recent. */
    public IList<int> GetNewsFeed(int userId) {
 
    }
    
    /** Follower follows a followee. If the 
operation is invalid, it should be a no-op. */
    public void Follow(int followerId, int 
followeeId) {
 ";"";"2020-03-25 15:18:29"
8696;703;"Java";"class Twitter {
 
    /** Initialize your data structure here. */
    public Twitter() {
 
    }
    
    /** Compose a new tweet. */
    public void postTweet(int userId, int tweetId) {
 
    }
    
    /** Retrieve the 10 most recent tweet ids in 
the user's news feed. Each item in the news feed 
must be posted by users who the user followed or by 
the user herself. Tweets must be ordered from most 
recent to least recent. */
    public List<Integer> getNewsFeed(int userId) {
 
    }
    
    /** Follower follows a followee. If the 
operation is invalid, it should be a no-op. */
    public void follow(int followerId, int 
followeeId) {
 ";"";"2020-03-25 15:18:29"
8697;703;"Rust";"struct Twitter {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl Twitter {
 
    /** Initialize your data structure here. */
    fn new() -> Self {
        
    }
    
    /** Compose a new tweet. */
    fn post_tweet(&self, user_id: i32, tweet_id: 
i32) {
        
    }
    
    /** Retrieve the 10 most recent tweet ids in 
the user's news feed. Each item in the news feed ";"";"2020-03-25 15:18:29"
8698;703;"C";"typedef struct {
    
} Twitter;
 
/** Initialize your data structure here. */
 
Twitter* twitterCreate() {
    
}
 
/** Compose a new tweet. */
void twitterPostTweet(Twitter* obj, int userId, int 
tweetId) {
  
}
 
/** Retrieve the 10 most recent tweet ids in the 
user's news feed. Each item in the news feed must 
be posted by users who the user followed or by the 
user herself. Tweets must be ordered from most 
recent to least recent. */
int* twitterGetNewsFeed(Twitter* obj, int userId, 
int* retSize) {
  
}
 ";"";"2020-03-25 15:18:29"
8699;703;"Scala";"class Twitter() {
 
    /** Initialize your data structure here. */
 
 
    /** Compose a new tweet. */
    def postTweet(userId: Int, tweetId: Int) {
 
    }
 
    /** Retrieve the 10 most recent tweet ids in 
the user's news feed. Each item in the news feed 
must be posted by users who the user followed or by 
the user herself. Tweets must be ordered from most 
recent to least recent. */
    def getNewsFeed(userId: Int): List[Int] = {
 
    }
 
    /** Follower follows a followee. If the 
operation is invalid, it should be a no-op. */
    def follow(followerId: Int, followeeId: Int) {
 
    }
 
    /** Follower unfollows a followee. If the ";"";"2020-03-25 15:18:29"
8700;703;"Go";"type Twitter struct {
 
}
 
 
/** Initialize your data structure here. */
func Constructor() Twitter {
 
}
 
 
/** Compose a new tweet. */
func (this *Twitter) PostTweet(userId int, tweetId 
int)  {
 
}
 
 
/** Retrieve the 10 most recent tweet ids in the 
user's news feed. Each item in the news feed must 
be posted by users who the user followed or by the 
user herself. Tweets must be ordered from most 
recent to least recent. */
func (this *Twitter) GetNewsFeed(userId int) []int {
 
}";"";"2020-03-25 15:18:29"
8701;703;"Kotlin";"class Twitter() {
 
    /** Initialize your data structure here. */
 
 
    /** Compose a new tweet. */
    fun postTweet(userId: Int, tweetId: Int) {
 
    }
 
    /** Retrieve the 10 most recent tweet ids in 
the user's news feed. Each item in the news feed 
must be posted by users who the user followed or by 
the user herself. Tweets must be ordered from most 
recent to least recent. */
    fun getNewsFeed(userId: Int): List<Int> {
 
    }
 
    /** Follower follows a followee. If the 
operation is invalid, it should be a no-op. */
    fun follow(followerId: Int, followeeId: Int) {
 
    }
 
    /** Follower unfollows a followee. If the ";"";"2020-03-25 15:18:29"
8702;703;"Python3";"class Twitter:
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
        
 
    def postTweet(self, userId: int, tweetId: int) 
-> None:
        """"""
        Compose a new tweet.
        """"""
        
 
    def getNewsFeed(self, userId: int) -> List[int]:
        """"""
        Retrieve the 10 most recent tweet ids in 
the user's news feed. Each item in the news feed 
must be posted by users who the user followed or by 
the user herself. Tweets must be ordered from most 
recent to least recent.
        """"""
        
 
    def follow(self, followerId: int, followeeId: ";"";"2020-03-25 15:18:29"
8703;703;"JavaScript";"/**
 * Initialize your data structure here.
 */
var Twitter = function() {
 
};
 
/**
 * Compose a new tweet. 
 * @param {number} userId 
 * @param {number} tweetId
 * @return {void}
 */
Twitter.prototype.postTweet = function(userId, 
tweetId) {
 
};
 
/**
 * Retrieve the 10 most recent tweet ids in the 
user's news feed. Each item in the news feed must 
be posted by users who the user followed or by the 
user herself. Tweets must be ordered from most 
recent to least recent. 
 * @param {number} userId
 * @return {number[]}";"";"2020-03-25 15:18:29"
8704;703;"PHP";"class Twitter {
    /**
     * Initialize your data structure here.
     */
    function __construct() {
        
    }
  
    /**
     * Compose a new tweet.
     * @param Integer $userId
     * @param Integer $tweetId
     * @return NULL
     */
    function postTweet($userId, $tweetId) {
        
    }
  
    /**
     * Retrieve the 10 most recent tweet ids in the 
user's news feed. Each item in the news feed must 
be posted by users who the user followed or by the 
user herself. Tweets must be ordered from most 
recent to least recent.
     * @param Integer $userId
     * @return Integer[]";"";"2020-03-25 15:18:29"
8705;703;"Swift";"class Twitter {
 
    /** Initialize your data structure here. */
    init() {
        
    }
    
    /** Compose a new tweet. */
    func postTweet(_ userId: Int, _ tweetId: Int) {
        
    }
    
    /** Retrieve the 10 most recent tweet ids in 
the user's news feed. Each item in the news feed 
must be posted by users who the user followed or by 
the user herself. Tweets must be ordered from most 
recent to least recent. */
    func getNewsFeed(_ userId: Int) -> [Int] {
        
    }
    
    /** Follower follows a followee. If the 
operation is invalid, it should be a no-op. */
    func follow(_ followerId: Int, _ followeeId: 
Int) {
        ";"";"2020-03-25 15:18:29"
8706;703;"Ruby";"class Twitter
 
=begin
    Initialize your data structure here.
=end
    def initialize()
 
    end
 
 
=begin
    Compose a new tweet.
    :type user_id: Integer
    :type tweet_id: Integer
    :rtype: Void
=end
    def post_tweet(user_id, tweet_id)
 
    end
 
 
=begin
    Retrieve the 10 most recent tweet ids in the 
user's news feed. Each item in the news feed must 
be posted by users who the user followed or by the 
user herself. Tweets must be ordered from most ";"";"2020-03-25 15:18:29"
8707;703;"Python";"class Twitter(object):
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
        
 
    def postTweet(self, userId, tweetId):
        """"""
        Compose a new tweet.
        :type userId: int
        :type tweetId: int
        :rtype: None
        """"""
        
 
    def getNewsFeed(self, userId):
        """"""
        Retrieve the 10 most recent tweet ids in 
the user's news feed. Each item in the news feed 
must be posted by users who the user followed or by 
the user herself. Tweets must be ordered from most 
recent to least recent.
        :type userId: int
        :rtype: List[int]";"";"2020-03-25 15:18:29"
8708;704;"C#";"/*
// Definition for a Node.
public class Node {
    public int val;
    public Node prev;
    public Node next;
    public Node child;
}
*/
public class Solution {
    public Node Flatten(Node head) {
        
    }
}";"";"2020-03-25 15:18:29"
8709;704;"Java";"/*
// Definition for a Node.
class Node {
    public int val;
    public Node prev;
    public Node next;
    public Node child;
};
*/
class Solution {
    public Node flatten(Node head) {
        
    }
}";"";"2020-03-25 15:18:29"
8710;704;"C++";"/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* prev;
    Node* next;
    Node* child;
};
*/
class Solution {
public:
    Node* flatten(Node* head) {
        
    }
};";"";"2020-03-25 15:18:29"
8711;704;"Python3";"""""""
# Definition for a Node.
class Node:
    def __init__(self, val, prev, next, child):
        self.val = val
        self.prev = prev
        self.next = next
        self.child = child
""""""
class Solution:
    def flatten(self, head: 'Node') -> 'Node':";"";"2020-03-25 15:18:29"
8712;704;"JavaScript";"/**
 * // Definition for a Node.
 * function Node(val,prev,next,child) {
 *    this.val = val;
 *    this.prev = prev;
 *    this.next = next;
 *    this.child = child;
 * };
 */
/**
 * @param {Node} head
 * @return {Node}
 */
var flatten = function(head) {
    
};";"";"2020-03-25 15:18:29"
8713;704;"Python";"""""""
# Definition for a Node.
class Node(object):
    def __init__(self, val, prev, next, child):
        self.val = val
        self.prev = prev
        self.next = next
        self.child = child
""""""
class Solution(object):
    def flatten(self, head):
        """"""
        :type head: Node
        :rtype: Node
        """"""";"";"2020-03-25 15:18:29"
8714;705;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<TreeNode> AllPossibleFBT(int N) {
 
    }
}";"";"2020-03-25 15:18:29"
8715;705;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<TreeNode> allPossibleFBT(int N) {
 
    }
}";"";"2020-03-25 15:18:29"
8716;705;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn all_possible_fbt(n: i32) -> 
Vec<Option<Rc<RefCell<TreeNode>>>> {
        
    }
}";"";"2020-03-25 15:18:29"
8717;705;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
struct TreeNode** allPossibleFBT(int N, int* 
returnSize){
 
}";"";"2020-03-25 15:18:29"
8718;705;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def allPossibleFBT(N: Int): List[TreeNode] = {
 
    }
}";"";"2020-03-25 15:18:29"
8719;705;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func allPossibleFBT(N int) []*TreeNode {
 
}";"";"2020-03-25 15:18:29"
8720;705;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun allPossibleFBT(N: Int): List<TreeNode?> {
 
    }
}";"";"2020-03-25 15:18:29"
8721;705;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def allPossibleFBT(self, N: int) -> List
[TreeNode]:";"";"2020-03-25 15:18:29"
8722;705;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {number} N
 * @return {TreeNode[]}
 */
var allPossibleFBT = function(N) {
 
};";"";"2020-03-25 15:18:29"
8723;705;"PHP";"/**";"";"2020-03-25 15:18:29"
8724;705;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func allPossibleFBT(_ N: Int) -> [TreeNode?] {
        
    }
}";"";"2020-03-25 15:18:29"
8725;705;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {Integer} n
# @return {TreeNode[]}
def all_possible_fbt(n)
 
end";"";"2020-03-25 15:18:29"
8726;705;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def allPossibleFBT(self, N):
        """"""
        :type N: int
        :rtype: List[TreeNode]
        """"""";"";"2020-03-25 15:18:29"
8727;706;"C#";"public class Solution {
    public IList<int> PathInZigZagTree(int label) {
 
    }
}";"";"2020-03-25 15:18:29"
8728;706;"Java";"class Solution {
    public List<Integer> pathInZigZagTree(int label)
 {
 
    }
}";"";"2020-03-25 15:18:29"
8729;706;"Rust";"impl Solution {
    pub fn path_in_zig_zag_tree(label: i32) -> 
Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:29"
8730;706;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* pathInZigZagTree(int label, int* returnSize){
 
}";"";"2020-03-25 15:18:29"
8731;706;"Scala";"object Solution {
    def pathInZigZagTree(label: Int): List[Int] = {
 
    }
}";"";"2020-03-25 15:18:29"
8732;706;"Go";"func pathInZigZagTree(label int) []int {
 
}";"";"2020-03-25 15:18:29"
8733;706;"Kotlin";"class Solution {
    fun pathInZigZagTree(label: Int): List<Int> {
 
    }
}";"";"2020-03-25 15:18:29"
8734;706;"Python3";"class Solution:
    def pathInZigZagTree(self, label: int) -> List
[int]:";"";"2020-03-25 15:18:29"
8735;706;"JavaScript";"/**
 * @param {number} label
 * @return {number[]}
 */
var pathInZigZagTree = function(label) {
 
};";"";"2020-03-25 15:18:29"
8736;706;"PHP";"class Solution {";"";"2020-03-25 15:18:29"
8737;706;"Swift";"class Solution {
    func pathInZigZagTree(_ label: Int) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:29"
8738;706;"Ruby";"# @param {Integer} label
# @return {Integer[]}
def path_in_zig_zag_tree(label)
 
end";"";"2020-03-25 15:18:29"
8739;706;"Python";"class Solution(object):
    def pathInZigZagTree(self, label):
        """"""
        :type label: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:29"
8740;707;"C#";"public class Solution {
    public int ShortestPathAllKeys(string[] grid) {
 
    }
}";"";"2020-03-25 15:18:29"
8741;707;"Java";"class Solution {
    public int shortestPathAllKeys(String[] grid) {
 
    }
}";"";"2020-03-25 15:18:29"
8742;707;"C";"int shortestPathAllKeys(char ** grid, int gridSize){
 
}";"";"2020-03-25 15:18:29"
8743;707;"Python3";"class Solution:
    def shortestPathAllKeys(self, grid: List[str]) 
-> int:";"";"2020-03-25 15:18:29"
8744;707;"JavaScript";"/**
 * @param {string[]} grid
 * @return {number}
 */
var shortestPathAllKeys = function(grid) {
 
};";"";"2020-03-25 15:18:29"
8745;707;"Swift";"class Solution {";"";"2020-03-25 15:18:29"
8746;707;"Ruby";"# @param {String[]} grid
# @return {Integer}
def shortest_path_all_keys(grid)
 
end";"";"2020-03-25 15:18:29"
8747;707;"Python";"class Solution(object):
    def shortestPathAllKeys(self, grid):
        """"""
        :type grid: List[str]
        :rtype: int
        """"""";"";"2020-03-25 15:18:29"
8748;708;"C#";"public class Solution {
    public int SumSubarrayMins(int[] A) {
 
    }
}";"";"2020-03-25 15:18:29"
8749;708;"Java";"class Solution {
    public int sumSubarrayMins(int[] A) {
 
    }
}";"";"2020-03-25 15:18:29"
8750;708;"C++";"class Solution {
public:
    int sumSubarrayMins(vector<int>& A) {
 
    }
};";"";"2020-03-25 15:18:29"
8751;708;"C";"int sumSubarrayMins(int* A, int ASize){
 
}";"";"2020-03-25 15:18:29"
8752;708;"Rust";"impl Solution {
    pub fn sum_subarray_mins(a: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:29"
8753;708;"Scala";"object Solution {
    def sumSubarrayMins(A: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:29"
8754;708;"Go";"func sumSubarrayMins(A []int) int {
 
}";"";"2020-03-25 15:18:29"
8755;708;"Kotlin";"class Solution {
    fun sumSubarrayMins(A: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:29"
8756;708;"Python3";"class Solution:
    def sumSubarrayMins(self, A: List[int]) -> int:";"";"2020-03-25 15:18:29"
8757;708;"JavaScript";"/**
 * @param {number[]} A
 * @return {number}
 */
var sumSubarrayMins = function(A) {
 
};";"";"2020-03-25 15:18:29"
8758;708;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @return Integer
     */
    function sumSubarrayMins($A) {
        
    }
}";"";"2020-03-25 15:18:29"
8759;708;"Swift";"class Solution {
    func sumSubarrayMins(_ A: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:29"
8760;708;"Ruby";"# @param {Integer[]} a
# @return {Integer}
def sum_subarray_mins(a)
 
end";"";"2020-03-25 15:18:29"
8761;708;"Python";"class Solution(object):
    def sumSubarrayMins(self, A):
        """"""
        :type A: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:29"
8762;709;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode TrimBST(TreeNode root, int L, 
int R) {
 
    }
}";"";"2020-03-25 15:18:29"
8763;709;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode trimBST(TreeNode root, int L, 
int R) {
 
    }
}";"";"2020-03-25 15:18:29"
8764;709;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* trimBST(struct TreeNode* root, int 
L, int R){
 
}";"";"2020-03-25 15:18:29"
8765;709;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn trim_bst(root: 
Option<Rc<RefCell<TreeNode>>>, l: i32, r: i32) -> 
Option<Rc<RefCell<TreeNode>>> {
        
    }";"";"2020-03-25 15:18:29"
8766;709;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def trimBST(root: TreeNode, L: Int, R: Int): 
TreeNode = {
 
    }
}";"";"2020-03-25 15:18:29"
8767;709;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func trimBST(root *TreeNode, L int, R int) 
*TreeNode {
 
}";"";"2020-03-25 15:18:29"
8768;709;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun trimBST(root: TreeNode?, L: Int, R: Int): 
TreeNode? {
 
    }
}";"";"2020-03-25 15:18:29"
8769;709;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def trimBST(self, root: TreeNode, L: int, R: 
int) -> TreeNode:";"";"2020-03-25 15:18:29"
8770;709;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} L
 * @param {number} R
 * @return {TreeNode}
 */
var trimBST = function(root, L, R) {
 
};";"";"2020-03-25 15:18:29"
8771;709;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @param Integer $L
     * @param Integer $R
     * @return TreeNode
     */
    function trimBST($root, $L, $R) {
        
    }
}";"";"2020-03-25 15:18:29"
8772;709;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func trimBST(_ root: TreeNode?, _ L: Int, _ R: 
Int) -> TreeNode? {
        
    }
}";"";"2020-03-25 15:18:29"
8773;709;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:29"
8774;709;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def trimBST(self, root, L, R):
        """"""
        :type root: TreeNode
        :type L: int
        :type R: int
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:29"
8775;710;"C#";"public class Solution {
    public double SoupServings(int N) {
 
    }
}";"";"2020-03-25 15:18:29"
8776;710;"Java";"class Solution {
    public double soupServings(int N) {
 
    }
}";"";"2020-03-25 15:18:29"
8777;710;"C";"double soupServings(int N){
 
}";"";"2020-03-25 15:18:29"
8778;710;"Rust";"impl Solution {
    pub fn soup_servings(n: i32) -> f64 {
        
    }
}";"";"2020-03-25 15:18:29"
8779;710;"Scala";"object Solution {
    def soupServings(N: Int): Double = {
 
    }
}";"";"2020-03-25 15:18:29"
8780;710;"Go";"func soupServings(N int) float64 {
 
}";"";"2020-03-25 15:18:29"
8781;710;"Kotlin";"class Solution {
    fun soupServings(N: Int): Double {
 
    }
}";"";"2020-03-25 15:18:29"
8782;710;"Python3";"class Solution:
    def soupServings(self, N: int) -> float:";"";"2020-03-25 15:18:29"
8783;710;"JavaScript";"/**
 * @param {number} N
 * @return {number}
 */
var soupServings = function(N) {
 
};";"";"2020-03-25 15:18:29"
8784;710;"PHP";"class Solution {
 
    /**
     * @param Integer $N
     * @return Float
     */
    function soupServings($N) {
        
    }
}";"";"2020-03-25 15:18:29"
8785;710;"Swift";"class Solution {
    func soupServings(_ N: Int) -> Double {
        
    }
}";"";"2020-03-25 15:18:29"
8786;710;"Ruby";"# @param {Integer} n";"";"2020-03-25 15:18:29"
8787;710;"Python";"class Solution(object):
    def soupServings(self, N):
        """"""
        :type N: int
        :rtype: float
        """"""";"";"2020-03-25 15:18:29"
8788;711;"C#";"public class RandomizedSet {
 
    /** Initialize your data structure here. */
    public RandomizedSet() {
 
    }
    
    /** Inserts a value to the set. Returns true if 
the set did not already contain the specified 
element. */
    public bool Insert(int val) {
 
    }
    
    /** Removes a value from the set. Returns true 
if the set contained the specified element. */
    public bool Remove(int val) {
 
    }
    
    /** Get a random element from the set. */
    public int GetRandom() {
 
    }
}
 ";"";"2020-03-25 15:18:29"
8789;711;"Java";"class RandomizedSet {
 
    /** Initialize your data structure here. */
    public RandomizedSet() {
 
    }
    
    /** Inserts a value to the set. Returns true if 
the set did not already contain the specified 
element. */
    public boolean insert(int val) {
 
    }
    
    /** Removes a value from the set. Returns true 
if the set contained the specified element. */
    public boolean remove(int val) {
 
    }
    
    /** Get a random element from the set. */
    public int getRandom() {
 
    }
}
 ";"";"2020-03-25 15:18:29"
8790;711;"Rust";"struct RandomizedSet {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl RandomizedSet {
 
    /** Initialize your data structure here. */
    fn new() -> Self {
        
    }
    
    /** Inserts a value to the set. Returns true if 
the set did not already contain the specified 
element. */
    fn insert(&self, val: i32) -> bool {
        
    }
    
    /** Removes a value from the set. Returns true ";"";"2020-03-25 15:18:29"
8791;711;"C";"typedef struct {
    
} RandomizedSet;
 
/** Initialize your data structure here. */
 
RandomizedSet* randomizedSetCreate() {
    
}
 
/** Inserts a value to the set. Returns true if the 
set did not already contain the specified element. 
*/
bool randomizedSetInsert(RandomizedSet* obj, int 
val) {
  
}
 
/** Removes a value from the set. Returns true if 
the set contained the specified element. */
bool randomizedSetRemove(RandomizedSet* obj, int 
val) {
  
}
 
/** Get a random element from the set. */";"";"2020-03-25 15:18:29"
8792;711;"Scala";"class RandomizedSet() {
 
    /** Initialize your data structure here. */
 
 
    /** Inserts a value to the set. Returns true if 
the set did not already contain the specified 
element. */
    def insert(`val`: Int): Boolean = {
 
    }
 
    /** Removes a value from the set. Returns true 
if the set contained the specified element. */
    def remove(`val`: Int): Boolean = {
 
    }
 
    /** Get a random element from the set. */
    def getRandom(): Int = {
 
    }
 
}
 
/**";"";"2020-03-25 15:18:29"
8793;711;"Go";"type RandomizedSet struct {
 
}
 
 
/** Initialize your data structure here. */
func Constructor() RandomizedSet {
 
}
 
 
/** Inserts a value to the set. Returns true if the 
set did not already contain the specified element. 
*/
func (this *RandomizedSet) Insert(val int) bool {
 
}
 
 
/** Removes a value from the set. Returns true if 
the set contained the specified element. */
func (this *RandomizedSet) Remove(val int) bool {
 
}
 
 ";"";"2020-03-25 15:18:29"
8794;711;"Kotlin";"class RandomizedSet() {
 
    /** Initialize your data structure here. */
 
 
    /** Inserts a value to the set. Returns true if 
the set did not already contain the specified 
element. */
    fun insert(`val`: Int): Boolean {
 
    }
 
    /** Removes a value from the set. Returns true 
if the set contained the specified element. */
    fun remove(`val`: Int): Boolean {
 
    }
 
    /** Get a random element from the set. */
    fun getRandom(): Int {
 
    }
 
}
 
/**";"";"2020-03-25 15:18:29"
8795;711;"Python3";"class RandomizedSet:
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
        
 
    def insert(self, val: int) -> bool:
        """"""
        Inserts a value to the set. Returns true if 
the set did not already contain the specified 
element.
        """"""
        
 
    def remove(self, val: int) -> bool:
        """"""
        Removes a value from the set. Returns true 
if the set contained the specified element.
        """"""
        
 
    def getRandom(self) -> int:
        """"""
        Get a random element from the set.";"";"2020-03-25 15:18:29"
8796;711;"JavaScript";"/**
 * Initialize your data structure here.
 */
var RandomizedSet = function() {
 
};
 
/**
 * Inserts a value to the set. Returns true if the 
set did not already contain the specified element. 
 * @param {number} val
 * @return {boolean}
 */
RandomizedSet.prototype.insert = function(val) {
 
};
 
/**
 * Removes a value from the set. Returns true if 
the set contained the specified element. 
 * @param {number} val
 * @return {boolean}
 */
RandomizedSet.prototype.remove = function(val) {
 
};";"";"2020-03-25 15:18:29"
8797;711;"PHP";"class RandomizedSet {";"";"2020-03-25 15:18:29"
8798;711;"Swift";"class RandomizedSet {
 
    /** Initialize your data structure here. */
    init() {
        
    }
    
    /** Inserts a value to the set. Returns true if 
the set did not already contain the specified 
element. */
    func insert(_ val: Int) -> Bool {
        
    }
    
    /** Removes a value from the set. Returns true 
if the set contained the specified element. */
    func remove(_ val: Int) -> Bool {
        
    }
    
    /** Get a random element from the set. */
    func getRandom() -> Int {
        
    }
}
 ";"";"2020-03-25 15:18:29"
8799;711;"Ruby";"class RandomizedSet
 
=begin
    Initialize your data structure here.
=end
    def initialize()
 
    end
 
 
=begin
    Inserts a value to the set. Returns true if the 
set did not already contain the specified element.
    :type val: Integer
    :rtype: Boolean
=end
    def insert(val)
 
    end
 
 
=begin
    Removes a value from the set. Returns true if 
the set contained the specified element.
    :type val: Integer
    :rtype: Boolean";"";"2020-03-25 15:18:29"
8800;711;"Python";"class RandomizedSet(object):
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
        
 
    def insert(self, val):
        """"""
        Inserts a value to the set. Returns true if 
the set did not already contain the specified 
element.
        :type val: int
        :rtype: bool
        """"""
        
 
    def remove(self, val):
        """"""
        Removes a value from the set. Returns true 
if the set contained the specified element.
        :type val: int
        :rtype: bool
        """"""
        ";"";"2020-03-25 15:18:29"
8801;712;"C#";"public class Solution {
    public int[] FindClosedNumbers(int num) {
 
    }
}";"";"2020-03-25 15:18:29"
8802;712;"Java";"class Solution {
    public int[] findClosedNumbers(int num) {
 
    }
}";"";"2020-03-25 15:18:29"
8803;712;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* findClosedNumbers(int num, int* returnSize){
 
}";"";"2020-03-25 15:18:29"
8804;712;"Rust";"impl Solution {
    pub fn find_closed_numbers(num: i32) -> 
Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:29"
8805;712;"Scala";"object Solution {
    def findClosedNumbers(num: Int): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:29"
8806;712;"Go";"func findClosedNumbers(num int) []int {
 
}";"";"2020-03-25 15:18:29"
8807;712;"Kotlin";"class Solution {
    fun findClosedNumbers(num: Int): IntArray {
 
    }
}";"";"2020-03-25 15:18:29"
8808;712;"Python3";"class Solution:
    def findClosedNumbers(self, num: int) -> List
[int]:";"";"2020-03-25 15:18:29"
8809;712;"JavaScript";"/**
 * @param {number} num
 * @return {number[]}
 */
var findClosedNumbers = function(num) {
 
};";"";"2020-03-25 15:18:29"
8810;712;"PHP";"class Solution {
 
    /**
     * @param Integer $num
     * @return Integer[]
     */
    function findClosedNumbers($num) {
 
    }
}";"";"2020-03-25 15:18:29"
8811;712;"Swift";"class Solution {
    func findClosedNumbers(_ num: Int) -> [Int] {
 
    }
}";"";"2020-03-25 15:18:29"
8812;712;"Ruby";"# @param {Integer} num
# @return {Integer[]}
def find_closed_numbers(num)
 
end";"";"2020-03-25 15:18:29"
8813;712;"Python";"class Solution(object):
    def findClosedNumbers(self, num):
        """"""
        :type num: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:29"
8814;713;"C#";"public class Solution {
    public int FindComplement(int num) {
 
    }
}";"";"2020-03-25 15:18:29"
8815;713;"Java";"class Solution {
    public int findComplement(int num) {
 
    }
}";"";"2020-03-25 15:18:29"
8816;713;"Rust";"impl Solution {
    pub fn find_complement(num: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:29"
8817;713;"C";"int findComplement(int num){
 
}";"";"2020-03-25 15:18:29"
8818;713;"Scala";"object Solution {
    def findComplement(num: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:29"
8819;713;"Go";"func findComplement(num int) int {
 
}";"";"2020-03-25 15:18:29"
8820;713;"Kotlin";"class Solution {
    fun findComplement(num: Int): Int {
 
    }
}";"";"2020-03-25 15:18:29"
8821;713;"Python3";"class Solution:
    def findComplement(self, num: int) -> int:";"";"2020-03-25 15:18:29"
8822;713;"JavaScript";"/**
 * @param {number} num
 * @return {number}
 */
var findComplement = function(num) {
 
};";"";"2020-03-25 15:18:29"
8823;713;"PHP";"class Solution {";"";"2020-03-25 15:18:29"
8824;713;"Swift";"class Solution {
    func findComplement(_ num: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:29"
8825;713;"Ruby";"# @param {Integer} num
# @return {Integer}
def find_complement(num)
 
end";"";"2020-03-25 15:18:29"
8826;713;"Python";"class Solution(object):
    def findComplement(self, num):
        """"""
        :type num: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:29"
8827;714;"C#";"public class Solution {
    public int MagicalString(int n) {
 
    }
}";"";"2020-03-25 15:18:29"
8828;714;"Java";"class Solution {
    public int magicalString(int n) {
 
    }
}";"";"2020-03-25 15:18:29"
8829;714;"C";"int magicalString(int n){
 
}";"";"2020-03-25 15:18:29"
8830;714;"Rust";"impl Solution {
    pub fn magical_string(n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:29"
8831;714;"Scala";"object Solution {
    def magicalString(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:29"
8832;714;"Go";"func magicalString(n int) int {
 
}";"";"2020-03-25 15:18:29"
8833;714;"Kotlin";"class Solution {
    fun magicalString(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:29"
8834;714;"Python3";"class Solution:
    def magicalString(self, n: int) -> int:";"";"2020-03-25 15:18:29"
8835;714;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var magicalString = function(n) {
 
};";"";"2020-03-25 15:18:29"
8836;714;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function magicalString($n) {
        
    }
}";"";"2020-03-25 15:18:29"
8837;714;"Swift";"class Solution {
    func magicalString(_ n: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:29"
8838;714;"Ruby";"# @param {Integer} n
# @return {Integer}
def magical_string(n)
 
end";"";"2020-03-25 15:18:29"
8839;714;"Python";"class Solution(object):
    def magicalString(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:29"
8840;715;"C#";"public class Solution {
    public IList<IList<string>> FindLadders(string 
beginWord, string endWord, IList<string> wordList) {
 
    }
}";"";"2020-03-25 15:18:29"
8841;715;"Java";"class Solution {
    public List<List<String>> findLadders(String 
beginWord, String endWord, List<String> wordList) {
 
    }
}";"";"2020-03-25 15:18:29"
8842;715;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
char *** findLadders(char * beginWord, char * 
endWord, char ** wordList, int wordListSize, int* 
returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:29"
8843;715;"Rust";"impl Solution {
    pub fn find_ladders(begin_word: String, 
end_word: String, word_list: Vec<String>) -> 
Vec<Vec<String>> {
 
    }
}";"";"2020-03-25 15:18:29"
8844;715;"Scala";"object Solution {
    def findLadders(beginWord: String, endWord: 
String, wordList: List[String]): List[List[String]] 
= {
 
    }
}";"";"2020-03-25 15:18:29"
8845;715;"Go";"func findLadders(beginWord string, endWord string, 
wordList []string) [][]string {
 
}";"";"2020-03-25 15:18:29"
8846;715;"Kotlin";"class Solution {
    fun findLadders(beginWord: String, endWord: 
String, wordList: List<String>): List<List<String>> 
{
 
    }
}";"";"2020-03-25 15:18:29"
8847;715;"Python3";"class Solution:
    def findLadders(self, beginWord: str, endWord: 
str, wordList: List[str]) -> List[List[str]]:";"";"2020-03-25 15:18:29"
8848;715;"JavaScript";"/**
 * @param {string} beginWord
 * @param {string} endWord
 * @param {string[]} wordList
 * @return {string[][]}
 */
var findLadders = function(beginWord, endWord, 
wordList) {
 
};";"";"2020-03-25 15:18:29"
8849;715;"PHP";"class Solution {
 
    /**
     * @param String $beginWord
     * @param String $endWord
     * @param String[] $wordList
     * @return String[][]
     */
    function findLadders($beginWord, $endWord, 
$wordList) {
 
    }
}";"";"2020-03-25 15:18:29"
8850;715;"Swift";"class Solution {
    func findLadders(_ beginWord: String, _ 
endWord: String, _ wordList: [String]) -> [[String]]
 {
 
    }
}";"";"2020-03-25 15:18:29"
8851;715;"Ruby";"# @param {String} begin_word";"";"2020-03-25 15:18:29"
8852;715;"Python";"class Solution(object):
    def findLadders(self, beginWord, endWord, 
wordList):
        """"""
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: List[List[str]]
        """"""";"";"2020-03-25 15:18:29"
8853;716;"C#";"public class Solution {
    public int[] SubSort(int[] array) {
 
    }
}";"";"2020-03-25 15:18:30"
8854;716;"Java";"class Solution {
    public int[] subSort(int[] array) {
 
    }
}";"";"2020-03-25 15:18:30"
8855;716;"Rust";"impl Solution {
    pub fn sub_sort(array: Vec<i32>) -> Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:30"
8856;716;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* subSort(int* array, int arraySize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:30"
8857;716;"Scala";"object Solution {
    def subSort(array: Array[Int]): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:30"
8858;716;"Go";"func subSort(array []int) []int {
 
}";"";"2020-03-25 15:18:30"
8859;716;"Kotlin";"class Solution {
    fun subSort(array: IntArray): IntArray {
 
    }
}";"";"2020-03-25 15:18:30"
8860;716;"Python3";"class Solution:
    def subSort(self, array: List[int]) -> List[int]
:";"";"2020-03-25 15:18:30"
8861;716;"JavaScript";"/**
 * @param {number[]} array
 * @return {number[]}
 */
var subSort = function(array) {
 
};";"";"2020-03-25 15:18:30"
8862;716;"PHP";"class Solution {
 
    /**
     * @param Integer[] $array
     * @return Integer[]
     */
    function subSort($array) {
 
    }
}";"";"2020-03-25 15:18:30"
8863;716;"Swift";"class Solution {
    func subSort(_ array: [Int]) -> [Int] {
 
    }
}";"";"2020-03-25 15:18:30"
8864;716;"Ruby";"# @param {Integer[]} array
# @return {Integer[]}
def sub_sort(array)
 
end";"";"2020-03-25 15:18:30"
8865;716;"Python";"class Solution(object):
    def subSort(self, array):
        """"""
        :type array: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:30"
8866;717;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<int> LargestValues(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:30"
8867;717;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> largestValues(TreeNode 
root) {
 
    }
}";"";"2020-03-25 15:18:30"
8868;717;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn largest_values(root: 
Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:30"
8869;717;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* largestValues(struct TreeNode* root, int* 
returnSize){
 
}";"";"2020-03-25 15:18:30"
8870;717;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def largestValues(root: TreeNode): List[Int] = {
 
    }
}";"";"2020-03-25 15:18:30"
8871;717;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func largestValues(root *TreeNode) []int {
 
}";"";"2020-03-25 15:18:30"
8872;717;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun largestValues(root: TreeNode?): List<Int> {
 
    }
}";"";"2020-03-25 15:18:30"
8873;717;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def largestValues(self, root: TreeNode) -> List
[int]:";"";"2020-03-25 15:18:30"
8874;717;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[]}
 */
var largestValues = function(root) {
 
};";"";"2020-03-25 15:18:30"
8875;717;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer[]
     */
    function largestValues($root) {
        
    }
}";"";"2020-03-25 15:18:30"
8876;717;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func largestValues(_ root: TreeNode?) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:30"
8877;717;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer[]}
def largest_values(root)
 
end";"";"2020-03-25 15:18:30"
8878;717;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def largestValues(self, root):
        """"""
        :type root: TreeNode
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:30"
8879;718;"C#";"public class Solution {
    public int ShortestSubarray(int[] A, int K) {
 
    }
}";"";"2020-03-25 15:18:30"
8880;718;"Java";"class Solution {
    public int shortestSubarray(int[] A, int K) {
 
    }
}";"";"2020-03-25 15:18:30"
8881;718;"C";"int shortestSubarray(int* A, int ASize, int K){
 
}";"";"2020-03-25 15:18:30"
8882;718;"Rust";"impl Solution {
    pub fn shortest_subarray(a: Vec<i32>, k: i32) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:30"
8883;718;"Scala";"object Solution {
    def shortestSubarray(A: Array[Int], K: Int): 
Int = {
 
    }
}";"";"2020-03-25 15:18:30"
8884;718;"Go";"func shortestSubarray(A []int, K int) int {
 
}";"";"2020-03-25 15:18:30"
8885;718;"Kotlin";"class Solution {
    fun shortestSubarray(A: IntArray, K: Int): Int {
 
    }
}";"";"2020-03-25 15:18:30"
8886;718;"Python3";"class Solution:
    def shortestSubarray(self, A: List[int], K: int)
 -> int:";"";"2020-03-25 15:18:30"
8887;718;"JavaScript";"/**
 * @param {number[]} A
 * @param {number} K
 * @return {number}
 */
var shortestSubarray = function(A, K) {
 
};";"";"2020-03-25 15:18:30"
8888;718;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @param Integer $K
     * @return Integer
     */
    function shortestSubarray($A, $K) {
        
    }
}";"";"2020-03-25 15:18:30"
8889;718;"Swift";"class Solution {
    func shortestSubarray(_ A: [Int], _ K: Int) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:30"
8890;718;"Ruby";"# @param {Integer[]} a
# @param {Integer} k
# @return {Integer}
def shortest_subarray(a, k)
 
end";"";"2020-03-25 15:18:30"
8891;718;"Python";"class Solution(object):
    def shortestSubarray(self, A, K):
        """"""
        :type A: List[int]
        :type K: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:30"
8892;719;"C#";"public class Solution {
    public bool IsPossible(int[] target) {
 
    }
}";"";"2020-03-25 15:18:30"
8893;719;"Java";"class Solution {
    public boolean isPossible(int[] target) {
 
    }
}";"";"2020-03-25 15:18:30"
8894;719;"Rust";"impl Solution {
    pub fn is_possible(target: Vec<i32>) -> bool {
 
    }
}";"";"2020-03-25 15:18:30"
8895;719;"C";"bool isPossible(int* target, int targetSize){
 
}";"";"2020-03-25 15:18:30"
8896;719;"Scala";"object Solution {
    def isPossible(target: Array[Int]): Boolean = {
 
    }
}";"";"2020-03-25 15:18:30"
8897;719;"Go";"func isPossible(target []int) bool {
 
}";"";"2020-03-25 15:18:30"
8898;719;"Kotlin";"class Solution {
    fun isPossible(target: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:30"
8899;719;"Python3";"class Solution:
    def isPossible(self, target: List[int]) -> bool:";"";"2020-03-25 15:18:30"
8900;719;"JavaScript";"/**
 * @param {number[]} target
 * @return {boolean}
 */
var isPossible = function(target) {
 
};";"";"2020-03-25 15:18:30"
8901;719;"PHP";"class Solution {";"";"2020-03-25 15:18:30"
8902;719;"Swift";"class Solution {
    func isPossible(_ target: [Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:30"
8903;719;"Ruby";"# @param {Integer[]} target
# @return {Boolean}
def is_possible(target)
 
end";"";"2020-03-25 15:18:30"
8904;719;"Python";"class Solution(object):
    def isPossible(self, target):
        """"""
        :type target: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:30"
8905;720;"C#";"public class Solution {
    public int[] DailyTemperatures(int[] T) {
 
    }
}";"";"2020-03-25 15:18:30"
8906;720;"Java";"class Solution {
    public int[] dailyTemperatures(int[] T) {
 
    }
}";"";"2020-03-25 15:18:30"
8907;720;"Rust";"impl Solution {
    pub fn daily_temperatures(t: Vec<i32>) -> 
Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:30"
8908;720;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* dailyTemperatures(int* T, int TSize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:30"
8909;720;"Scala";"object Solution {
    def dailyTemperatures(T: Array[Int]): Array[Int]
 = {
 
    }
}";"";"2020-03-25 15:18:30"
8910;720;"Go";"func dailyTemperatures(T []int) []int {
 
}";"";"2020-03-25 15:18:30"
8911;720;"Kotlin";"class Solution {
    fun dailyTemperatures(T: IntArray): IntArray {
 
    }
}";"";"2020-03-25 15:18:30"
8912;720;"Python3";"class Solution:
    def dailyTemperatures(self, T: List[int]) -> 
List[int]:";"";"2020-03-25 15:18:30"
8913;720;"JavaScript";"/**
 * @param {number[]} T
 * @return {number[]}
 */
var dailyTemperatures = function(T) {
 
};";"";"2020-03-25 15:18:30"
8914;720;"PHP";"class Solution {";"";"2020-03-25 15:18:30"
8915;720;"Swift";"class Solution {
    func dailyTemperatures(_ T: [Int]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:30"
8916;720;"Ruby";"# @param {Integer[]} t
# @return {Integer[]}
def daily_temperatures(t)
 
end";"";"2020-03-25 15:18:30"
8917;720;"Python";"class Solution(object):
    def dailyTemperatures(self, T):
        """"""
        :type T: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:30"
8918;721;"C#";"public class Solution {
    public bool ValidateStackSequences(int[] pushed,
 int[] popped) {
 
    }
}";"";"2020-03-25 15:18:30"
8919;721;"Java";"class Solution {
    public boolean validateStackSequences(int[] 
pushed, int[] popped) {
 
    }
}";"";"2020-03-25 15:18:30"
8920;721;"Rust";"impl Solution {
    pub fn validate_stack_sequences(pushed: 
Vec<i32>, popped: Vec<i32>) -> bool {
        
    }
}";"";"2020-03-25 15:18:30"
8921;721;"C";"bool validateStackSequences(int* pushed, int 
pushedSize, int* popped, int poppedSize){
 
}";"";"2020-03-25 15:18:30"
8922;721;"Scala";"object Solution {
    def validateStackSequences(pushed: Array[Int], 
popped: Array[Int]): Boolean = {
 
    }
}";"";"2020-03-25 15:18:30"
8923;721;"Go";"func validateStackSequences(pushed []int, popped []
int) bool {
 
}";"";"2020-03-25 15:18:30"
8924;721;"Kotlin";"class Solution {
    fun validateStackSequences(pushed: IntArray, 
popped: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:30"
8925;721;"Python3";"class Solution:
    def validateStackSequences(self, pushed: List
[int], popped: List[int]) -> bool:";"";"2020-03-25 15:18:30"
8926;721;"JavaScript";"/**
 * @param {number[]} pushed
 * @param {number[]} popped
 * @return {boolean}
 */
var validateStackSequences = function(pushed, 
popped) {
 
};";"";"2020-03-25 15:18:30"
8927;721;"PHP";"class Solution {";"";"2020-03-25 15:18:30"
8928;721;"Swift";"class Solution {
    func validateStackSequences(_ pushed: [Int], _ 
popped: [Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:30"
8929;721;"Ruby";"# @param {Integer[]} pushed
# @param {Integer[]} popped
# @return {Boolean}
def validate_stack_sequences(pushed, popped)
 
end";"";"2020-03-25 15:18:30"
8930;721;"Python";"class Solution(object):
    def validateStackSequences(self, pushed, popped)
:
        """"""
        :type pushed: List[int]
        :type popped: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:30"
8931;722;"C#";"public class Solution {
    public double[] MedianSlidingWindow(int[] nums, 
int k) {
 
    }
}";"";"2020-03-25 15:18:30"
8932;722;"Java";"class Solution {
    public double[] medianSlidingWindow(int[] nums, 
int k) {
 
    }
}";"";"2020-03-25 15:18:30"
8933;722;"Rust";"impl Solution {
    pub fn median_sliding_window(nums: Vec<i32>, k: 
i32) -> Vec<f64> {
 
    }
}";"";"2020-03-25 15:18:30"
8934;722;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
double* medianSlidingWindow(int* nums, int numsSize,
 int k, int* returnSize){
 
}";"";"2020-03-25 15:18:30"
8935;722;"Scala";"object Solution {
    def medianSlidingWindow(nums: Array[Int], k: 
Int): Array[Double] = {
 
    }
}";"";"2020-03-25 15:18:30"
8936;722;"Go";"func medianSlidingWindow(nums []int, k int) []
float64 {
 
}";"";"2020-03-25 15:18:30"
8937;722;"Kotlin";"class Solution {
    fun medianSlidingWindow(nums: IntArray, k: Int)
: DoubleArray {
 
    }
}";"";"2020-03-25 15:18:30"
8938;722;"Python3";"class Solution:
    def medianSlidingWindow(self, nums: List[int], 
k: int) -> List[float]:";"";"2020-03-25 15:18:30"
8939;722;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number[]}
 */
var medianSlidingWindow = function(nums, k) {
 
};";"";"2020-03-25 15:18:30"
8940;722;"PHP";"class Solution {";"";"2020-03-25 15:18:30"
8941;722;"Swift";"class Solution {
    func medianSlidingWindow(_ nums: [Int], _ k: 
Int) -> [Double] {
 
    }
}";"";"2020-03-25 15:18:30"
8942;722;"Ruby";"# @param {Integer[]} nums
# @param {Integer} k
# @return {Float[]}
def median_sliding_window(nums, k)
 
end";"";"2020-03-25 15:18:30"
8943;722;"Python";"class Solution(object):
    def medianSlidingWindow(self, nums, k):
        """"""
        :type nums: List[int]
        :type k: int
        :rtype: List[float]
        """"""";"";"2020-03-25 15:18:30"
8944;723;"C#";"public class Solution {
    public int RegionsBySlashes(string[] grid) {
 
    }
}";"";"2020-03-25 15:18:30"
8945;723;"Java";"class Solution {
    public int regionsBySlashes(String[] grid) {
 
    }
}";"";"2020-03-25 15:18:30"
8946;723;"C";"int regionsBySlashes(char ** grid, int gridSize){
 
}";"";"2020-03-25 15:18:30"
8947;723;"Rust";"impl Solution {
    pub fn regions_by_slashes(grid: Vec<String>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:30"
8948;723;"Scala";"object Solution {
    def regionsBySlashes(grid: Array[String]): Int 
= {
 
    }
}";"";"2020-03-25 15:18:30"
8949;723;"Go";"func regionsBySlashes(grid []string) int {
 
}";"";"2020-03-25 15:18:30"
8950;723;"Kotlin";"class Solution {
    fun regionsBySlashes(grid: Array<String>): Int {
 
    }
}";"";"2020-03-25 15:18:30"
8951;723;"Python3";"class Solution:
    def regionsBySlashes(self, grid: List[str]) -> 
int:";"";"2020-03-25 15:18:30"
8952;723;"JavaScript";"/**
 * @param {string[]} grid
 * @return {number}
 */
var regionsBySlashes = function(grid) {
 
};";"";"2020-03-25 15:18:30"
8953;723;"PHP";"class Solution {
 
    /**
     * @param String[] $grid
     * @return Integer
     */
    function regionsBySlashes($grid) {
        
    }
}";"";"2020-03-25 15:18:30"
8954;723;"Swift";"class Solution {
    func regionsBySlashes(_ grid: [String]) -> Int {
        
    }
}";"";"2020-03-25 15:18:30"
8955;723;"Ruby";"# @param {String[]} grid";"";"2020-03-25 15:18:30"
8956;723;"Python";"class Solution(object):
    def regionsBySlashes(self, grid):
        """"""
        :type grid: List[str]
        :rtype: int
        """"""";"";"2020-03-25 15:18:30"
8957;724;"C#";"public class Solution {
    public int[] SumEvenAfterQueries(int[] A, int[]
[] queries) {
 
    }
}";"";"2020-03-25 15:18:30"
8958;724;"Java";"class Solution {
    public int[] sumEvenAfterQueries(int[] A, int[]
[] queries) {
 
    }
}";"";"2020-03-25 15:18:30"
8959;724;"Rust";"impl Solution {
    pub fn sum_even_after_queries(a: Vec<i32>, 
queries: Vec<Vec<i32>>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:30"
8960;724;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* sumEvenAfterQueries(int* A, int ASize, int** 
queries, int queriesSize, int* queriesColSize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:30"
8961;724;"Scala";"object Solution {
    def sumEvenAfterQueries(A: Array[Int], queries: 
Array[Array[Int]]): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:30"
8962;724;"Go";"func sumEvenAfterQueries(A []int, queries [][]int) 
[]int {
 
}";"";"2020-03-25 15:18:30"
8963;724;"Kotlin";"class Solution {
    fun sumEvenAfterQueries(A: IntArray, queries: 
Array<IntArray>): IntArray {
 
    }
}";"";"2020-03-25 15:18:30"
8964;724;"Python3";"class Solution:
    def sumEvenAfterQueries(self, A: List[int], 
queries: List[List[int]]) -> List[int]:";"";"2020-03-25 15:18:30"
8965;724;"JavaScript";"/**
 * @param {number[]} A
 * @param {number[][]} queries
 * @return {number[]}
 */
var sumEvenAfterQueries = function(A, queries) {
 
};";"";"2020-03-25 15:18:30"
8966;724;"PHP";"class Solution {";"";"2020-03-25 15:18:30"
8967;724;"Swift";"class Solution {
    func sumEvenAfterQueries(_ A: [Int], _ queries: 
[[Int]]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:30"
8968;724;"Ruby";"# @param {Integer[]} a
# @param {Integer[][]} queries
# @return {Integer[]}
def sum_even_after_queries(a, queries)
 
end";"";"2020-03-25 15:18:30"
8969;724;"Python";"class Solution(object):
    def sumEvenAfterQueries(self, A, queries):
        """"""
        :type A: List[int]
        :type queries: List[List[int]]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:30"
8970;725;"C#";"public class ProductOfNumbers {
 
    public ProductOfNumbers() {
 
    }
    
    public void Add(int num) {
 
    }
    
    public int GetProduct(int k) {
 
    }
}
 
/**
 * Your ProductOfNumbers object will be 
instantiated and called as such:
 * ProductOfNumbers obj = new ProductOfNumbers();
 * obj.Add(num);
 * int param_2 = obj.GetProduct(k);
 */";"";"2020-03-25 15:18:30"
8971;725;"Java";"class ProductOfNumbers {
 
    public ProductOfNumbers() {
 
    }
    
    public void add(int num) {
 
    }
    
    public int getProduct(int k) {
 
    }
}
 
/**
 * Your ProductOfNumbers object will be 
instantiated and called as such:
 * ProductOfNumbers obj = new ProductOfNumbers();
 * obj.add(num);
 * int param_2 = obj.getProduct(k);
 */";"";"2020-03-25 15:18:30"
8972;725;"Rust";"struct ProductOfNumbers {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl ProductOfNumbers {
 
    fn new() -> Self {
 
    }
    
    fn add(&self, num: i32) {
 
    }
    
    fn get_product(&self, k: i32) -> i32 {
 
    }
}
 ";"";"2020-03-25 15:18:30"
8973;725;"C";"typedef struct {
 
} ProductOfNumbers;
 
 
ProductOfNumbers* productOfNumbersCreate() {
 
}
 
void productOfNumbersAdd(ProductOfNumbers* obj, int 
num) {
 
}
 
int productOfNumbersGetProduct(ProductOfNumbers* 
obj, int k) {
 
}
 
void productOfNumbersFree(ProductOfNumbers* obj) {
 
}
 
/**
 * Your ProductOfNumbers struct will be 
instantiated and called as such:";"";"2020-03-25 15:18:30"
8974;725;"Scala";"class ProductOfNumbers() {
 
    def add(num: Int) {
 
    }
 
    def getProduct(k: Int): Int = {
 
    }
 
}
 
/**
 * Your ProductOfNumbers object will be 
instantiated and called as such:
 * var obj = new ProductOfNumbers()
 * obj.add(num)
 * var param_2 = obj.getProduct(k)
 */";"";"2020-03-25 15:18:30"
8975;725;"Go";"type ProductOfNumbers struct {
 
}
 
 
func Constructor() ProductOfNumbers {
 
}
 
 
func (this *ProductOfNumbers) Add(num int)  {
 
}
 
 
func (this *ProductOfNumbers) GetProduct(k int) int 
{
 
}
 
 
/**
 * Your ProductOfNumbers object will be 
instantiated and called as such:
 * obj := Constructor();
 * obj.Add(num);";"";"2020-03-25 15:18:30"
8976;725;"Kotlin";"class ProductOfNumbers() {
 
    fun add(num: Int) {
 
    }
 
    fun getProduct(k: Int): Int {
 
    }
 
}
 
/**
 * Your ProductOfNumbers object will be 
instantiated and called as such:
 * var obj = ProductOfNumbers()
 * obj.add(num)
 * var param_2 = obj.getProduct(k)
 */";"";"2020-03-25 15:18:30"
8977;725;"Python3";"class ProductOfNumbers:
 
    def __init__(self):
 
 
    def add(self, num: int) -> None:
 
 
    def getProduct(self, k: int) -> int:
 
 
 
# Your ProductOfNumbers object will be instantiated 
and called as such:
# obj = ProductOfNumbers()
# obj.add(num)
# param_2 = obj.getProduct(k)";"";"2020-03-25 15:18:30"
8978;725;"JavaScript";"var ProductOfNumbers = function() {
 
};
 
/** 
 * @param {number} num
 * @return {void}
 */
ProductOfNumbers.prototype.add = function(num) {
 
};
 
/** 
 * @param {number} k
 * @return {number}
 */
ProductOfNumbers.prototype.getProduct = function(k) 
{
 
};
 
/**
 * Your ProductOfNumbers object will be 
instantiated and called as such:
 * var obj = new ProductOfNumbers()
 * obj.add(num)";"";"2020-03-25 15:18:30"
8979;725;"PHP";"class ProductOfNumbers {
    /**
     */
    function __construct() {
 
    }
 
    /**
     * @param Integer $num
     * @return NULL
     */
    function add($num) {
 
    }
 
    /**
     * @param Integer $k
     * @return Integer
     */
    function getProduct($k) {
 
    }
}
 
/**
 * Your ProductOfNumbers object will be ";"";"2020-03-25 15:18:30"
8980;725;"Swift";"class ProductOfNumbers {
 
    init() {
        
    }
    
    func add(_ num: Int) {
        
    }
    
    func getProduct(_ k: Int) -> Int {
        
    }
}
 
/**
 * Your ProductOfNumbers object will be 
instantiated and called as such:
 * let obj = ProductOfNumbers()
 * obj.add(num)
 * let ret_2: Int = obj.getProduct(k)
 */";"";"2020-03-25 15:18:30"
8981;725;"Ruby";"class ProductOfNumbers
    def initialize()
 
    end
 
 
=begin
    :type num: Integer
    :rtype: Void
=end
    def add(num)
 
    end
 
 
=begin
    :type k: Integer
    :rtype: Integer
=end
    def get_product(k)
 
    end
 
 
end
 ";"";"2020-03-25 15:18:30"
8982;725;"Python";"class ProductOfNumbers(object):
 
    def __init__(self):
 
 
    def add(self, num):
        """"""
        :type num: int
        :rtype: None
        """"""
 
 
    def getProduct(self, k):
        """"""
        :type k: int
        :rtype: int
        """"""
 
 
 
# Your ProductOfNumbers object will be instantiated 
and called as such:
# obj = ProductOfNumbers()
# obj.add(num)
# param_2 = obj.getProduct(k)";"";"2020-03-25 15:18:30"
8983;726;"C#";"public class Solution {
    public int MirrorReflection(int p, int q) {
 
    }
}";"";"2020-03-25 15:18:30"
8984;726;"Java";"class Solution {
    public int mirrorReflection(int p, int q) {
 
    }
}";"";"2020-03-25 15:18:30"
8985;726;"C";"int mirrorReflection(int p, int q){
 
}";"";"2020-03-25 15:18:30"
8986;726;"Rust";"impl Solution {
    pub fn mirror_reflection(p: i32, q: i32) -> i32 
{
        
    }
}";"";"2020-03-25 15:18:30"
8987;726;"Scala";"object Solution {
    def mirrorReflection(p: Int, q: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:30"
8988;726;"Go";"func mirrorReflection(p int, q int) int {
 
}";"";"2020-03-25 15:18:30"
8989;726;"Kotlin";"class Solution {
    fun mirrorReflection(p: Int, q: Int): Int {
 
    }
}";"";"2020-03-25 15:18:30"
8990;726;"Python3";"class Solution:
    def mirrorReflection(self, p: int, q: int) -> 
int:";"";"2020-03-25 15:18:30"
8991;726;"JavaScript";"/**
 * @param {number} p
 * @param {number} q
 * @return {number}
 */
var mirrorReflection = function(p, q) {
 
};";"";"2020-03-25 15:18:30"
8992;726;"PHP";"class Solution {
 
    /**
     * @param Integer $p
     * @param Integer $q
     * @return Integer
     */
    function mirrorReflection($p, $q) {
        
    }
}";"";"2020-03-25 15:18:30"
8993;726;"Swift";"class Solution {
    func mirrorReflection(_ p: Int, _ q: Int) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:30"
8994;726;"Ruby";"# @param {Integer} p";"";"2020-03-25 15:18:30"
8995;726;"Python";"class Solution(object):
    def mirrorReflection(self, p, q):
        """"""
        :type p: int
        :type q: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:30"
8996;727;"C#";"public class Solution {
    public int CherryPickup(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:30"
8997;727;"Java";"class Solution {
    public int cherryPickup(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:30"
8998;727;"Rust";"impl Solution {
    pub fn cherry_pickup(grid: Vec<Vec<i32>>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:30"
8999;727;"C";"int cherryPickup(int** grid, int gridSize, int* 
gridColSize){
 
}";"";"2020-03-25 15:18:30"
9000;727;"Scala";"object Solution {
    def cherryPickup(grid: Array[Array[Int]]): Int 
= {
 
    }
}";"";"2020-03-25 15:18:30"
9001;727;"Go";"func cherryPickup(grid [][]int) int {
 
}";"";"2020-03-25 15:18:30"
9002;727;"Kotlin";"class Solution {
    fun cherryPickup(grid: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:30"
9003;727;"Python3";"class Solution:
    def cherryPickup(self, grid: List[List[int]]) 
-> int:";"";"2020-03-25 15:18:30"
9004;727;"JavaScript";"/**
 * @param {number[][]} grid
 * @return {number}
 */
var cherryPickup = function(grid) {
 
};";"";"2020-03-25 15:18:30"
9005;727;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $grid
     * @return Integer
     */
    function cherryPickup($grid) {
        
    }
}";"";"2020-03-25 15:18:30"
9006;727;"Swift";"class Solution {
    func cherryPickup(_ grid: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:30"
9007;727;"Ruby";"# @param {Integer[][]} grid
# @return {Integer}
def cherry_pickup(grid)
 
end";"";"2020-03-25 15:18:30"
9008;727;"Python";"class Solution(object):
    def cherryPickup(self, grid):
        """"""
        :type grid: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:30"
9009;728;"C#";"public class Solution {
    public int WiggleMaxLength(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:30"
9010;728;"Java";"class Solution {
    public int wiggleMaxLength(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:30"
9011;728;"C";"int wiggleMaxLength(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:30"
9012;728;"Rust";"impl Solution {
    pub fn wiggle_max_length(nums: Vec<i32>) -> i32 
{
        
    }
}";"";"2020-03-25 15:18:30"
9013;728;"Scala";"object Solution {
    def wiggleMaxLength(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:30"
9014;728;"Go";"func wiggleMaxLength(nums []int) int {
 
}";"";"2020-03-25 15:18:30"
9015;728;"Kotlin";"class Solution {
    fun wiggleMaxLength(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:30"
9016;728;"Python3";"class Solution:
    def wiggleMaxLength(self, nums: List[int]) -> 
int:";"";"2020-03-25 15:18:30"
9017;728;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var wiggleMaxLength = function(nums) {
 
};";"";"2020-03-25 15:18:30"
9018;728;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function wiggleMaxLength($nums) {
        
    }
}";"";"2020-03-25 15:18:30"
9019;728;"Swift";"class Solution {
    func wiggleMaxLength(_ nums: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:30"
9020;728;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def wiggle_max_length(nums)
 
end";"";"2020-03-25 15:18:30"
9021;728;"Python";"class Solution(object):
    def wiggleMaxLength(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:30"
9022;729;"C#";"public class Solution {
    public int FindLUSlength(string a, string b) {
 
    }
}";"";"2020-03-25 15:18:30"
9023;729;"Java";"class Solution {
    public int findLUSlength(String a, String b) {
 
    }
}";"";"2020-03-25 15:18:30"
9024;729;"Rust";"impl Solution {
    pub fn find_lu_slength(a: String, b: String) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:30"
9025;729;"C";"int findLUSlength(char * a, char * b){
 
}";"";"2020-03-25 15:18:30"
9026;729;"Scala";"object Solution {
    def findLUSlength(a: String, b: String): Int = {
 
    }
}";"";"2020-03-25 15:18:30"
9027;729;"Go";"func findLUSlength(a string, b string) int {
 
}";"";"2020-03-25 15:18:30"
9028;729;"Kotlin";"class Solution {
    fun findLUSlength(a: String, b: String): Int {
 
    }
}";"";"2020-03-25 15:18:30"
9029;729;"Python3";"class Solution:
    def findLUSlength(self, a: str, b: str) -> int:";"";"2020-03-25 15:18:30"
9030;729;"JavaScript";"/**
 * @param {string} a
 * @param {string} b
 * @return {number}
 */
var findLUSlength = function(a, b) {
 
};";"";"2020-03-25 15:18:30"
9031;729;"PHP";"class Solution {
 
    /**
     * @param String $a
     * @param String $b
     * @return Integer
     */
    function findLUSlength($a, $b) {
        
    }
}";"";"2020-03-25 15:18:30"
9032;729;"Swift";"class Solution {
    func findLUSlength(_ a: String, _ b: String) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:30"
9033;729;"Ruby";"# @param {String} a
# @param {String} b
# @return {Integer}
def find_lu_slength(a, b)
 
end";"";"2020-03-25 15:18:30"
9034;729;"Python";"class Solution(object):
    def findLUSlength(self, a, b):
        """"""
        :type a: str
        :type b: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:30"
9035;730;"C#";"public class Solution {
    public int[] MaxNumber(int[] nums1, int[] nums2,
 int k) {
 
    }
}";"";"2020-03-25 15:18:30"
9036;730;"Java";"class Solution {
    public int[] maxNumber(int[] nums1, int[] nums2,
 int k) {
 
    }
}";"";"2020-03-25 15:18:30"
9037;730;"Rust";"impl Solution {
    pub fn max_number(nums1: Vec<i32>, nums2: 
Vec<i32>, k: i32) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:30"
9038;730;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* maxNumber(int* nums1, int nums1Size, int* 
nums2, int nums2Size, int k, int* returnSize){
 
}";"";"2020-03-25 15:18:30"
9039;730;"Scala";"object Solution {
    def maxNumber(nums1: Array[Int], nums2: Array
[Int], k: Int): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:30"
9040;730;"Go";"func maxNumber(nums1 []int, nums2 []int, k int) []
int {
 
}";"";"2020-03-25 15:18:30"
9041;730;"Kotlin";"class Solution {
    fun maxNumber(nums1: IntArray, nums2: IntArray, 
k: Int): IntArray {
 
    }
}";"";"2020-03-25 15:18:30"
9042;730;"Python3";"class Solution:
    def maxNumber(self, nums1: List[int], nums2: 
List[int], k: int) -> List[int]:";"";"2020-03-25 15:18:30"
9043;730;"JavaScript";"/**
 * @param {number[]} nums1
 * @param {number[]} nums2
 * @param {number} k
 * @return {number[]}
 */
var maxNumber = function(nums1, nums2, k) {
 
};";"";"2020-03-25 15:18:30"
9044;730;"PHP";"class Solution {";"";"2020-03-25 15:18:30"
9045;730;"Swift";"class Solution {
    func maxNumber(_ nums1: [Int], _ nums2: [Int], 
_ k: Int) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:30"
9046;730;"Ruby";"# @param {Integer[]} nums1
# @param {Integer[]} nums2
# @param {Integer} k
# @return {Integer[]}
def max_number(nums1, nums2, k)
 
end";"";"2020-03-25 15:18:30"
9047;730;"Python";"class Solution(object):
    def maxNumber(self, nums1, nums2, k):
        """"""
        :type nums1: List[int]
        :type nums2: List[int]
        :type k: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:30"
9048;731;"C#";"public class KthLargest {
 
    public KthLargest(int k, int[] nums) {
 
    }
    
    public int Add(int val) {
 
    }
}
 
/**
 * Your KthLargest object will be instantiated and 
called as such:
 * KthLargest obj = new KthLargest(k, nums);
 * int param_1 = obj.Add(val);
 */";"";"2020-03-25 15:18:30"
9049;731;"Java";"class KthLargest {
 
    public KthLargest(int k, int[] nums) {
 
    }
    
    public int add(int val) {
 
    }
}
 
/**
 * Your KthLargest object will be instantiated and 
called as such:
 * KthLargest obj = new KthLargest(k, nums);
 * int param_1 = obj.add(val);
 */";"";"2020-03-25 15:18:30"
9050;731;"C";"typedef struct {
    
} KthLargest;
 
 
KthLargest* kthLargestCreate(int k, int* nums, int 
numsSize) {
    
}
 
int kthLargestAdd(KthLargest* obj, int val) {
  
}
 
void kthLargestFree(KthLargest* obj) {
    
}
 
/**
 * Your KthLargest struct will be instantiated and 
called as such:
 * KthLargest* obj = kthLargestCreate(k, nums, 
numsSize);
 * int param_1 = kthLargestAdd(obj, val);
 
 * kthLargestFree(obj);";"";"2020-03-25 15:18:30"
9051;731;"Rust";"struct KthLargest {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl KthLargest {
 
    fn new(k: i32, nums: Vec<i32>) -> Self {
        
    }
    
    fn add(&self, val: i32) -> i32 {
        
    }
}
 
/**
 * Your KthLargest object will be instantiated and 
called as such:
 * let obj = KthLargest::new(k, nums);";"";"2020-03-25 15:18:30"
9052;731;"Scala";"class KthLargest(_k: Int, _nums: Array[Int]) {
 
    def add(`val`: Int): Int = {
 
    }
 
}
 
/**
 * Your KthLargest object will be instantiated and 
called as such:
 * var obj = new KthLargest(k, nums)
 * var param_1 = obj.add(`val`)
 */";"";"2020-03-25 15:18:30"
9053;731;"Go";"type KthLargest struct {
 
}
 
 
func Constructor(k int, nums []int) KthLargest {
 
}
 
 
func (this *KthLargest) Add(val int) int {
 
}
 
 
/**
 * Your KthLargest object will be instantiated and 
called as such:
 * obj := Constructor(k, nums);
 * param_1 := obj.Add(val);
 */";"";"2020-03-25 15:18:30"
9054;731;"Kotlin";"class KthLargest(k: Int, nums: IntArray) {
 
    fun add(`val`: Int): Int {
 
    }
 
}
 
/**
 * Your KthLargest object will be instantiated and 
called as such:
 * var obj = KthLargest(k, nums)
 * var param_1 = obj.add(`val`)
 */";"";"2020-03-25 15:18:30"
9055;731;"Python3";"class KthLargest:
 
    def __init__(self, k: int, nums: List[int]):
        
 
    def add(self, val: int) -> int:
        
 
 
# Your KthLargest object will be instantiated and 
called as such:
# obj = KthLargest(k, nums)
# param_1 = obj.add(val)";"";"2020-03-25 15:18:30"
9056;731;"JavaScript";"/**
 * @param {number} k
 * @param {number[]} nums
 */
var KthLargest = function(k, nums) {
 
};
 
/** 
 * @param {number} val
 * @return {number}
 */
KthLargest.prototype.add = function(val) {
 
};
 
/**
 * Your KthLargest object will be instantiated and 
called as such:
 * var obj = new KthLargest(k, nums)
 * var param_1 = obj.add(val)
 */";"";"2020-03-25 15:18:30"
9057;731;"PHP";"class KthLargest {
    /**
     * @param Integer $k
     * @param Integer[] $nums
     */
    function __construct($k, $nums) {
        
    }
  
    /**
     * @param Integer $val
     * @return Integer
     */
    function add($val) {
        
    }
}
 
/**
 * Your KthLargest object will be instantiated and 
called as such:
 * $obj = KthLargest($k, $nums);
 * $ret_1 = $obj->add($val);
 */";"";"2020-03-25 15:18:30"
9058;731;"Swift";"class KthLargest {
 
    init(_ k: Int, _ nums: [Int]) {
        
    }
    
    func add(_ val: Int) -> Int {
        
    }
}
 
/**
 * Your KthLargest object will be instantiated and 
called as such:
 * let obj = KthLargest(k, nums)
 * let ret_1: Int = obj.add(val)
 */";"";"2020-03-25 15:18:30"
9059;731;"Ruby";"class KthLargest
 
=begin
    :type k: Integer
    :type nums: Integer[]
=end
    def initialize(k, nums)
 
    end
 
 
=begin
    :type val: Integer
    :rtype: Integer
=end
    def add(val)
 
    end
 
 
end
 
# Your KthLargest object will be instantiated and 
called as such:
# obj = KthLargest.new(k, nums)
# param_1 = obj.add(val)";"";"2020-03-25 15:18:30"
9060;731;"Python";"class KthLargest(object):
 
    def __init__(self, k, nums):
        """"""
        :type k: int
        :type nums: List[int]
        """"""
        
 
    def add(self, val):
        """"""
        :type val: int
        :rtype: int
        """"""
        
 
 
# Your KthLargest object will be instantiated and 
called as such:
# obj = KthLargest(k, nums)
# param_1 = obj.add(val)";"";"2020-03-25 15:18:30"
9061;732;"C#";"public class Solution {
    public bool IsUgly(int num) {
 
    }
}";"";"2020-03-25 15:18:30"
9062;732;"Java";"class Solution {
    public boolean isUgly(int num) {
 
    }
}";"";"2020-03-25 15:18:30"
9063;732;"C++";"class Solution {
public:
    bool isUgly(int num) {
 
    }
};";"";"2020-03-25 15:18:30"
9064;732;"C";"bool isUgly(int num){
 
}";"";"2020-03-25 15:18:30"
9065;732;"Rust";"impl Solution {
    pub fn is_ugly(num: i32) -> bool {
 
    }
}";"";"2020-03-25 15:18:30"
9066;732;"Scala";"object Solution {
    def isUgly(num: Int): Boolean = {
 
    }
}";"";"2020-03-25 15:18:30"
9067;732;"Go";"func isUgly(num int) bool {
 
}";"";"2020-03-25 15:18:30"
9068;732;"Kotlin";"class Solution {
    fun isUgly(num: Int): Boolean {
 
    }
}";"";"2020-03-25 15:18:30"
9069;732;"Python3";"class Solution:
    def isUgly(self, num: int) -> bool:";"";"2020-03-25 15:18:30"
9070;732;"JavaScript";"/**
 * @param {number} num
 * @return {boolean}
 */
var isUgly = function(num) {
 
};";"";"2020-03-25 15:18:30"
9071;732;"PHP";"class Solution {
 
    /**
     * @param Integer $num
     * @return Boolean
     */
    function isUgly($num) {
 
    }
}";"";"2020-03-25 15:18:30"
9072;732;"Swift";"class Solution {
    func isUgly(_ num: Int) -> Bool {
 
    }
}";"";"2020-03-25 15:18:30"
9073;732;"Ruby";"# @param {Integer} num
# @return {Boolean}
def is_ugly(num)
 
end";"";"2020-03-25 15:18:30"
9074;732;"Python";"class Solution(object):
    def isUgly(self, num):
        """"""
        :type num: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:30"
9075;733;"C#";"public class Solution {
    public int[] SumOfDistancesInTree(int N, int[][]
 edges) {
 
    }
}";"";"2020-03-25 15:18:30"
9076;733;"Java";"class Solution {
    public int[] sumOfDistancesInTree(int N, int[][]
 edges) {
 
    }
}";"";"2020-03-25 15:18:30"
9077;733;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* sumOfDistancesInTree(int N, int** edges, int 
edgesSize, int* edgesColSize, int* returnSize){
 
}";"";"2020-03-25 15:18:30"
9078;733;"Rust";"impl Solution {
    pub fn sum_of_distances_in_tree(n: i32, edges: 
Vec<Vec<i32>>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:30"
9079;733;"Scala";"object Solution {
    def sumOfDistancesInTree(N: Int, edges: Array
[Array[Int]]): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:30"
9080;733;"Go";"func sumOfDistancesInTree(N int, edges [][]int) []
int {
 
}";"";"2020-03-25 15:18:30"
9081;733;"Kotlin";"class Solution {
    fun sumOfDistancesInTree(N: Int, edges: 
Array<IntArray>): IntArray {
 
    }
}";"";"2020-03-25 15:18:30"
9082;733;"Python3";"class Solution:
    def sumOfDistancesInTree(self, N: int, edges: 
List[List[int]]) -> List[int]:";"";"2020-03-25 15:18:30"
9083;733;"JavaScript";"/**
 * @param {number} N
 * @param {number[][]} edges
 * @return {number[]}
 */
var sumOfDistancesInTree = function(N, edges) {
 
};";"";"2020-03-25 15:18:30"
9084;733;"PHP";"class Solution {
 
    /**
     * @param Integer $N
     * @param Integer[][] $edges
     * @return Integer[]
     */
    function sumOfDistancesInTree($N, $edges) {
        
    }
}";"";"2020-03-25 15:18:30"
9085;733;"Swift";"class Solution {
    func sumOfDistancesInTree(_ N: Int, _ edges: [
[Int]]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:30"
9086;733;"Ruby";"";"";"2020-03-25 15:18:30"
9087;733;"Python";"class Solution(object):
    def sumOfDistancesInTree(self, N, edges):
        """"""
        :type N: int
        :type edges: List[List[int]]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:30"
9088;734;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void Flatten(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:30"
9089;734;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public void flatten(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:30"
9090;734;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
void flatten(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:30"
9091;734;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn flatten(root: &mut 
Option<Rc<RefCell<TreeNode>>>) {
        
    }
}";"";"2020-03-25 15:18:30"
9092;734;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def flatten(root: TreeNode): Unit = {
 
    }
}";"";"2020-03-25 15:18:30"
9093;734;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func flatten(root *TreeNode)  {
 
}";"";"2020-03-25 15:18:30"
9094;734;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun flatten(root: TreeNode?): Unit {
 
    }
}";"";"2020-03-25 15:18:30"
9095;734;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def flatten(self, root: TreeNode) -> None:
        """"""
        Do not return anything, modify root 
in-place instead.
        """"""";"";"2020-03-25 15:18:30"
9096;734;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {void} Do not return anything, modify 
root in-place instead.
 */
var flatten = function(root) {
 
};";"";"2020-03-25 15:18:30"
9097;734;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return NULL
     */
    function flatten($root) {
        
    }
}";"";"2020-03-25 15:18:30"
9098;734;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func flatten(_ root: TreeNode?) {
        
    }
}";"";"2020-03-25 15:18:30"
9099;734;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:30"
9100;734;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def flatten(self, root):
        """"""
        :type root: TreeNode
        :rtype: None Do not return anything, modify 
root in-place instead.
        """"""";"";"2020-03-25 15:18:30"
9101;735;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int[] FindFrequentTreeSum(TreeNode root) 
{
 
    }
}";"";"2020-03-25 15:18:31"
9102;735;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int[] findFrequentTreeSum(TreeNode root) 
{
 
    }
}";"";"2020-03-25 15:18:31"
9103;735;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn find_frequent_tree_sum(root: 
Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:31"
9104;735;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* findFrequentTreeSum(struct TreeNode* root, 
int* returnSize){
 
}";"";"2020-03-25 15:18:31"
9105;735;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def findFrequentTreeSum(root: TreeNode): Array
[Int] = {
 
    }
}";"";"2020-03-25 15:18:31"
9106;735;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func findFrequentTreeSum(root *TreeNode) []int {
 
}";"";"2020-03-25 15:18:31"
9107;735;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun findFrequentTreeSum(root: TreeNode?): 
IntArray {
 
    }
}";"";"2020-03-25 15:18:31"
9108;735;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def findFrequentTreeSum(self, root: TreeNode) 
-> List[int]:";"";"2020-03-25 15:18:31"
9109;735;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[]}
 */
var findFrequentTreeSum = function(root) {
 
};";"";"2020-03-25 15:18:31"
9110;735;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer[]
     */
    function findFrequentTreeSum($root) {
        
    }
}";"";"2020-03-25 15:18:31"
9111;735;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func findFrequentTreeSum(_ root: TreeNode?) -> 
[Int] {
        
    }
}";"";"2020-03-25 15:18:31"
9112;735;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer[]}
def find_frequent_tree_sum(root)
 
end";"";"2020-03-25 15:18:31"
9113;735;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def findFrequentTreeSum(self, root):
        """"""
        :type root: TreeNode
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:31"
9114;736;"C#";"public class MyCalendar {
 
    public MyCalendar() {
 
    }
    
    public bool Book(int start, int end) {
 
    }
}
 
/**
 * Your MyCalendar object will be instantiated and 
called as such:
 * MyCalendar obj = new MyCalendar();
 * bool param_1 = obj.Book(start,end);
 */";"";"2020-03-25 15:18:31"
9115;736;"Java";"class MyCalendar {
 
    public MyCalendar() {
 
    }
    
    public boolean book(int start, int end) {
 
    }
}
 
/**
 * Your MyCalendar object will be instantiated and 
called as such:
 * MyCalendar obj = new MyCalendar();
 * boolean param_1 = obj.book(start,end);
 */";"";"2020-03-25 15:18:31"
9116;736;"Rust";"struct MyCalendar {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl MyCalendar {
 
    fn new() -> Self {
        
    }
    
    fn book(&self, start: i32, end: i32) -> bool {
        
    }
}
 
/**
 * Your MyCalendar object will be instantiated and 
called as such:
 * let obj = MyCalendar::new();";"";"2020-03-25 15:18:31"
9117;736;"C";"typedef struct {
    
} MyCalendar;
 
 
MyCalendar* myCalendarCreate() {
    
}
 
bool myCalendarBook(MyCalendar* obj, int start, int 
end) {
  
}
 
void myCalendarFree(MyCalendar* obj) {
    
}
 
/**
 * Your MyCalendar struct will be instantiated and 
called as such:
 * MyCalendar* obj = myCalendarCreate();
 * bool param_1 = myCalendarBook(obj, start, end);
 
 * myCalendarFree(obj);
*/";"";"2020-03-25 15:18:31"
9118;736;"Scala";"class MyCalendar() {
 
    def book(start: Int, end: Int): Boolean = {
 
    }
 
}
 
/**
 * Your MyCalendar object will be instantiated and 
called as such:
 * var obj = new MyCalendar()
 * var param_1 = obj.book(start,end)
 */";"";"2020-03-25 15:18:31"
9119;736;"Go";"type MyCalendar struct {
 
}
 
 
func Constructor() MyCalendar {
 
}
 
 
func (this *MyCalendar) Book(start int, end int) 
bool {
 
}
 
 
/**
 * Your MyCalendar object will be instantiated and 
called as such:
 * obj := Constructor();
 * param_1 := obj.Book(start,end);
 */";"";"2020-03-25 15:18:31"
9120;736;"Kotlin";"class MyCalendar() {
 
    fun book(start: Int, end: Int): Boolean {
 
    }
 
}
 
/**
 * Your MyCalendar object will be instantiated and 
called as such:
 * var obj = MyCalendar()
 * var param_1 = obj.book(start,end)
 */";"";"2020-03-25 15:18:31"
9121;736;"Python3";"class MyCalendar:
 
    def __init__(self):
        
 
    def book(self, start: int, end: int) -> bool:
        
 
 
# Your MyCalendar object will be instantiated and 
called as such:
# obj = MyCalendar()
# param_1 = obj.book(start,end)";"";"2020-03-25 15:18:31"
9122;736;"JavaScript";"var MyCalendar = function() {
 
};
 
/** 
 * @param {number} start 
 * @param {number} end
 * @return {boolean}
 */
MyCalendar.prototype.book = function(start, end) {
 
};
 
/**
 * Your MyCalendar object will be instantiated and 
called as such:
 * var obj = new MyCalendar()
 * var param_1 = obj.book(start,end)
 */";"";"2020-03-25 15:18:31"
9123;736;"PHP";"class MyCalendar {
    /**
     */
    function __construct() {
        
    }
  
    /**
     * @param Integer $start
     * @param Integer $end
     * @return Boolean
     */
    function book($start, $end) {
        
    }
}
 
/**
 * Your MyCalendar object will be instantiated and 
called as such:
 * $obj = MyCalendar();
 * $ret_1 = $obj->book($start, $end);
 */";"";"2020-03-25 15:18:31"
9124;736;"Swift";"class MyCalendar {
 
    init() {
        
    }
    
    func book(_ start: Int, _ end: Int) -> Bool {
        
    }
}
 
/**
 * Your MyCalendar object will be instantiated and 
called as such:
 * let obj = MyCalendar()
 * let ret_1: Bool = obj.book(start, end)
 */";"";"2020-03-25 15:18:31"
9125;736;"Ruby";"class MyCalendar
    def initialize()
 
    end
 
 
=begin
    :type start: Integer
    :type end: Integer
    :rtype: Boolean
=end
    def book(start, end)
 
    end
 
 
end
 
# Your MyCalendar object will be instantiated and 
called as such:
# obj = MyCalendar.new()
# param_1 = obj.book(start, end)";"";"2020-03-25 15:18:31"
9126;736;"Python";"class MyCalendar(object):
 
    def __init__(self):
        
 
    def book(self, start, end):
        """"""
        :type start: int
        :type end: int
        :rtype: bool
        """"""
        
 
 
# Your MyCalendar object will be instantiated and 
called as such:
# obj = MyCalendar()
# param_1 = obj.book(start,end)";"";"2020-03-25 15:18:31"
9127;737;"C#";"/*
// Definition for a QuadTree node.
public class Node {
    public bool val;
    public bool isLeaf;
    public Node topLeft;
    public Node topRight;
    public Node bottomLeft;
    public Node bottomRight;
 
    public Node() {
        val = false;
        isLeaf = false;
        topLeft = null;
        topRight = null;
        bottomLeft = null;
        bottomRight = null;
    }
    
    public Node(bool _val, bool _isLeaf) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = null;
        topRight = null;
        bottomLeft = null;
        bottomRight = null;";"";"2020-03-25 15:18:31"
9128;737;"Java";"/*
// Definition for a QuadTree node.
class Node {
    public boolean val;
    public boolean isLeaf;
    public Node topLeft;
    public Node topRight;
    public Node bottomLeft;
    public Node bottomRight;
 
    
    public Node() {
        this.val = false;
        this.isLeaf = false;
        this.topLeft = null;
        this.topRight = null;
        this.bottomLeft = null;
        this.bottomRight = null;
    }
    
    public Node(boolean val, boolean isLeaf) {
        this.val = val;
        this.isLeaf = isLeaf;
        this.topLeft = null;
        this.topRight = null;
        this.bottomLeft = null;";"";"2020-03-25 15:18:31"
9129;737;"C++";"/*
// Definition for a QuadTree node.
class Node {
public:
    bool val;
    bool isLeaf;
    Node* topLeft;
    Node* topRight;
    Node* bottomLeft;
    Node* bottomRight;
    
    Node() {
        val = false;
        isLeaf = false;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;
        bottomRight = NULL;
    }
    
    Node(bool _val, bool _isLeaf) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;";"";"2020-03-25 15:18:31"
9130;737;"Python3";"""""""
# Definition for a QuadTree node.
class Node:
    def __init__(self, val, isLeaf, topLeft, 
topRight, bottomLeft, bottomRight):
        self.val = val
        self.isLeaf = isLeaf
        self.topLeft = topLeft
        self.topRight = topRight
        self.bottomLeft = bottomLeft
        self.bottomRight = bottomRight
""""""
class Solution:
    def construct(self, grid: List[List[int]]) -> 
'Node':";"";"2020-03-25 15:18:31"
9131;737;"JavaScript";"/**
 * // Definition for a QuadTree node.
 * function Node(val,isLeaf,topLeft,topRight,
bottomLeft,bottomRight) {
 *    this.val = val;
 *    this.isLeaf = isLeaf;
 *    this.topLeft = topLeft;
 *    this.topRight = topRight;
 *    this.bottomLeft = bottomLeft;
 *    this.bottomRight = bottomRight;
 * };
 */
/**
 * @param {number[][]} grid
 * @return {Node}
 */
var construct = function(grid) {
    
};";"";"2020-03-25 15:18:31"
9132;737;"Python";"""""""
# Definition for a QuadTree node.
class Node(object):
    def __init__(self, val, isLeaf, topLeft, 
topRight, bottomLeft, bottomRight):
        self.val = val
        self.isLeaf = isLeaf
        self.topLeft = topLeft
        self.topRight = topRight
        self.bottomLeft = bottomLeft
        self.bottomRight = bottomRight
""""""
class Solution(object):
    def construct(self, grid):
        """"""
        :type grid: List[List[int]]
        :rtype: Node
        """"""";"";"2020-03-25 15:18:31"
9133;738;"Java";"class DiningPhilosophers {
 
    public DiningPhilosophers() {
        
    }
 
    // call the run() method of any runnable to 
execute its code
    public void wantsToEat(int philosopher,
                           Runnable pickLeftFork,
                           Runnable pickRightFork,
                           Runnable eat,
                           Runnable putLeftFork,
                           Runnable putRightFork) 
throws InterruptedException {
        
    }
}";"";"2020-03-25 15:18:31"
9134;738;"C++";"class DiningPhilosophers {
public:
    DiningPhilosophers() {
        
    }
 
    void wantsToEat(int philosopher,
                    function<void()> pickLeftFork,
                    function<void()> pickRightFork,
                    function<void()> eat,
                    function<void()> putLeftFork,
                    function<void()> putRightFork) {
        
    }
};";"";"2020-03-25 15:18:31"
9135;738;"Python3";"class DiningPhilosophers:
 
    # call the functions directly to execute, for 
example, eat()
    def wantsToEat(self,
                   philosopher: int,
                   pickLeftFork: 'Callable[[], None]
',
                   pickRightFork: 'Callable[[], 
None]',
                   eat: 'Callable[[], None]',
                   putLeftFork: 'Callable[[], None]
',
                   putRightFork: 'Callable[[], None]
') -> None:";"";"2020-03-25 15:18:31"
9136;738;"Python";"class DiningPhilosophers(object):
 
    # call the functions directly to execute, for 
example, eat()
    def wantsToEat(self, philosopher, pickLeftFork, 
pickRightFork, eat, putLeftFork, putRightFork):
        """"""
        :type philosopher: int
        :type pickLeftFork: method
        :type pickRightFork: method
        :type eat: method
        :type putLeftFork: method
        :type putRightFork: method
        :rtype: void
        """"""";"";"2020-03-25 15:18:31"
9137;739;"C#";"public class Solution {
    public IList<int> NumOfBurgers(int tomatoSlices,
 int cheeseSlices) {
 
    }
}";"";"2020-03-25 15:18:31"
9138;739;"Java";"class Solution {
    public List<Integer> numOfBurgers(int 
tomatoSlices, int cheeseSlices) {
 
    }
}";"";"2020-03-25 15:18:31"
9139;739;"Rust";"impl Solution {
    pub fn num_of_burgers(tomato_slices: i32, 
cheese_slices: i32) -> Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:31"
9140;739;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* numOfBurgers(int tomatoSlices, int 
cheeseSlices, int* returnSize){
 
}";"";"2020-03-25 15:18:31"
9141;739;"Scala";"object Solution {
    def numOfBurgers(tomatoSlices: Int, 
cheeseSlices: Int): List[Int] = {
 
    }
}";"";"2020-03-25 15:18:31"
9142;739;"Go";"func numOfBurgers(tomatoSlices int, cheeseSlices 
int) []int {
 
}";"";"2020-03-25 15:18:31"
9143;739;"Kotlin";"class Solution {
    fun numOfBurgers(tomatoSlices: Int, 
cheeseSlices: Int): List<Int> {
 
    }
}";"";"2020-03-25 15:18:31"
9144;739;"Python3";"class Solution:
    def numOfBurgers(self, tomatoSlices: int, 
cheeseSlices: int) -> List[int]:";"";"2020-03-25 15:18:31"
9145;739;"JavaScript";"/**
 * @param {number} tomatoSlices
 * @param {number} cheeseSlices
 * @return {number[]}
 */
var numOfBurgers = function(tomatoSlices, 
cheeseSlices) {
 
};";"";"2020-03-25 15:18:31"
9146;739;"PHP";"class Solution {";"";"2020-03-25 15:18:31"
9147;739;"Swift";"class Solution {
    func numOfBurgers(_ tomatoSlices: Int, _ 
cheeseSlices: Int) -> [Int] {
 
    }
}";"";"2020-03-25 15:18:31"
9148;739;"Ruby";"# @param {Integer} tomato_slices
# @param {Integer} cheese_slices
# @return {Integer[]}
def num_of_burgers(tomato_slices, cheese_slices)
 
end";"";"2020-03-25 15:18:31"
9149;739;"Python";"class Solution(object):
    def numOfBurgers(self, tomatoSlices, 
cheeseSlices):
        """"""
        :type tomatoSlices: int
        :type cheeseSlices: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:31"
9150;740;"C#";"public class Solution {
    public int NumSubarrayProductLessThanK(int[] 
nums, int k) {
 
    }
}";"";"2020-03-25 15:18:31"
9151;740;"Java";"class Solution {
    public int numSubarrayProductLessThanK(int[] 
nums, int k) {
 
    }
}";"";"2020-03-25 15:18:31"
9152;740;"C";"int numSubarrayProductLessThanK(int* nums, int 
numsSize, int k){
 
}";"";"2020-03-25 15:18:31"
9153;740;"Rust";"impl Solution {
    pub fn num_subarray_product_less_than_k(nums: 
Vec<i32>, k: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:31"
9154;740;"Scala";"object Solution {
    def numSubarrayProductLessThanK(nums: Array[Int]
, k: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:31"
9155;740;"Python3";"class Solution:
    def numSubarrayProductLessThanK(self, nums: List
[int], k: int) -> int:";"";"2020-03-25 15:18:31"
9156;740;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
var numSubarrayProductLessThanK = function(nums, k) 
{
 
};";"";"2020-03-25 15:18:31"
9157;740;"Go";"func numSubarrayProductLessThanK(nums []int, k int) 
int {
 
}";"";"2020-03-25 15:18:31"
9158;740;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer $k
     * @return Integer
     */
    function numSubarrayProductLessThanK($nums, $k) 
{
        
    }
}";"";"2020-03-25 15:18:31"
9159;740;"Ruby";"# @param {Integer[]} nums
# @param {Integer} k
# @return {Integer}
def num_subarray_product_less_than_k(nums, k)
 
end";"";"2020-03-25 15:18:31"
9160;740;"Python";"class Solution(object):
    def numSubarrayProductLessThanK(self, nums, k):
        """"""
        :type nums: List[int]
        :type k: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:31"
9161;740;"Kotlin";"class Solution {
    fun numSubarrayProductLessThanK(nums: IntArray, 
k: Int): Int {
 
    }
}";"";"2020-03-25 15:18:31"
9162;741;"Rust";"impl Solution {
    pub fn basic_calculator_iv(expression: String, 
evalvars: Vec<String>, evalints: Vec<i32>) -> 
Vec<String> {
        
    }
}";"";"2020-03-25 15:18:31"
9163;741;"Scala";"object Solution {
    def basicCalculatorIV(expression: String, 
evalvars: Array[String], evalints: Array[Int]): List
[String] = {
 
    }
}";"";"2020-03-25 15:18:31"
9164;741;"Go";"func basicCalculatorIV(expression string, evalvars 
[]string, evalints []int) []string {
 
}";"";"2020-03-25 15:18:31"
9165;741;"PHP";"class Solution {
 
    /**
     * @param String $expression
     * @param String[] $evalvars
     * @param Integer[] $evalints
     * @return String[]
     */
    function basicCalculatorIV($expression, 
$evalvars, $evalints) {
        
    }
}";"";"2020-03-25 15:18:31"
9166;741;"Swift";"class Solution {
    func basicCalculatorIV(_ expression: String, _ 
evalvars: [String], _ evalints: [Int]) -> [String] {
        
    }
}";"";"2020-03-25 15:18:31"
9167;741;"Ruby";"# @param {String} expression
# @param {String[]} evalvars
# @param {Integer[]} evalints
# @return {String[]}
def basic_calculator_iv(expression, evalvars, 
evalints)
 
end";"";"2020-03-25 15:18:31"
9168;741;"Kotlin";"class Solution {
    fun basicCalculatorIV(expression: String, 
evalvars: Array<String>, evalints: IntArray): 
List<String> {
 
    }
}";"";"2020-03-25 15:18:31"
9169;742;"C#";"public class Solution {
    public int MinPushBox(char[][] grid) {
 
    }
}";"";"2020-03-25 15:18:31"
9170;742;"Java";"class Solution {
    public int minPushBox(char[][] grid) {
 
    }
}";"";"2020-03-25 15:18:31"
9171;742;"Rust";"impl Solution {
    pub fn min_push_box(grid: Vec<Vec<char>>) -> 
i32 {
 
    }
}";"";"2020-03-25 15:18:31"
9172;742;"C";"int minPushBox(char** grid, int gridSize, int* 
gridColSize){
 
}";"";"2020-03-25 15:18:31"
9173;742;"Scala";"object Solution {
    def minPushBox(grid: Array[Array[Char]]): Int = 
{
 
    }
}";"";"2020-03-25 15:18:31"
9174;742;"Go";"func minPushBox(grid [][]byte) int {
 
}";"";"2020-03-25 15:18:31"
9175;742;"Kotlin";"class Solution {
    fun minPushBox(grid: Array<CharArray>): Int {
 
    }
}";"";"2020-03-25 15:18:31"
9176;742;"Python3";"class Solution:
    def minPushBox(self, grid: List[List[str]]) -> 
int:";"";"2020-03-25 15:18:31"
9177;742;"JavaScript";"/**
 * @param {character[][]} grid
 * @return {number}
 */
var minPushBox = function(grid) {
 
};";"";"2020-03-25 15:18:31"
9178;742;"PHP";"class Solution {";"";"2020-03-25 15:18:31"
9179;742;"Swift";"class Solution {
    func minPushBox(_ grid: [[Character]]) -> Int {
 
    }
}";"";"2020-03-25 15:18:31"
9180;742;"Ruby";"# @param {Character[][]} grid
# @return {Integer}
def min_push_box(grid)
 
end";"";"2020-03-25 15:18:31"
9181;742;"Python";"class Solution(object):
    def minPushBox(self, grid):
        """"""
        :type grid: List[List[str]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:31"
9182;743;"C#";"public class Solution {
    public int PreimageSizeFZF(int K) {
 
    }
}";"";"2020-03-25 15:18:31"
9183;743;"Java";"class Solution {
    public int preimageSizeFZF(int K) {
 
    }
}";"";"2020-03-25 15:18:31"
9184;743;"Rust";"impl Solution {
    pub fn preimage_size_fzf(k: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:31"
9185;743;"C";"int preimageSizeFZF(int K){
 
}";"";"2020-03-25 15:18:31"
9186;743;"Scala";"object Solution {
    def preimageSizeFZF(K: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:31"
9187;743;"Go";"func preimageSizeFZF(K int) int {
 
}";"";"2020-03-25 15:18:31"
9188;743;"Kotlin";"class Solution {
    fun preimageSizeFZF(K: Int): Int {
 
    }
}";"";"2020-03-25 15:18:31"
9189;743;"Python3";"class Solution:
    def preimageSizeFZF(self, K: int) -> int:";"";"2020-03-25 15:18:31"
9190;743;"JavaScript";"/**
 * @param {number} K
 * @return {number}
 */
var preimageSizeFZF = function(K) {
 
};";"";"2020-03-25 15:18:31"
9191;743;"PHP";"class Solution {
 
    /**
     * @param Integer $K
     * @return Integer
     */
    function preimageSizeFZF($K) {
        
    }
}";"";"2020-03-25 15:18:31"
9192;743;"Swift";"class Solution {
    func preimageSizeFZF(_ K: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:31"
9193;743;"Ruby";"# @param {Integer} k
# @return {Integer}
def preimage_size_fzf(k)
 
end";"";"2020-03-25 15:18:31"
9194;743;"Python";"class Solution(object):
    def preimageSizeFZF(self, K):
        """"""
        :type K: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:31"
9195;744;"C#";"public class Solution {
    public IList<string> RemoveComments(string[] 
source) {
 
    }
}";"";"2020-03-25 15:18:31"
9196;744;"Java";"class Solution {
    public List<String> removeComments(String[] 
source) {
 
    }
}";"";"2020-03-25 15:18:31"
9197;744;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** removeComments(char ** source, int 
sourceSize, int* returnSize){
 
}";"";"2020-03-25 15:18:31"
9198;744;"Rust";"impl Solution {
    pub fn remove_comments(source: Vec<String>) -> 
Vec<String> {
        
    }
}";"";"2020-03-25 15:18:31"
9199;744;"Scala";"object Solution {
    def removeComments(source: Array[String]): List
[String] = {
 
    }
}";"";"2020-03-25 15:18:31"
9200;744;"Go";"func removeComments(source []string) []string {
 
}";"";"2020-03-25 15:18:31"
9201;744;"Kotlin";"class Solution {
    fun removeComments(source: Array<String>): 
List<String> {
 
    }
}";"";"2020-03-25 15:18:31"
9202;744;"Python3";"class Solution:
    def removeComments(self, source: List[str]) -> 
List[str]:";"";"2020-03-25 15:18:31"
9203;744;"JavaScript";"/**
 * @param {string[]} source
 * @return {string[]}
 */
var removeComments = function(source) {
 
};";"";"2020-03-25 15:18:31"
9204;744;"PHP";"class Solution {
 
    /**
     * @param String[] $source
     * @return String[]
     */
    function removeComments($source) {
        
    }
}";"";"2020-03-25 15:18:31"
9205;744;"Swift";"class Solution {
    func removeComments(_ source: [String]) -> 
[String] {
        
    }
}";"";"2020-03-25 15:18:31"
9206;744;"Ruby";"# @param {String[]} source
# @return {String[]}
def remove_comments(source)
 
end";"";"2020-03-25 15:18:31"
9207;744;"Python";"class Solution(object):
    def removeComments(self, source):
        """"""
        :type source: List[str]
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:31"
9208;745;"C#";"public class Solution {
    public int[] MaxSlidingWindow(int[] nums, int k)
 {
 
    }
}";"";"2020-03-25 15:18:31"
9209;745;"Java";"class Solution {
    public int[] maxSlidingWindow(int[] nums, int k)
 {
 
    }
}";"";"2020-03-25 15:18:31"
9210;745;"Rust";"impl Solution {
    pub fn max_sliding_window(nums: Vec<i32>, k: 
i32) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:31"
9211;745;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* maxSlidingWindow(int* nums, int numsSize, int 
k, int* returnSize){
 
}";"";"2020-03-25 15:18:31"
9212;745;"Scala";"object Solution {
    def maxSlidingWindow(nums: Array[Int], k: Int): 
Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:31"
9213;745;"Go";"func maxSlidingWindow(nums []int, k int) []int {
 
}";"";"2020-03-25 15:18:31"
9214;745;"Kotlin";"class Solution {
    fun maxSlidingWindow(nums: IntArray, k: Int): 
IntArray {
 
    }
}";"";"2020-03-25 15:18:31"
9215;745;"Python3";"class Solution:
    def maxSlidingWindow(self, nums: List[int], k: 
int) -> List[int]:";"";"2020-03-25 15:18:31"
9216;745;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number[]}
 */
var maxSlidingWindow = function(nums, k) {
 
};";"";"2020-03-25 15:18:31"
9217;745;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer $k
     * @return Integer[]
     */
    function maxSlidingWindow($nums, $k) {
        
    }
}";"";"2020-03-25 15:18:31"
9218;745;"Swift";"class Solution {
    func maxSlidingWindow(_ nums: [Int], _ k: Int) 
-> [Int] {
        
    }
}";"";"2020-03-25 15:18:31"
9219;745;"Ruby";"# @param {Integer[]} nums
# @param {Integer} k
# @return {Integer[]}
def max_sliding_window(nums, k)
 
end";"";"2020-03-25 15:18:31"
9220;745;"Python";"class Solution(object):
    def maxSlidingWindow(self, nums, k):
        """"""
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:31"
9221;746;"C#";"public class Solution {
    public int[] FindSwapValues(int[] array1, int[] 
array2) {
 
    }
}";"";"2020-03-25 15:18:31"
9222;746;"Java";"class Solution {
    public int[] findSwapValues(int[] array1, int[] 
array2) {
 
    }
}";"";"2020-03-25 15:18:31"
9223;746;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* findSwapValues(int* array1, int array1Size, 
int* array2, int array2Size, int* returnSize){
 
}";"";"2020-03-25 15:18:31"
9224;746;"Rust";"impl Solution {
    pub fn find_swap_values(array1: Vec<i32>, 
array2: Vec<i32>) -> Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:31"
9225;746;"Scala";"object Solution {
    def findSwapValues(array1: Array[Int], array2: 
Array[Int]): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:31"
9226;746;"Go";"func findSwapValues(array1 []int, array2 []int) []
int {
 
}";"";"2020-03-25 15:18:31"
9227;746;"Kotlin";"class Solution {
    fun findSwapValues(array1: IntArray, array2: 
IntArray): IntArray {
 
    }
}";"";"2020-03-25 15:18:31"
9228;746;"Python3";"class Solution:
    def findSwapValues(self, array1: List[int], 
array2: List[int]) -> List[int]:";"";"2020-03-25 15:18:31"
9229;746;"JavaScript";"/**
 * @param {number[]} array1
 * @param {number[]} array2
 * @return {number[]}
 */
var findSwapValues = function(array1, array2) {
 
};";"";"2020-03-25 15:18:31"
9230;746;"PHP";"class Solution {
 
    /**
     * @param Integer[] $array1
     * @param Integer[] $array2
     * @return Integer[]
     */
    function findSwapValues($array1, $array2) {
 
    }
}";"";"2020-03-25 15:18:31"
9231;746;"Swift";"class Solution {
    func findSwapValues(_ array1: [Int], _ array2: 
[Int]) -> [Int] {
 
    }
}";"";"2020-03-25 15:18:31"
9232;746;"Ruby";"# @param {Integer[]} array1";"";"2020-03-25 15:18:31"
9233;746;"Python";"class Solution(object):
    def findSwapValues(self, array1, array2):
        """"""
        :type array1: List[int]
        :type array2: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:31"
9234;747;"C#";"public class Solution {
    public bool CanTransform(string start, string 
end) {
 
    }
}";"";"2020-03-25 15:18:31"
9235;747;"Java";"class Solution {
    public boolean canTransform(String start, 
String end) {
 
    }
}";"";"2020-03-25 15:18:31"
9236;747;"C";"bool canTransform(char * start, char * end){
 
}";"";"2020-03-25 15:18:31"
9237;747;"Rust";"impl Solution {
    pub fn can_transform(start: String, end: String)
 -> bool {
        
    }
}";"";"2020-03-25 15:18:31"
9238;747;"Scala";"object Solution {
    def canTransform(start: String, end: String): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:31"
9239;747;"Go";"func canTransform(start string, end string) bool {
 
}";"";"2020-03-25 15:18:31"
9240;747;"Kotlin";"class Solution {
    fun canTransform(start: String, end: String): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:31"
9241;747;"Python3";"class Solution:
    def canTransform(self, start: str, end: str) -> 
bool:";"";"2020-03-25 15:18:31"
9242;747;"JavaScript";"/**
 * @param {string} start
 * @param {string} end
 * @return {boolean}
 */
var canTransform = function(start, end) {
 
};";"";"2020-03-25 15:18:31"
9243;747;"PHP";"class Solution {
 
    /**
     * @param String $start
     * @param String $end
     * @return Boolean
     */
    function canTransform($start, $end) {
        
    }
}";"";"2020-03-25 15:18:31"
9244;747;"Swift";"class Solution {
    func canTransform(_ start: String, _ end: 
String) -> Bool {
        
    }
}";"";"2020-03-25 15:18:31"
9245;747;"Ruby";"# @param {String} start
# @param {String} end
# @return {Boolean}
def can_transform(start, end)
 
end";"";"2020-03-25 15:18:31"
9246;747;"Python";"class Solution(object):
    def canTransform(self, start, end):
        """"""
        :type start: str
        :type end: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:31"
9247;748;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public bool IsSubtree(TreeNode s, TreeNode t) {
 
    }
}";"";"2020-03-25 15:18:31"
9248;748;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSubtree(TreeNode s, TreeNode t)
 {
 
    }
}";"";"2020-03-25 15:18:31"
9249;748;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
bool isSubtree(struct TreeNode* s, struct TreeNode* 
t){
 
}";"";"2020-03-25 15:18:31"
9250;748;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn is_subtree(s: 
Option<Rc<RefCell<TreeNode>>>, t: 
Option<Rc<RefCell<TreeNode>>>) -> bool {
        
    }";"";"2020-03-25 15:18:31"
9251;748;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def isSubtree(s: TreeNode, t: TreeNode): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:31"
9252;748;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func isSubtree(s *TreeNode, t *TreeNode) bool {
 
}";"";"2020-03-25 15:18:31"
9253;748;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun isSubtree(s: TreeNode?, t: TreeNode?): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:31"
9254;748;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def isSubtree(self, s: TreeNode, t: TreeNode) 
-> bool:";"";"2020-03-25 15:18:31"
9255;748;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} s
 * @param {TreeNode} t
 * @return {boolean}
 */
var isSubtree = function(s, t) {
 
};";"";"2020-03-25 15:18:31"
9256;748;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $s
     * @param TreeNode $t
     * @return Boolean
     */
    function isSubtree($s, $t) {
        
    }
}";"";"2020-03-25 15:18:31"
9257;748;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func isSubtree(_ s: TreeNode?, _ t: TreeNode?) 
-> Bool {
        
    }
}";"";"2020-03-25 15:18:31"
9258;748;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} s
# @param {TreeNode} t
# @return {Boolean}
def is_subtree(s, t)
 
end";"";"2020-03-25 15:18:31"
9259;748;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def isSubtree(self, s, t):
        """"""
        :type s: TreeNode
        :type t: TreeNode
        :rtype: bool
        """"""";"";"2020-03-25 15:18:31"
9260;749;"C#";"public class Solution {
    public string RankTeams(string[] votes) {
 
    }
}";"";"2020-03-25 15:18:31"
9261;749;"Java";"class Solution {
    public String rankTeams(String[] votes) {
 
    }
}";"";"2020-03-25 15:18:31"
9262;749;"Rust";"impl Solution {
    pub fn rank_teams(votes: Vec<String>) -> String 
{
 
    }
}";"";"2020-03-25 15:18:31"
9263;749;"C";"char * rankTeams(char ** votes, int votesSize){
 
}";"";"2020-03-25 15:18:31"
9264;749;"Scala";"object Solution {
    def rankTeams(votes: Array[String]): String = {
 
    }
}";"";"2020-03-25 15:18:31"
9265;749;"Go";"func rankTeams(votes []string) string {
 
}";"";"2020-03-25 15:18:31"
9266;749;"Kotlin";"class Solution {
    fun rankTeams(votes: Array<String>): String {
 
    }
}";"";"2020-03-25 15:18:31"
9267;749;"Python3";"class Solution:
    def rankTeams(self, votes: List[str]) -> str:";"";"2020-03-25 15:18:31"
9268;749;"JavaScript";"/**
 * @param {string[]} votes
 * @return {string}
 */
var rankTeams = function(votes) {
 
};";"";"2020-03-25 15:18:31"
9269;749;"PHP";"class Solution {";"";"2020-03-25 15:18:31"
9270;749;"Swift";"class Solution {
    func rankTeams(_ votes: [String]) -> String {
        
    }
}";"";"2020-03-25 15:18:31"
9271;749;"Ruby";"# @param {String[]} votes
# @return {String}
def rank_teams(votes)
 
end";"";"2020-03-25 15:18:31"
9272;749;"Python";"class Solution(object):
    def rankTeams(self, votes):
        """"""
        :type votes: List[str]
        :rtype: str
        """"""";"";"2020-03-25 15:18:31"
9273;750;"C#";"public class Solution {
    public bool StoneGame(int[] piles) {
 
    }
}";"";"2020-03-25 15:18:31"
9274;750;"Java";"class Solution {
    public boolean stoneGame(int[] piles) {
 
    }
}";"";"2020-03-25 15:18:31"
9275;750;"C";"bool stoneGame(int* piles, int pilesSize){
 
}";"";"2020-03-25 15:18:31"
9276;750;"Rust";"impl Solution {
    pub fn stone_game(piles: Vec<i32>) -> bool {
        
    }
}";"";"2020-03-25 15:18:31"
9277;750;"Scala";"object Solution {
    def stoneGame(piles: Array[Int]): Boolean = {
 
    }
}";"";"2020-03-25 15:18:31"
9278;750;"Go";"func stoneGame(piles []int) bool {
 
}";"";"2020-03-25 15:18:31"
9279;750;"Kotlin";"class Solution {
    fun stoneGame(piles: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:31"
9280;750;"Python3";"class Solution:
    def stoneGame(self, piles: List[int]) -> bool:";"";"2020-03-25 15:18:31"
9281;750;"JavaScript";"/**
 * @param {number[]} piles
 * @return {boolean}
 */
var stoneGame = function(piles) {
 
};";"";"2020-03-25 15:18:31"
9282;750;"PHP";"class Solution {
 
    /**
     * @param Integer[] $piles
     * @return Boolean
     */
    function stoneGame($piles) {
        
    }
}";"";"2020-03-25 15:18:31"
9283;750;"Swift";"class Solution {
    func stoneGame(_ piles: [Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:31"
9284;750;"Ruby";"# @param {Integer[]} piles";"";"2020-03-25 15:18:31"
9285;750;"Python";"class Solution(object):
    def stoneGame(self, piles):
        """"""
        :type piles: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:31"
9286;751;"C#";"public class Solution {
    public IList<int> FindSubstring(string s, string
[] words) {
 
    }
}";"";"2020-03-25 15:18:31"
9287;751;"Java";"class Solution {
    public List<Integer> findSubstring(String s, 
String[] words) {
 
    }
}";"";"2020-03-25 15:18:31"
9288;751;"Rust";"impl Solution {
    pub fn find_substring(s: String, words: 
Vec<String>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:31"
9289;751;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* findSubstring(char * s, char ** words, int 
wordsSize, int* returnSize){
 
}";"";"2020-03-25 15:18:31"
9290;751;"Scala";"object Solution {
    def findSubstring(s: String, words: Array
[String]): List[Int] = {
 
    }
}";"";"2020-03-25 15:18:31"
9291;751;"Go";"func findSubstring(s string, words []string) []int {
 
}";"";"2020-03-25 15:18:31"
9292;751;"Kotlin";"class Solution {
    fun findSubstring(s: String, words: 
Array<String>): List<Int> {
 
    }
}";"";"2020-03-25 15:18:31"
9293;751;"Python3";"class Solution:
    def findSubstring(self, s: str, words: List[str]
) -> List[int]:";"";"2020-03-25 15:18:31"
9294;751;"JavaScript";"/**
 * @param {string} s
 * @param {string[]} words
 * @return {number[]}
 */
var findSubstring = function(s, words) {
 
};";"";"2020-03-25 15:18:31"
9295;751;"PHP";"class Solution {";"";"2020-03-25 15:18:31"
9296;751;"Swift";"class Solution {
    func findSubstring(_ s: String, _ words: 
[String]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:31"
9297;751;"Ruby";"# @param {String} s
# @param {String[]} words
# @return {Integer[]}
def find_substring(s, words)
 
end";"";"2020-03-25 15:18:31"
9298;751;"Python";"class Solution(object):
    def findSubstring(self, s, words):
        """"""
        :type s: str
        :type words: List[str]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:31"
9299;752;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<IList<string>> PrintTree(TreeNode 
root) {
 
    }
}";"";"2020-03-25 15:18:31"
9300;752;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<String>> printTree(TreeNode 
root) {
 
    }
}";"";"2020-03-25 15:18:31"
9301;752;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn print_tree(root: 
Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<String>> {
        
    }
}";"";"2020-03-25 15:18:31"
9302;752;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
char *** printTree(struct TreeNode* root, int* 
returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:31"
9303;752;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def printTree(root: TreeNode): List[List[String]
] = {
 
    }
}";"";"2020-03-25 15:18:31"
9304;752;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func printTree(root *TreeNode) [][]string {
 
}";"";"2020-03-25 15:18:31"
9305;752;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun printTree(root: TreeNode?): 
List<List<String>> {
 
    }
}";"";"2020-03-25 15:18:31"
9306;752;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def printTree(self, root: TreeNode) -> List[List
[str]]:";"";"2020-03-25 15:18:31"
9307;752;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {string[][]}
 */
var printTree = function(root) {
 
};";"";"2020-03-25 15:18:31"
9308;752;"PHP";"/**";"";"2020-03-25 15:18:31"
9309;752;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func printTree(_ root: TreeNode?) -> [[String]] 
{
        
    }
}";"";"2020-03-25 15:18:31"
9310;752;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {String[][]}
def print_tree(root)
 
end";"";"2020-03-25 15:18:31"
9311;752;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def printTree(self, root):
        """"""
        :type root: TreeNode
        :rtype: List[List[str]]
        """"""";"";"2020-03-25 15:18:31"
9312;753;"C#";"public class Solution {
    public int MaxProfit(int[] prices) {
 
    }
}";"";"2020-03-25 15:18:31"
9313;753;"Java";"class Solution {
    public int maxProfit(int[] prices) {
 
    }
}";"";"2020-03-25 15:18:31"
9314;753;"C";"int maxProfit(int* prices, int pricesSize){
 
}";"";"2020-03-25 15:18:31"
9315;753;"Rust";"impl Solution {
    pub fn max_profit(prices: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:31"
9316;753;"Scala";"object Solution {
    def maxProfit(prices: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:31"
9317;753;"Go";"func maxProfit(prices []int) int {
 
}";"";"2020-03-25 15:18:31"
9318;753;"Kotlin";"class Solution {
    fun maxProfit(prices: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:31"
9319;753;"Python3";"class Solution:
    def maxProfit(self, prices: List[int]) -> int:";"";"2020-03-25 15:18:31"
9320;753;"JavaScript";"/**
 * @param {number[]} prices
 * @return {number}
 */
var maxProfit = function(prices) {
 
};";"";"2020-03-25 15:18:31"
9321;753;"PHP";"class Solution {
 
    /**
     * @param Integer[] $prices
     * @return Integer
     */
    function maxProfit($prices) {
 
    }
}";"";"2020-03-25 15:18:31"
9322;753;"Swift";"class Solution {
    func maxProfit(_ prices: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:31"
9323;753;"Ruby";"";"";"2020-03-25 15:18:31"
9324;753;"Python";"class Solution(object):
    def maxProfit(self, prices):
        """"""
        :type prices: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:31"
9325;754;"C#";"public class Solution {
    public int LastStoneWeight(int[] stones) {
 
    }
}";"";"2020-03-25 15:18:31"
9326;754;"Java";"class Solution {
    public int lastStoneWeight(int[] stones) {
 
    }
}";"";"2020-03-25 15:18:31"
9327;754;"C";"int lastStoneWeight(int* stones, int stonesSize){
 
}";"";"2020-03-25 15:18:31"
9328;754;"Rust";"impl Solution {
    pub fn last_stone_weight(stones: Vec<i32>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:31"
9329;754;"Scala";"object Solution {
    def lastStoneWeight(stones: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:31"
9330;754;"Go";"func lastStoneWeight(stones []int) int {
 
}";"";"2020-03-25 15:18:31"
9331;754;"Kotlin";"class Solution {
    fun lastStoneWeight(stones: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:31"
9332;754;"Python3";"class Solution:
    def lastStoneWeight(self, stones: List[int]) -> 
int:";"";"2020-03-25 15:18:31"
9333;754;"JavaScript";"/**
 * @param {number[]} stones
 * @return {number}
 */
var lastStoneWeight = function(stones) {
 
};";"";"2020-03-25 15:18:31"
9334;754;"PHP";"class Solution {
 
    /**
     * @param Integer[] $stones
     * @return Integer
     */
    function lastStoneWeight($stones) {
        
    }
}";"";"2020-03-25 15:18:31"
9335;754;"Swift";"class Solution {
    func lastStoneWeight(_ stones: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:31"
9336;754;"Ruby";"# @param {Integer[]} stones";"";"2020-03-25 15:18:31"
9337;754;"Python";"class Solution(object):
    def lastStoneWeight(self, stones):
        """"""
        :type stones: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:31"
9338;755;"C#";"public class Solution {
    public int TotalHammingDistance(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:32"
9339;755;"Java";"class Solution {
    public int totalHammingDistance(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:32"
9340;755;"C";"int totalHammingDistance(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:32"
9341;755;"Rust";"impl Solution {
    pub fn total_hamming_distance(nums: Vec<i32>) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:32"
9342;755;"Scala";"object Solution {
    def totalHammingDistance(nums: Array[Int]): Int 
= {
 
    }
}";"";"2020-03-25 15:18:32"
9343;755;"Go";"func totalHammingDistance(nums []int) int {
 
}";"";"2020-03-25 15:18:32"
9344;755;"Kotlin";"class Solution {
    fun totalHammingDistance(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:32"
9345;755;"Python3";"class Solution:
    def totalHammingDistance(self, nums: List[int]) 
-> int:";"";"2020-03-25 15:18:32"
9346;755;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var totalHammingDistance = function(nums) {
 
};";"";"2020-03-25 15:18:32"
9347;755;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function totalHammingDistance($nums) {
        
    }
}";"";"2020-03-25 15:18:32"
9348;755;"Swift";"class Solution {
    func totalHammingDistance(_ nums: [Int]) -> Int 
{
        
    }
}";"";"2020-03-25 15:18:32"
9349;755;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def total_hamming_distance(nums)
 
end";"";"2020-03-25 15:18:32"
9350;755;"Python";"class Solution(object):
    def totalHammingDistance(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:32"
9351;756;"C#";"public class Solution {
    public bool IsOneBitCharacter(int[] bits) {
 
    }
}";"";"2020-03-25 15:18:32"
9352;756;"Java";"class Solution {
    public boolean isOneBitCharacter(int[] bits) {
 
    }
}";"";"2020-03-25 15:18:32"
9353;756;"Rust";"impl Solution {
    pub fn is_one_bit_character(bits: Vec<i32>) -> 
bool {
        
    }
}";"";"2020-03-25 15:18:32"
9354;756;"C";"bool isOneBitCharacter(int* bits, int bitsSize){
 
}";"";"2020-03-25 15:18:32"
9355;756;"Scala";"object Solution {
    def isOneBitCharacter(bits: Array[Int]): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:32"
9356;756;"Go";"func isOneBitCharacter(bits []int) bool {
 
}";"";"2020-03-25 15:18:32"
9357;756;"Kotlin";"class Solution {
    fun isOneBitCharacter(bits: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:32"
9358;756;"Python3";"class Solution:
    def isOneBitCharacter(self, bits: List[int]) -> 
bool:";"";"2020-03-25 15:18:32"
9359;756;"JavaScript";"/**
 * @param {number[]} bits
 * @return {boolean}
 */
var isOneBitCharacter = function(bits) {
 
};";"";"2020-03-25 15:18:32"
9360;756;"PHP";"class Solution {";"";"2020-03-25 15:18:32"
9361;756;"Swift";"class Solution {
    func isOneBitCharacter(_ bits: [Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:32"
9362;756;"Ruby";"# @param {Integer[]} bits
# @return {Boolean}
def is_one_bit_character(bits)
 
end";"";"2020-03-25 15:18:32"
9363;756;"Python";"class Solution(object):
    def isOneBitCharacter(self, bits):
        """"""
        :type bits: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:32"
9364;757;"C#";"public class NumArray {
 
    public NumArray(int[] nums) {
 
    }
    
    public void Update(int i, int val) {
 
    }
    
    public int SumRange(int i, int j) {
 
    }
}
 
/**
 * Your NumArray object will be instantiated and 
called as such:
 * NumArray obj = new NumArray(nums);
 * obj.Update(i,val);
 * int param_2 = obj.SumRange(i,j);
 */";"";"2020-03-25 15:18:32"
9365;757;"Java";"class NumArray {
 
    public NumArray(int[] nums) {
 
    }
    
    public void update(int i, int val) {
 
    }
    
    public int sumRange(int i, int j) {
 
    }
}
 
/**
 * Your NumArray object will be instantiated and 
called as such:
 * NumArray obj = new NumArray(nums);
 * obj.update(i,val);
 * int param_2 = obj.sumRange(i,j);
 */";"";"2020-03-25 15:18:32"
9366;757;"C";"typedef struct {
    
} NumArray;
 
 
NumArray* numArrayCreate(int* nums, int numsSize) {
    
}
 
void numArrayUpdate(NumArray* obj, int i, int val) {
  
}
 
int numArraySumRange(NumArray* obj, int i, int j) {
  
}
 
void numArrayFree(NumArray* obj) {
    
}
 
/**
 * Your NumArray struct will be instantiated and 
called as such:
 * NumArray* obj = numArrayCreate(nums, numsSize);
 * numArrayUpdate(obj, i, val);";"";"2020-03-25 15:18:32"
9367;757;"Rust";"struct NumArray {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl NumArray {
 
    fn new(nums: Vec<i32>) -> Self {
        
    }
    
    fn update(&self, i: i32, val: i32) {
        
    }
    
    fn sum_range(&self, i: i32, j: i32) -> i32 {
        
    }
}
 ";"";"2020-03-25 15:18:32"
9368;757;"Scala";"class NumArray(_nums: Array[Int]) {
 
    def update(i: Int, `val`: Int) {
 
    }
 
    def sumRange(i: Int, j: Int): Int = {
 
    }
 
}
 
/**
 * Your NumArray object will be instantiated and 
called as such:
 * var obj = new NumArray(nums)
 * obj.update(i,`val`)
 * var param_2 = obj.sumRange(i,j)
 */";"";"2020-03-25 15:18:32"
9369;757;"Go";"type NumArray struct {
 
}
 
 
func Constructor(nums []int) NumArray {
 
}
 
 
func (this *NumArray) Update(i int, val int)  {
 
}
 
 
func (this *NumArray) SumRange(i int, j int) int {
 
}
 
 
/**
 * Your NumArray object will be instantiated and 
called as such:
 * obj := Constructor(nums);
 * obj.Update(i,val);
 * param_2 := obj.SumRange(i,j);";"";"2020-03-25 15:18:32"
9370;757;"Kotlin";"class NumArray(nums: IntArray) {
 
    fun update(i: Int, `val`: Int) {
 
    }
 
    fun sumRange(i: Int, j: Int): Int {
 
    }
 
}
 
/**
 * Your NumArray object will be instantiated and 
called as such:
 * var obj = NumArray(nums)
 * obj.update(i,`val`)
 * var param_2 = obj.sumRange(i,j)
 */";"";"2020-03-25 15:18:32"
9371;757;"Python3";"class NumArray:
 
    def __init__(self, nums: List[int]):
        
 
    def update(self, i: int, val: int) -> None:
        
 
    def sumRange(self, i: int, j: int) -> int:
        
 
 
# Your NumArray object will be instantiated and 
called as such:
# obj = NumArray(nums)
# obj.update(i,val)
# param_2 = obj.sumRange(i,j)";"";"2020-03-25 15:18:32"
9372;757;"JavaScript";"/**
 * @param {number[]} nums
 */
var NumArray = function(nums) {
 
};
 
/** 
 * @param {number} i 
 * @param {number} val
 * @return {void}
 */
NumArray.prototype.update = function(i, val) {
 
};
 
/** 
 * @param {number} i 
 * @param {number} j
 * @return {number}
 */
NumArray.prototype.sumRange = function(i, j) {
 
};
 
/**";"";"2020-03-25 15:18:32"
9373;757;"PHP";"class NumArray {
    /**
     * @param Integer[] $nums
     */
    function __construct($nums) {
        
    }
  
    /**
     * @param Integer $i
     * @param Integer $val
     * @return NULL
     */
    function update($i, $val) {
        
    }
  
    /**
     * @param Integer $i
     * @param Integer $j
     * @return Integer
     */
    function sumRange($i, $j) {
        
    }
}";"";"2020-03-25 15:18:32"
9374;757;"Swift";"class NumArray {
 
    init(_ nums: [Int]) {
        
    }
    
    func update(_ i: Int, _ val: Int) {
        
    }
    
    func sumRange(_ i: Int, _ j: Int) -> Int {
        
    }
}
 
/**
 * Your NumArray object will be instantiated and 
called as such:
 * let obj = NumArray(nums)
 * obj.update(i, val)
 * let ret_2: Int = obj.sumRange(i, j)
 */";"";"2020-03-25 15:18:32"
9375;757;"Ruby";"class NumArray
 
=begin
    :type nums: Integer[]
=end
    def initialize(nums)
 
    end
 
 
=begin
    :type i: Integer
    :type val: Integer
    :rtype: Void
=end
    def update(i, val)
 
    end
 
 
=begin
    :type i: Integer
    :type j: Integer
    :rtype: Integer
=end
    def sum_range(i, j)";"";"2020-03-25 15:18:32"
9376;757;"Python";"class NumArray(object):
 
    def __init__(self, nums):
        """"""
        :type nums: List[int]
        """"""
        
 
    def update(self, i, val):
        """"""
        :type i: int
        :type val: int
        :rtype: None
        """"""
        
 
    def sumRange(self, i, j):
        """"""
        :type i: int
        :type j: int
        :rtype: int
        """"""
        
 
 
# Your NumArray object will be instantiated and ";"";"2020-03-25 15:18:32"
9377;758;"C#";"public class Solution {
    public int LeastInterval(char[] tasks, int n) {
 
    }
}";"";"2020-03-25 15:18:32"
9378;758;"Java";"class Solution {
    public int leastInterval(char[] tasks, int n) {
 
    }
}";"";"2020-03-25 15:18:32"
9379;758;"C++";"class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        
    }
};";"";"2020-03-25 15:18:32"
9380;758;"C";"int leastInterval(char* tasks, int tasksSize, int n)
{
 
}";"";"2020-03-25 15:18:32"
9381;758;"Rust";"impl Solution {
    pub fn least_interval(tasks: Vec<char>, n: i32) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:32"
9382;758;"Scala";"object Solution {
    def leastInterval(tasks: Array[Char], n: Int): 
Int = {
 
    }
}";"";"2020-03-25 15:18:32"
9383;758;"Go";"func leastInterval(tasks []byte, n int) int {
 
}";"";"2020-03-25 15:18:32"
9384;758;"Kotlin";"class Solution {
    fun leastInterval(tasks: CharArray, n: Int): 
Int {
 
    }
}";"";"2020-03-25 15:18:32"
9385;758;"Python3";"class Solution:
    def leastInterval(self, tasks: List[str], n: 
int) -> int:";"";"2020-03-25 15:18:32"
9386;758;"JavaScript";"/**
 * @param {character[]} tasks
 * @param {number} n
 * @return {number}
 */
var leastInterval = function(tasks, n) {
 
};";"";"2020-03-25 15:18:32"
9387;758;"PHP";"class Solution {
 
    /**
     * @param String[] $tasks
     * @param Integer $n
     * @return Integer
     */
    function leastInterval($tasks, $n) {
        
    }
}";"";"2020-03-25 15:18:32"
9388;758;"Swift";"class Solution {
    func leastInterval(_ tasks: [Character], _ n: 
Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:32"
9389;758;"Ruby";"# @param {Character[]} tasks
# @param {Integer} n
# @return {Integer}
def least_interval(tasks, n)
 
end";"";"2020-03-25 15:18:32"
9390;758;"Python";"class Solution(object):
    def leastInterval(self, tasks, n):
        """"""
        :type tasks: List[str]
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:32"
9391;759;"C#";"public class Solution {
    public int MinPatches(int[] nums, int n) {
 
    }
}";"";"2020-03-25 15:18:32"
9392;759;"Java";"class Solution {
    public int minPatches(int[] nums, int n) {
 
    }
}";"";"2020-03-25 15:18:32"
9393;759;"C";"int minPatches(int* nums, int numsSize, int n){
 
}";"";"2020-03-25 15:18:32"
9394;759;"Rust";"impl Solution {
    pub fn min_patches(nums: Vec<i32>, n: i32) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:32"
9395;759;"Scala";"object Solution {
    def minPatches(nums: Array[Int], n: Int): Int = 
{
 
    }
}";"";"2020-03-25 15:18:32"
9396;759;"Go";"func minPatches(nums []int, n int) int {
 
}";"";"2020-03-25 15:18:32"
9397;759;"Kotlin";"class Solution {
    fun minPatches(nums: IntArray, n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:32"
9398;759;"Python3";"class Solution:
    def minPatches(self, nums: List[int], n: int) 
-> int:";"";"2020-03-25 15:18:32"
9399;759;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} n
 * @return {number}
 */
var minPatches = function(nums, n) {
 
};";"";"2020-03-25 15:18:32"
9400;759;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer $n
     * @return Integer
     */
    function minPatches($nums, $n) {
        
    }
}";"";"2020-03-25 15:18:32"
9401;759;"Swift";"class Solution {
    func minPatches(_ nums: [Int], _ n: Int) -> Int 
{
        
    }
}";"";"2020-03-25 15:18:32"
9402;759;"Ruby";"# @param {Integer[]} nums
# @param {Integer} n
# @return {Integer}
def min_patches(nums, n)
 
end";"";"2020-03-25 15:18:32"
9403;759;"Python";"class Solution(object):
    def minPatches(self, nums, n):
        """"""
        :type nums: List[int]
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:32"
9404;760;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
 
    // Encodes a tree to a single string.
    public string serialize(TreeNode root) {
        
    }
 
    // Decodes your encoded data to tree.
    public TreeNode deserialize(string data) {
        
    }
}
 
// Your Codec object will be instantiated and 
called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));";"";"2020-03-25 15:18:32"
9405;760;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
 
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        
    }
 
    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        
    }
}
 
// Your Codec object will be instantiated and 
called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));";"";"2020-03-25 15:18:32"
9406;760;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
/** Encodes a tree to a single string. */
char* serialize(struct TreeNode* root) {
    
}
 
/** Decodes your encoded data to tree. */
struct TreeNode* deserialize(char* data) {
    
}
 
// Your functions will be called as such:
// char* data = serialize(root);
// deserialize(data);";"";"2020-03-25 15:18:32"
9407;760;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
 
/**
 * Encodes a tree to a single string.
 *
 * @param {TreeNode} root
 * @return {string}
 */
var serialize = function(root) {
    
};
 
/**
 * Decodes your encoded data to tree.
 *
 * @param {string} data
 * @return {TreeNode}
 */
var deserialize = function(data) {
    ";"";"2020-03-25 15:18:32"
9408;760;"Python3";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Codec:
 
    def serialize(self, root):
        """"""Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """"""
        
 
    def deserialize(self, data):
        """"""Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """"""
        
 
# Your Codec object will be instantiated and called ";"";"2020-03-25 15:18:32"
9409;760;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# Encodes a tree to a single string.
#
# @param {TreeNode} root
# @return {string}
def serialize(root)
    
end
 
# Decodes your encoded data to tree.
#
# @param {string} data
# @return {TreeNode}
def deserialize(data)
    
end
 
 ";"";"2020-03-25 15:18:32"
9410;760;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Codec:
 
    def serialize(self, root):
        """"""Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """"""
        
 
    def deserialize(self, data):
        """"""Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """"""
        
 
# Your Codec object will be instantiated and called ";"";"2020-03-25 15:18:32"
9411;761;"C#";"public class Solution {
    public int[] NumberOfLines(int[] widths, string 
S) {
 
    }
}";"";"2020-03-25 15:18:32"
9412;761;"Java";"class Solution {
    public int[] numberOfLines(int[] widths, String 
S) {
 
    }
}";"";"2020-03-25 15:18:32"
9413;761;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* numberOfLines(int* widths, int widthsSize, 
char * S, int* returnSize){
 
}";"";"2020-03-25 15:18:32"
9414;761;"Rust";"impl Solution {
    pub fn number_of_lines(widths: Vec<i32>, s: 
String) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:32"
9415;761;"Scala";"object Solution {
    def numberOfLines(widths: Array[Int], S: String)
: Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:32"
9416;761;"Go";"func numberOfLines(widths []int, S string) []int {
 
}";"";"2020-03-25 15:18:32"
9417;761;"Kotlin";"class Solution {
    fun numberOfLines(widths: IntArray, S: String): 
IntArray {
 
    }
}";"";"2020-03-25 15:18:32"
9418;761;"Python3";"class Solution:
    def numberOfLines(self, widths: List[int], S: 
str) -> List[int]:";"";"2020-03-25 15:18:32"
9419;761;"JavaScript";"/**
 * @param {number[]} widths
 * @param {string} S
 * @return {number[]}
 */
var numberOfLines = function(widths, S) {
 
};";"";"2020-03-25 15:18:32"
9420;761;"PHP";"class Solution {
 
    /**
     * @param Integer[] $widths
     * @param String $S
     * @return Integer[]
     */
    function numberOfLines($widths, $S) {
        
    }
}";"";"2020-03-25 15:18:32"
9421;761;"Swift";"class Solution {
    func numberOfLines(_ widths: [Int], _ S: String)
 -> [Int] {
        
    }
}";"";"2020-03-25 15:18:32"
9422;761;"Ruby";"# @param {Integer[]} widths
# @param {String} s
# @return {Integer[]}
def number_of_lines(widths, s)
 
end";"";"2020-03-25 15:18:32"
9423;761;"Python";"class Solution(object):
    def numberOfLines(self, widths, S):
        """"""
        :type widths: List[int]
        :type S: str
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:32"
9424;762;"C#";"public class Solution {
    public string StrWithout3a3b(int A, int B) {
 
    }
}";"";"2020-03-25 15:18:32"
9425;762;"Java";"class Solution {
    public String strWithout3a3b(int A, int B) {
 
    }
}";"";"2020-03-25 15:18:32"
9426;762;"C";"char * strWithout3a3b(int A, int B){
 
}";"";"2020-03-25 15:18:32"
9427;762;"Rust";"impl Solution {
    pub fn str_without3a3b(a: i32, b: i32) -> 
String {
        
    }
}";"";"2020-03-25 15:18:32"
9428;762;"Scala";"object Solution {
    def strWithout3a3b(A: Int, B: Int): String = {
 
    }
}";"";"2020-03-25 15:18:32"
9429;762;"Go";"func strWithout3a3b(A int, B int) string {
 
}";"";"2020-03-25 15:18:32"
9430;762;"Kotlin";"class Solution {
    fun strWithout3a3b(A: Int, B: Int): String {
 
    }
}";"";"2020-03-25 15:18:32"
9431;762;"Python3";"class Solution:
    def strWithout3a3b(self, A: int, B: int) -> str:";"";"2020-03-25 15:18:32"
9432;762;"JavaScript";"/**
 * @param {number} A
 * @param {number} B
 * @return {string}
 */
var strWithout3a3b = function(A, B) {
 
};";"";"2020-03-25 15:18:32"
9433;762;"PHP";"class Solution {
 
    /**
     * @param Integer $A
     * @param Integer $B
     * @return String
     */
    function strWithout3a3b($A, $B) {
        
    }
}";"";"2020-03-25 15:18:32"
9434;762;"Swift";"class Solution {
    func strWithout3a3b(_ A: Int, _ B: Int) -> 
String {
        
    }
}";"";"2020-03-25 15:18:32"
9435;762;"Ruby";"# @param {Integer} a";"";"2020-03-25 15:18:32"
9436;762;"Python";"class Solution(object):
    def strWithout3a3b(self, A, B):
        """"""
        :type A: int
        :type B: int
        :rtype: str
        """"""";"";"2020-03-25 15:18:32"
9437;763;"C#";"public class Solution {
    public string MostCommonWord(string paragraph, 
string[] banned) {
 
    }
}";"";"2020-03-25 15:18:32"
9438;763;"Java";"class Solution {
    public String mostCommonWord(String paragraph, 
String[] banned) {
 
    }
}";"";"2020-03-25 15:18:32"
9439;763;"Rust";"impl Solution {
    pub fn most_common_word(paragraph: String, 
banned: Vec<String>) -> String {
        
    }
}";"";"2020-03-25 15:18:32"
9440;763;"C";"char * mostCommonWord(char * paragraph, char ** 
banned, int bannedSize){
 
}";"";"2020-03-25 15:18:32"
9441;763;"Scala";"object Solution {
    def mostCommonWord(paragraph: String, banned: 
Array[String]): String = {
 
    }
}";"";"2020-03-25 15:18:32"
9442;763;"Go";"func mostCommonWord(paragraph string, banned []
string) string {
 
}";"";"2020-03-25 15:18:32"
9443;763;"Kotlin";"class Solution {
    fun mostCommonWord(paragraph: String, banned: 
Array<String>): String {
 
    }
}";"";"2020-03-25 15:18:32"
9444;763;"Python3";"class Solution:
    def mostCommonWord(self, paragraph: str, 
banned: List[str]) -> str:";"";"2020-03-25 15:18:32"
9445;763;"JavaScript";"/**
 * @param {string} paragraph
 * @param {string[]} banned
 * @return {string}
 */
var mostCommonWord = function(paragraph, banned) {
 
};";"";"2020-03-25 15:18:32"
9446;763;"PHP";"class Solution {";"";"2020-03-25 15:18:32"
9447;763;"Swift";"class Solution {
    func mostCommonWord(_ paragraph: String, _ 
banned: [String]) -> String {
        
    }
}";"";"2020-03-25 15:18:32"
9448;763;"Ruby";"# @param {String} paragraph
# @param {String[]} banned
# @return {String}
def most_common_word(paragraph, banned)
 
end";"";"2020-03-25 15:18:32"
9449;763;"Python";"class Solution(object):
    def mostCommonWord(self, paragraph, banned):
        """"""
        :type paragraph: str
        :type banned: List[str]
        :rtype: str
        """"""";"";"2020-03-25 15:18:32"
9450;764;"C#";"public class Solution {
    public int[] SwapNumbers(int[] numbers) {
 
    }
}";"";"2020-03-25 15:18:32"
9451;764;"Java";"class Solution {
    public int[] swapNumbers(int[] numbers) {
 
    }
}";"";"2020-03-25 15:18:32"
9452;764;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* swapNumbers(int* numbers, int numbersSize, 
int* returnSize){
 
}";"";"2020-03-25 15:18:32"
9453;764;"Rust";"impl Solution {
    pub fn swap_numbers(numbers: Vec<i32>) -> 
Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:32"
9454;764;"Scala";"object Solution {
    def swapNumbers(numbers: Array[Int]): Array[Int]
 = {
 
    }
}";"";"2020-03-25 15:18:32"
9455;764;"Go";"func swapNumbers(numbers []int) []int {
 
}";"";"2020-03-25 15:18:32"
9456;764;"Kotlin";"class Solution {
    fun swapNumbers(numbers: IntArray): IntArray {
 
    }
}";"";"2020-03-25 15:18:32"
9457;764;"Python3";"class Solution:
    def swapNumbers(self, numbers: List[int]) -> 
List[int]:";"";"2020-03-25 15:18:32"
9458;764;"JavaScript";"/**
 * @param {number[]} numbers
 * @return {number[]}
 */
var swapNumbers = function(numbers) {
 
};";"";"2020-03-25 15:18:32"
9459;764;"PHP";"class Solution {
 
    /**
     * @param Integer[] $numbers
     * @return Integer[]
     */
    function swapNumbers($numbers) {
 
    }
}";"";"2020-03-25 15:18:32"
9460;764;"Swift";"class Solution {
    func swapNumbers(_ numbers: [Int]) -> [Int] {
 
    }
}";"";"2020-03-25 15:18:32"
9461;764;"Ruby";"# @param {Integer[]} numbers
# @return {Integer[]}
def swap_numbers(numbers)
 
end";"";"2020-03-25 15:18:32"
9462;764;"Python";"class Solution(object):
    def swapNumbers(self, numbers):
        """"""
        :type numbers: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:32"
9463;765;"C#";"public class Solution {
    public bool EscapeGhosts(int[][] ghosts, int[] 
target) {
 
    }
}";"";"2020-03-25 15:18:32"
9464;765;"Java";"class Solution {
    public boolean escapeGhosts(int[][] ghosts, int
[] target) {
 
    }
}";"";"2020-03-25 15:18:32"
9465;765;"Rust";"impl Solution {
    pub fn escape_ghosts(ghosts: Vec<Vec<i32>>, 
target: Vec<i32>) -> bool {
        
    }
}";"";"2020-03-25 15:18:32"
9466;765;"C";"bool escapeGhosts(int** ghosts, int ghostsSize, 
int* ghostsColSize, int* target, int targetSize){
 
}";"";"2020-03-25 15:18:32"
9467;765;"Scala";"object Solution {
    def escapeGhosts(ghosts: Array[Array[Int]], 
target: Array[Int]): Boolean = {
 
    }
}";"";"2020-03-25 15:18:32"
9468;765;"Go";"func escapeGhosts(ghosts [][]int, target []int) 
bool {
 
}";"";"2020-03-25 15:18:32"
9469;765;"Kotlin";"class Solution {
    fun escapeGhosts(ghosts: Array<IntArray>, 
target: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:32"
9470;765;"Python3";"class Solution:
    def escapeGhosts(self, ghosts: List[List[int]], 
target: List[int]) -> bool:";"";"2020-03-25 15:18:32"
9471;765;"JavaScript";"/**
 * @param {number[][]} ghosts
 * @param {number[]} target
 * @return {boolean}
 */
var escapeGhosts = function(ghosts, target) {
 
};";"";"2020-03-25 15:18:32"
9472;765;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $ghosts
     * @param Integer[] $target
     * @return Boolean
     */
    function escapeGhosts($ghosts, $target) {
        
    }
}";"";"2020-03-25 15:18:32"
9473;765;"Swift";"class Solution {
    func escapeGhosts(_ ghosts: [[Int]], _ target: 
[Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:32"
9474;765;"Ruby";"# @param {Integer[][]} ghosts
# @param {Integer[]} target
# @return {Boolean}
def escape_ghosts(ghosts, target)
 
end";"";"2020-03-25 15:18:32"
9475;765;"Python";"class Solution(object):
    def escapeGhosts(self, ghosts, target):
        """"""
        :type ghosts: List[List[int]]
        :type target: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:32"
9476;766;"C#";"public class Solution {
    public bool CircularArrayLoop(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:32"
9477;766;"Java";"class Solution {
    public boolean circularArrayLoop(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:32"
9478;766;"Rust";"impl Solution {
    pub fn circular_array_loop(nums: Vec<i32>) -> 
bool {
        
    }
}";"";"2020-03-25 15:18:32"
9479;766;"C";"bool circularArrayLoop(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:32"
9480;766;"Scala";"object Solution {
    def circularArrayLoop(nums: Array[Int]): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:32"
9481;766;"Go";"func circularArrayLoop(nums []int) bool {
 
}";"";"2020-03-25 15:18:32"
9482;766;"Kotlin";"class Solution {
    fun circularArrayLoop(nums: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:32"
9483;766;"Python3";"class Solution:
    def circularArrayLoop(self, nums: List[int]) -> 
bool:";"";"2020-03-25 15:18:32"
9484;766;"JavaScript";"/**
 * @param {number[]} nums
 * @return {boolean}
 */
var circularArrayLoop = function(nums) {
 
};";"";"2020-03-25 15:18:32"
9485;766;"PHP";"class Solution {";"";"2020-03-25 15:18:32"
9486;766;"Swift";"class Solution {
    func circularArrayLoop(_ nums: [Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:32"
9487;766;"Ruby";"# @param {Integer[]} nums
# @return {Boolean}
def circular_array_loop(nums)
 
end";"";"2020-03-25 15:18:32"
9488;766;"Python";"class Solution(object):
    def circularArrayLoop(self, nums):
        """"""
        :type nums: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:32"
9489;767;"C#";"public class Solution {
    public IList<IList<int>> PacificAtlantic(int[][]
 matrix) {
 
    }
}";"";"2020-03-25 15:18:32"
9490;767;"Java";"class Solution {
    public List<List<Integer>> pacificAtlantic(int[]
[] matrix) {
 
    }
}";"";"2020-03-25 15:18:32"
9491;767;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** pacificAtlantic(int** matrix, int matrixSize, 
int* matrixColSize, int* returnSize, int** 
returnColumnSizes){
 
}";"";"2020-03-25 15:18:32"
9492;767;"Rust";"impl Solution {
    pub fn pacific_atlantic(matrix: Vec<Vec<i32>>) 
-> Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:32"
9493;767;"Scala";"object Solution {
    def pacificAtlantic(matrix: Array[Array[Int]]): 
List[List[Int]] = {
 
    }
}";"";"2020-03-25 15:18:32"
9494;767;"Go";"func pacificAtlantic(matrix [][]int) [][]int {
 
}";"";"2020-03-25 15:18:32"
9495;767;"Kotlin";"class Solution {
    fun pacificAtlantic(matrix: Array<IntArray>): 
List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:32"
9496;767;"Python3";"class Solution:
    def pacificAtlantic(self, matrix: List[List[int]
]) -> List[List[int]]:";"";"2020-03-25 15:18:32"
9497;767;"JavaScript";"/**
 * @param {number[][]} matrix
 * @return {number[][]}
 */
var pacificAtlantic = function(matrix) {
 
};";"";"2020-03-25 15:18:32"
9498;767;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $matrix
     * @return Integer[][]
     */
    function pacificAtlantic($matrix) {
        
    }
}";"";"2020-03-25 15:18:32"
9499;767;"Swift";"class Solution {
    func pacificAtlantic(_ matrix: [[Int]]) -> [
[Int]] {
        
    }
}";"";"2020-03-25 15:18:32"
9500;767;"Ruby";"# @param {Integer[][]} matrix
# @return {Integer[][]}
def pacific_atlantic(matrix)
 
end";"";"2020-03-25 15:18:32"
9501;767;"Python";"class Solution(object):
    def pacificAtlantic(self, matrix):
        """"""
        :type matrix: List[List[int]]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:32"
9502;768;"C#";"public class Solution {
    public string FindReplaceString(string S, int[] 
indexes, string[] sources, string[] targets) {
 
    }
}";"";"2020-03-25 15:18:32"
9503;768;"Java";"class Solution {
    public String findReplaceString(String S, int[] 
indexes, String[] sources, String[] targets) {
 
    }
}";"";"2020-03-25 15:18:32"
9504;768;"Rust";"impl Solution {
    pub fn find_replace_string(s: String, indexes: 
Vec<i32>, sources: Vec<String>, targets: 
Vec<String>) -> String {
        
    }
}";"";"2020-03-25 15:18:32"
9505;768;"C";"char * findReplaceString(char * S, int* indexes, 
int indexesSize, char ** sources, int sourcesSize, 
char ** targets, int targetsSize){
 
}";"";"2020-03-25 15:18:32"
9506;768;"Scala";"object Solution {
    def findReplaceString(S: String, indexes: Array
[Int], sources: Array[String], targets: Array
[String]): String = {
 
    }
}";"";"2020-03-25 15:18:32"
9507;768;"Go";"func findReplaceString(S string, indexes []int, 
sources []string, targets []string) string {
 
}";"";"2020-03-25 15:18:32"
9508;768;"Kotlin";"class Solution {
    fun findReplaceString(S: String, indexes: 
IntArray, sources: Array<String>, targets: 
Array<String>): String {
 
    }
}";"";"2020-03-25 15:18:32"
9509;768;"Python3";"class Solution:
    def findReplaceString(self, S: str, indexes: 
List[int], sources: List[str], targets: List[str]) 
-> str:";"";"2020-03-25 15:18:32"
9510;768;"JavaScript";"/**
 * @param {string} S
 * @param {number[]} indexes
 * @param {string[]} sources
 * @param {string[]} targets
 * @return {string}
 */
var findReplaceString = function(S, indexes, 
sources, targets) {
 
};";"";"2020-03-25 15:18:32"
9511;768;"PHP";"";"";"2020-03-25 15:18:32"
9512;768;"Swift";"class Solution {
    func findReplaceString(_ S: String, _ indexes: 
[Int], _ sources: [String], _ targets: [String]) -> 
String {
        
    }
}";"";"2020-03-25 15:18:32"
9513;768;"Ruby";"# @param {String} s
# @param {Integer[]} indexes
# @param {String[]} sources
# @param {String[]} targets
# @return {String}
def find_replace_string(s, indexes, sources, 
targets)
 
end";"";"2020-03-25 15:18:32"
9514;768;"Python";"class Solution(object):
    def findReplaceString(self, S, indexes, sources,
 targets):
        """"""
        :type S: str
        :type indexes: List[int]
        :type sources: List[str]
        :type targets: List[str]
        :rtype: str
        """"""";"";"2020-03-25 15:18:32"
9515;769;"C#";"public class Solution {
    public string FractionAddition(string 
expression) {
 
    }
}";"";"2020-03-25 15:18:32"
9516;769;"Java";"class Solution {
    public String fractionAddition(String 
expression) {
 
    }
}";"";"2020-03-25 15:18:32"
9517;769;"C";"char * fractionAddition(char * expression){
 
}";"";"2020-03-25 15:18:32"
9518;769;"Rust";"impl Solution {
    pub fn fraction_addition(expression: String) -> 
String {
        
    }
}";"";"2020-03-25 15:18:32"
9519;769;"Scala";"object Solution {
    def fractionAddition(expression: String): 
String = {
 
    }
}";"";"2020-03-25 15:18:32"
9520;769;"Go";"func fractionAddition(expression string) string {
 
}";"";"2020-03-25 15:18:32"
9521;769;"Kotlin";"class Solution {
    fun fractionAddition(expression: String): 
String {
 
    }
}";"";"2020-03-25 15:18:32"
9522;769;"Python3";"class Solution:
    def fractionAddition(self, expression: str) -> 
str:";"";"2020-03-25 15:18:32"
9523;769;"JavaScript";"/**
 * @param {string} expression
 * @return {string}
 */
var fractionAddition = function(expression) {
 
};";"";"2020-03-25 15:18:32"
9524;769;"PHP";"class Solution {
 
    /**
     * @param String $expression
     * @return String
     */
    function fractionAddition($expression) {
        
    }
}";"";"2020-03-25 15:18:32"
9525;769;"Swift";"class Solution {
    func fractionAddition(_ expression: String) -> 
String {
        
    }
}";"";"2020-03-25 15:18:32"
9526;769;"Ruby";"# @param {String} expression
# @return {String}
def fraction_addition(expression)
 
end";"";"2020-03-25 15:18:32"
9527;769;"Python";"class Solution(object):
    def fractionAddition(self, expression):
        """"""
        :type expression: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:32"
9528;770;"C#";"public class Solution {
    public int TranslateNum(int num) {
 
    }
}";"";"2020-03-25 15:18:32"
9529;770;"Java";"class Solution {
    public int translateNum(int num) {
 
    }
}";"";"2020-03-25 15:18:32"
9530;770;"C";"int translateNum(int num){
 
}";"";"2020-03-25 15:18:32"
9531;770;"Rust";"impl Solution {
    pub fn translate_num(num: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:32"
9532;770;"Scala";"object Solution {
    def translateNum(num: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:32"
9533;770;"JavaScript";"/**
 * @param {number} num
 * @return {number}
 */
var translateNum = function(num) {
 
};";"";"2020-03-25 15:18:32"
9534;770;"Go";"func translateNum(num int) int {
 
}";"";"2020-03-25 15:18:32"
9535;770;"PHP";"class Solution {
 
    /**
     * @param Integer $num
     * @return Integer
     */
    function translateNum($num) {
 
    }
}";"";"2020-03-25 15:18:32"
9536;770;"Swift";"class Solution {
    func translateNum(_ num: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:32"
9537;770;"Ruby";"# @param {Integer} num
# @return {Integer}
def translate_num(num)
 
end";"";"2020-03-25 15:18:32"
9538;770;"Python";"class Solution(object):
    def translateNum(self, num):
        """"""
        :type num: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:32"
9539;770;"Kotlin";"class Solution {
    fun translateNum(num: Int): Int {
 
    }
}";"";"2020-03-25 15:18:32"
9540;771;"C#";"public class TweetCounts {
 
    public TweetCounts() {
 
    }
    
    public void RecordTweet(string tweetName, int 
time) {
 
    }
    
    public IList<int> GetTweetCountsPerFrequency
(string freq, string tweetName, int startTime, int 
endTime) {
 
    }
}
 
/**
 * Your TweetCounts object will be instantiated and 
called as such:
 * TweetCounts obj = new TweetCounts();
 * obj.RecordTweet(tweetName,time);
 * IList<int> param_2 = 
obj.GetTweetCountsPerFrequency(freq,tweetName,
startTime,endTime);";"";"2020-03-25 15:18:32"
9541;771;"Java";"class TweetCounts {
 
    public TweetCounts() {
 
    }
    
    public void recordTweet(String tweetName, int 
time) {
 
    }
    
    public List<Integer> getTweetCountsPerFrequency
(String freq, String tweetName, int startTime, int 
endTime) {
 
    }
}
 
/**
 * Your TweetCounts object will be instantiated and 
called as such:
 * TweetCounts obj = new TweetCounts();
 * obj.recordTweet(tweetName,time);
 * List<Integer> param_2 = 
obj.getTweetCountsPerFrequency(freq,tweetName,
startTime,endTime);";"";"2020-03-25 15:18:32"
9542;771;"Rust";"struct TweetCounts {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl TweetCounts {
 
    fn new() -> Self {
 
    }
    
    fn record_tweet(&self, tweet_name: String, 
time: i32) {
 
    }
    
    fn get_tweet_counts_per_frequency(&self, freq: 
String, tweet_name: String, start_time: i32, 
end_time: i32) -> Vec<i32> {
 ";"";"2020-03-25 15:18:32"
9543;771;"C";"typedef struct {
    
} TweetCounts;
 
 
TweetCounts* tweetCountsCreate() {
    
}
 
void tweetCountsRecordTweet(TweetCounts* obj, char 
* tweetName, int time) {
  
}
 
int* tweetCountsGetTweetCountsPerFrequency
(TweetCounts* obj, char * freq, char * tweetName, 
int startTime, int endTime, int* retSize) {
  
}
 
void tweetCountsFree(TweetCounts* obj) {
    
}
 
/**
 * Your TweetCounts struct will be instantiated and ";"";"2020-03-25 15:18:32"
9544;771;"Scala";"class TweetCounts() {
 
    def recordTweet(tweetName: String, time: Int) {
 
    }
 
    def getTweetCountsPerFrequency(freq: String, 
tweetName: String, startTime: Int, endTime: Int): 
List[Int] = {
 
    }
 
}
 
/**
 * Your TweetCounts object will be instantiated and 
called as such:
 * var obj = new TweetCounts()
 * obj.recordTweet(tweetName,time)
 * var param_2 = obj.getTweetCountsPerFrequency
(freq,tweetName,startTime,endTime)
 */";"";"2020-03-25 15:18:32"
9545;771;"Go";"type TweetCounts struct {
 
}
 
 
func Constructor() TweetCounts {
 
}
 
 
func (this *TweetCounts) RecordTweet(tweetName 
string, time int)  {
 
}
 
 
func (this *TweetCounts) GetTweetCountsPerFrequency
(freq string, tweetName string, startTime int, 
endTime int) []int {
 
}
 
 
/**
 * Your TweetCounts object will be instantiated and 
called as such:";"";"2020-03-25 15:18:32"
9546;771;"Kotlin";"class TweetCounts() {
 
    fun recordTweet(tweetName: String, time: Int) {
 
    }
 
    fun getTweetCountsPerFrequency(freq: String, 
tweetName: String, startTime: Int, endTime: Int): 
List<Int> {
 
    }
 
}
 
/**
 * Your TweetCounts object will be instantiated and 
called as such:
 * var obj = TweetCounts()
 * obj.recordTweet(tweetName,time)
 * var param_2 = obj.getTweetCountsPerFrequency
(freq,tweetName,startTime,endTime)
 */";"";"2020-03-25 15:18:32"
9547;771;"Python3";"class TweetCounts:
 
    def __init__(self):
 
 
    def recordTweet(self, tweetName: str, time: int)
 -> None:
 
 
    def getTweetCountsPerFrequency(self, freq: str, 
tweetName: str, startTime: int, endTime: int) -> 
List[int]:
 
 
 
# Your TweetCounts object will be instantiated and 
called as such:
# obj = TweetCounts()
# obj.recordTweet(tweetName,time)
# param_2 = obj.getTweetCountsPerFrequency(freq,
tweetName,startTime,endTime)";"";"2020-03-25 15:18:32"
9548;771;"JavaScript";"var TweetCounts = function() {
 
};
 
/** 
 * @param {string} tweetName 
 * @param {number} time
 * @return {void}
 */
TweetCounts.prototype.recordTweet = function
(tweetName, time) {
 
};
 
/** 
 * @param {string} freq 
 * @param {string} tweetName 
 * @param {number} startTime 
 * @param {number} endTime
 * @return {number[]}
 */
TweetCounts.prototype.getTweetCountsPerFrequency = 
function(freq, tweetName, startTime, endTime) {
 
};
 ";"";"2020-03-25 15:18:32"
9549;771;"PHP";"class TweetCounts {";"";"2020-03-25 15:18:32"
9550;771;"Swift";"class TweetCounts {
 
    init() {
        
    }
    
    func recordTweet(_ tweetName: String, _ time: 
Int) {
        
    }
    
    func getTweetCountsPerFrequency(_ freq: String, 
_ tweetName: String, _ startTime: Int, _ endTime: 
Int) -> [Int] {
        
    }
}
 
/**
 * Your TweetCounts object will be instantiated and 
called as such:
 * let obj = TweetCounts()
 * obj.recordTweet(tweetName, time)
 * let ret_2: [Int] = obj.getTweetCountsPerFrequency
(freq, tweetName, startTime, endTime)
 */";"";"2020-03-25 15:18:32"
9551;771;"Ruby";"class TweetCounts
    def initialize()
 
    end
 
 
=begin
    :type tweet_name: String
    :type time: Integer
    :rtype: Void
=end
    def record_tweet(tweet_name, time)
 
    end
 
 
=begin
    :type freq: String
    :type tweet_name: String
    :type start_time: Integer
    :type end_time: Integer
    :rtype: Integer[]
=end
    def get_tweet_counts_per_frequency(freq, 
tweet_name, start_time, end_time)
 ";"";"2020-03-25 15:18:32"
9552;771;"Python";"class TweetCounts(object):
 
    def __init__(self):
 
 
    def recordTweet(self, tweetName, time):
        """"""
        :type tweetName: str
        :type time: int
        :rtype: None
        """"""
 
 
    def getTweetCountsPerFrequency(self, freq, 
tweetName, startTime, endTime):
        """"""
        :type freq: str
        :type tweetName: str
        :type startTime: int
        :type endTime: int
        :rtype: List[int]
        """"""
 
 
 
# Your TweetCounts object will be instantiated and ";"";"2020-03-25 15:18:32"
9553;772;"C#";"public class Solution {
    public bool IsValid(string code) {
 
    }
}";"";"2020-03-25 15:18:32"
9554;772;"Java";"class Solution {
    public boolean isValid(String code) {
 
    }
}";"";"2020-03-25 15:18:32"
9555;772;"C";"bool isValid(char * code){
 
}";"";"2020-03-25 15:18:32"
9556;772;"Python3";"class Solution:
    def isValid(self, code: str) -> bool:";"";"2020-03-25 15:18:32"
9557;772;"JavaScript";"/**
 * @param {string} code
 * @return {boolean}
 */
var isValid = function(code) {
 
};";"";"2020-03-25 15:18:32"
9558;772;"Go";"func isValid(code string) bool {
 
}";"";"2020-03-25 15:18:32"
9559;772;"Swift";"class Solution {
    func isValid(_ code: String) -> Bool {
        
    }
}";"";"2020-03-25 15:18:32"
9560;772;"Ruby";"# @param {String} code
# @return {Boolean}
def is_valid(code)
 
end";"";"2020-03-25 15:18:32"
9561;772;"Python";"class Solution(object):
    def isValid(self, code):
        """"""
        :type code: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:32"
9562;773;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int MaxAncestorDiff(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:32"
9563;773;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int maxAncestorDiff(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:32"
9564;773;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int maxAncestorDiff(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:32"
9565;773;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn max_ancestor_diff(root: 
Option<Rc<RefCell<TreeNode>>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:32"
9566;773;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def maxAncestorDiff(root: TreeNode): Int = {
 
    }
}";"";"2020-03-25 15:18:32"
9567;773;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func maxAncestorDiff(root *TreeNode) int {
 
}";"";"2020-03-25 15:18:32"
9568;773;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun maxAncestorDiff(root: TreeNode?): Int {
 
    }
}";"";"2020-03-25 15:18:32"
9569;773;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def maxAncestorDiff(self, root: TreeNode) -> 
int:";"";"2020-03-25 15:18:32"
9570;773;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var maxAncestorDiff = function(root) {
 
};";"";"2020-03-25 15:18:32"
9571;773;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer
     */
    function maxAncestorDiff($root) {
        
    }
}";"";"2020-03-25 15:18:32"
9572;773;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func maxAncestorDiff(_ root: TreeNode?) -> Int {
        
    }
}";"";"2020-03-25 15:18:32"
9573;773;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:32"
9574;773;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def maxAncestorDiff(self, root):
        """"""
        :type root: TreeNode
        :rtype: int
        """"""";"";"2020-03-25 15:18:32"
9575;774;"C#";"public class Solution {
    public int SubarrayBitwiseORs(int[] A) {
 
    }
}";"";"2020-03-25 15:18:32"
9576;774;"Java";"class Solution {
    public int subarrayBitwiseORs(int[] A) {
 
    }
}";"";"2020-03-25 15:18:32"
9577;774;"Rust";"impl Solution {
    pub fn subarray_bitwise_o_rs(a: Vec<i32>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:32"
9578;774;"C";"int subarrayBitwiseORs(int* A, int ASize){
 
}";"";"2020-03-25 15:18:32"
9579;774;"Scala";"object Solution {
    def subarrayBitwiseORs(A: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:32"
9580;774;"Go";"func subarrayBitwiseORs(A []int) int {
 
}";"";"2020-03-25 15:18:32"
9581;774;"Kotlin";"class Solution {
    fun subarrayBitwiseORs(A: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:32"
9582;774;"Python3";"class Solution:
    def subarrayBitwiseORs(self, A: List[int]) -> 
int:";"";"2020-03-25 15:18:32"
9583;774;"JavaScript";"/**
 * @param {number[]} A
 * @return {number}
 */
var subarrayBitwiseORs = function(A) {
 
};";"";"2020-03-25 15:18:32"
9584;774;"PHP";"class Solution {";"";"2020-03-25 15:18:32"
9585;774;"Swift";"class Solution {
    func subarrayBitwiseORs(_ A: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:32"
9586;774;"Ruby";"# @param {Integer[]} a
# @return {Integer}
def subarray_bitwise_o_rs(a)
 
end";"";"2020-03-25 15:18:32"
9587;774;"Python";"class Solution(object):
    def subarrayBitwiseORs(self, A):
        """"""
        :type A: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:32"
9588;775;"C#";"public class Solution {
    public string LongestWord(string[] words) {
 
    }
}";"";"2020-03-25 15:18:32"
9589;775;"Java";"class Solution {
    public String longestWord(String[] words) {
 
    }
}";"";"2020-03-25 15:18:32"
9590;775;"Rust";"impl Solution {
    pub fn longest_word(words: Vec<String>) -> 
String {
 
    }
}";"";"2020-03-25 15:18:32"
9591;775;"C";"char* longestWord(char** words, int wordsSize){
 
}";"";"2020-03-25 15:18:32"
9592;775;"Scala";"object Solution {
    def longestWord(words: Array[String]): String = 
{
 
    }
}";"";"2020-03-25 15:18:32"
9593;775;"Go";"func longestWord(words []string) string {
 
}";"";"2020-03-25 15:18:32"
9594;775;"Kotlin";"class Solution {
    fun longestWord(words: Array<String>): String {
 
    }
}";"";"2020-03-25 15:18:32"
9595;775;"Python3";"class Solution:
    def longestWord(self, words: List[str]) -> str:";"";"2020-03-25 15:18:32"
9596;775;"JavaScript";"/**
 * @param {string[]} words
 * @return {string}
 */
var longestWord = function(words) {
 
};";"";"2020-03-25 15:18:32"
9597;775;"PHP";"class Solution {
 
    /**
     * @param String[] $words
     * @return String
     */
    function longestWord($words) {
 
    }
}";"";"2020-03-25 15:18:32"
9598;775;"Swift";"class Solution {
    func longestWord(_ words: [String]) -> String {
 
    }
}";"";"2020-03-25 15:18:32"
9599;775;"Ruby";"# @param {String[]} words
# @return {String}
def longest_word(words)
 
end";"";"2020-03-25 15:18:32"
9600;775;"Python";"class Solution(object):
    def longestWord(self, words):
        """"""
        :type words: List[str]
        :rtype: str
        """"""";"";"2020-03-25 15:18:32"
9601;776;"C#";"public class Solution {
    public void MoveZeroes(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:33"
9602;776;"Java";"class Solution {
    public void moveZeroes(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:33"
9603;776;"C";"void moveZeroes(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:33"
9604;776;"Rust";"impl Solution {
    pub fn move_zeroes(nums: &mut Vec<i32>) {
 
    }
}";"";"2020-03-25 15:18:33"
9605;776;"Scala";"object Solution {
    def moveZeroes(nums: Array[Int]): Unit = {
 
    }
}";"";"2020-03-25 15:18:33"
9606;776;"Go";"func moveZeroes(nums []int)  {
 
}";"";"2020-03-25 15:18:33"
9607;776;"Kotlin";"class Solution {
    fun moveZeroes(nums: IntArray): Unit {
 
    }
}";"";"2020-03-25 15:18:33"
9608;776;"Python3";"class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """"""
        Do not return anything, modify nums 
in-place instead.
        """"""";"";"2020-03-25 15:18:33"
9609;776;"JavaScript";"/**
 * @param {number[]} nums
 * @return {void} Do not return anything, modify 
nums in-place instead.
 */
var moveZeroes = function(nums) {
 
};";"";"2020-03-25 15:18:33"
9610;776;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return NULL
     */
    function moveZeroes(&$nums) {
 
    }
}";"";"2020-03-25 15:18:33"
9611;776;"Swift";"class Solution {
    func moveZeroes(_ nums: inout [Int]) {
 
    }
}";"";"2020-03-25 15:18:33"
9612;776;"Ruby";"# @param {Integer[]} nums
# @return {Void} Do not return anything, modify 
nums in-place instead.
def move_zeroes(nums)
 
end";"";"2020-03-25 15:18:33"
9613;776;"Python";"class Solution(object):
    def moveZeroes(self, nums):
        """"""
        :type nums: List[int]
        :rtype: None Do not return anything, modify 
nums in-place instead.
        """"""";"";"2020-03-25 15:18:33"
9614;777;"C#";"public class Solution {
    public int FindPairs(int[] nums, int k) {
 
    }
}";"";"2020-03-25 15:18:33"
9615;777;"Java";"class Solution {
    public int findPairs(int[] nums, int k) {
 
    }
}";"";"2020-03-25 15:18:33"
9616;777;"C";"int findPairs(int* nums, int numsSize, int k){
 
}";"";"2020-03-25 15:18:33"
9617;777;"Rust";"impl Solution {
    pub fn find_pairs(nums: Vec<i32>, k: i32) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:33"
9618;777;"Scala";"object Solution {
    def findPairs(nums: Array[Int], k: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:33"
9619;777;"Go";"func findPairs(nums []int, k int) int {
 
}";"";"2020-03-25 15:18:33"
9620;777;"Kotlin";"class Solution {
    fun findPairs(nums: IntArray, k: Int): Int {
 
    }
}";"";"2020-03-25 15:18:33"
9621;777;"Python3";"class Solution:
    def findPairs(self, nums: List[int], k: int) -> 
int:";"";"2020-03-25 15:18:33"
9622;777;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
var findPairs = function(nums, k) {
 
};";"";"2020-03-25 15:18:33"
9623;777;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer $k
     * @return Integer
     */
    function findPairs($nums, $k) {
        
    }
}";"";"2020-03-25 15:18:33"
9624;777;"Swift";"class Solution {
    func findPairs(_ nums: [Int], _ k: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:33"
9625;777;"Ruby";"# @param {Integer[]} nums
# @param {Integer} k
# @return {Integer}
def find_pairs(nums, k)
 
end";"";"2020-03-25 15:18:33"
9626;777;"Python";"class Solution(object):
    def findPairs(self, nums, k):
        """"""
        :type nums: List[int]
        :type k: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:33"
9627;778;"C#";"public class Solution {
    public int Compress(char[] chars) {
 
    }
}";"";"2020-03-25 15:18:33"
9628;778;"Java";"class Solution {
    public int compress(char[] chars) {
 
    }
}";"";"2020-03-25 15:18:33"
9629;778;"C";"int compress(char* chars, int charsSize){
 
}";"";"2020-03-25 15:18:33"
9630;778;"Rust";"impl Solution {
    pub fn compress(chars: &mut Vec<char>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:33"
9631;778;"Scala";"object Solution {
    def compress(chars: Array[Char]): Int = {
 
    }
}";"";"2020-03-25 15:18:33"
9632;778;"Go";"func compress(chars []byte) int {
 
}";"";"2020-03-25 15:18:33"
9633;778;"Kotlin";"class Solution {
    fun compress(chars: CharArray): Int {
 
    }
}";"";"2020-03-25 15:18:33"
9634;778;"Python3";"class Solution:
    def compress(self, chars: List[str]) -> int:";"";"2020-03-25 15:18:33"
9635;778;"JavaScript";"/**
 * @param {character[]} chars
 * @return {number}
 */
var compress = function(chars) {
 
};";"";"2020-03-25 15:18:33"
9636;778;"PHP";"class Solution {
 
    /**
     * @param String[] $chars
     * @return Integer
     */
    function compress(&$chars) {
        
    }
}";"";"2020-03-25 15:18:33"
9637;778;"Swift";"class Solution {
    func compress(_ chars: inout [Character]) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:33"
9638;778;"Ruby";"# @param {Character[]} chars
# @return {Integer}
def compress(chars)
 
end";"";"2020-03-25 15:18:33"
9639;778;"Python";"class Solution(object):
    def compress(self, chars):
        """"""
        :type chars: List[str]
        :rtype: int
        """"""";"";"2020-03-25 15:18:33"
9640;779;"MS SQL Server";"/* Write your T-SQL query statement below */";"";"2020-03-25 15:18:33"
9641;779;"Oracle";"/* Write your PL/SQL query statement below */";"";"2020-03-25 15:18:33"
9642;780;"C#";"public class Solution {
    public void Solve(char[][] board) {
 
    }
}";"";"2020-03-25 15:18:33"
9643;780;"Java";"class Solution {
    public void solve(char[][] board) {
 
    }
}";"";"2020-03-25 15:18:33"
9644;780;"C";"void solve(char** board, int boardSize, int* 
boardColSize){
 
}";"";"2020-03-25 15:18:33"
9645;780;"Rust";"impl Solution {
    pub fn solve(board: &mut Vec<Vec<char>>) {
 
    }
}";"";"2020-03-25 15:18:33"
9646;780;"Scala";"object Solution {
    def solve(board: Array[Array[Char]]): Unit = {
 
    }
}";"";"2020-03-25 15:18:33"
9647;780;"Go";"func solve(board [][]byte)  {
 
}";"";"2020-03-25 15:18:33"
9648;780;"Kotlin";"class Solution {
    fun solve(board: Array<CharArray>): Unit {
 
    }
}";"";"2020-03-25 15:18:33"
9649;780;"Python3";"class Solution:
    def solve(self, board: List[List[str]]) -> None:
        """"""
        Do not return anything, modify board 
in-place instead.
        """"""";"";"2020-03-25 15:18:33"
9650;780;"JavaScript";"/**
 * @param {character[][]} board
 * @return {void} Do not return anything, modify 
board in-place instead.
 */
var solve = function(board) {
 
};";"";"2020-03-25 15:18:33"
9651;780;"PHP";"class Solution {
 
    /**
     * @param String[][] $board
     * @return NULL
     */
    function solve(&$board) {
 
    }
}";"";"2020-03-25 15:18:33"
9652;780;"Swift";"class Solution {
    func solve(_ board: inout [[Character]]) {
 
    }
}";"";"2020-03-25 15:18:33"
9653;780;"Ruby";"# @param {Character[][]} board";"";"2020-03-25 15:18:33"
9654;780;"Python";"class Solution(object):
    def solve(self, board):
        """"""
        :type board: List[List[str]]
        :rtype: None Do not return anything, modify 
board in-place instead.
        """"""";"";"2020-03-25 15:18:33"
9655;781;"C#";"public class Solution {
    public double NthPersonGetsNthSeat(int n) {
 
    }
}";"";"2020-03-25 15:18:33"
9656;781;"Java";"class Solution {
    public double nthPersonGetsNthSeat(int n) {
 
    }
}";"";"2020-03-25 15:18:33"
9657;781;"C";"double nthPersonGetsNthSeat(int n){
 
}";"";"2020-03-25 15:18:33"
9658;781;"Rust";"impl Solution {
    pub fn nth_person_gets_nth_seat(n: i32) -> f64 {
 
    }
}";"";"2020-03-25 15:18:33"
9659;781;"Scala";"object Solution {
    def nthPersonGetsNthSeat(n: Int): Double = {
 
    }
}";"";"2020-03-25 15:18:33"
9660;781;"Go";"func nthPersonGetsNthSeat(n int) float64 {
 
}";"";"2020-03-25 15:18:33"
9661;781;"Kotlin";"class Solution {
    fun nthPersonGetsNthSeat(n: Int): Double {
 
    }
}";"";"2020-03-25 15:18:33"
9662;781;"Python3";"class Solution:
    def nthPersonGetsNthSeat(self, n: int) -> float:";"";"2020-03-25 15:18:33"
9663;781;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var nthPersonGetsNthSeat = function(n) {
 
};";"";"2020-03-25 15:18:33"
9664;781;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Float
     */
    function nthPersonGetsNthSeat($n) {
 
    }
}";"";"2020-03-25 15:18:33"
9665;781;"Swift";"class Solution {
    func nthPersonGetsNthSeat(_ n: Int) -> Double {
 
    }
}";"";"2020-03-25 15:18:33"
9666;781;"Ruby";"# @param {Integer} n
# @return {Float}
def nth_person_gets_nth_seat(n)
 
end";"";"2020-03-25 15:18:33"
9667;781;"Python";"class Solution(object):
    def nthPersonGetsNthSeat(self, n):
        """"""
        :type n: int
        :rtype: float
        """"""";"";"2020-03-25 15:18:33"
9668;782;"C#";"/*
// Definition for a Node.
public class Node {
    public int val;
    public IList<Node> children;
 
    public Node() {}
 
    public Node(int _val) {
        val = _val;
    }
 
    public Node(int _val, IList<Node> _children) {
        val = _val;
        children = _children;
    }
}
*/
public class Solution {
    public int MaxDepth(Node root) {
        
    }
}";"";"2020-03-25 15:18:33"
9669;782;"Java";"/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;
 
    public Node() {}
 
    public Node(int _val) {
        val = _val;
    }
 
    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public int maxDepth(Node root) {
        
    }
}";"";"2020-03-25 15:18:33"
9670;782;"C++";"/*";"";"2020-03-25 15:18:33"
9671;782;"Python3";"""""""
# Definition for a Node.
class Node:
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children
""""""
class Solution:
    def maxDepth(self, root: 'Node') -> int:";"";"2020-03-25 15:18:33"
9672;782;"JavaScript";"/**
 * // Definition for a Node.
 * function Node(val,children) {
 *    this.val = val;
 *    this.children = children;
 * };
 */
/**
 * @param {Node} root
 * @return {number}
 */
var maxDepth = function(root) {
    
};";"";"2020-03-25 15:18:33"
9673;782;"Go";"/**
 * Definition for a Node.
 * type Node struct {
 *     Val int
 *     Children []*Node
 * }
 */
 
func maxDepth(root *Node) int {
    
}";"";"2020-03-25 15:18:33"
9674;782;"Python";"""""""
# Definition for a Node.
class Node(object):
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children
""""""
class Solution(object):
    def maxDepth(self, root):
        """"""
        :type root: Node
        :rtype: int
        """"""";"";"2020-03-25 15:18:33"
9675;783;"C#";"public class Solution {
    public bool IsRobotBounded(string instructions) 
{
 
    }
}";"";"2020-03-25 15:18:33"
9676;783;"Java";"class Solution {
    public boolean isRobotBounded(String 
instructions) {
 
    }
}";"";"2020-03-25 15:18:33"
9677;783;"Rust";"impl Solution {
    pub fn is_robot_bounded(instructions: String) 
-> bool {
        
    }
}";"";"2020-03-25 15:18:33"
9678;783;"C";"bool isRobotBounded(char * instructions){
 
}";"";"2020-03-25 15:18:33"
9679;783;"Scala";"object Solution {
    def isRobotBounded(instructions: String): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:33"
9680;783;"Go";"func isRobotBounded(instructions string) bool {
 
}";"";"2020-03-25 15:18:33"
9681;783;"Kotlin";"class Solution {
    fun isRobotBounded(instructions: String): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:33"
9682;783;"Python3";"class Solution:
    def isRobotBounded(self, instructions: str) -> 
bool:";"";"2020-03-25 15:18:33"
9683;783;"JavaScript";"/**
 * @param {string} instructions
 * @return {boolean}
 */
var isRobotBounded = function(instructions) {
 
};";"";"2020-03-25 15:18:33"
9684;783;"PHP";"class Solution {";"";"2020-03-25 15:18:33"
9685;783;"Swift";"class Solution {
    func isRobotBounded(_ instructions: String) -> 
Bool {
        
    }
}";"";"2020-03-25 15:18:33"
9686;783;"Ruby";"# @param {String} instructions
# @return {Boolean}
def is_robot_bounded(instructions)
 
end";"";"2020-03-25 15:18:33"
9687;783;"Python";"class Solution(object):
    def isRobotBounded(self, instructions):
        """"""
        :type instructions: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:33"
9688;784;"C#";"public class Solution {
    public string SolveEquation(string equation) {
 
    }
}";"";"2020-03-25 15:18:33"
9689;784;"Java";"class Solution {
    public String solveEquation(String equation) {
 
    }
}";"";"2020-03-25 15:18:33"
9690;784;"Rust";"impl Solution {
    pub fn solve_equation(equation: String) -> 
String {
        
    }
}";"";"2020-03-25 15:18:33"
9691;784;"C";"char * solveEquation(char * equation){
 
}";"";"2020-03-25 15:18:33"
9692;784;"Scala";"object Solution {
    def solveEquation(equation: String): String = {
 
    }
}";"";"2020-03-25 15:18:33"
9693;784;"Go";"func solveEquation(equation string) string {
 
}";"";"2020-03-25 15:18:33"
9694;784;"Kotlin";"class Solution {
    fun solveEquation(equation: String): String {
 
    }
}";"";"2020-03-25 15:18:33"
9695;784;"Python3";"class Solution:
    def solveEquation(self, equation: str) -> str:";"";"2020-03-25 15:18:33"
9696;784;"JavaScript";"/**
 * @param {string} equation
 * @return {string}
 */
var solveEquation = function(equation) {
 
};";"";"2020-03-25 15:18:33"
9697;784;"PHP";"class Solution {
 
    /**
     * @param String $equation
     * @return String
     */
    function solveEquation($equation) {
        
    }
}";"";"2020-03-25 15:18:33"
9698;784;"Swift";"class Solution {
    func solveEquation(_ equation: String) -> 
String {
        
    }
}";"";"2020-03-25 15:18:33"
9699;784;"Ruby";"# @param {String} equation
# @return {String}
def solve_equation(equation)
 
end";"";"2020-03-25 15:18:33"
9700;784;"Python";"class Solution(object):
    def solveEquation(self, equation):
        """"""
        :type equation: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:33"
9701;785;"C#";"public class Solution {
    public bool IsPossible(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:33"
9702;785;"Java";"class Solution {
    public boolean isPossible(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:33"
9703;785;"C";"bool isPossible(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:33"
9704;785;"Rust";"impl Solution {
    pub fn is_possible(nums: Vec<i32>) -> bool {
        
    }
}";"";"2020-03-25 15:18:33"
9705;785;"Scala";"object Solution {
    def isPossible(nums: Array[Int]): Boolean = {
 
    }
}";"";"2020-03-25 15:18:33"
9706;785;"Go";"func isPossible(nums []int) bool {
 
}";"";"2020-03-25 15:18:33"
9707;785;"Kotlin";"class Solution {
    fun isPossible(nums: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:33"
9708;785;"Python3";"class Solution:
    def isPossible(self, nums: List[int]) -> bool:";"";"2020-03-25 15:18:33"
9709;785;"JavaScript";"/**
 * @param {number[]} nums
 * @return {boolean}
 */
var isPossible = function(nums) {
 
};";"";"2020-03-25 15:18:33"
9710;785;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Boolean
     */
    function isPossible($nums) {
        
    }
}";"";"2020-03-25 15:18:33"
9711;785;"Swift";"class Solution {
    func isPossible(_ nums: [Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:33"
9712;785;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:18:33"
9713;785;"Python";"class Solution(object):
    def isPossible(self, nums):
        """"""
        :type nums: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:33"
9714;786;"C#";"public class Solution {
    public bool RotateString(string A, string B) {
 
    }
}";"";"2020-03-25 15:18:33"
9715;786;"Java";"class Solution {
    public boolean rotateString(String A, String B) 
{
 
    }
}";"";"2020-03-25 15:18:33"
9716;786;"C";"bool rotateString(char * A, char * B){
 
}";"";"2020-03-25 15:18:33"
9717;786;"Rust";"impl Solution {
    pub fn rotate_string(a: String, b: String) -> 
bool {
        
    }
}";"";"2020-03-25 15:18:33"
9718;786;"Scala";"object Solution {
    def rotateString(A: String, B: String): Boolean 
= {
 
    }
}";"";"2020-03-25 15:18:33"
9719;786;"Go";"func rotateString(A string, B string) bool {
 
}";"";"2020-03-25 15:18:33"
9720;786;"Kotlin";"class Solution {
    fun rotateString(A: String, B: String): Boolean 
{
 
    }
}";"";"2020-03-25 15:18:33"
9721;786;"Python3";"class Solution:
    def rotateString(self, A: str, B: str) -> bool:";"";"2020-03-25 15:18:33"
9722;786;"JavaScript";"/**
 * @param {string} A
 * @param {string} B
 * @return {boolean}
 */
var rotateString = function(A, B) {
 
};";"";"2020-03-25 15:18:33"
9723;786;"PHP";"class Solution {
 
    /**
     * @param String $A
     * @param String $B
     * @return Boolean
     */
    function rotateString($A, $B) {
        
    }
}";"";"2020-03-25 15:18:33"
9724;786;"Swift";"class Solution {
    func rotateString(_ A: String, _ B: String) -> 
Bool {
        
    }
}";"";"2020-03-25 15:18:33"
9725;786;"Ruby";"# @param {String} a
# @param {String} b
# @return {Boolean}
def rotate_string(a, b)
 
end";"";"2020-03-25 15:18:33"
9726;786;"Python";"class Solution(object):
    def rotateString(self, A, B):
        """"""
        :type A: str
        :type B: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:33"
9727;787;"C#";"public class Solution {
    public int ShortestPathBinaryMatrix(int[][] 
grid) {
 
    }
}";"";"2020-03-25 15:18:33"
9728;787;"Java";"class Solution {
    public int shortestPathBinaryMatrix(int[][] 
grid) {
 
    }
}";"";"2020-03-25 15:18:33"
9729;787;"C";"int shortestPathBinaryMatrix(int** grid, int 
gridSize, int* gridColSize){
 
}";"";"2020-03-25 15:18:33"
9730;787;"Rust";"impl Solution {
    pub fn shortest_path_binary_matrix(grid: 
Vec<Vec<i32>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:33"
9731;787;"Scala";"object Solution {
    def shortestPathBinaryMatrix(grid: Array[Array
[Int]]): Int = {
 
    }
}";"";"2020-03-25 15:18:33"
9732;787;"Go";"func shortestPathBinaryMatrix(grid [][]int) int {
 
}";"";"2020-03-25 15:18:33"
9733;787;"Kotlin";"class Solution {
    fun shortestPathBinaryMatrix(grid: 
Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:33"
9734;787;"Python3";"class Solution:
    def shortestPathBinaryMatrix(self, grid: List
[List[int]]) -> int:";"";"2020-03-25 15:18:33"
9735;787;"JavaScript";"/**
 * @param {number[][]} grid
 * @return {number}
 */
var shortestPathBinaryMatrix = function(grid) {
 
};";"";"2020-03-25 15:18:33"
9736;787;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $grid
     * @return Integer
     */
    function shortestPathBinaryMatrix($grid) {
        
    }
}";"";"2020-03-25 15:18:33"
9737;787;"Swift";"class Solution {
    func shortestPathBinaryMatrix(_ grid: [[Int]]) 
-> Int {
        
    }
}";"";"2020-03-25 15:18:33"
9738;787;"Ruby";"# @param {Integer[][]} grid
# @return {Integer}
def shortest_path_binary_matrix(grid)
 
end";"";"2020-03-25 15:18:33"
9739;787;"Python";"class Solution(object):
    def shortestPathBinaryMatrix(self, grid):
        """"""
        :type grid: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:33"
9740;788;"C#";"public class Solution {
    public int NumberOfArithmeticSlices(int[] A) {
 
    }
}";"";"2020-03-25 15:18:33"
9741;788;"Java";"class Solution {
    public int numberOfArithmeticSlices(int[] A) {
 
    }
}";"";"2020-03-25 15:18:33"
9742;788;"C";"int numberOfArithmeticSlices(int* A, int ASize){
 
}";"";"2020-03-25 15:18:33"
9743;788;"Rust";"impl Solution {
    pub fn number_of_arithmetic_slices(a: Vec<i32>) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:33"
9744;788;"Scala";"object Solution {
    def numberOfArithmeticSlices(A: Array[Int]): 
Int = {
 
    }
}";"";"2020-03-25 15:18:33"
9745;788;"Go";"func numberOfArithmeticSlices(A []int) int {
 
}";"";"2020-03-25 15:18:33"
9746;788;"Kotlin";"class Solution {
    fun numberOfArithmeticSlices(A: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:33"
9747;788;"Python3";"class Solution:
    def numberOfArithmeticSlices(self, A: List[int])
 -> int:";"";"2020-03-25 15:18:33"
9748;788;"JavaScript";"/**
 * @param {number[]} A
 * @return {number}
 */
var numberOfArithmeticSlices = function(A) {
 
};";"";"2020-03-25 15:18:33"
9749;788;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @return Integer
     */
    function numberOfArithmeticSlices($A) {
        
    }
}";"";"2020-03-25 15:18:33"
9750;788;"Swift";"class Solution {
    func numberOfArithmeticSlices(_ A: [Int]) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:33"
9751;788;"Ruby";"# @param {Integer[]} a
# @return {Integer}
def number_of_arithmetic_slices(a)
 
end";"";"2020-03-25 15:18:33"
9752;788;"Python";"class Solution(object):
    def numberOfArithmeticSlices(self, A):
        """"""
        :type A: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:33"
9753;789;"C#";"public class Solution {
    public int NumSubarrayBoundedMax(int[] A, int L,
 int R) {
 
    }
}";"";"2020-03-25 15:18:33"
9754;789;"Java";"class Solution {
    public int numSubarrayBoundedMax(int[] A, int L,
 int R) {
 
    }
}";"";"2020-03-25 15:18:33"
9755;789;"Rust";"impl Solution {
    pub fn num_subarray_bounded_max(a: Vec<i32>, l: 
i32, r: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:33"
9756;789;"C";"int numSubarrayBoundedMax(int* A, int ASize, int L, 
int R){
 
}";"";"2020-03-25 15:18:33"
9757;789;"Scala";"object Solution {
    def numSubarrayBoundedMax(A: Array[Int], L: Int,
 R: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:33"
9758;789;"Go";"func numSubarrayBoundedMax(A []int, L int, R int) 
int {
 
}";"";"2020-03-25 15:18:33"
9759;789;"Kotlin";"class Solution {
    fun numSubarrayBoundedMax(A: IntArray, L: Int, 
R: Int): Int {
 
    }
}";"";"2020-03-25 15:18:33"
9760;789;"Python3";"class Solution:
    def numSubarrayBoundedMax(self, A: List[int], 
L: int, R: int) -> int:";"";"2020-03-25 15:18:33"
9761;789;"JavaScript";"/**
 * @param {number[]} A
 * @param {number} L
 * @param {number} R
 * @return {number}
 */
var numSubarrayBoundedMax = function(A, L, R) {
 
};";"";"2020-03-25 15:18:33"
9762;789;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @param Integer $L
     * @param Integer $R
     * @return Integer
     */
    function numSubarrayBoundedMax($A, $L, $R) {
        
    }
}";"";"2020-03-25 15:18:33"
9763;789;"Swift";"class Solution {
    func numSubarrayBoundedMax(_ A: [Int], _ L: Int,
 _ R: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:33"
9764;789;"Ruby";"# @param {Integer[]} a
# @param {Integer} l
# @param {Integer} r
# @return {Integer}
def num_subarray_bounded_max(a, l, r)
 
end";"";"2020-03-25 15:18:33"
9765;789;"Python";"class Solution(object):
    def numSubarrayBoundedMax(self, A, L, R):
        """"""
        :type A: List[int]
        :type L: int
        :type R: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:33"
9766;790;"C#";"public class Solution {
    public int MaxSumTwoNoOverlap(int[] A, int L, 
int M) {
 
    }
}";"";"2020-03-25 15:18:33"
9767;790;"Java";"class Solution {
    public int maxSumTwoNoOverlap(int[] A, int L, 
int M) {
 
    }
}";"";"2020-03-25 15:18:33"
9768;790;"Rust";"impl Solution {
    pub fn max_sum_two_no_overlap(a: Vec<i32>, l: 
i32, m: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:33"
9769;790;"C";"int maxSumTwoNoOverlap(int* A, int ASize, int L, 
int M){
 
}";"";"2020-03-25 15:18:33"
9770;790;"Scala";"object Solution {
    def maxSumTwoNoOverlap(A: Array[Int], L: Int, 
M: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:33"
9771;790;"Go";"func maxSumTwoNoOverlap(A []int, L int, M int) int {
 
}";"";"2020-03-25 15:18:33"
9772;790;"Kotlin";"class Solution {
    fun maxSumTwoNoOverlap(A: IntArray, L: Int, M: 
Int): Int {
 
    }
}";"";"2020-03-25 15:18:33"
9773;790;"Python3";"class Solution:
    def maxSumTwoNoOverlap(self, A: List[int], L: 
int, M: int) -> int:";"";"2020-03-25 15:18:33"
9774;790;"JavaScript";"/**
 * @param {number[]} A
 * @param {number} L
 * @param {number} M
 * @return {number}
 */
var maxSumTwoNoOverlap = function(A, L, M) {
 
};";"";"2020-03-25 15:18:33"
9775;790;"PHP";"class Solution {";"";"2020-03-25 15:18:33"
9776;790;"Swift";"class Solution {
    func maxSumTwoNoOverlap(_ A: [Int], _ L: Int, _ 
M: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:33"
9777;790;"Ruby";"# @param {Integer[]} a
# @param {Integer} l
# @param {Integer} m
# @return {Integer}
def max_sum_two_no_overlap(a, l, m)
 
end";"";"2020-03-25 15:18:33"
9778;790;"Python";"class Solution(object):
    def maxSumTwoNoOverlap(self, A, L, M):
        """"""
        :type A: List[int]
        :type L: int
        :type M: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:33"
9779;791;"C#";"public class Solution {
    public IList<string> 
FindAllConcatenatedWordsInADict(string[] words) {
 
    }
}";"";"2020-03-25 15:18:33"
9780;791;"Java";"class Solution {
    public List<String> 
findAllConcatenatedWordsInADict(String[] words) {
 
    }
}";"";"2020-03-25 15:18:33"
9781;791;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** findAllConcatenatedWordsInADict(char ** 
words, int wordsSize, int* returnSize){
 
}";"";"2020-03-25 15:18:33"
9782;791;"Scala";"object Solution {
    def findAllConcatenatedWordsInADict(words: Array
[String]): List[String] = {
 
    }
}";"";"2020-03-25 15:18:33"
9783;791;"JavaScript";"/**
 * @param {string[]} words
 * @return {string[]}
 */
var findAllConcatenatedWordsInADict = function
(words) {
 
};";"";"2020-03-25 15:18:33"
9784;791;"Python3";"class Solution:
    def findAllConcatenatedWordsInADict(self, 
words: List[str]) -> List[str]:";"";"2020-03-25 15:18:33"
9785;791;"Go";"func findAllConcatenatedWordsInADict(words []string)
 []string {
 
}";"";"2020-03-25 15:18:33"
9786;791;"Swift";"class Solution {
    func findAllConcatenatedWordsInADict(_ words: 
[String]) -> [String] {
        
    }
}";"";"2020-03-25 15:18:33"
9787;791;"Ruby";"# @param {String[]} words
# @return {String[]}
def find_all_concatenated_words_in_a_dict(words)
 
end";"";"2020-03-25 15:18:33"
9788;791;"Kotlin";"class Solution {
    fun findAllConcatenatedWordsInADict(words: 
Array<String>): List<String> {
 
    }
}";"";"2020-03-25 15:18:33"
9789;791;"Python";"class Solution(object):
    def findAllConcatenatedWordsInADict(self, words)
:
        """"""
        :type words: List[str]
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:33"
9790;792;"C#";"public class Solution {
    public int LargestSumAfterKNegations(int[] A, 
int K) {
 
    }
}";"";"2020-03-25 15:18:33"
9791;792;"Java";"class Solution {
    public int largestSumAfterKNegations(int[] A, 
int K) {
 
    }
}";"";"2020-03-25 15:18:33"
9792;792;"Rust";"impl Solution {
    pub fn largest_sum_after_k_negations(a: 
Vec<i32>, k: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:33"
9793;792;"C";"int largestSumAfterKNegations(int* A, int ASize, 
int K){
 
}";"";"2020-03-25 15:18:33"
9794;792;"Scala";"object Solution {
    def largestSumAfterKNegations(A: Array[Int], K: 
Int): Int = {
 
    }
}";"";"2020-03-25 15:18:33"
9795;792;"Go";"func largestSumAfterKNegations(A []int, K int) int {
 
}";"";"2020-03-25 15:18:33"
9796;792;"Kotlin";"class Solution {
    fun largestSumAfterKNegations(A: IntArray, K: 
Int): Int {
 
    }
}";"";"2020-03-25 15:18:33"
9797;792;"Python3";"class Solution:
    def largestSumAfterKNegations(self, A: List[int]
, K: int) -> int:";"";"2020-03-25 15:18:33"
9798;792;"JavaScript";"/**
 * @param {number[]} A
 * @param {number} K
 * @return {number}
 */
var largestSumAfterKNegations = function(A, K) {
 
};";"";"2020-03-25 15:18:33"
9799;792;"PHP";"class Solution {";"";"2020-03-25 15:18:33"
9800;792;"Swift";"class Solution {
    func largestSumAfterKNegations(_ A: [Int], _ K: 
Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:33"
9801;792;"Ruby";"# @param {Integer[]} a
# @param {Integer} k
# @return {Integer}
def largest_sum_after_k_negations(a, k)
 
end";"";"2020-03-25 15:18:33"
9802;792;"Python";"class Solution(object):
    def largestSumAfterKNegations(self, A, K):
        """"""
        :type A: List[int]
        :type K: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:33"
9803;793;"C#";"public class Solution {
    public int MincostTickets(int[] days, int[] 
costs) {
 
    }
}";"";"2020-03-25 15:18:33"
9804;793;"Java";"class Solution {
    public int mincostTickets(int[] days, int[] 
costs) {
 
    }
}";"";"2020-03-25 15:18:33"
9805;793;"Rust";"impl Solution {
    pub fn mincost_tickets(days: Vec<i32>, costs: 
Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:33"
9806;793;"C";"int mincostTickets(int* days, int daysSize, int* 
costs, int costsSize){
 
}";"";"2020-03-25 15:18:33"
9807;793;"Scala";"object Solution {
    def mincostTickets(days: Array[Int], costs: 
Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:33"
9808;793;"Go";"func mincostTickets(days []int, costs []int) int {
 
}";"";"2020-03-25 15:18:33"
9809;793;"Kotlin";"class Solution {
    fun mincostTickets(days: IntArray, costs: 
IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:33"
9810;793;"Python3";"class Solution:
    def mincostTickets(self, days: List[int], 
costs: List[int]) -> int:";"";"2020-03-25 15:18:33"
9811;793;"JavaScript";"/**
 * @param {number[]} days
 * @param {number[]} costs
 * @return {number}
 */
var mincostTickets = function(days, costs) {
 
};";"";"2020-03-25 15:18:33"
9812;793;"PHP";"class Solution {
 
    /**
     * @param Integer[] $days
     * @param Integer[] $costs
     * @return Integer
     */
    function mincostTickets($days, $costs) {
        
    }
}";"";"2020-03-25 15:18:33"
9813;793;"Swift";"class Solution {
    func mincostTickets(_ days: [Int], _ costs: 
[Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:33"
9814;793;"Ruby";"# @param {Integer[]} days
# @param {Integer[]} costs
# @return {Integer}
def mincost_tickets(days, costs)
 
end";"";"2020-03-25 15:18:33"
9815;793;"Python";"class Solution(object):
    def mincostTickets(self, days, costs):
        """"""
        :type days: List[int]
        :type costs: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:33"
9816;794;"C#";"public class Solution {
    public int[] PrintNumbers(int n) {
 
    }
}";"";"2020-03-25 15:18:33"
9817;794;"Java";"class Solution {
    public int[] printNumbers(int n) {
 
    }
}";"";"2020-03-25 15:18:33"
9818;794;"Rust";"impl Solution {
    pub fn print_numbers(n: i32) -> Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:33"
9819;794;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* printNumbers(int n, int* returnSize){
 
}";"";"2020-03-25 15:18:33"
9820;794;"Scala";"object Solution {
    def printNumbers(n: Int): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:33"
9821;794;"Go";"func printNumbers(n int) []int {
 
}";"";"2020-03-25 15:18:33"
9822;794;"Kotlin";"class Solution {
    fun printNumbers(n: Int): IntArray {
 
    }
}";"";"2020-03-25 15:18:33"
9823;794;"Python3";"class Solution:
    def printNumbers(self, n: int) -> List[int]:";"";"2020-03-25 15:18:33"
9824;794;"JavaScript";"/**
 * @param {number} n
 * @return {number[]}
 */
var printNumbers = function(n) {
 
};";"";"2020-03-25 15:18:33"
9825;794;"PHP";"class Solution {";"";"2020-03-25 15:18:33"
9826;794;"Swift";"class Solution {
    func printNumbers(_ n: Int) -> [Int] {
 
    }
}";"";"2020-03-25 15:18:33"
9827;794;"Ruby";"# @param {Integer} n
# @return {Integer[]}
def print_numbers(n)
 
end";"";"2020-03-25 15:18:33"
9828;794;"Python";"class Solution(object):
    def printNumbers(self, n):
        """"""
        :type n: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:33"
9829;795;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode ReverseList(ListNode head) {
 
    }
}";"";"2020-03-25 15:18:33"
9830;795;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
 
    }
}";"";"2020-03-25 15:18:33"
9831;795;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
struct ListNode* reverseList(struct ListNode* head){
 
}";"";"2020-03-25 15:18:33"
9832;795;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn reverse_list(head: Option<Box<ListNode>>)
 -> Option<Box<ListNode>> {
 
    }
}";"";"2020-03-25 15:18:33"
9833;795;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def reverseList(head: ListNode): ListNode = {
 
    }
}";"";"2020-03-25 15:18:33"
9834;795;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func reverseList(head *ListNode) *ListNode {
 
}";"";"2020-03-25 15:18:33"
9835;795;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun reverseList(head: ListNode?): ListNode? {
 
    }
}";"";"2020-03-25 15:18:33"
9836;795;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def reverseList(self, head: ListNode) -> 
ListNode:";"";"2020-03-25 15:18:33"
9837;795;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var reverseList = function(head) {
 
};";"";"2020-03-25 15:18:33"
9838;795;"PHP";"/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
class Solution {
 
    /**
     * @param ListNode $head
     * @return ListNode
     */
    function reverseList($head) {
 
    }
}";"";"2020-03-25 15:18:33"
9839;795;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func reverseList(_ head: ListNode?) -> ListNode?
 {
 
    }
}";"";"2020-03-25 15:18:33"
9840;795;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# @param {ListNode} head
# @return {ListNode}
def reverse_list(head)
 
end";"";"2020-03-25 15:18:33"
9841;795;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def reverseList(self, head):
        """"""
        :type head: ListNode
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:33"
9842;796;"C#";"public class Solution {
    public string ReplaceSpaces(string S, int 
length) {
 
    }
}";"";"2020-03-25 15:18:34"
9843;796;"Java";"class Solution {
    public String replaceSpaces(String S, int 
length) {
 
    }
}";"";"2020-03-25 15:18:34"
9844;796;"Rust";"impl Solution {
    pub fn replace_spaces(s: String, length: i32) 
-> String {
 
    }
}";"";"2020-03-25 15:18:34"
9845;796;"C";"char* replaceSpaces(char* S, int length){
 
}";"";"2020-03-25 15:18:34"
9846;796;"Scala";"object Solution {
    def replaceSpaces(S: String, length: Int): 
String = {
 
    }
}";"";"2020-03-25 15:18:34"
9847;796;"Go";"func replaceSpaces(S string, length int) string {
 
}";"";"2020-03-25 15:18:34"
9848;796;"Kotlin";"class Solution {
    fun replaceSpaces(S: String, length: Int): 
String {
 
    }
}";"";"2020-03-25 15:18:34"
9849;796;"Python3";"class Solution:
    def replaceSpaces(self, S: str, length: int) -> 
str:";"";"2020-03-25 15:18:34"
9850;796;"JavaScript";"/**
 * @param {string} S
 * @param {number} length
 * @return {string}
 */
var replaceSpaces = function(S, length) {
 
};";"";"2020-03-25 15:18:34"
9851;796;"PHP";"class Solution {
 
    /**
     * @param String $S
     * @param Integer $length
     * @return String
     */
    function replaceSpaces($S, $length) {
 
    }
}";"";"2020-03-25 15:18:34"
9852;796;"Swift";"class Solution {
    func replaceSpaces(_ S: String, _ length: Int) 
-> String {
 
    }
}";"";"2020-03-25 15:18:34"
9853;796;"Ruby";"# @param {String} s
# @param {Integer} length
# @return {String}
def replace_spaces(s, length)
 
end";"";"2020-03-25 15:18:34"
9854;796;"Python";"class Solution(object):
    def replaceSpaces(self, S, length):
        """"""
        :type S: str
        :type length: int
        :rtype: str
        """"""";"";"2020-03-25 15:18:34"
9855;797;"C#";"public class Solution {
    public string ConvertToBase7(int num) {
 
    }
}";"";"2020-03-25 15:18:34"
9856;797;"Java";"class Solution {
    public String convertToBase7(int num) {
 
    }
}";"";"2020-03-25 15:18:34"
9857;797;"Rust";"impl Solution {
    pub fn convert_to_base7(num: i32) -> String {
        
    }
}";"";"2020-03-25 15:18:34"
9858;797;"C";"char * convertToBase7(int num){
 
}";"";"2020-03-25 15:18:34"
9859;797;"Scala";"object Solution {
    def convertToBase7(num: Int): String = {
 
    }
}";"";"2020-03-25 15:18:34"
9860;797;"Go";"func convertToBase7(num int) string {
 
}";"";"2020-03-25 15:18:34"
9861;797;"Kotlin";"class Solution {
    fun convertToBase7(num: Int): String {
 
    }
}";"";"2020-03-25 15:18:34"
9862;797;"Python3";"class Solution:
    def convertToBase7(self, num: int) -> str:";"";"2020-03-25 15:18:34"
9863;797;"JavaScript";"/**
 * @param {number} num
 * @return {string}
 */
var convertToBase7 = function(num) {
 
};";"";"2020-03-25 15:18:34"
9864;797;"PHP";"class Solution {
 
    /**
     * @param Integer $num
     * @return String
     */
    function convertToBase7($num) {
        
    }
}";"";"2020-03-25 15:18:34"
9865;797;"Swift";"class Solution {
    func convertToBase7(_ num: Int) -> String {
        
    }
}";"";"2020-03-25 15:18:34"
9866;797;"Ruby";"# @param {Integer} num
# @return {String}
def convert_to_base7(num)
 
end";"";"2020-03-25 15:18:34"
9867;797;"Python";"class Solution(object):
    def convertToBase7(self, num):
        """"""
        :type num: int
        :rtype: str
        """"""";"";"2020-03-25 15:18:34"
9868;798;"C#";"public class Solution {
    public int LongestSubstring(string s, int k) {
 
    }
}";"";"2020-03-25 15:18:34"
9869;798;"Java";"class Solution {
    public int longestSubstring(String s, int k) {
 
    }
}";"";"2020-03-25 15:18:34"
9870;798;"C";"int longestSubstring(char * s, int k){
 
}";"";"2020-03-25 15:18:34"
9871;798;"Rust";"impl Solution {
    pub fn longest_substring(s: String, k: i32) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:34"
9872;798;"Scala";"object Solution {
    def longestSubstring(s: String, k: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:34"
9873;798;"Go";"func longestSubstring(s string, k int) int {
 
}";"";"2020-03-25 15:18:34"
9874;798;"Kotlin";"class Solution {
    fun longestSubstring(s: String, k: Int): Int {
 
    }
}";"";"2020-03-25 15:18:34"
9875;798;"Python3";"class Solution:
    def longestSubstring(self, s: str, k: int) -> 
int:";"";"2020-03-25 15:18:34"
9876;798;"JavaScript";"/**
 * @param {string} s
 * @param {number} k
 * @return {number}
 */
var longestSubstring = function(s, k) {
 
};";"";"2020-03-25 15:18:34"
9877;798;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @param Integer $k
     * @return Integer
     */
    function longestSubstring($s, $k) {
        
    }
}";"";"2020-03-25 15:18:34"
9878;798;"Swift";"class Solution {
    func longestSubstring(_ s: String, _ k: Int) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:34"
9879;798;"Ruby";"# @param {String} s
# @param {Integer} k
# @return {Integer}
def longest_substring(s, k)
 
end";"";"2020-03-25 15:18:34"
9880;798;"Python";"class Solution(object):
    def longestSubstring(self, s, k):
        """"""
        :type s: str
        :type k: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:34"
9881;799;"C#";"public class Solution {
    public bool IsPalindrome(string s) {
 
    }
}";"";"2020-03-25 15:18:34"
9882;799;"Java";"class Solution {
    public boolean isPalindrome(String s) {
 
    }
}";"";"2020-03-25 15:18:34"
9883;799;"Rust";"impl Solution {
    pub fn is_palindrome(s: String) -> bool {
 
    }
}";"";"2020-03-25 15:18:34"
9884;799;"C";"bool isPalindrome(char * s){
 
}";"";"2020-03-25 15:18:34"
9885;799;"Scala";"object Solution {
    def isPalindrome(s: String): Boolean = {
 
    }
}";"";"2020-03-25 15:18:34"
9886;799;"Go";"func isPalindrome(s string) bool {
 
}";"";"2020-03-25 15:18:34"
9887;799;"Kotlin";"class Solution {
    fun isPalindrome(s: String): Boolean {
 
    }
}";"";"2020-03-25 15:18:34"
9888;799;"Python3";"class Solution:
    def isPalindrome(self, s: str) -> bool:";"";"2020-03-25 15:18:34"
9889;799;"JavaScript";"/**
 * @param {string} s
 * @return {boolean}
 */
var isPalindrome = function(s) {
 
};";"";"2020-03-25 15:18:34"
9890;799;"PHP";"class Solution {";"";"2020-03-25 15:18:34"
9891;799;"Swift";"class Solution {
    func isPalindrome(_ s: String) -> Bool {
 
    }
}";"";"2020-03-25 15:18:34"
9892;799;"Ruby";"# @param {String} s
# @return {Boolean}
def is_palindrome(s)
 
end";"";"2020-03-25 15:18:34"
9893;799;"Python";"class Solution(object):
    def isPalindrome(self, s):
        """"""
        :type s: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:34"
9894;800;"C#";"public class Solution {
    public int PrimePalindrome(int N) {
 
    }
}";"";"2020-03-25 15:18:34"
9895;800;"Java";"class Solution {
    public int primePalindrome(int N) {
 
    }
}";"";"2020-03-25 15:18:34"
9896;800;"Rust";"impl Solution {
    pub fn prime_palindrome(n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:34"
9897;800;"C";"int primePalindrome(int N){
 
}";"";"2020-03-25 15:18:34"
9898;800;"Scala";"object Solution {
    def primePalindrome(N: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:34"
9899;800;"Python3";"class Solution:
    def primePalindrome(self, N: int) -> int:";"";"2020-03-25 15:18:34"
9900;800;"JavaScript";"/**
 * @param {number} N
 * @return {number}
 */
var primePalindrome = function(N) {
 
};";"";"2020-03-25 15:18:34"
9901;800;"PHP";"class Solution {";"";"2020-03-25 15:18:34"
9902;800;"Swift";"class Solution {
    func primePalindrome(_ N: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:34"
9903;800;"Ruby";"# @param {Integer} n
# @return {Integer}
def prime_palindrome(n)
 
end";"";"2020-03-25 15:18:34"
9904;800;"Kotlin";"class Solution {
    fun primePalindrome(N: Int): Int {
 
    }
}";"";"2020-03-25 15:18:34"
9905;800;"Python";"class Solution(object):
    def primePalindrome(self, N):
        """"""
        :type N: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:34"
9906;801;"C#";"public class Solution {
    public int MinStickers(string[] stickers, 
string target) {
 
    }
}";"";"2020-03-25 15:18:34"
9907;801;"Java";"class Solution {
    public int minStickers(String[] stickers, 
String target) {
 
    }
}";"";"2020-03-25 15:18:34"
9908;801;"C";"int minStickers(char ** stickers, int stickersSize, 
char * target){
 
}";"";"2020-03-25 15:18:34"
9909;801;"Rust";"impl Solution {
    pub fn min_stickers(stickers: Vec<String>, 
target: String) -> i32 {
        
    }
}";"";"2020-03-25 15:18:34"
9910;801;"Scala";"object Solution {
    def minStickers(stickers: Array[String], 
target: String): Int = {
 
    }
}";"";"2020-03-25 15:18:34"
9911;801;"Go";"func minStickers(stickers []string, target string) 
int {
 
}";"";"2020-03-25 15:18:34"
9912;801;"Kotlin";"class Solution {
    fun minStickers(stickers: Array<String>, 
target: String): Int {
 
    }
}";"";"2020-03-25 15:18:34"
9913;801;"Python3";"class Solution:
    def minStickers(self, stickers: List[str], 
target: str) -> int:";"";"2020-03-25 15:18:34"
9914;801;"JavaScript";"/**
 * @param {string[]} stickers
 * @param {string} target
 * @return {number}
 */
var minStickers = function(stickers, target) {
 
};";"";"2020-03-25 15:18:34"
9915;801;"PHP";"class Solution {
 
    /**
     * @param String[] $stickers
     * @param String $target
     * @return Integer
     */
    function minStickers($stickers, $target) {
        
    }
}";"";"2020-03-25 15:18:34"
9916;801;"Swift";"class Solution {
    func minStickers(_ stickers: [String], _ 
target: String) -> Int {
        
    }
}";"";"2020-03-25 15:18:34"
9917;801;"Ruby";"# @param {String[]} stickers
# @param {String} target
# @return {Integer}
def min_stickers(stickers, target)
 
end";"";"2020-03-25 15:18:34"
9918;801;"Python";"class Solution(object):
    def minStickers(self, stickers, target):
        """"""
        :type stickers: List[str]
        :type target: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:34"
9919;802;"C#";"public class Solution {
 
    public Solution(int N, int[] blacklist) {
 
    }
    
    public int Pick() {
 
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * Solution obj = new Solution(N, blacklist);
 * int param_1 = obj.Pick();
 */";"";"2020-03-25 15:18:34"
9920;802;"Java";"class Solution {
 
    public Solution(int N, int[] blacklist) {
 
    }
    
    public int pick() {
 
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * Solution obj = new Solution(N, blacklist);
 * int param_1 = obj.pick();
 */";"";"2020-03-25 15:18:34"
9921;802;"C";"typedef struct {
    
} Solution;
 
 
Solution* solutionCreate(int N, int* blacklist, int 
blacklistSize) {
    
}
 
int solutionPick(Solution* obj) {
  
}
 
void solutionFree(Solution* obj) {
    
}
 
/**
 * Your Solution struct will be instantiated and 
called as such:
 * Solution* obj = solutionCreate(N, blacklist, 
blacklistSize);
 * int param_1 = solutionPick(obj);
 
 * solutionFree(obj);";"";"2020-03-25 15:18:34"
9922;802;"Rust";"struct Solution {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl Solution {
 
    fn new(N: i32, blacklist: Vec<i32>) -> Self {
        
    }
    
    fn pick(&self) -> i32 {
        
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * let obj = Solution::new(N, blacklist);";"";"2020-03-25 15:18:34"
9923;802;"Scala";"class Solution(_N: Int, _blacklist: Array[Int]) {
 
    def pick(): Int = {
 
    }
 
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * var obj = new Solution(N, blacklist)
 * var param_1 = obj.pick()
 */";"";"2020-03-25 15:18:34"
9924;802;"Go";"type Solution struct {
 
}
 
 
func Constructor(N int, blacklist []int) Solution {
 
}
 
 
func (this *Solution) Pick() int {
 
}
 
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * obj := Constructor(N, blacklist);
 * param_1 := obj.Pick();
 */";"";"2020-03-25 15:18:34"
9925;802;"Kotlin";"class Solution(N: Int, blacklist: IntArray) {
 
    fun pick(): Int {
 
    }
 
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * var obj = Solution(N, blacklist)
 * var param_1 = obj.pick()
 */";"";"2020-03-25 15:18:34"
9926;802;"Python3";"class Solution:
 
    def __init__(self, N: int, blacklist: List[int])
:
        
 
    def pick(self) -> int:
        
 
 
# Your Solution object will be instantiated and 
called as such:
# obj = Solution(N, blacklist)
# param_1 = obj.pick()";"";"2020-03-25 15:18:34"
9927;802;"JavaScript";"/**
 * @param {number} N
 * @param {number[]} blacklist
 */
var Solution = function(N, blacklist) {
 
};
 
/**
 * @return {number}
 */
Solution.prototype.pick = function() {
 
};
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * var obj = new Solution(N, blacklist)
 * var param_1 = obj.pick()
 */";"";"2020-03-25 15:18:34"
9928;802;"PHP";"class Solution {
    /**
     * @param Integer $N
     * @param Integer[] $blacklist
     */
    function __construct($N, $blacklist) {
        
    }
  
    /**
     * @return Integer
     */
    function pick() {
        
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * $obj = Solution($N, $blacklist);
 * $ret_1 = $obj->pick();
 */";"";"2020-03-25 15:18:34"
9929;802;"Swift";"class Solution {
 
    init(_ N: Int, _ blacklist: [Int]) {
        
    }
    
    func pick() -> Int {
        
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * let obj = Solution(N, blacklist)
 * let ret_1: Int = obj.pick()
 */";"";"2020-03-25 15:18:34"
9930;802;"Ruby";"class Solution
 
=begin
    :type n: Integer
    :type blacklist: Integer[]
=end
    def initialize(n, blacklist)
 
    end
 
 
=begin
    :rtype: Integer
=end
    def pick()
 
    end
 
 
end
 
# Your Solution object will be instantiated and 
called as such:
# obj = Solution.new(n, blacklist)
# param_1 = obj.pick()";"";"2020-03-25 15:18:34"
9931;802;"Python";"class Solution(object):
 
    def __init__(self, N, blacklist):
        """"""
        :type N: int
        :type blacklist: List[int]
        """"""
        
 
    def pick(self):
        """"""
        :rtype: int
        """"""
        
 
 
# Your Solution object will be instantiated and 
called as such:
# obj = Solution(N, blacklist)
# param_1 = obj.pick()";"";"2020-03-25 15:18:34"
9932;803;"C#";"public class Solution {
    public int NumTilePossibilities(string tiles) {
 
    }
}";"";"2020-03-25 15:18:34"
9933;803;"Java";"class Solution {
    public int numTilePossibilities(String tiles) {
 
    }
}";"";"2020-03-25 15:18:34"
9934;803;"Rust";"impl Solution {
    pub fn num_tile_possibilities(tiles: String) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:34"
9935;803;"C";"int numTilePossibilities(char * tiles){
 
}";"";"2020-03-25 15:18:34"
9936;803;"Scala";"object Solution {
    def numTilePossibilities(tiles: String): Int = {
 
    }
}";"";"2020-03-25 15:18:34"
9937;803;"Go";"func numTilePossibilities(tiles string) int {
 
}";"";"2020-03-25 15:18:34"
9938;803;"Kotlin";"class Solution {
    fun numTilePossibilities(tiles: String): Int {
 
    }
}";"";"2020-03-25 15:18:34"
9939;803;"Python3";"class Solution:
    def numTilePossibilities(self, tiles: str) -> 
int:";"";"2020-03-25 15:18:34"
9940;803;"JavaScript";"/**
 * @param {string} tiles
 * @return {number}
 */
var numTilePossibilities = function(tiles) {
 
};";"";"2020-03-25 15:18:34"
9941;803;"PHP";"class Solution {";"";"2020-03-25 15:18:34"
9942;803;"Swift";"class Solution {
    func numTilePossibilities(_ tiles: String) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:34"
9943;803;"Ruby";"# @param {String} tiles
# @return {Integer}
def num_tile_possibilities(tiles)
 
end";"";"2020-03-25 15:18:34"
9944;803;"Python";"class Solution(object):
    def numTilePossibilities(self, tiles):
        """"""
        :type tiles: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:34"
9945;804;"C#";"public class Solution {
    public bool IsStraight(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:34"
9946;804;"Java";"class Solution {
    public boolean isStraight(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:34"
9947;804;"C++";"class Solution {
public:
    bool isStraight(vector<int>& nums) {
 
    }
};";"";"2020-03-25 15:18:34"
9948;804;"C";"bool isStraight(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:34"
9949;804;"Rust";"impl Solution {
    pub fn is_straight(nums: Vec<i32>) -> bool {
 
    }
}";"";"2020-03-25 15:18:34"
9950;804;"Scala";"object Solution {
    def isStraight(nums: Array[Int]): Boolean = {
 
    }
}";"";"2020-03-25 15:18:34"
9951;804;"Go";"func isStraight(nums []int) bool {
 
}";"";"2020-03-25 15:18:34"
9952;804;"Kotlin";"class Solution {
    fun isStraight(nums: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:34"
9953;804;"Python3";"class Solution:
    def isStraight(self, nums: List[int]) -> bool:";"";"2020-03-25 15:18:34"
9954;804;"JavaScript";"/**
 * @param {number[]} nums
 * @return {boolean}
 */
var isStraight = function(nums) {
 
};";"";"2020-03-25 15:18:34"
9955;804;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Boolean
     */
    function isStraight($nums) {
 
    }
}";"";"2020-03-25 15:18:34"
9956;804;"Swift";"class Solution {
    func isStraight(_ nums: [Int]) -> Bool {
 
    }
}";"";"2020-03-25 15:18:34"
9957;804;"Ruby";"# @param {Integer[]} nums
# @return {Boolean}
def is_straight(nums)
 
end";"";"2020-03-25 15:18:34"
9958;804;"Python";"class Solution(object):
    def isStraight(self, nums):
        """"""
        :type nums: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:34"
9959;805;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode BalanceBST(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:34"
9960;805;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode balanceBST(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:34"
9961;805;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* balanceBST(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:34"
9962;805;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn balance_bst(root: 
Option<Rc<RefCell<TreeNode>>>) -> 
Option<Rc<RefCell<TreeNode>>> {
        
    }";"";"2020-03-25 15:18:34"
9963;805;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def balanceBST(root: TreeNode): TreeNode = {
 
    }
}";"";"2020-03-25 15:18:34"
9964;805;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func balanceBST(root *TreeNode) *TreeNode {
 
}";"";"2020-03-25 15:18:34"
9965;805;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun balanceBST(root: TreeNode?): TreeNode? {
 
    }
}";"";"2020-03-25 15:18:34"
9966;805;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def balanceBST(self, root: TreeNode) -> 
TreeNode:";"";"2020-03-25 15:18:34"
9967;805;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {TreeNode}
 */
var balanceBST = function(root) {
 
};";"";"2020-03-25 15:18:34"
9968;805;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return TreeNode
     */
    function balanceBST($root) {
        
    }
}";"";"2020-03-25 15:18:34"
9969;805;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func balanceBST(_ root: TreeNode?) -> TreeNode? 
{
        
    }
}";"";"2020-03-25 15:18:34"
9970;805;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:34"
9971;805;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def balanceBST(self, root):
        """"""
        :type root: TreeNode
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:34"
9972;806;"C#";"public class Solution {
    public int[] ThreeEqualParts(int[] A) {
 
    }
}";"";"2020-03-25 15:18:34"
9973;806;"Java";"class Solution {
    public int[] threeEqualParts(int[] A) {
 
    }
}";"";"2020-03-25 15:18:34"
9974;806;"Rust";"impl Solution {
    pub fn three_equal_parts(a: Vec<i32>) -> 
Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:34"
9975;806;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* threeEqualParts(int* A, int ASize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:34"
9976;806;"Scala";"object Solution {
    def threeEqualParts(A: Array[Int]): Array[Int] 
= {
 
    }
}";"";"2020-03-25 15:18:34"
9977;806;"Go";"func threeEqualParts(A []int) []int {
 
}";"";"2020-03-25 15:18:34"
9978;806;"Kotlin";"class Solution {
    fun threeEqualParts(A: IntArray): IntArray {
 
    }
}";"";"2020-03-25 15:18:34"
9979;806;"Python3";"class Solution:
    def threeEqualParts(self, A: List[int]) -> List
[int]:";"";"2020-03-25 15:18:34"
9980;806;"JavaScript";"/**
 * @param {number[]} A
 * @return {number[]}
 */
var threeEqualParts = function(A) {
 
};";"";"2020-03-25 15:18:34"
9981;806;"PHP";"class Solution {";"";"2020-03-25 15:18:34"
9982;806;"Swift";"class Solution {
    func threeEqualParts(_ A: [Int]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:34"
9983;806;"Ruby";"# @param {Integer[]} a
# @return {Integer[]}
def three_equal_parts(a)
 
end";"";"2020-03-25 15:18:34"
9984;806;"Python";"class Solution(object):
    def threeEqualParts(self, A):
        """"""
        :type A: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:34"
9985;807;"C#";"public class Solution {
    public string[] TrulyMostPopular(string[] names,
 string[] synonyms) {
 
    }
}";"";"2020-03-25 15:18:34"
9986;807;"Java";"class Solution {
    public String[] trulyMostPopular(String[] names,
 String[] synonyms) {
 
    }
}";"";"2020-03-25 15:18:34"
9987;807;"Rust";"impl Solution {
    pub fn truly_most_popular(names: Vec<String>, 
synonyms: Vec<String>) -> Vec<String> {
 
    }
}";"";"2020-03-25 15:18:34"
9988;807;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char** trulyMostPopular(char** names, int namesSize,
 char** synonyms, int synonymsSize, int* returnSize)
{
 
}";"";"2020-03-25 15:18:34"
9989;807;"Scala";"object Solution {
    def trulyMostPopular(names: Array[String], 
synonyms: Array[String]): Array[String] = {
 
    }
}";"";"2020-03-25 15:18:34"
9990;807;"Go";"func trulyMostPopular(names []string, synonyms []
string) []string {
 
}";"";"2020-03-25 15:18:34"
9991;807;"Kotlin";"class Solution {
    fun trulyMostPopular(names: Array<String>, 
synonyms: Array<String>): Array<String> {
 
    }
}";"";"2020-03-25 15:18:34"
9992;807;"Python3";"class Solution:
    def trulyMostPopular(self, names: List[str], 
synonyms: List[str]) -> List[str]:";"";"2020-03-25 15:18:34"
9993;807;"JavaScript";"/**
 * @param {string[]} names
 * @param {string[]} synonyms
 * @return {string[]}
 */
var trulyMostPopular = function(names, synonyms) {
 
};";"";"2020-03-25 15:18:34"
9994;807;"PHP";"class Solution {";"";"2020-03-25 15:18:34"
9995;807;"Swift";"class Solution {
    func trulyMostPopular(_ names: [String], _ 
synonyms: [String]) -> [String] {
 
    }
}";"";"2020-03-25 15:18:34"
9996;807;"Ruby";"# @param {String[]} names
# @param {String[]} synonyms
# @return {String[]}
def truly_most_popular(names, synonyms)
 
end";"";"2020-03-25 15:18:34"
9997;807;"Python";"class Solution(object):
    def trulyMostPopular(self, names, synonyms):
        """"""
        :type names: List[str]
        :type synonyms: List[str]
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:34"
9998;808;"C#";"public class Solution {
    public bool IsMatch(string s, string p) {
 
    }
}";"";"2020-03-25 15:18:34"
9999;808;"Java";"class Solution {
    public boolean isMatch(String s, String p) {
 
    }
}";"";"2020-03-25 15:18:34"
10000;808;"Rust";"impl Solution {
    pub fn is_match(s: String, p: String) -> bool {
 
    }
}";"";"2020-03-25 15:18:34"
10001;808;"C";"bool isMatch(char* s, char* p){
 
}";"";"2020-03-25 15:18:34"
10002;808;"Scala";"object Solution {
    def isMatch(s: String, p: String): Boolean = {
 
    }
}";"";"2020-03-25 15:18:34"
10003;808;"Go";"func isMatch(s string, p string) bool {
 
}";"";"2020-03-25 15:18:34"
10004;808;"Kotlin";"class Solution {
    fun isMatch(s: String, p: String): Boolean {
 
    }
}";"";"2020-03-25 15:18:34"
10005;808;"Python3";"class Solution:
    def isMatch(self, s: str, p: str) -> bool:";"";"2020-03-25 15:18:34"
10006;808;"JavaScript";"/**
 * @param {string} s
 * @param {string} p
 * @return {boolean}
 */
var isMatch = function(s, p) {
 
};";"";"2020-03-25 15:18:34"
10007;808;"PHP";"class Solution {";"";"2020-03-25 15:18:34"
10008;808;"Swift";"class Solution {
    func isMatch(_ s: String, _ p: String) -> Bool {
 
    }
}";"";"2020-03-25 15:18:34"
10009;808;"Ruby";"# @param {String} s
# @param {String} p
# @return {Boolean}
def is_match(s, p)
 
end";"";"2020-03-25 15:18:34"
10010;808;"Python";"class Solution(object):
    def isMatch(self, s, p):
        """"""
        :type s: str
        :type p: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:34"
10011;809;"C#";"public class Solution {
    public int FindCheapestPrice(int n, int[][] 
flights, int src, int dst, int K) {
 
    }
}";"";"2020-03-25 15:18:34"
10012;809;"Java";"class Solution {
    public int findCheapestPrice(int n, int[][] 
flights, int src, int dst, int K) {
 
    }
}";"";"2020-03-25 15:18:34"
10013;809;"Rust";"impl Solution {
    pub fn find_cheapest_price(n: i32, flights: 
Vec<Vec<i32>>, src: i32, dst: i32, k: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:34"
10014;809;"C";"int findCheapestPrice(int n, int** flights, int 
flightsSize, int* flightsColSize, int src, int dst, 
int K){
 
}";"";"2020-03-25 15:18:34"
10015;809;"Scala";"object Solution {
    def findCheapestPrice(n: Int, flights: Array
[Array[Int]], src: Int, dst: Int, K: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:34"
10016;809;"Python3";"class Solution:
    def findCheapestPrice(self, n: int, flights: 
List[List[int]], src: int, dst: int, K: int) -> int:";"";"2020-03-25 15:18:34"
10017;809;"JavaScript";"/**
 * @param {number} n
 * @param {number[][]} flights
 * @param {number} src
 * @param {number} dst
 * @param {number} K
 * @return {number}
 */
var findCheapestPrice = function(n, flights, src, 
dst, K) {
 
};";"";"2020-03-25 15:18:34"
10018;809;"Go";"func findCheapestPrice(n int, flights [][]int, src 
int, dst int, K int) int {
 
}";"";"2020-03-25 15:18:34"
10019;809;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @param Integer[][] $flights
     * @param Integer $src
     * @param Integer $dst
     * @param Integer $K
     * @return Integer
     */
    function findCheapestPrice($n, $flights, $src, 
$dst, $K) {
        
    }
}";"";"2020-03-25 15:18:34"
10020;809;"Swift";"class Solution {
    func findCheapestPrice(_ n: Int, _ flights: [
[Int]], _ src: Int, _ dst: Int, _ K: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:34"
10021;809;"Ruby";"# @param {Integer} n
# @param {Integer[][]} flights
# @param {Integer} src
# @param {Integer} dst
# @param {Integer} k
# @return {Integer}
def find_cheapest_price(n, flights, src, dst, k)
 
end";"";"2020-03-25 15:18:34"
10022;809;"Python";"class Solution(object):
    def findCheapestPrice(self, n, flights, src, 
dst, K):
        """"""
        :type n: int
        :type flights: List[List[int]]
        :type src: int
        :type dst: int
        :type K: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:34"
10023;810;"C#";"public class Solution {
    public int[] ExclusiveTime(int n, IList<string> 
logs) {
 
    }
}";"";"2020-03-25 15:18:34"
10024;810;"Java";"class Solution {
    public int[] exclusiveTime(int n, List<String> 
logs) {
 
    }
}";"";"2020-03-25 15:18:34"
10025;810;"Rust";"impl Solution {
    pub fn exclusive_time(n: i32, logs: Vec<String>)
 -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:34"
10026;810;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* exclusiveTime(int n, char ** logs, int 
logsSize, int* returnSize){
 
}";"";"2020-03-25 15:18:34"
10027;810;"Scala";"object Solution {
    def exclusiveTime(n: Int, logs: List[String]): 
Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:34"
10028;810;"Go";"func exclusiveTime(n int, logs []string) []int {
 
}";"";"2020-03-25 15:18:34"
10029;810;"Kotlin";"class Solution {
    fun exclusiveTime(n: Int, logs: List<String>): 
IntArray {
 
    }
}";"";"2020-03-25 15:18:34"
10030;810;"Python3";"class Solution:
    def exclusiveTime(self, n: int, logs: List[str])
 -> List[int]:";"";"2020-03-25 15:18:34"
10031;810;"JavaScript";"/**
 * @param {number} n
 * @param {string[]} logs
 * @return {number[]}
 */
var exclusiveTime = function(n, logs) {
 
};";"";"2020-03-25 15:18:34"
10032;810;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @param String[] $logs
     * @return Integer[]
     */
    function exclusiveTime($n, $logs) {
        
    }
}";"";"2020-03-25 15:18:34"
10033;810;"Swift";"class Solution {
    func exclusiveTime(_ n: Int, _ logs: [String]) 
-> [Int] {
        
    }
}";"";"2020-03-25 15:18:34"
10034;810;"Ruby";"# @param {Integer} n
# @param {String[]} logs
# @return {Integer[]}
def exclusive_time(n, logs)
 
end";"";"2020-03-25 15:18:34"
10035;810;"Python";"class Solution(object):
    def exclusiveTime(self, n, logs):
        """"""
        :type n: int
        :type logs: List[str]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:34"
10036;811;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode Partition(ListNode head, int x) 
{
 
    }
}";"";"2020-03-25 15:18:34"
10037;811;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode partition(ListNode head, int x) 
{
 
    }
}";"";"2020-03-25 15:18:34"
10038;811;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn partition(head: Option<Box<ListNode>>, 
x: i32) -> Option<Box<ListNode>> {
        
    }
}";"";"2020-03-25 15:18:34"
10039;811;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
struct ListNode* partition(struct ListNode* head, 
int x){
 
}";"";"2020-03-25 15:18:34"
10040;811;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def partition(head: ListNode, x: Int): ListNode 
= {
 
    }
}";"";"2020-03-25 15:18:34"
10041;811;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func partition(head *ListNode, x int) *ListNode {
 
}";"";"2020-03-25 15:18:34"
10042;811;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun partition(head: ListNode?, x: Int): 
ListNode? {
 
    }
}";"";"2020-03-25 15:18:34"
10043;811;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def partition(self, head: ListNode, x: int) -> 
ListNode:";"";"2020-03-25 15:18:34"
10044;811;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @param {number} x
 * @return {ListNode}
 */
var partition = function(head, x) {
 
};";"";"2020-03-25 15:18:34"
10045;811;"PHP";"/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
class Solution {
 
    /**
     * @param ListNode $head
     * @param Integer $x
     * @return ListNode
     */
    function partition($head, $x) {
        
    }
}";"";"2020-03-25 15:18:34"
10046;811;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func partition(_ head: ListNode?, _ x: Int) -> 
ListNode? {
        
    }
}";"";"2020-03-25 15:18:34"
10047;811;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# @param {ListNode} head
# @param {Integer} x
# @return {ListNode}
def partition(head, x)
 
end";"";"2020-03-25 15:18:34"
10048;811;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def partition(self, head, x):
        """"""
        :type head: ListNode
        :type x: int
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:34"
10049;812;"C#";"public class Solution {
    public string ShortestPalindrome(string s) {
 
    }
}";"";"2020-03-25 15:18:34"
10050;812;"Java";"class Solution {
    public String shortestPalindrome(String s) {
 
    }
}";"";"2020-03-25 15:18:34"
10051;812;"Rust";"impl Solution {
    pub fn shortest_palindrome(s: String) -> String 
{
 
    }
}";"";"2020-03-25 15:18:34"
10052;812;"C";"char * shortestPalindrome(char * s){
 
}";"";"2020-03-25 15:18:34"
10053;812;"Scala";"object Solution {
    def shortestPalindrome(s: String): String = {
 
    }
}";"";"2020-03-25 15:18:34"
10054;812;"Go";"func shortestPalindrome(s string) string {
 
}";"";"2020-03-25 15:18:34"
10055;812;"Kotlin";"class Solution {
    fun shortestPalindrome(s: String): String {
 
    }
}";"";"2020-03-25 15:18:34"
10056;812;"Python3";"class Solution:
    def shortestPalindrome(self, s: str) -> str:";"";"2020-03-25 15:18:34"
10057;812;"JavaScript";"/**
 * @param {string} s
 * @return {string}
 */
var shortestPalindrome = function(s) {
 
};";"";"2020-03-25 15:18:34"
10058;812;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return String
     */
    function shortestPalindrome($s) {
 
    }
}";"";"2020-03-25 15:18:34"
10059;812;"Swift";"class Solution {
    func shortestPalindrome(_ s: String) -> String {
 
    }
}";"";"2020-03-25 15:18:34"
10060;812;"Ruby";"# @param {String} s
# @return {String}
def shortest_palindrome(s)
 
end";"";"2020-03-25 15:18:34"
10061;812;"Python";"class Solution(object):
    def shortestPalindrome(self, s):
        """"""
        :type s: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:34"
10062;813;"C#";"public class Solution {
    public bool IsEscapePossible(int[][] blocked, 
int[] source, int[] target) {
 
    }
}";"";"2020-03-25 15:18:34"
10063;813;"Java";"class Solution {
    public boolean isEscapePossible(int[][] blocked,
 int[] source, int[] target) {
 
    }
}";"";"2020-03-25 15:18:34"
10064;813;"C";"bool isEscapePossible(int** blocked, int 
blockedSize, int* blockedColSize, int* source, int 
sourceSize, int* target, int targetSize){
 
}";"";"2020-03-25 15:18:34"
10065;813;"Rust";"impl Solution {
    pub fn is_escape_possible(blocked: 
Vec<Vec<i32>>, source: Vec<i32>, target: Vec<i32>) 
-> bool {
        
    }
}";"";"2020-03-25 15:18:34"
10066;813;"Scala";"object Solution {
    def isEscapePossible(blocked: Array[Array[Int]],
 source: Array[Int], target: Array[Int]): Boolean = 
{
 
    }
}";"";"2020-03-25 15:18:34"
10067;813;"Go";"func isEscapePossible(blocked [][]int, source []int,
 target []int) bool {
 
}";"";"2020-03-25 15:18:34"
10068;813;"Kotlin";"class Solution {
    fun isEscapePossible(blocked: Array<IntArray>, 
source: IntArray, target: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:34"
10069;813;"Python3";"class Solution:
    def isEscapePossible(self, blocked: List[List
[int]], source: List[int], target: List[int]) -> 
bool:";"";"2020-03-25 15:18:34"
10070;813;"JavaScript";"/**
 * @param {number[][]} blocked
 * @param {number[]} source
 * @param {number[]} target
 * @return {boolean}
 */
var isEscapePossible = function(blocked, source, 
target) {
 
};";"";"2020-03-25 15:18:34"
10071;813;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $blocked
     * @param Integer[] $source
     * @param Integer[] $target
     * @return Boolean
     */
    function isEscapePossible($blocked, $source, 
$target) {
        
    }
}";"";"2020-03-25 15:18:34"
10072;813;"Swift";"class Solution {
    func isEscapePossible(_ blocked: [[Int]], _ 
source: [Int], _ target: [Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:34"
10073;813;"Ruby";"# @param {Integer[][]} blocked";"";"2020-03-25 15:18:34"
10074;813;"Python";"class Solution(object):
    def isEscapePossible(self, blocked, source, 
target):
        """"""
        :type blocked: List[List[int]]
        :type source: List[int]
        :type target: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:34"
10075;814;"C#";"public class Solution {
    public bool ContainsNearbyAlmostDuplicate(int[] 
nums, int k, int t) {
        
    }
}";"";"2020-03-25 15:18:34"
10076;814;"Java";"class Solution {
    public boolean containsNearbyAlmostDuplicate(int
[] nums, int k, int t) {
 
    }
}";"";"2020-03-25 15:18:34"
10077;814;"Rust";"impl Solution {
    pub fn contains_nearby_almost_duplicate(nums: 
Vec<i32>, k: i32, t: i32) -> bool {
 
    }
}";"";"2020-03-25 15:18:34"
10078;814;"C";"bool containsNearbyAlmostDuplicate(int* nums, int 
numsSize, int k, int t){
 
}";"";"2020-03-25 15:18:34"
10079;814;"Scala";"object Solution {
    def containsNearbyAlmostDuplicate(nums: Array
[Int], k: Int, t: Int): Boolean = {
 
    }
}";"";"2020-03-25 15:18:34"
10080;814;"Go";"func containsNearbyAlmostDuplicate(nums []int, k 
int, t int) bool {
 
}";"";"2020-03-25 15:18:34"
10081;814;"Kotlin";"class Solution {
    fun containsNearbyAlmostDuplicate(nums: 
IntArray, k: Int, t: Int): Boolean {
 
    }
}";"";"2020-03-25 15:18:34"
10082;814;"Python3";"class Solution:
    def containsNearbyAlmostDuplicate(self, nums: 
List[int], k: int, t: int) -> bool:";"";"2020-03-25 15:18:34"
10083;814;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} k
 * @param {number} t
 * @return {boolean}
 */
var containsNearbyAlmostDuplicate = function(nums, 
k, t) {
 
};";"";"2020-03-25 15:18:34"
10084;814;"PHP";"class Solution {";"";"2020-03-25 15:18:34"
10085;814;"Swift";"class Solution {
    func containsNearbyAlmostDuplicate(_ nums: [Int]
, _ k: Int, _ t: Int) -> Bool {
 
    }
}";"";"2020-03-25 15:18:34"
10086;814;"Ruby";"# @param {Integer[]} nums
# @param {Integer} k
# @param {Integer} t
# @return {Boolean}
def contains_nearby_almost_duplicate(nums, k, t)
    
end";"";"2020-03-25 15:18:34"
10087;814;"Python";"class Solution(object):
    def containsNearbyAlmostDuplicate(self, nums, k,
 t):
        """"""
        :type nums: List[int]
        :type k: int
        :type t: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:34"
10088;815;"C#";"public class Solution {
    public int CountPrimes(int n) {
 
    }
}";"";"2020-03-25 15:18:34"
10089;815;"Java";"class Solution {
    public int countPrimes(int n) {
 
    }
}";"";"2020-03-25 15:18:34"
10090;815;"C";"int countPrimes(int n){
 
}";"";"2020-03-25 15:18:34"
10091;815;"Rust";"impl Solution {
    pub fn count_primes(n: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:34"
10092;815;"Scala";"object Solution {
    def countPrimes(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:34"
10093;815;"Go";"func countPrimes(n int) int {
 
}";"";"2020-03-25 15:18:34"
10094;815;"Kotlin";"class Solution {
    fun countPrimes(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:34"
10095;815;"Python3";"class Solution:
    def countPrimes(self, n: int) -> int:";"";"2020-03-25 15:18:34"
10096;815;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var countPrimes = function(n) {
 
};";"";"2020-03-25 15:18:34"
10097;815;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function countPrimes($n) {
 
    }
}";"";"2020-03-25 15:18:34"
10098;815;"Swift";"class Solution {
    func countPrimes(_ n: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:34"
10099;815;"Ruby";"# @param {Integer} n
# @return {Integer}
def count_primes(n)
 
end";"";"2020-03-25 15:18:34"
10100;815;"Python";"class Solution(object):
    def countPrimes(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:34"
10101;816;"C#";"public class CustomStack {
 
    public CustomStack(int maxSize) {
 
    }
    
    public void Push(int x) {
 
    }
    
    public int Pop() {
 
    }
    
    public void Increment(int k, int val) {
 
    }
}
 
/**
 * Your CustomStack object will be instantiated and 
called as such:
 * CustomStack obj = new CustomStack(maxSize);
 * obj.Push(x);
 * int param_2 = obj.Pop();
 * obj.Increment(k,val);";"";"2020-03-25 15:18:35"
10102;816;"Java";"class CustomStack {
 
    public CustomStack(int maxSize) {
 
    }
    
    public void push(int x) {
 
    }
    
    public int pop() {
 
    }
    
    public void increment(int k, int val) {
 
    }
}
 
/**
 * Your CustomStack object will be instantiated and 
called as such:
 * CustomStack obj = new CustomStack(maxSize);
 * obj.push(x);
 * int param_2 = obj.pop();
 * obj.increment(k,val);";"";"2020-03-25 15:18:35"
10103;816;"Rust";"struct CustomStack {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl CustomStack {
 
    fn new(maxSize: i32) -> Self {
 
    }
    
    fn push(&self, x: i32) {
 
    }
    
    fn pop(&self) -> i32 {
 
    }
    
    fn increment(&self, k: i32, val: i32) {";"";"2020-03-25 15:18:35"
10104;816;"C";"typedef struct {
 
} CustomStack;
 
 
CustomStack* customStackCreate(int maxSize) {
 
}
 
void customStackPush(CustomStack* obj, int x) {
 
}
 
int customStackPop(CustomStack* obj) {
 
}
 
void customStackIncrement(CustomStack* obj, int k, 
int val) {
 
}
 
void customStackFree(CustomStack* obj) {
 
}
 ";"";"2020-03-25 15:18:35"
10105;816;"Scala";"class CustomStack(_maxSize: Int) {
 
    def push(x: Int) {
 
    }
 
    def pop(): Int = {
 
    }
 
    def increment(k: Int, `val`: Int) {
 
    }
 
}
 
/**
 * Your CustomStack object will be instantiated and 
called as such:
 * var obj = new CustomStack(maxSize)
 * obj.push(x)
 * var param_2 = obj.pop()
 * obj.increment(k,`val`)
 */";"";"2020-03-25 15:18:35"
10106;816;"Go";"type CustomStack struct {
 
}
 
 
func Constructor(maxSize int) CustomStack {
 
}
 
 
func (this *CustomStack) Push(x int)  {
 
}
 
 
func (this *CustomStack) Pop() int {
 
}
 
 
func (this *CustomStack) Increment(k int, val int)  
{
 
}
 
 ";"";"2020-03-25 15:18:35"
10107;816;"Kotlin";"class CustomStack(maxSize: Int) {
 
    fun push(x: Int) {
 
    }
 
    fun pop(): Int {
 
    }
 
    fun increment(k: Int, `val`: Int) {
 
    }
 
}
 
/**
 * Your CustomStack object will be instantiated and 
called as such:
 * var obj = CustomStack(maxSize)
 * obj.push(x)
 * var param_2 = obj.pop()
 * obj.increment(k,`val`)
 */";"";"2020-03-25 15:18:35"
10108;816;"Python3";"class CustomStack:
 
    def __init__(self, maxSize: int):
 
 
    def push(self, x: int) -> None:
 
 
    def pop(self) -> int:
 
 
    def increment(self, k: int, val: int) -> None:
 
 
 
# Your CustomStack object will be instantiated and 
called as such:
# obj = CustomStack(maxSize)
# obj.push(x)
# param_2 = obj.pop()
# obj.increment(k,val)";"";"2020-03-25 15:18:35"
10109;816;"JavaScript";"/**
 * @param {number} maxSize
 */
var CustomStack = function(maxSize) {
 
};
 
/** 
 * @param {number} x
 * @return {void}
 */
CustomStack.prototype.push = function(x) {
 
};
 
/**
 * @return {number}
 */
CustomStack.prototype.pop = function() {
 
};
 
/** 
 * @param {number} k 
 * @param {number} val
 * @return {void}";"";"2020-03-25 15:18:35"
10110;816;"PHP";"class CustomStack {
    /**
     * @param Integer $maxSize
     */
    function __construct($maxSize) {
        
    }
  
    /**
     * @param Integer $x
     * @return NULL
     */
    function push($x) {
        
    }
  
    /**
     * @return Integer
     */
    function pop() {
        
    }
  
    /**
     * @param Integer $k
     * @param Integer $val";"";"2020-03-25 15:18:35"
10111;816;"Swift";"class CustomStack {
 
    init(_ maxSize: Int) {
        
    }
    
    func push(_ x: Int) {
        
    }
    
    func pop() -> Int {
        
    }
    
    func increment(_ k: Int, _ val: Int) {
        
    }
}
 
/**
 * Your CustomStack object will be instantiated and 
called as such:
 * let obj = CustomStack(maxSize)
 * obj.push(x)
 * let ret_2: Int = obj.pop()
 * obj.increment(k, val)";"";"2020-03-25 15:18:35"
10112;816;"Ruby";"class CustomStack
 
=begin
    :type max_size: Integer
=end
    def initialize(max_size)
 
    end
 
 
=begin
    :type x: Integer
    :rtype: Void
=end
    def push(x)
 
    end
 
 
=begin
    :rtype: Integer
=end
    def pop()
 
    end
 ";"";"2020-03-25 15:18:35"
10113;816;"Python";"class CustomStack(object):
 
    def __init__(self, maxSize):
        """"""
        :type maxSize: int
        """"""
 
 
    def push(self, x):
        """"""
        :type x: int
        :rtype: None
        """"""
 
 
    def pop(self):
        """"""
        :rtype: int
        """"""
 
 
    def increment(self, k, val):
        """"""
        :type k: int
        :type val: int
        :rtype: None";"";"2020-03-25 15:18:35"
10114;817;"C#";"public class Solution {
    public int[] DrawLine(int length, int w, int x1,
 int x2, int y) {
 
    }
}";"";"2020-03-25 15:18:35"
10115;817;"Java";"class Solution {
    public int[] drawLine(int length, int w, int x1,
 int x2, int y) {
 
    }
}";"";"2020-03-25 15:18:35"
10116;817;"Rust";"impl Solution {
    pub fn draw_line(length: i32, w: i32, x1: i32, 
x2: i32, y: i32) -> Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:35"
10117;817;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* drawLine(int length, int w, int x1, int x2, 
int y, int* returnSize){
 
}";"";"2020-03-25 15:18:35"
10118;817;"Scala";"object Solution {
    def drawLine(length: Int, w: Int, x1: Int, x2: 
Int, y: Int): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:35"
10119;817;"Go";"func drawLine(length int, w int, x1 int, x2 int, y 
int) []int {
 
}";"";"2020-03-25 15:18:35"
10120;817;"Kotlin";"class Solution {
    fun drawLine(length: Int, w: Int, x1: Int, x2: 
Int, y: Int): IntArray {
 
    }
}";"";"2020-03-25 15:18:35"
10121;817;"Python3";"class Solution:
    def drawLine(self, length: int, w: int, x1: int,
 x2: int, y: int) -> List[int]:";"";"2020-03-25 15:18:35"
10122;817;"JavaScript";"/**
 * @param {number} length
 * @param {number} w
 * @param {number} x1
 * @param {number} x2
 * @param {number} y
 * @return {number[]}
 */
var drawLine = function(length, w, x1, x2, y) {
 
};";"";"2020-03-25 15:18:35"
10123;817;"PHP";"class Solution {
 
    /**
     * @param Integer $length
     * @param Integer $w
     * @param Integer $x1
     * @param Integer $x2
     * @param Integer $y
     * @return Integer[]
     */
    function drawLine($length, $w, $x1, $x2, $y) {
 
    }
}";"";"2020-03-25 15:18:35"
10124;817;"Swift";"class Solution {
    func drawLine(_ length: Int, _ w: Int, _ x1: 
Int, _ x2: Int, _ y: Int) -> [Int] {
 
    }
}";"";"2020-03-25 15:18:35"
10125;817;"Ruby";"# @param {Integer} length
# @param {Integer} w
# @param {Integer} x1
# @param {Integer} x2
# @param {Integer} y
# @return {Integer[]}
def draw_line(length, w, x1, x2, y)
 
end";"";"2020-03-25 15:18:35"
10126;817;"Python";"class Solution(object):
    def drawLine(self, length, w, x1, x2, y):
        """"""
        :type length: int
        :type w: int
        :type x1: int
        :type x2: int
        :type y: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:35"
10127;818;"C#";"public class Solution {
    public int Tribonacci(int n) {
 
    }
}";"";"2020-03-25 15:18:35"
10128;818;"Java";"class Solution {
    public int tribonacci(int n) {
 
    }
}";"";"2020-03-25 15:18:35"
10129;818;"Rust";"impl Solution {
    pub fn tribonacci(n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:35"
10130;818;"C";"int tribonacci(int n){
 
}";"";"2020-03-25 15:18:35"
10131;818;"Scala";"object Solution {
    def tribonacci(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:35"
10132;818;"Go";"func tribonacci(n int) int {
 
}";"";"2020-03-25 15:18:35"
10133;818;"Kotlin";"class Solution {
    fun tribonacci(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:35"
10134;818;"Python3";"class Solution:
    def tribonacci(self, n: int) -> int:";"";"2020-03-25 15:18:35"
10135;818;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var tribonacci = function(n) {
 
};";"";"2020-03-25 15:18:35"
10136;818;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function tribonacci($n) {
        
    }
}";"";"2020-03-25 15:18:35"
10137;818;"Swift";"class Solution {
    func tribonacci(_ n: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:35"
10138;818;"Ruby";"# @param {Integer} n
# @return {Integer}
def tribonacci(n)
 
end";"";"2020-03-25 15:18:35"
10139;818;"Python";"class Solution(object):
    def tribonacci(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:35"
10140;819;"C#";"public class Solution {
    public int NumMagicSquaresInside(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:35"
10141;819;"Java";"class Solution {
    public int numMagicSquaresInside(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:35"
10142;819;"C";"int numMagicSquaresInside(int** grid, int gridSize, 
int* gridColSize){
 
}";"";"2020-03-25 15:18:35"
10143;819;"Rust";"impl Solution {
    pub fn num_magic_squares_inside(grid: 
Vec<Vec<i32>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:35"
10144;819;"Scala";"object Solution {
    def numMagicSquaresInside(grid: Array[Array[Int]
]): Int = {
 
    }
}";"";"2020-03-25 15:18:35"
10145;819;"Go";"func numMagicSquaresInside(grid [][]int) int {
 
}";"";"2020-03-25 15:18:35"
10146;819;"Kotlin";"class Solution {
    fun numMagicSquaresInside(grid: Array<IntArray>)
: Int {
 
    }
}";"";"2020-03-25 15:18:35"
10147;819;"Python3";"class Solution:
    def numMagicSquaresInside(self, grid: List[List
[int]]) -> int:";"";"2020-03-25 15:18:35"
10148;819;"JavaScript";"/**
 * @param {number[][]} grid
 * @return {number}
 */
var numMagicSquaresInside = function(grid) {
 
};";"";"2020-03-25 15:18:35"
10149;819;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $grid
     * @return Integer
     */
    function numMagicSquaresInside($grid) {
        
    }
}";"";"2020-03-25 15:18:35"
10150;819;"Swift";"class Solution {
    func numMagicSquaresInside(_ grid: [[Int]]) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:35"
10151;819;"Ruby";"# @param {Integer[][]} grid";"";"2020-03-25 15:18:35"
10152;819;"Python";"class Solution(object):
    def numMagicSquaresInside(self, grid):
        """"""
        :type grid: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:35"
10153;820;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int MaxPathSum(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:35"
10154;820;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int maxPathSum(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:35"
10155;820;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int maxPathSum(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:35"
10156;820;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn max_path_sum(root: 
Option<Rc<RefCell<TreeNode>>>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:35"
10157;820;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def maxPathSum(root: TreeNode): Int = {
 
    }
}";"";"2020-03-25 15:18:35"
10158;820;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func maxPathSum(root *TreeNode) int {
 
}";"";"2020-03-25 15:18:35"
10159;820;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun maxPathSum(root: TreeNode?): Int {
 
    }
}";"";"2020-03-25 15:18:35"
10160;820;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def maxPathSum(self, root: TreeNode) -> int:";"";"2020-03-25 15:18:35"
10161;820;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var maxPathSum = function(root) {
 
};";"";"2020-03-25 15:18:35"
10162;820;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer
     */
    function maxPathSum($root) {
 
    }
}";"";"2020-03-25 15:18:35"
10163;820;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func maxPathSum(_ root: TreeNode?) -> Int {
 
    }
}";"";"2020-03-25 15:18:35"
10164;820;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer}
def max_path_sum(root)
 
end";"";"2020-03-25 15:18:35"
10165;820;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def maxPathSum(self, root):
        """"""
        :type root: TreeNode
        :rtype: int
        """"""";"";"2020-03-25 15:18:35"
10166;821;"MySQL";"# Write your MySQL query statement below";"";"2020-03-25 15:18:35"
10167;821;"MS SQL Server";"/* Write your T-SQL query statement below */";"";"2020-03-25 15:18:35"
10168;821;"Oracle";"/* Write your PL/SQL query statement below */";"";"2020-03-25 15:18:35"
10169;822;"C#";"public class Solution {
    public int LargestIsland(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:35"
10170;822;"Java";"class Solution {
    public int largestIsland(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:35"
10171;822;"Rust";"impl Solution {
    pub fn largest_island(grid: Vec<Vec<i32>>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:35"
10172;822;"C";"int largestIsland(int** grid, int gridSize, int* 
gridColSize){
 
}";"";"2020-03-25 15:18:35"
10173;822;"Scala";"object Solution {
    def largestIsland(grid: Array[Array[Int]]): Int 
= {
 
    }
}";"";"2020-03-25 15:18:35"
10174;822;"Go";"func largestIsland(grid [][]int) int {
 
}";"";"2020-03-25 15:18:35"
10175;822;"Kotlin";"class Solution {
    fun largestIsland(grid: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:35"
10176;822;"Python3";"class Solution:
    def largestIsland(self, grid: List[List[int]]) 
-> int:";"";"2020-03-25 15:18:35"
10177;822;"JavaScript";"/**
 * @param {number[][]} grid
 * @return {number}
 */
var largestIsland = function(grid) {
 
};";"";"2020-03-25 15:18:35"
10178;822;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $grid
     * @return Integer
     */
    function largestIsland($grid) {
        
    }
}";"";"2020-03-25 15:18:35"
10179;822;"Swift";"class Solution {
    func largestIsland(_ grid: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:35"
10180;822;"Ruby";"# @param {Integer[][]} grid
# @return {Integer}
def largest_island(grid)
 
end";"";"2020-03-25 15:18:35"
10181;822;"Python";"class Solution(object):
    def largestIsland(self, grid):
        """"""
        :type grid: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:35"
10182;823;"C#";"public class MajorityChecker {
 
    public MajorityChecker(int[] arr) {
 
    }
    
    public int Query(int left, int right, int 
threshold) {
 
    }
}
 
/**
 * Your MajorityChecker object will be instantiated 
and called as such:
 * MajorityChecker obj = new MajorityChecker(arr);
 * int param_1 = obj.Query(left,right,threshold);
 */";"";"2020-03-25 15:18:35"
10183;823;"Java";"class MajorityChecker {
 
    public MajorityChecker(int[] arr) {
 
    }
    
    public int query(int left, int right, int 
threshold) {
 
    }
}
 
/**
 * Your MajorityChecker object will be instantiated 
and called as such:
 * MajorityChecker obj = new MajorityChecker(arr);
 * int param_1 = obj.query(left,right,threshold);
 */";"";"2020-03-25 15:18:35"
10184;823;"Rust";"struct MajorityChecker {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl MajorityChecker {
 
    fn new(arr: Vec<i32>) -> Self {
        
    }
    
    fn query(&self, left: i32, right: i32, 
threshold: i32) -> i32 {
        
    }
}
 
/**
 * Your MajorityChecker object will be instantiated 
and called as such:";"";"2020-03-25 15:18:35"
10185;823;"C";"typedef struct {
    
} MajorityChecker;
 
 
MajorityChecker* majorityCheckerCreate(int* arr, 
int arrSize) {
    
}
 
int majorityCheckerQuery(MajorityChecker* obj, int 
left, int right, int threshold) {
  
}
 
void majorityCheckerFree(MajorityChecker* obj) {
    
}
 
/**
 * Your MajorityChecker struct will be instantiated 
and called as such:
 * MajorityChecker* obj = majorityCheckerCreate(arr,
 arrSize);
 * int param_1 = majorityCheckerQuery(obj, left, 
right, threshold);";"";"2020-03-25 15:18:35"
10186;823;"Scala";"class MajorityChecker(_arr: Array[Int]) {
 
    def query(left: Int, right: Int, threshold: Int)
: Int = {
 
    }
 
}
 
/**
 * Your MajorityChecker object will be instantiated 
and called as such:
 * var obj = new MajorityChecker(arr)
 * var param_1 = obj.query(left,right,threshold)
 */";"";"2020-03-25 15:18:35"
10187;823;"Go";"type MajorityChecker struct {
 
}
 
 
func Constructor(arr []int) MajorityChecker {
 
}
 
 
func (this *MajorityChecker) Query(left int, right 
int, threshold int) int {
 
}
 
 
/**
 * Your MajorityChecker object will be instantiated 
and called as such:
 * obj := Constructor(arr);
 * param_1 := obj.Query(left,right,threshold);
 */";"";"2020-03-25 15:18:35"
10188;823;"Kotlin";"class MajorityChecker(arr: IntArray) {
 
    fun query(left: Int, right: Int, threshold: Int)
: Int {
 
    }
 
}
 
/**
 * Your MajorityChecker object will be instantiated 
and called as such:
 * var obj = MajorityChecker(arr)
 * var param_1 = obj.query(left,right,threshold)
 */";"";"2020-03-25 15:18:35"
10189;823;"Python3";"class MajorityChecker:
 
    def __init__(self, arr: List[int]):
        
 
    def query(self, left: int, right: int, 
threshold: int) -> int:
        
 
 
# Your MajorityChecker object will be instantiated 
and called as such:
# obj = MajorityChecker(arr)
# param_1 = obj.query(left,right,threshold)";"";"2020-03-25 15:18:35"
10190;823;"JavaScript";"/**
 * @param {number[]} arr
 */
var MajorityChecker = function(arr) {
 
};
 
/** 
 * @param {number} left 
 * @param {number} right 
 * @param {number} threshold
 * @return {number}
 */
MajorityChecker.prototype.query = function(left, 
right, threshold) {
 
};
 
/**
 * Your MajorityChecker object will be instantiated 
and called as such:
 * var obj = new MajorityChecker(arr)
 * var param_1 = obj.query(left,right,threshold)
 */";"";"2020-03-25 15:18:35"
10191;823;"PHP";"class MajorityChecker {";"";"2020-03-25 15:18:35"
10192;823;"Swift";"class MajorityChecker {
 
    init(_ arr: [Int]) {
        
    }
    
    func query(_ left: Int, _ right: Int, _ 
threshold: Int) -> Int {
        
    }
}
 
/**
 * Your MajorityChecker object will be instantiated 
and called as such:
 * let obj = MajorityChecker(arr)
 * let ret_1: Int = obj.query(left, right, 
threshold)
 */";"";"2020-03-25 15:18:35"
10193;823;"Ruby";"class MajorityChecker
 
=begin
    :type arr: Integer[]
=end
    def initialize(arr)
 
    end
 
 
=begin
    :type left: Integer
    :type right: Integer
    :type threshold: Integer
    :rtype: Integer
=end
    def query(left, right, threshold)
 
    end
 
 
end
 
# Your MajorityChecker object will be instantiated 
and called as such:
# obj = MajorityChecker.new(arr)";"";"2020-03-25 15:18:35"
10194;823;"Python";"class MajorityChecker(object):
 
    def __init__(self, arr):
        """"""
        :type arr: List[int]
        """"""
        
 
    def query(self, left, right, threshold):
        """"""
        :type left: int
        :type right: int
        :type threshold: int
        :rtype: int
        """"""
        
 
 
# Your MajorityChecker object will be instantiated 
and called as such:
# obj = MajorityChecker(arr)
# param_1 = obj.query(left,right,threshold)";"";"2020-03-25 15:18:35"
10195;824;"C#";"public class Solution {
    public int MaxSubArray(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:35"
10196;824;"Java";"class Solution {
    public int maxSubArray(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:35"
10197;824;"C";"int maxSubArray(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:35"
10198;824;"Rust";"impl Solution {
    pub fn max_sub_array(nums: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:35"
10199;824;"Scala";"object Solution {
    def maxSubArray(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:35"
10200;824;"Go";"func maxSubArray(nums []int) int {
 
}";"";"2020-03-25 15:18:35"
10201;824;"Kotlin";"class Solution {
    fun maxSubArray(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:35"
10202;824;"Python3";"class Solution:
    def maxSubArray(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:35"
10203;824;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var maxSubArray = function(nums) {
 
};";"";"2020-03-25 15:18:35"
10204;824;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function maxSubArray($nums) {
 
    }
}";"";"2020-03-25 15:18:35"
10205;824;"Swift";"class Solution {
    func maxSubArray(_ nums: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:35"
10206;824;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def max_sub_array(nums)
 
end";"";"2020-03-25 15:18:35"
10207;824;"Python";"class Solution(object):
    def maxSubArray(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:35"
10208;825;"C#";"public class Solution {
    public int RobotSim(int[] commands, int[][] 
obstacles) {
 
    }
}";"";"2020-03-25 15:18:35"
10209;825;"Java";"class Solution {
    public int robotSim(int[] commands, int[][] 
obstacles) {
 
    }
}";"";"2020-03-25 15:18:35"
10210;825;"Rust";"impl Solution {
    pub fn robot_sim(commands: Vec<i32>, obstacles: 
Vec<Vec<i32>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:35"
10211;825;"C";"int robotSim(int* commands, int commandsSize, int** 
obstacles, int obstaclesSize, int* obstaclesColSize)
{
 
}";"";"2020-03-25 15:18:35"
10212;825;"Scala";"object Solution {
    def robotSim(commands: Array[Int], obstacles: 
Array[Array[Int]]): Int = {
 
    }
}";"";"2020-03-25 15:18:35"
10213;825;"Python3";"class Solution:
    def robotSim(self, commands: List[int], 
obstacles: List[List[int]]) -> int:";"";"2020-03-25 15:18:35"
10214;825;"JavaScript";"/**
 * @param {number[]} commands
 * @param {number[][]} obstacles
 * @return {number}
 */
var robotSim = function(commands, obstacles) {
 
};";"";"2020-03-25 15:18:35"
10215;825;"Go";"func robotSim(commands []int, obstacles [][]int) 
int {
 
}";"";"2020-03-25 15:18:35"
10216;825;"PHP";"class Solution {";"";"2020-03-25 15:18:35"
10217;825;"Swift";"class Solution {
    func robotSim(_ commands: [Int], _ obstacles: [
[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:35"
10218;825;"Ruby";"# @param {Integer[]} commands
# @param {Integer[][]} obstacles
# @return {Integer}
def robot_sim(commands, obstacles)
 
end";"";"2020-03-25 15:18:35"
10219;825;"Kotlin";"class Solution {
    fun robotSim(commands: IntArray, obstacles: 
Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:35"
10220;826;"C#";"public class Solution {
    public string[] MaxRectangle(string[] words) {
 
    }
}";"";"2020-03-25 15:18:35"
10221;826;"Java";"class Solution {
    public String[] maxRectangle(String[] words) {
 
    }
}";"";"2020-03-25 15:18:35"
10222;826;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char** maxRectangle(char** words, int wordsSize, 
int* returnSize){
 
}";"";"2020-03-25 15:18:35"
10223;826;"Rust";"impl Solution {
    pub fn max_rectangle(words: Vec<String>) -> 
Vec<String> {
 
    }
}";"";"2020-03-25 15:18:35"
10224;826;"Scala";"object Solution {
    def maxRectangle(words: Array[String]): Array
[String] = {
 
    }
}";"";"2020-03-25 15:18:35"
10225;826;"Go";"func maxRectangle(words []string) []string {
 
}";"";"2020-03-25 15:18:35"
10226;826;"Kotlin";"class Solution {
    fun maxRectangle(words: Array<String>): 
Array<String> {
 
    }
}";"";"2020-03-25 15:18:35"
10227;826;"Python3";"class Solution:
    def maxRectangle(self, words: List[str]) -> List
[str]:";"";"2020-03-25 15:18:35"
10228;826;"JavaScript";"/**
 * @param {string[]} words
 * @return {string[]}
 */
var maxRectangle = function(words) {
 
};";"";"2020-03-25 15:18:35"
10229;826;"PHP";"class Solution {
 
    /**
     * @param String[] $words
     * @return String[]
     */
    function maxRectangle($words) {
 
    }
}";"";"2020-03-25 15:18:35"
10230;826;"Swift";"class Solution {
    func maxRectangle(_ words: [String]) -> [String]
 {
 
    }
}";"";"2020-03-25 15:18:35"
10231;826;"Ruby";"# @param {String[]} words";"";"2020-03-25 15:18:35"
10232;826;"Python";"class Solution(object):
    def maxRectangle(self, words):
        """"""
        :type words: List[str]
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:35"
10233;827;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode SubtreeWithAllDeepest(TreeNode 
root) {
 
    }
}";"";"2020-03-25 15:18:35"
10234;827;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode subtreeWithAllDeepest(TreeNode 
root) {
 
    }
}";"";"2020-03-25 15:18:35"
10235;827;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* subtreeWithAllDeepest(struct 
TreeNode* root){
 
}";"";"2020-03-25 15:18:35"
10236;827;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn subtree_with_all_deepest(root: 
Option<Rc<RefCell<TreeNode>>>) -> 
Option<Rc<RefCell<TreeNode>>> {
        
    }";"";"2020-03-25 15:18:35"
10237;827;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def subtreeWithAllDeepest(root: TreeNode): 
TreeNode = {
 
    }
}";"";"2020-03-25 15:18:35"
10238;827;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func subtreeWithAllDeepest(root *TreeNode) 
*TreeNode {
 
}";"";"2020-03-25 15:18:35"
10239;827;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun subtreeWithAllDeepest(root: TreeNode?): 
TreeNode? {
 
    }
}";"";"2020-03-25 15:18:35"
10240;827;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def subtreeWithAllDeepest(self, root: TreeNode) 
-> TreeNode:";"";"2020-03-25 15:18:35"
10241;827;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {TreeNode}
 */
var subtreeWithAllDeepest = function(root) {
 
};";"";"2020-03-25 15:18:35"
10242;827;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return TreeNode
     */
    function subtreeWithAllDeepest($root) {
        
    }
}";"";"2020-03-25 15:18:35"
10243;827;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func subtreeWithAllDeepest(_ root: TreeNode?) 
-> TreeNode? {
        
    }
}";"";"2020-03-25 15:18:35"
10244;827;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:35"
10245;827;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def subtreeWithAllDeepest(self, root):
        """"""
        :type root: TreeNode
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:35"
10246;828;"C#";"public class Solution {
    public int FindNumberOfLIS(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:35"
10247;828;"Java";"class Solution {
    public int findNumberOfLIS(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:35"
10248;828;"C";"int findNumberOfLIS(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:35"
10249;828;"Rust";"impl Solution {
    pub fn find_number_of_lis(nums: Vec<i32>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:35"
10250;828;"Scala";"object Solution {
    def findNumberOfLIS(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:35"
10251;828;"Go";"func findNumberOfLIS(nums []int) int {
 
}";"";"2020-03-25 15:18:35"
10252;828;"Kotlin";"class Solution {
    fun findNumberOfLIS(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:35"
10253;828;"Python3";"class Solution:
    def findNumberOfLIS(self, nums: List[int]) -> 
int:";"";"2020-03-25 15:18:35"
10254;828;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var findNumberOfLIS = function(nums) {
 
};";"";"2020-03-25 15:18:35"
10255;828;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function findNumberOfLIS($nums) {
        
    }
}";"";"2020-03-25 15:18:35"
10256;828;"Swift";"class Solution {
    func findNumberOfLIS(_ nums: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:35"
10257;828;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:18:35"
10258;828;"Python";"class Solution(object):
    def findNumberOfLIS(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:35"
10259;829;"C#";"/*
// Definition for a Node.
public class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;
 
    public Node() {}
 
    public Node(int _val) {
        val = _val;
    }
 
    public Node(int _val, Node _left, Node _right, 
Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
}
*/
public class Solution {
    public Node Connect(Node root) {
        ";"";"2020-03-25 15:18:35"
10260;829;"Java";"/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;
 
    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }
 
    public Node(int _val, Node _left, Node _right, 
Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/
class Solution {
    public Node connect(Node root) {
        ";"";"2020-03-25 15:18:35"
10261;829;"Python3";"""""""
# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = 
None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
""""""
class Solution:
    def connect(self, root: 'Node') -> 'Node':";"";"2020-03-25 15:18:35"
10262;829;"JavaScript";"/**
 * // Definition for a Node.
 * function Node(val, left, right, next) {
 *    this.val = val === undefined ? null : val;
 *    this.left = left === undefined ? null : left;
 *    this.right = right === undefined ? null : 
right;
 *    this.next = next === undefined ? null : next;
 * };
 */
/**
 * @param {Node} root
 * @return {Node}
 */
var connect = function(root) {
    
};";"";"2020-03-25 15:18:35"
10263;829;"Go";"/**";"";"2020-03-25 15:18:35"
10264;829;"Swift";"/**
 * Definition for a Node.
 * public class Node {
 *     public var val: Int
 *     public var left: Node?
 *     public var right: Node?
 *     public var next: Node?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *         self.next = nil
 *     }
 * }
 */
 
class Solution {
    func connect(_ root: Node?) -> Node? {
        
    }
}";"";"2020-03-25 15:18:35"
10265;829;"Python";"""""""
# Definition for a Node.
class Node(object):
    def __init__(self, val=0, left=None, right=None,
 next=None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
""""""
class Solution(object):
    def connect(self, root):
        """"""
        :type root: Node
        :rtype: Node
        """"""";"";"2020-03-25 15:18:35"
10266;830;"C#";"public class Solution {
    public int MaxValue(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:35"
10267;830;"Java";"class Solution {
    public int maxValue(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:35"
10268;830;"Rust";"impl Solution {
    pub fn max_value(grid: Vec<Vec<i32>>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:35"
10269;830;"C";"int maxValue(int** grid, int gridSize, int* 
gridColSize){
 
}";"";"2020-03-25 15:18:35"
10270;830;"Scala";"object Solution {
    def maxValue(grid: Array[Array[Int]]): Int = {
 
    }
}";"";"2020-03-25 15:18:35"
10271;830;"Go";"func maxValue(grid [][]int) int {
 
}";"";"2020-03-25 15:18:35"
10272;830;"Kotlin";"class Solution {
    fun maxValue(grid: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:35"
10273;830;"Python3";"class Solution:
    def maxValue(self, grid: List[List[int]]) -> 
int:";"";"2020-03-25 15:18:35"
10274;830;"JavaScript";"/**
 * @param {number[][]} grid
 * @return {number}
 */
var maxValue = function(grid) {
 
};";"";"2020-03-25 15:18:35"
10275;830;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $grid
     * @return Integer
     */
    function maxValue($grid) {
 
    }
}";"";"2020-03-25 15:18:35"
10276;830;"Swift";"class Solution {
    func maxValue(_ grid: [[Int]]) -> Int {
 
    }
}";"";"2020-03-25 15:18:35"
10277;830;"Ruby";"# @param {Integer[][]} grid
# @return {Integer}
def max_value(grid)
 
end";"";"2020-03-25 15:18:35"
10278;830;"Python";"class Solution(object):
    def maxValue(self, grid):
        """"""
        :type grid: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:35"
10279;831;"C#";"public class Solution {
    public int MaxProfit(int k, int[] prices) {
 
    }
}";"";"2020-03-25 15:18:35"
10280;831;"Java";"class Solution {
    public int maxProfit(int k, int[] prices) {
 
    }
}";"";"2020-03-25 15:18:35"
10281;831;"Rust";"impl Solution {
    pub fn max_profit(k: i32, prices: Vec<i32>) -> 
i32 {
 
    }
}";"";"2020-03-25 15:18:35"
10282;831;"C";"int maxProfit(int k, int* prices, int pricesSize){
 
}";"";"2020-03-25 15:18:35"
10283;831;"Scala";"object Solution {
    def maxProfit(k: Int, prices: Array[Int]): Int 
= {
 
    }
}";"";"2020-03-25 15:18:35"
10284;831;"Go";"func maxProfit(k int, prices []int) int {
 
}";"";"2020-03-25 15:18:35"
10285;831;"Kotlin";"class Solution {
    fun maxProfit(k: Int, prices: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:35"
10286;831;"Python3";"class Solution:
    def maxProfit(self, k: int, prices: List[int]) 
-> int:";"";"2020-03-25 15:18:35"
10287;831;"JavaScript";"/**
 * @param {number} k
 * @param {number[]} prices
 * @return {number}
 */
var maxProfit = function(k, prices) {
 
};";"";"2020-03-25 15:18:35"
10288;831;"PHP";"class Solution {
 
    /**
     * @param Integer $k
     * @param Integer[] $prices
     * @return Integer
     */
    function maxProfit($k, $prices) {
 
    }
}";"";"2020-03-25 15:18:35"
10289;831;"Swift";"class Solution {
    func maxProfit(_ k: Int, _ prices: [Int]) -> 
Int {
 
    }
}";"";"2020-03-25 15:18:35"
10290;831;"Ruby";"# @param {Integer} k
# @param {Integer[]} prices
# @return {Integer}
def max_profit(k, prices)
 
end";"";"2020-03-25 15:18:35"
10291;831;"Python";"class Solution(object):
    def maxProfit(self, k, prices):
        """"""
        :type k: int
        :type prices: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:35"
10292;832;"C#";"public class Solution {
    public IList<int> FilterRestaurants(int[][] 
restaurants, int veganFriendly, int maxPrice, int 
maxDistance) {
        
    }
}";"";"2020-03-25 15:18:35"
10293;832;"Java";"class Solution {
    public List<Integer> filterRestaurants(int[][] 
restaurants, int veganFriendly, int maxPrice, int 
maxDistance) {
 
    }
}";"";"2020-03-25 15:18:35"
10294;832;"Rust";"impl Solution {
    pub fn filter_restaurants(restaurants: 
Vec<Vec<i32>>, vegan_friendly: i32, max_price: i32, 
max_distance: i32) -> Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:35"
10295;832;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* filterRestaurants(int** restaurants, int 
restaurantsSize, int* restaurantsColSize, int 
veganFriendly, int maxPrice, int maxDistance, int* 
returnSize){
 
}";"";"2020-03-25 15:18:35"
10296;832;"Scala";"object Solution {
    def filterRestaurants(restaurants: Array[Array
[Int]], veganFriendly: Int, maxPrice: Int, 
maxDistance: Int): List[Int] = {
 
    }
}";"";"2020-03-25 15:18:35"
10297;832;"Go";"func filterRestaurants(restaurants [][]int, 
veganFriendly int, maxPrice int, maxDistance int) []
int {
 
}";"";"2020-03-25 15:18:35"
10298;832;"Kotlin";"class Solution {
    fun filterRestaurants(restaurants: 
Array<IntArray>, veganFriendly: Int, maxPrice: Int, 
maxDistance: Int): List<Int> {
 
    }
}";"";"2020-03-25 15:18:35"
10299;832;"Python3";"class Solution:
    def filterRestaurants(self, restaurants: List
[List[int]], veganFriendly: int, maxPrice: int, 
maxDistance: int) -> List[int]:";"";"2020-03-25 15:18:35"
10300;832;"JavaScript";"/**
 * @param {number[][]} restaurants
 * @param {number} veganFriendly
 * @param {number} maxPrice
 * @param {number} maxDistance
 * @return {number[]}
 */
var filterRestaurants = function(restaurants, 
veganFriendly, maxPrice, maxDistance) {
    
};";"";"2020-03-25 15:18:35"
10301;832;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $restaurants
     * @param Integer $veganFriendly
     * @param Integer $maxPrice
     * @param Integer $maxDistance
     * @return Integer[]
     */
    function filterRestaurants($restaurants, 
$veganFriendly, $maxPrice, $maxDistance) {
 
    }
}";"";"2020-03-25 15:18:35"
10302;832;"Swift";"class Solution {
    func filterRestaurants(_ restaurants: [[Int]], 
_ veganFriendly: Int, _ maxPrice: Int, _ 
maxDistance: Int) -> [Int] {
 
    }
}";"";"2020-03-25 15:18:35"
10303;832;"Ruby";"# @param {Integer[][]} restaurants
# @param {Integer} vegan_friendly
# @param {Integer} max_price
# @param {Integer} max_distance
# @return {Integer[]}
def filter_restaurants(restaurants, vegan_friendly, 
max_price, max_distance)
    
end";"";"2020-03-25 15:18:35"
10304;832;"Python";"class Solution(object):
    def filterRestaurants(self, restaurants, 
veganFriendly, maxPrice, maxDistance):
        """"""
        :type restaurants: List[List[int]]
        :type veganFriendly: int
        :type maxPrice: int
        :type maxDistance: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:35"
10305;833;"C#";"public class Solution {
    public int RepeatedStringMatch(string A, string 
B) {
 
    }
}";"";"2020-03-25 15:18:35"
10306;833;"Java";"class Solution {
    public int repeatedStringMatch(String A, String 
B) {
 
    }
}";"";"2020-03-25 15:18:35"
10307;833;"Rust";"impl Solution {
    pub fn repeated_string_match(a: String, b: 
String) -> i32 {
        
    }
}";"";"2020-03-25 15:18:35"
10308;833;"C";"int repeatedStringMatch(char * A, char * B){
 
}";"";"2020-03-25 15:18:35"
10309;833;"Scala";"object Solution {
    def repeatedStringMatch(A: String, B: String): 
Int = {
 
    }
}";"";"2020-03-25 15:18:35"
10310;833;"Go";"func repeatedStringMatch(A string, B string) int {
 
}";"";"2020-03-25 15:18:35"
10311;833;"Kotlin";"class Solution {
    fun repeatedStringMatch(A: String, B: String): 
Int {
 
    }
}";"";"2020-03-25 15:18:35"
10312;833;"Python3";"class Solution:
    def repeatedStringMatch(self, A: str, B: str) 
-> int:";"";"2020-03-25 15:18:35"
10313;833;"JavaScript";"/**
 * @param {string} A
 * @param {string} B
 * @return {number}
 */
var repeatedStringMatch = function(A, B) {
 
};";"";"2020-03-25 15:18:35"
10314;833;"PHP";"class Solution {
 
    /**
     * @param String $A
     * @param String $B
     * @return Integer
     */
    function repeatedStringMatch($A, $B) {
        
    }
}";"";"2020-03-25 15:18:35"
10315;833;"Swift";"class Solution {
    func repeatedStringMatch(_ A: String, _ B: 
String) -> Int {
        
    }
}";"";"2020-03-25 15:18:35"
10316;833;"Ruby";"# @param {String} a
# @param {String} b
# @return {Integer}
def repeated_string_match(a, b)
 
end";"";"2020-03-25 15:18:35"
10317;833;"Python";"class Solution(object):
    def repeatedStringMatch(self, A, B):
        """"""
        :type A: str
        :type B: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:35"
10318;834;"C#";"public class Solution {
    public int FindJudge(int N, int[][] trust) {
 
    }
}";"";"2020-03-25 15:18:35"
10319;834;"Java";"class Solution {
    public int findJudge(int N, int[][] trust) {
 
    }
}";"";"2020-03-25 15:18:35"
10320;834;"Rust";"impl Solution {
    pub fn find_judge(n: i32, trust: Vec<Vec<i32>>) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:35"
10321;834;"C";"int findJudge(int N, int** trust, int trustSize, 
int* trustColSize){
 
}";"";"2020-03-25 15:18:35"
10322;834;"Scala";"object Solution {
    def findJudge(N: Int, trust: Array[Array[Int]])
: Int = {
 
    }
}";"";"2020-03-25 15:18:35"
10323;834;"Go";"func findJudge(N int, trust [][]int) int {
 
}";"";"2020-03-25 15:18:35"
10324;834;"Kotlin";"class Solution {
    fun findJudge(N: Int, trust: Array<IntArray>): 
Int {
 
    }
}";"";"2020-03-25 15:18:35"
10325;834;"Python3";"class Solution:
    def findJudge(self, N: int, trust: List[List
[int]]) -> int:";"";"2020-03-25 15:18:35"
10326;834;"JavaScript";"/**
 * @param {number} N
 * @param {number[][]} trust
 * @return {number}
 */
var findJudge = function(N, trust) {
 
};";"";"2020-03-25 15:18:35"
10327;834;"PHP";"class Solution {";"";"2020-03-25 15:18:35"
10328;834;"Swift";"class Solution {
    func findJudge(_ N: Int, _ trust: [[Int]]) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:35"
10329;834;"Ruby";"# @param {Integer} n
# @param {Integer[][]} trust
# @return {Integer}
def find_judge(n, trust)
 
end";"";"2020-03-25 15:18:35"
10330;834;"Python";"class Solution(object):
    def findJudge(self, N, trust):
        """"""
        :type N: int
        :type trust: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:35"
10331;835;"C#";"public class Solution {
    public int[] NumSmallerByFrequency(string[] 
queries, string[] words) {
 
    }
}";"";"2020-03-25 15:18:35"
10332;835;"Java";"class Solution {
    public int[] numSmallerByFrequency(String[] 
queries, String[] words) {
 
    }
}";"";"2020-03-25 15:18:35"
10333;835;"Rust";"impl Solution {
    pub fn num_smaller_by_frequency(queries: 
Vec<String>, words: Vec<String>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:35"
10334;835;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* numSmallerByFrequency(char ** queries, int 
queriesSize, char ** words, int wordsSize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:35"
10335;835;"Scala";"object Solution {
    def numSmallerByFrequency(queries: Array[String]
, words: Array[String]): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:35"
10336;835;"Go";"func numSmallerByFrequency(queries []string, words 
[]string) []int {
 
}";"";"2020-03-25 15:18:35"
10337;835;"Kotlin";"class Solution {
    fun numSmallerByFrequency(queries: 
Array<String>, words: Array<String>): IntArray {
 
    }
}";"";"2020-03-25 15:18:35"
10338;835;"Python3";"class Solution:
    def numSmallerByFrequency(self, queries: List
[str], words: List[str]) -> List[int]:";"";"2020-03-25 15:18:35"
10339;835;"JavaScript";"/**
 * @param {string[]} queries
 * @param {string[]} words
 * @return {number[]}
 */
var numSmallerByFrequency = function(queries, words)
 {
 
};";"";"2020-03-25 15:18:35"
10340;835;"PHP";"class Solution {
 
    /**
     * @param String[] $queries
     * @param String[] $words
     * @return Integer[]
     */
    function numSmallerByFrequency($queries, $words)
 {
        
    }
}";"";"2020-03-25 15:18:35"
10341;835;"Swift";"class Solution {
    func numSmallerByFrequency(_ queries: [String], 
_ words: [String]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:35"
10342;835;"Ruby";"# @param {String[]} queries
# @param {String[]} words
# @return {Integer[]}
def num_smaller_by_frequency(queries, words)
 
end";"";"2020-03-25 15:18:35"
10343;835;"Python";"class Solution(object):
    def numSmallerByFrequency(self, queries, words):
        """"""
        :type queries: List[str]
        :type words: List[str]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:35"
10344;836;"C#";"public class Solution {
    public bool CanWinNim(int n) {
 
    }
}";"";"2020-03-25 15:18:36"
10345;836;"Java";"class Solution {
    public boolean canWinNim(int n) {
 
    }
}";"";"2020-03-25 15:18:36"
10346;836;"Rust";"impl Solution {
    pub fn can_win_nim(n: i32) -> bool {
        
    }
}";"";"2020-03-25 15:18:36"
10347;836;"C";"bool canWinNim(int n){
 
}";"";"2020-03-25 15:18:36"
10348;836;"Scala";"object Solution {
    def canWinNim(n: Int): Boolean = {
 
    }
}";"";"2020-03-25 15:18:36"
10349;836;"Go";"func canWinNim(n int) bool {
 
}";"";"2020-03-25 15:18:36"
10350;836;"Kotlin";"class Solution {
    fun canWinNim(n: Int): Boolean {
 
    }
}";"";"2020-03-25 15:18:36"
10351;836;"Python3";"class Solution:
    def canWinNim(self, n: int) -> bool:";"";"2020-03-25 15:18:36"
10352;836;"JavaScript";"/**
 * @param {number} n
 * @return {boolean}
 */
var canWinNim = function(n) {
 
};";"";"2020-03-25 15:18:36"
10353;836;"PHP";"class Solution {";"";"2020-03-25 15:18:36"
10354;836;"Swift";"class Solution {
    func canWinNim(_ n: Int) -> Bool {
        
    }
}";"";"2020-03-25 15:18:36"
10355;836;"Ruby";"# @param {Integer} n
# @return {Boolean}
def can_win_nim(n)
 
end";"";"2020-03-25 15:18:36"
10356;836;"Python";"class Solution(object):
    def canWinNim(self, n):
        """"""
        :type n: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:36"
10357;837;"C#";"public class Solution {
    public int PoorPigs(int buckets, int 
minutesToDie, int minutesToTest) {
 
    }
}";"";"2020-03-25 15:18:36"
10358;837;"Java";"class Solution {
    public int poorPigs(int buckets, int 
minutesToDie, int minutesToTest) {
 
    }
}";"";"2020-03-25 15:18:36"
10359;837;"C";"int poorPigs(int buckets, int minutesToDie, int 
minutesToTest){
 
}";"";"2020-03-25 15:18:36"
10360;837;"Rust";"impl Solution {
    pub fn poor_pigs(buckets: i32, minutes_to_die: 
i32, minutes_to_test: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:36"
10361;837;"Scala";"object Solution {
    def poorPigs(buckets: Int, minutesToDie: Int, 
minutesToTest: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:36"
10362;837;"Go";"func poorPigs(buckets int, minutesToDie int, 
minutesToTest int) int {
 
}";"";"2020-03-25 15:18:36"
10363;837;"Kotlin";"class Solution {
    fun poorPigs(buckets: Int, minutesToDie: Int, 
minutesToTest: Int): Int {
 
    }
}";"";"2020-03-25 15:18:36"
10364;837;"Python3";"class Solution:
    def poorPigs(self, buckets: int, minutesToDie: 
int, minutesToTest: int) -> int:";"";"2020-03-25 15:18:36"
10365;837;"JavaScript";"/**
 * @param {number} buckets
 * @param {number} minutesToDie
 * @param {number} minutesToTest
 * @return {number}
 */
var poorPigs = function(buckets, minutesToDie, 
minutesToTest) {
 
};";"";"2020-03-25 15:18:36"
10366;837;"PHP";"class Solution {
 
    /**
     * @param Integer $buckets
     * @param Integer $minutesToDie
     * @param Integer $minutesToTest
     * @return Integer
     */
    function poorPigs($buckets, $minutesToDie, 
$minutesToTest) {
        
    }
}";"";"2020-03-25 15:18:36"
10367;837;"Swift";"class Solution {
    func poorPigs(_ buckets: Int, _ minutesToDie: 
Int, _ minutesToTest: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:36"
10368;837;"Ruby";"# @param {Integer} buckets
# @param {Integer} minutes_to_die
# @param {Integer} minutes_to_test
# @return {Integer}
def poor_pigs(buckets, minutes_to_die, 
minutes_to_test)
 
end";"";"2020-03-25 15:18:36"
10369;837;"Python";"class Solution(object):
    def poorPigs(self, buckets, minutesToDie, 
minutesToTest):
        """"""
        :type buckets: int
        :type minutesToDie: int
        :type minutesToTest: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:36"
10370;838;"C#";"public class Solution {
    public int IntegerReplacement(int n) {
 
    }
}";"";"2020-03-25 15:18:36"
10371;838;"Java";"class Solution {
    public int integerReplacement(int n) {
 
    }
}";"";"2020-03-25 15:18:36"
10372;838;"C";"int integerReplacement(int n){
 
}";"";"2020-03-25 15:18:36"
10373;838;"Rust";"impl Solution {
    pub fn integer_replacement(n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:36"
10374;838;"Scala";"object Solution {
    def integerReplacement(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:36"
10375;838;"Go";"func integerReplacement(n int) int {
 
}";"";"2020-03-25 15:18:36"
10376;838;"Kotlin";"class Solution {
    fun integerReplacement(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:36"
10377;838;"Python3";"class Solution:
    def integerReplacement(self, n: int) -> int:";"";"2020-03-25 15:18:36"
10378;838;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var integerReplacement = function(n) {
 
};";"";"2020-03-25 15:18:36"
10379;838;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function integerReplacement($n) {
        
    }
}";"";"2020-03-25 15:18:36"
10380;838;"Swift";"class Solution {
    func integerReplacement(_ n: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:36"
10381;838;"Ruby";"# @param {Integer} n
# @return {Integer}
def integer_replacement(n)
 
end";"";"2020-03-25 15:18:36"
10382;838;"Python";"class Solution(object):
    def integerReplacement(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:36"
10383;839;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public bool IsSymmetric(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:36"
10384;839;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:36"
10385;839;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn is_symmetric(root: 
Option<Rc<RefCell<TreeNode>>>) -> bool {
        
    }
}";"";"2020-03-25 15:18:36"
10386;839;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
bool isSymmetric(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:36"
10387;839;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def isSymmetric(root: TreeNode): Boolean = {
 
    }
}";"";"2020-03-25 15:18:36"
10388;839;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func isSymmetric(root *TreeNode) bool {
 
}";"";"2020-03-25 15:18:36"
10389;839;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun isSymmetric(root: TreeNode?): Boolean {
 
    }
}";"";"2020-03-25 15:18:36"
10390;839;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def isSymmetric(self, root: TreeNode) -> bool:";"";"2020-03-25 15:18:36"
10391;839;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isSymmetric = function(root) {
 
};";"";"2020-03-25 15:18:36"
10392;839;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Boolean
     */
    function isSymmetric($root) {
        
    }
}";"";"2020-03-25 15:18:36"
10393;839;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func isSymmetric(_ root: TreeNode?) -> Bool {
        
    }
}";"";"2020-03-25 15:18:36"
10394;839;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Boolean}
def is_symmetric(root)
 
end";"";"2020-03-25 15:18:36"
10395;839;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def isSymmetric(self, root):
        """"""
        :type root: TreeNode
        :rtype: bool
        """"""";"";"2020-03-25 15:18:36"
10396;840;"C#";"public class Solution {
 
    public Solution(int[][] rects) {
 
    }
    
    public int[] Pick() {
 
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * Solution obj = new Solution(rects);
 * int[] param_1 = obj.Pick();
 */";"";"2020-03-25 15:18:36"
10397;840;"Java";"class Solution {
 
    public Solution(int[][] rects) {
 
    }
    
    public int[] pick() {
 
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * Solution obj = new Solution(rects);
 * int[] param_1 = obj.pick();
 */";"";"2020-03-25 15:18:36"
10398;840;"Rust";"struct Solution {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl Solution {
 
    fn new(rects: Vec<Vec<i32>>) -> Self {
        
    }
    
    fn pick(&self) -> Vec<i32> {
        
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * let obj = Solution::new(rects);";"";"2020-03-25 15:18:36"
10399;840;"C";"typedef struct {
    
} Solution;
 
 
Solution* solutionCreate(int** rects, int rectsSize,
 int* rectsColSize) {
    
}
 
int* solutionPick(Solution* obj, int* retSize) {
  
}
 
void solutionFree(Solution* obj) {
    
}
 
/**
 * Your Solution struct will be instantiated and 
called as such:
 * Solution* obj = solutionCreate(rects, rectsSize, 
rectsColSize);
 * int* param_1 = solutionPick(obj, retSize);
 
 * solutionFree(obj);";"";"2020-03-25 15:18:36"
10400;840;"Scala";"class Solution(_rects: Array[Array[Int]]) {
 
    def pick(): Array[Int] = {
 
    }
 
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * var obj = new Solution(rects)
 * var param_1 = obj.pick()
 */";"";"2020-03-25 15:18:36"
10401;840;"Go";"type Solution struct {
 
}
 
 
func Constructor(rects [][]int) Solution {
 
}
 
 
func (this *Solution) Pick() []int {
 
}
 
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * obj := Constructor(rects);
 * param_1 := obj.Pick();
 */";"";"2020-03-25 15:18:36"
10402;840;"Kotlin";"class Solution(rects: Array<IntArray>) {
 
    fun pick(): IntArray {
 
    }
 
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * var obj = Solution(rects)
 * var param_1 = obj.pick()
 */";"";"2020-03-25 15:18:36"
10403;840;"Python3";"class Solution:
 
    def __init__(self, rects: List[List[int]]):
        
 
    def pick(self) -> List[int]:
        
 
 
# Your Solution object will be instantiated and 
called as such:
# obj = Solution(rects)
# param_1 = obj.pick()";"";"2020-03-25 15:18:36"
10404;840;"JavaScript";"/**
 * @param {number[][]} rects
 */
var Solution = function(rects) {
 
};
 
/**
 * @return {number[]}
 */
Solution.prototype.pick = function() {
 
};
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * var obj = new Solution(rects)
 * var param_1 = obj.pick()
 */";"";"2020-03-25 15:18:36"
10405;840;"PHP";"";"";"2020-03-25 15:18:36"
10406;840;"Swift";"class Solution {
 
    init(_ rects: [[Int]]) {
        
    }
    
    func pick() -> [Int] {
        
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * let obj = Solution(rects)
 * let ret_1: [Int] = obj.pick()
 */";"";"2020-03-25 15:18:36"
10407;840;"Ruby";"class Solution
 
=begin
    :type rects: Integer[][]
=end
    def initialize(rects)
 
    end
 
 
=begin
    :rtype: Integer[]
=end
    def pick()
 
    end
 
 
end
 
# Your Solution object will be instantiated and 
called as such:
# obj = Solution.new(rects)
# param_1 = obj.pick()";"";"2020-03-25 15:18:36"
10408;840;"Python";"class Solution(object):
 
    def __init__(self, rects):
        """"""
        :type rects: List[List[int]]
        """"""
        
 
    def pick(self):
        """"""
        :rtype: List[int]
        """"""
        
 
 
# Your Solution object will be instantiated and 
called as such:
# obj = Solution(rects)
# param_1 = obj.pick()";"";"2020-03-25 15:18:36"
10409;841;"C#";"public class Solution {
    public int NumBusesToDestination(int[][] routes,
 int S, int T) {
 
    }
}";"";"2020-03-25 15:18:36"
10410;841;"Java";"class Solution {
    public int numBusesToDestination(int[][] routes,
 int S, int T) {
 
    }
}";"";"2020-03-25 15:18:36"
10411;841;"Rust";"impl Solution {
    pub fn num_buses_to_destination(routes: 
Vec<Vec<i32>>, s: i32, t: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:36"
10412;841;"C";"int numBusesToDestination(int** routes, int 
routesSize, int* routesColSize, int S, int T){
 
}";"";"2020-03-25 15:18:36"
10413;841;"Scala";"object Solution {
    def numBusesToDestination(routes: Array[Array
[Int]], S: Int, T: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:36"
10414;841;"Go";"func numBusesToDestination(routes [][]int, S int, T 
int) int {
 
}";"";"2020-03-25 15:18:36"
10415;841;"Kotlin";"class Solution {
    fun numBusesToDestination(routes: 
Array<IntArray>, S: Int, T: Int): Int {
 
    }
}";"";"2020-03-25 15:18:36"
10416;841;"Python3";"class Solution:
    def numBusesToDestination(self, routes: List
[List[int]], S: int, T: int) -> int:";"";"2020-03-25 15:18:36"
10417;841;"JavaScript";"/**
 * @param {number[][]} routes
 * @param {number} S
 * @param {number} T
 * @return {number}
 */
var numBusesToDestination = function(routes, S, T) {
 
};";"";"2020-03-25 15:18:36"
10418;841;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $routes
     * @param Integer $S
     * @param Integer $T
     * @return Integer
     */
    function numBusesToDestination($routes, $S, $T) 
{
        
    }
}";"";"2020-03-25 15:18:36"
10419;841;"Swift";"class Solution {
    func numBusesToDestination(_ routes: [[Int]], _ 
S: Int, _ T: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:36"
10420;841;"Ruby";"# @param {Integer[][]} routes
# @param {Integer} s
# @param {Integer} t
# @return {Integer}
def num_buses_to_destination(routes, s, t)
 
end";"";"2020-03-25 15:18:36"
10421;841;"Python";"class Solution(object):
    def numBusesToDestination(self, routes, S, T):
        """"""
        :type routes: List[List[int]]
        :type S: int
        :type T: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:36"
10422;842;"C#";"public class Solution {
    public bool EquationsPossible(string[] 
equations) {
 
    }
}";"";"2020-03-25 15:18:36"
10423;842;"Java";"class Solution {
    public boolean equationsPossible(String[] 
equations) {
 
    }
}";"";"2020-03-25 15:18:36"
10424;842;"C";"bool equationsPossible(char ** equations, int 
equationsSize){
 
}";"";"2020-03-25 15:18:36"
10425;842;"Rust";"impl Solution {
    pub fn equations_possible(equations: 
Vec<String>) -> bool {
        
    }
}";"";"2020-03-25 15:18:36"
10426;842;"Scala";"object Solution {
    def equationsPossible(equations: Array[String])
: Boolean = {
 
    }
}";"";"2020-03-25 15:18:36"
10427;842;"Go";"func equationsPossible(equations []string) bool {
 
}";"";"2020-03-25 15:18:36"
10428;842;"Kotlin";"class Solution {
    fun equationsPossible(equations: Array<String>)
: Boolean {
 
    }
}";"";"2020-03-25 15:18:36"
10429;842;"Python3";"class Solution:
    def equationsPossible(self, equations: List[str]
) -> bool:";"";"2020-03-25 15:18:36"
10430;842;"JavaScript";"/**
 * @param {string[]} equations
 * @return {boolean}
 */
var equationsPossible = function(equations) {
 
};";"";"2020-03-25 15:18:36"
10431;842;"PHP";"class Solution {
 
    /**
     * @param String[] $equations
     * @return Boolean
     */
    function equationsPossible($equations) {
        
    }
}";"";"2020-03-25 15:18:36"
10432;842;"Swift";"class Solution {
    func equationsPossible(_ equations: [String]) 
-> Bool {
        
    }
}";"";"2020-03-25 15:18:36"
10433;842;"Ruby";"# @param {String[]} equations";"";"2020-03-25 15:18:36"
10434;842;"Python";"class Solution(object):
    def equationsPossible(self, equations):
        """"""
        :type equations: List[str]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:36"
10435;843;"MS SQL Server";"/* Write your T-SQL query statement below */";"";"2020-03-25 15:18:36"
10436;843;"Oracle";"/* Write your PL/SQL query statement below */";"";"2020-03-25 15:18:36"
10437;844;"C#";"public class Solution {
    public int FindMinArrowShots(int[][] points) {
 
    }
}";"";"2020-03-25 15:18:36"
10438;844;"Java";"class Solution {
    public int findMinArrowShots(int[][] points) {
 
    }
}";"";"2020-03-25 15:18:36"
10439;844;"C";"int findMinArrowShots(int** points, int pointsSize, 
int* pointsColSize){
 
}";"";"2020-03-25 15:18:36"
10440;844;"Rust";"impl Solution {
    pub fn find_min_arrow_shots(points: 
Vec<Vec<i32>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:36"
10441;844;"Scala";"object Solution {
    def findMinArrowShots(points: Array[Array[Int]])
: Int = {
 
    }
}";"";"2020-03-25 15:18:36"
10442;844;"Go";"func findMinArrowShots(points [][]int) int {
 
}";"";"2020-03-25 15:18:36"
10443;844;"Kotlin";"class Solution {
    fun findMinArrowShots(points: Array<IntArray>): 
Int {
 
    }
}";"";"2020-03-25 15:18:36"
10444;844;"Python3";"class Solution:
    def findMinArrowShots(self, points: List[List
[int]]) -> int:";"";"2020-03-25 15:18:36"
10445;844;"JavaScript";"/**
 * @param {number[][]} points
 * @return {number}
 */
var findMinArrowShots = function(points) {
 
};";"";"2020-03-25 15:18:36"
10446;844;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $points
     * @return Integer
     */
    function findMinArrowShots($points) {
        
    }
}";"";"2020-03-25 15:18:36"
10447;844;"Swift";"class Solution {
    func findMinArrowShots(_ points: [[Int]]) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:36"
10448;844;"Ruby";"# @param {Integer[][]} points
# @return {Integer}
def find_min_arrow_shots(points)
 
end";"";"2020-03-25 15:18:36"
10449;844;"Python";"class Solution(object):
    def findMinArrowShots(self, points):
        """"""
        :type points: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:36"
10450;845;"C#";"public class Solution {
    public IList<bool> CamelMatch(string[] queries, 
string pattern) {
 
    }
}";"";"2020-03-25 15:18:36"
10451;845;"Java";"class Solution {
    public List<Boolean> camelMatch(String[] 
queries, String pattern) {
 
    }
}";"";"2020-03-25 15:18:36"
10452;845;"Rust";"impl Solution {
    pub fn camel_match(queries: Vec<String>, 
pattern: String) -> Vec<bool> {
 
    }
}";"";"2020-03-25 15:18:36"
10453;845;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
bool* camelMatch(char ** queries, int queriesSize, 
char * pattern, int* returnSize){
 
}";"";"2020-03-25 15:18:36"
10454;845;"Scala";"object Solution {
    def camelMatch(queries: Array[String], pattern: 
String): Array[Boolean] = {
 
    }
}";"";"2020-03-25 15:18:36"
10455;845;"Go";"func camelMatch(queries []string, pattern string) []
bool {
 
}";"";"2020-03-25 15:18:36"
10456;845;"Kotlin";"class Solution {
    fun camelMatch(queries: Array<String>, pattern: 
String): BooleanArray {
 
    }
}";"";"2020-03-25 15:18:36"
10457;845;"Python3";"class Solution:
    def camelMatch(self, queries: List[str], 
pattern: str) -> List[bool]:";"";"2020-03-25 15:18:36"
10458;845;"JavaScript";"/**
 * @param {string[]} queries
 * @param {string} pattern
 * @return {boolean[]}
 */
var camelMatch = function(queries, pattern) {
 
};";"";"2020-03-25 15:18:36"
10459;845;"PHP";"class Solution {
 
    /**
     * @param String[] $queries
     * @param String $pattern
     * @return Boolean[]
     */
    function camelMatch($queries, $pattern) {
 
    }
}";"";"2020-03-25 15:18:36"
10460;845;"Swift";"class Solution {
    func camelMatch(_ queries: [String], _ pattern: 
String) -> [Bool] {
 
    }
}";"";"2020-03-25 15:18:36"
10461;845;"Ruby";"# @param {String[]} queries
# @param {String} pattern
# @return {Boolean[]}
def camel_match(queries, pattern)
 
end";"";"2020-03-25 15:18:36"
10462;845;"Python";"class Solution(object):
    def camelMatch(self, queries, pattern):
        """"""
        :type queries: List[str]
        :type pattern: str
        :rtype: List[bool]
        """"""";"";"2020-03-25 15:18:36"
10463;846;"C#";"public class Solution {
    public int CountPalindromicSubsequences(string 
S) {
 
    }
}";"";"2020-03-25 15:18:36"
10464;846;"Java";"class Solution {
    public int countPalindromicSubsequences(String 
S) {
 
    }
}";"";"2020-03-25 15:18:36"
10465;846;"C";"int countPalindromicSubsequences(char * S){
 
}";"";"2020-03-25 15:18:36"
10466;846;"Rust";"impl Solution {
    pub fn count_palindromic_subsequences(s: String)
 -> i32 {
        
    }
}";"";"2020-03-25 15:18:36"
10467;846;"Scala";"object Solution {
    def countPalindromicSubsequences(S: String): 
Int = {
 
    }
}";"";"2020-03-25 15:18:36"
10468;846;"Go";"func countPalindromicSubsequences(S string) int {
 
}";"";"2020-03-25 15:18:36"
10469;846;"Kotlin";"class Solution {
    fun countPalindromicSubsequences(S: String): 
Int {
 
    }
}";"";"2020-03-25 15:18:36"
10470;846;"Python3";"class Solution:
    def countPalindromicSubsequences(self, S: str) 
-> int:";"";"2020-03-25 15:18:36"
10471;846;"JavaScript";"/**
 * @param {string} S
 * @return {number}
 */
var countPalindromicSubsequences = function(S) {
 
};";"";"2020-03-25 15:18:36"
10472;846;"PHP";"class Solution {
 
    /**
     * @param String $S
     * @return Integer
     */
    function countPalindromicSubsequences($S) {
        
    }
}";"";"2020-03-25 15:18:36"
10473;846;"Swift";"class Solution {
    func countPalindromicSubsequences(_ S: String) 
-> Int {
        
    }
}";"";"2020-03-25 15:18:36"
10474;846;"Ruby";"# @param {String} s
# @return {Integer}
def count_palindromic_subsequences(s)
 
end";"";"2020-03-25 15:18:36"
10475;846;"Python";"class Solution(object):
    def countPalindromicSubsequences(self, S):
        """"""
        :type S: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:36"
10476;847;"C#";"public class Solution {
    public int DayOfYear(string date) {
 
    }
}";"";"2020-03-25 15:18:36"
10477;847;"Java";"class Solution {
    public int dayOfYear(String date) {
 
    }
}";"";"2020-03-25 15:18:36"
10478;847;"C";"int dayOfYear(char * date){
 
}";"";"2020-03-25 15:18:36"
10479;847;"Rust";"impl Solution {
    pub fn day_of_year(date: String) -> i32 {
        
    }
}";"";"2020-03-25 15:18:36"
10480;847;"Scala";"object Solution {
    def dayOfYear(date: String): Int = {
 
    }
}";"";"2020-03-25 15:18:36"
10481;847;"Go";"func dayOfYear(date string) int {
 
}";"";"2020-03-25 15:18:36"
10482;847;"Kotlin";"class Solution {
    fun dayOfYear(date: String): Int {
 
    }
}";"";"2020-03-25 15:18:36"
10483;847;"Python3";"class Solution:
    def dayOfYear(self, date: str) -> int:";"";"2020-03-25 15:18:36"
10484;847;"JavaScript";"/**
 * @param {string} date
 * @return {number}
 */
var dayOfYear = function(date) {
 
};";"";"2020-03-25 15:18:36"
10485;847;"PHP";"class Solution {
 
    /**
     * @param String $date
     * @return Integer
     */
    function dayOfYear($date) {
        
    }
}";"";"2020-03-25 15:18:36"
10486;847;"Swift";"class Solution {
    func dayOfYear(_ date: String) -> Int {
        
    }
}";"";"2020-03-25 15:18:36"
10487;847;"Ruby";"# @param {String} date
# @return {Integer}
def day_of_year(date)
 
end";"";"2020-03-25 15:18:36"
10488;847;"Python";"class Solution(object):
    def dayOfYear(self, date):
        """"""
        :type date: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:36"
10489;848;"C#";"public class Solution {
    public int[] SingleNumbers(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:36"
10490;848;"Java";"class Solution {
    public int[] singleNumbers(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:36"
10491;848;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* singleNumbers(int* nums, int numsSize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:36"
10492;848;"Rust";"impl Solution {
    pub fn single_numbers(nums: Vec<i32>) -> 
Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:36"
10493;848;"Scala";"object Solution {
    def singleNumbers(nums: Array[Int]): Array[Int] 
= {
 
    }
}";"";"2020-03-25 15:18:36"
10494;848;"Go";"func singleNumbers(nums []int) []int {
 
}";"";"2020-03-25 15:18:36"
10495;848;"Kotlin";"class Solution {
    fun singleNumbers(nums: IntArray): IntArray {
 
    }
}";"";"2020-03-25 15:18:36"
10496;848;"Python3";"class Solution:
    def singleNumbers(self, nums: List[int]) -> List
[int]:";"";"2020-03-25 15:18:36"
10497;848;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number[]}
 */
var singleNumbers = function(nums) {
 
};";"";"2020-03-25 15:18:36"
10498;848;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer[]
     */
    function singleNumbers($nums) {
 
    }
}";"";"2020-03-25 15:18:36"
10499;848;"Swift";"class Solution {
    func singleNumbers(_ nums: [Int]) -> [Int] {
 
    }
}";"";"2020-03-25 15:18:36"
10500;848;"Ruby";"# @param {Integer[]} nums
# @return {Integer[]}
def single_numbers(nums)
 
end";"";"2020-03-25 15:18:36"
10501;848;"Python";"class Solution(object):
    def singleNumbers(self, nums):
        """"""
        :type nums: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:36"
10502;849;"C#";"public class Solution {
    public int NthUglyNumber(int n) {
 
    }
}";"";"2020-03-25 15:18:36"
10503;849;"Java";"class Solution {
    public int nthUglyNumber(int n) {
 
    }
}";"";"2020-03-25 15:18:36"
10504;849;"Rust";"impl Solution {
    pub fn nth_ugly_number(n: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:36"
10505;849;"C";"int nthUglyNumber(int n){
 
}";"";"2020-03-25 15:18:36"
10506;849;"Scala";"object Solution {
    def nthUglyNumber(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:36"
10507;849;"Go";"func nthUglyNumber(n int) int {
 
}";"";"2020-03-25 15:18:36"
10508;849;"Kotlin";"class Solution {
    fun nthUglyNumber(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:36"
10509;849;"Python3";"class Solution:
    def nthUglyNumber(self, n: int) -> int:";"";"2020-03-25 15:18:36"
10510;849;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var nthUglyNumber = function(n) {
 
};";"";"2020-03-25 15:18:36"
10511;849;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function nthUglyNumber($n) {
 
    }
}";"";"2020-03-25 15:18:36"
10512;849;"Swift";"class Solution {
    func nthUglyNumber(_ n: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:36"
10513;849;"Ruby";"# @param {Integer} n
# @return {Integer}
def nth_ugly_number(n)
 
end";"";"2020-03-25 15:18:36"
10514;849;"Python";"class Solution(object):
    def nthUglyNumber(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:36"
10515;850;"C#";"public class Solution {
    public double[] CalcEquation
(IList<IList<string>> equations, double[] values, 
IList<IList<string>> queries) {
 
    }
}";"";"2020-03-25 15:18:36"
10516;850;"Java";"class Solution {
    public double[] calcEquation(List<List<String>> 
equations, double[] values, List<List<String>> 
queries) {
 
    }
}";"";"2020-03-25 15:18:36"
10517;850;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
double* calcEquation(char *** equations, int 
equationsSize, int* equationsColSize, double* 
values, int valuesSize, char *** queries, int 
queriesSize, int* queriesColSize, int* returnSize){
 
}";"";"2020-03-25 15:18:36"
10518;850;"Rust";"impl Solution {
    pub fn calc_equation(equations: 
Vec<Vec<String>>, values: Vec<f64>, queries: 
Vec<Vec<String>>) -> Vec<f64> {
        
    }
}";"";"2020-03-25 15:18:36"
10519;850;"Scala";"object Solution {
    def calcEquation(equations: List[List[String]], 
values: Array[Double], queries: List[List[String]])
: Array[Double] = {
 
    }
}";"";"2020-03-25 15:18:36"
10520;850;"Go";"func calcEquation(equations [][]string, values []
float64, queries [][]string) []float64 {
 
}";"";"2020-03-25 15:18:36"
10521;850;"Kotlin";"class Solution {
    fun calcEquation(equations: List<List<String>>, 
values: DoubleArray, queries: List<List<String>>): 
DoubleArray {
 
    }
}";"";"2020-03-25 15:18:36"
10522;850;"Python3";"class Solution:
    def calcEquation(self, equations: List[List[str]
], values: List[float], queries: List[List[str]]) 
-> List[float]:";"";"2020-03-25 15:18:36"
10523;850;"JavaScript";"/**
 * @param {string[][]} equations
 * @param {number[]} values
 * @param {string[][]} queries
 * @return {number[]}
 */
var calcEquation = function(equations, values, 
queries) {
 
};";"";"2020-03-25 15:18:36"
10524;850;"PHP";"class Solution {
 
    /**
     * @param String[][] $equations
     * @param Float[] $values
     * @param String[][] $queries
     * @return Float[]
     */
    function calcEquation($equations, $values, 
$queries) {
        
    }
}";"";"2020-03-25 15:18:36"
10525;850;"Swift";"class Solution {
    func calcEquation(_ equations: [[String]], _ 
values: [Double], _ queries: [[String]]) -> [Double]
 {
        
    }
}";"";"2020-03-25 15:18:36"
10526;850;"Ruby";"# @param {String[][]} equations
# @param {Float[]} values
# @param {String[][]} queries
# @return {Float[]}
def calc_equation(equations, values, queries)
 
end";"";"2020-03-25 15:18:36"
10527;850;"Python";"class Solution(object):
    def calcEquation(self, equations, values, 
queries):
        """"""
        :type equations: List[List[str]]
        :type values: List[float]
        :type queries: List[List[str]]
        :rtype: List[float]
        """"""";"";"2020-03-25 15:18:36"
10528;851;"C#";"public class Solution {
    public string ValidIPAddress(string IP) {
 
    }
}";"";"2020-03-25 15:18:36"
10529;851;"Java";"class Solution {
    public String validIPAddress(String IP) {
 
    }
}";"";"2020-03-25 15:18:36"
10530;851;"C";"char * validIPAddress(char * IP){
 
}";"";"2020-03-25 15:18:36"
10531;851;"Rust";"impl Solution {
    pub fn valid_ip_address(ip: String) -> String {
        
    }
}";"";"2020-03-25 15:18:36"
10532;851;"Scala";"object Solution {
    def validIPAddress(IP: String): String = {
 
    }
}";"";"2020-03-25 15:18:36"
10533;851;"Go";"func validIPAddress(IP string) string {
 
}";"";"2020-03-25 15:18:36"
10534;851;"Kotlin";"class Solution {
    fun validIPAddress(IP: String): String {
 
    }
}";"";"2020-03-25 15:18:36"
10535;851;"Python3";"class Solution:
    def validIPAddress(self, IP: str) -> str:";"";"2020-03-25 15:18:36"
10536;851;"JavaScript";"/**
 * @param {string} IP
 * @return {string}
 */
var validIPAddress = function(IP) {
 
};";"";"2020-03-25 15:18:36"
10537;851;"PHP";"class Solution {
 
    /**
     * @param String $IP
     * @return String
     */
    function validIPAddress($IP) {
        
    }
}";"";"2020-03-25 15:18:36"
10538;851;"Swift";"class Solution {
    func validIPAddress(_ IP: String) -> String {
        
    }
}";"";"2020-03-25 15:18:36"
10539;851;"Ruby";"# @param {String} ip
# @return {String}
def valid_ip_address(ip)
 
end";"";"2020-03-25 15:18:36"
10540;851;"Python";"class Solution(object):
    def validIPAddress(self, IP):
        """"""
        :type IP: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:36"
10541;852;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void ReorderList(ListNode head) {
 
    }
}";"";"2020-03-25 15:18:36"
10542;852;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
 
    }
}";"";"2020-03-25 15:18:36"
10543;852;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn reorder_list(head: &mut 
Option<Box<ListNode>>) {
 
    }
}";"";"2020-03-25 15:18:36"
10544;852;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
void reorderList(struct ListNode* head){
 
}";"";"2020-03-25 15:18:36"
10545;852;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def reorderList(head: ListNode): Unit = {
 
    }
}";"";"2020-03-25 15:18:36"
10546;852;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func reorderList(head *ListNode)  {
 
}";"";"2020-03-25 15:18:36"
10547;852;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun reorderList(head: ListNode?): Unit {
 
    }
}";"";"2020-03-25 15:18:36"
10548;852;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def reorderList(self, head: ListNode) -> None:
        """"""
        Do not return anything, modify head 
in-place instead.
        """"""";"";"2020-03-25 15:18:36"
10549;852;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @return {void} Do not return anything, modify 
head in-place instead.
 */
var reorderList = function(head) {
 
};";"";"2020-03-25 15:18:36"
10550;852;"PHP";"/**";"";"2020-03-25 15:18:36"
10551;852;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func reorderList(_ head: ListNode?) {
 
    }
}";"";"2020-03-25 15:18:36"
10552;852;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# @param {ListNode} head
# @return {Void} Do not return anything, modify 
head in-place instead.
def reorder_list(head)
 
end";"";"2020-03-25 15:18:36"
10553;852;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def reorderList(self, head):
        """"""
        :type head: ListNode
        :rtype: None Do not return anything, modify 
head in-place instead.
        """"""";"";"2020-03-25 15:18:36"
10554;853;"C#";"public class Solution {
    public int NumSquares(int n) {
 
    }
}";"";"2020-03-25 15:18:36"
10555;853;"Java";"class Solution {
    public int numSquares(int n) {
 
    }
}";"";"2020-03-25 15:18:36"
10556;853;"C";"int numSquares(int n){
 
}";"";"2020-03-25 15:18:36"
10557;853;"Rust";"impl Solution {
    pub fn num_squares(n: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:36"
10558;853;"Scala";"object Solution {
    def numSquares(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:36"
10559;853;"Go";"func numSquares(n int) int {
 
}";"";"2020-03-25 15:18:36"
10560;853;"Kotlin";"class Solution {
    fun numSquares(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:36"
10561;853;"Python3";"class Solution:
    def numSquares(self, n: int) -> int:";"";"2020-03-25 15:18:36"
10562;853;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var numSquares = function(n) {
 
};";"";"2020-03-25 15:18:36"
10563;853;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function numSquares($n) {
 
    }
}";"";"2020-03-25 15:18:36"
10564;853;"Swift";"class Solution {
    func numSquares(_ n: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:36"
10565;853;"Ruby";"# @param {Integer} n
# @return {Integer}
def num_squares(n)
 
end";"";"2020-03-25 15:18:36"
10566;853;"Python";"class Solution(object):
    def numSquares(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:36"
10567;854;"C#";"public class Solution {
    public bool DivisorGame(int N) {
 
    }
}";"";"2020-03-25 15:18:36"
10568;854;"Java";"class Solution {
    public boolean divisorGame(int N) {
 
    }
}";"";"2020-03-25 15:18:36"
10569;854;"Rust";"impl Solution {
    pub fn divisor_game(n: i32) -> bool {
        
    }
}";"";"2020-03-25 15:18:36"
10570;854;"C";"bool divisorGame(int N){
 
}";"";"2020-03-25 15:18:36"
10571;854;"Scala";"object Solution {
    def divisorGame(N: Int): Boolean = {
 
    }
}";"";"2020-03-25 15:18:36"
10572;854;"Go";"func divisorGame(N int) bool {
 
}";"";"2020-03-25 15:18:36"
10573;854;"Kotlin";"class Solution {
    fun divisorGame(N: Int): Boolean {
 
    }
}";"";"2020-03-25 15:18:36"
10574;854;"Python3";"class Solution:
    def divisorGame(self, N: int) -> bool:";"";"2020-03-25 15:18:36"
10575;854;"JavaScript";"/**
 * @param {number} N
 * @return {boolean}
 */
var divisorGame = function(N) {
 
};";"";"2020-03-25 15:18:36"
10576;854;"PHP";"class Solution {";"";"2020-03-25 15:18:36"
10577;854;"Swift";"class Solution {
    func divisorGame(_ N: Int) -> Bool {
        
    }
}";"";"2020-03-25 15:18:36"
10578;854;"Ruby";"# @param {Integer} n
# @return {Boolean}
def divisor_game(n)
 
end";"";"2020-03-25 15:18:36"
10579;854;"Python";"class Solution(object):
    def divisorGame(self, N):
        """"""
        :type N: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:36"
10580;855;"C#";"public class Solution {
    public IList<string> LetterCasePermutation
(string S) {
 
    }
}";"";"2020-03-25 15:18:36"
10581;855;"Java";"class Solution {
    public List<String> letterCasePermutation
(String S) {
 
    }
}";"";"2020-03-25 15:18:36"
10582;855;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** letterCasePermutation(char * S, int* 
returnSize){
 
}";"";"2020-03-25 15:18:36"
10583;855;"Rust";"impl Solution {
    pub fn letter_case_permutation(s: String) -> 
Vec<String> {
        
    }
}";"";"2020-03-25 15:18:36"
10584;855;"Scala";"object Solution {
    def letterCasePermutation(S: String): List
[String] = {
 
    }
}";"";"2020-03-25 15:18:36"
10585;855;"Go";"func letterCasePermutation(S string) []string {
 
}";"";"2020-03-25 15:18:36"
10586;855;"Kotlin";"class Solution {
    fun letterCasePermutation(S: String): 
List<String> {
 
    }
}";"";"2020-03-25 15:18:36"
10587;855;"Python3";"class Solution:
    def letterCasePermutation(self, S: str) -> List
[str]:";"";"2020-03-25 15:18:36"
10588;855;"JavaScript";"/**
 * @param {string} S
 * @return {string[]}
 */
var letterCasePermutation = function(S) {
 
};";"";"2020-03-25 15:18:36"
10589;855;"PHP";"class Solution {
 
    /**
     * @param String $S
     * @return String[]
     */
    function letterCasePermutation($S) {
        
    }
}";"";"2020-03-25 15:18:36"
10590;855;"Swift";"class Solution {
    func letterCasePermutation(_ S: String) -> 
[String] {
        
    }
}";"";"2020-03-25 15:18:36"
10591;855;"Ruby";"# @param {String} s
# @return {String[]}
def letter_case_permutation(s)
 
end";"";"2020-03-25 15:18:36"
10592;855;"Python";"class Solution(object):
    def letterCasePermutation(self, S):
        """"""
        :type S: str
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:36"
10593;856;"C#";"public class Solution {
    public int[] Intersect(int[] nums1, int[] nums2)
 {
 
    }
}";"";"2020-03-25 15:18:37"
10594;856;"Java";"class Solution {
    public int[] intersect(int[] nums1, int[] nums2)
 {
 
    }
}";"";"2020-03-25 15:18:37"
10595;856;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* intersect(int* nums1, int nums1Size, int* 
nums2, int nums2Size, int* returnSize){
 
}";"";"2020-03-25 15:18:37"
10596;856;"Rust";"impl Solution {
    pub fn intersect(nums1: Vec<i32>, nums2: 
Vec<i32>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:37"
10597;856;"Scala";"object Solution {
    def intersect(nums1: Array[Int], nums2: Array
[Int]): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:37"
10598;856;"Go";"func intersect(nums1 []int, nums2 []int) []int {
 
}";"";"2020-03-25 15:18:37"
10599;856;"Kotlin";"class Solution {
    fun intersect(nums1: IntArray, nums2: IntArray)
: IntArray {
 
    }
}";"";"2020-03-25 15:18:37"
10600;856;"Python3";"class Solution:
    def intersect(self, nums1: List[int], nums2: 
List[int]) -> List[int]:";"";"2020-03-25 15:18:37"
10601;856;"JavaScript";"/**
 * @param {number[]} nums1
 * @param {number[]} nums2
 * @return {number[]}
 */
var intersect = function(nums1, nums2) {
 
};";"";"2020-03-25 15:18:37"
10602;856;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums1
     * @param Integer[] $nums2
     * @return Integer[]
     */
    function intersect($nums1, $nums2) {
        
    }
}";"";"2020-03-25 15:18:37"
10603;856;"Swift";"class Solution {
    func intersect(_ nums1: [Int], _ nums2: [Int]) 
-> [Int] {
        
    }
}";"";"2020-03-25 15:18:37"
10604;856;"Ruby";"# @param {Integer[]} nums1
# @param {Integer[]} nums2
# @return {Integer[]}
def intersect(nums1, nums2)
 
end";"";"2020-03-25 15:18:37"
10605;856;"Python";"class Solution(object):
    def intersect(self, nums1, nums2):
        """"""
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:37"
10606;857;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public bool FindTarget(TreeNode root, int k) {
 
    }
}";"";"2020-03-25 15:18:37"
10607;857;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean findTarget(TreeNode root, int k) 
{
 
    }
}";"";"2020-03-25 15:18:37"
10608;857;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn find_target(root: 
Option<Rc<RefCell<TreeNode>>>, k: i32) -> bool {
        
    }
}";"";"2020-03-25 15:18:37"
10609;857;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
bool findTarget(struct TreeNode* root, int k){
 
}";"";"2020-03-25 15:18:37"
10610;857;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def findTarget(root: TreeNode, k: Int): Boolean 
= {
 
    }
}";"";"2020-03-25 15:18:37"
10611;857;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func findTarget(root *TreeNode, k int) bool {
 
}";"";"2020-03-25 15:18:37"
10612;857;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun findTarget(root: TreeNode?, k: Int): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:37"
10613;857;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def findTarget(self, root: TreeNode, k: int) -> 
bool:";"";"2020-03-25 15:18:37"
10614;857;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} k
 * @return {boolean}
 */
var findTarget = function(root, k) {
 
};";"";"2020-03-25 15:18:37"
10615;857;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @param Integer $k
     * @return Boolean
     */
    function findTarget($root, $k) {
        
    }
}";"";"2020-03-25 15:18:37"
10616;857;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func findTarget(_ root: TreeNode?, _ k: Int) -> 
Bool {
        
    }
}";"";"2020-03-25 15:18:37"
10617;857;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @param {Integer} k
# @return {Boolean}
def find_target(root, k)
 
end";"";"2020-03-25 15:18:37"
10618;857;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def findTarget(self, root, k):
        """"""
        :type root: TreeNode
        :type k: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:37"
10619;858;"C#";"public class Solution {
    public int Respace(string[] dictionary, string 
sentence) {
 
    }
}";"";"2020-03-25 15:18:37"
10620;858;"Java";"class Solution {
    public int respace(String[] dictionary, String 
sentence) {
 
    }
}";"";"2020-03-25 15:18:37"
10621;858;"C";"int respace(char** dictionary, int dictionarySize, 
char* sentence){
 
}";"";"2020-03-25 15:18:37"
10622;858;"Rust";"impl Solution {
    pub fn respace(dictionary: Vec<String>, 
sentence: String) -> i32 {
 
    }
}";"";"2020-03-25 15:18:37"
10623;858;"Scala";"object Solution {
    def respace(dictionary: Array[String], 
sentence: String): Int = {
 
    }
}";"";"2020-03-25 15:18:37"
10624;858;"Go";"func respace(dictionary []string, sentence string) 
int {
 
}";"";"2020-03-25 15:18:37"
10625;858;"Kotlin";"class Solution {
    fun respace(dictionary: Array<String>, 
sentence: String): Int {
 
    }
}";"";"2020-03-25 15:18:37"
10626;858;"Python3";"class Solution:
    def respace(self, dictionary: List[str], 
sentence: str) -> int:";"";"2020-03-25 15:18:37"
10627;858;"JavaScript";"/**
 * @param {string[]} dictionary
 * @param {string} sentence
 * @return {number}
 */
var respace = function(dictionary, sentence) {
 
};";"";"2020-03-25 15:18:37"
10628;858;"PHP";"class Solution {
 
    /**
     * @param String[] $dictionary
     * @param String $sentence
     * @return Integer
     */
    function respace($dictionary, $sentence) {
 
    }
}";"";"2020-03-25 15:18:37"
10629;858;"Swift";"class Solution {
    func respace(_ dictionary: [String], _ 
sentence: String) -> Int {
 
    }
}";"";"2020-03-25 15:18:37"
10630;858;"Ruby";"# @param {String[]} dictionary";"";"2020-03-25 15:18:37"
10631;858;"Python";"class Solution(object):
    def respace(self, dictionary, sentence):
        """"""
        :type dictionary: List[str]
        :type sentence: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:37"
10632;859;"C#";"public class Solution {
    public string ShortestCompletingWord(string 
licensePlate, string[] words) {
 
    }
}";"";"2020-03-25 15:18:37"
10633;859;"Java";"class Solution {
    public String shortestCompletingWord(String 
licensePlate, String[] words) {
 
    }
}";"";"2020-03-25 15:18:37"
10634;859;"Rust";"impl Solution {
    pub fn shortest_completing_word(license_plate: 
String, words: Vec<String>) -> String {
        
    }
}";"";"2020-03-25 15:18:37"
10635;859;"C";"char * shortestCompletingWord(char * licensePlate, 
char ** words, int wordsSize){
 
}";"";"2020-03-25 15:18:37"
10636;859;"Scala";"object Solution {
    def shortestCompletingWord(licensePlate: String,
 words: Array[String]): String = {
 
    }
}";"";"2020-03-25 15:18:37"
10637;859;"Go";"func shortestCompletingWord(licensePlate string, 
words []string) string {
 
}";"";"2020-03-25 15:18:37"
10638;859;"Kotlin";"class Solution {
    fun shortestCompletingWord(licensePlate: String,
 words: Array<String>): String {
 
    }
}";"";"2020-03-25 15:18:37"
10639;859;"Python3";"class Solution:
    def shortestCompletingWord(self, licensePlate: 
str, words: List[str]) -> str:";"";"2020-03-25 15:18:37"
10640;859;"JavaScript";"/**
 * @param {string} licensePlate
 * @param {string[]} words
 * @return {string}
 */
var shortestCompletingWord = function(licensePlate, 
words) {
 
};";"";"2020-03-25 15:18:37"
10641;859;"PHP";"class Solution {
 
    /**
     * @param String $licensePlate
     * @param String[] $words
     * @return String
     */
    function shortestCompletingWord($licensePlate, 
$words) {
        
    }
}";"";"2020-03-25 15:18:37"
10642;859;"Swift";"class Solution {
    func shortestCompletingWord(_ licensePlate: 
String, _ words: [String]) -> String {
        
    }
}";"";"2020-03-25 15:18:37"
10643;859;"Ruby";"# @param {String} license_plate
# @param {String[]} words
# @return {String}
def shortest_completing_word(license_plate, words)
 
end";"";"2020-03-25 15:18:37"
10644;859;"Python";"class Solution(object):
    def shortestCompletingWord(self, licensePlate, 
words):
        """"""
        :type licensePlate: str
        :type words: List[str]
        :rtype: str
        """"""";"";"2020-03-25 15:18:37"
10645;860;"C#";"public class Solution {
    public IList<IList<int>> Combine(int n, int k) {
 
    }
}";"";"2020-03-25 15:18:37"
10646;860;"Java";"class Solution {
    public List<List<Integer>> combine(int n, int k)
 {
 
    }
}";"";"2020-03-25 15:18:37"
10647;860;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** combine(int n, int k, int* returnSize, int** 
returnColumnSizes){
 
}";"";"2020-03-25 15:18:37"
10648;860;"Rust";"impl Solution {
    pub fn combine(n: i32, k: i32) -> Vec<Vec<i32>> 
{
        
    }
}";"";"2020-03-25 15:18:37"
10649;860;"Scala";"object Solution {
    def combine(n: Int, k: Int): List[List[Int]] = {
 
    }
}";"";"2020-03-25 15:18:37"
10650;860;"Go";"func combine(n int, k int) [][]int {
 
}";"";"2020-03-25 15:18:37"
10651;860;"Kotlin";"class Solution {
    fun combine(n: Int, k: Int): List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:37"
10652;860;"Python3";"class Solution:
    def combine(self, n: int, k: int) -> List[List
[int]]:";"";"2020-03-25 15:18:37"
10653;860;"JavaScript";"/**
 * @param {number} n
 * @param {number} k
 * @return {number[][]}
 */
var combine = function(n, k) {
 
};";"";"2020-03-25 15:18:37"
10654;860;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @param Integer $k
     * @return Integer[][]
     */
    function combine($n, $k) {
        
    }
}";"";"2020-03-25 15:18:37"
10655;860;"Swift";"class Solution {
    func combine(_ n: Int, _ k: Int) -> [[Int]] {
        
    }
}";"";"2020-03-25 15:18:37"
10656;860;"Ruby";"# @param {Integer} n";"";"2020-03-25 15:18:37"
10657;860;"Python";"class Solution(object):
    def combine(self, n, k):
        """"""
        :type n: int
        :type k: int
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:37"
10658;861;"C#";"public class Solution {
    public string ShortestSuperstring(string[] A) {
 
    }
}";"";"2020-03-25 15:18:37"
10659;861;"Java";"class Solution {
    public String shortestSuperstring(String[] A) {
 
    }
}";"";"2020-03-25 15:18:37"
10660;861;"C";"char * shortestSuperstring(char ** A, int ASize){
 
}";"";"2020-03-25 15:18:37"
10661;861;"Rust";"impl Solution {
    pub fn shortest_superstring(a: Vec<String>) -> 
String {
        
    }
}";"";"2020-03-25 15:18:37"
10662;861;"Scala";"object Solution {
    def shortestSuperstring(A: Array[String]): 
String = {
 
    }
}";"";"2020-03-25 15:18:37"
10663;861;"Go";"func shortestSuperstring(A []string) string {
 
}";"";"2020-03-25 15:18:37"
10664;861;"Kotlin";"class Solution {
    fun shortestSuperstring(A: Array<String>): 
String {
 
    }
}";"";"2020-03-25 15:18:37"
10665;861;"Python3";"class Solution:
    def shortestSuperstring(self, A: List[str]) -> 
str:";"";"2020-03-25 15:18:37"
10666;861;"JavaScript";"/**
 * @param {string[]} A
 * @return {string}
 */
var shortestSuperstring = function(A) {
 
};";"";"2020-03-25 15:18:37"
10667;861;"PHP";"class Solution {
 
    /**
     * @param String[] $A
     * @return String
     */
    function shortestSuperstring($A) {
        
    }
}";"";"2020-03-25 15:18:37"
10668;861;"Swift";"class Solution {
    func shortestSuperstring(_ A: [String]) -> 
String {
        
    }
}";"";"2020-03-25 15:18:37"
10669;861;"Ruby";"# @param {String[]} a";"";"2020-03-25 15:18:37"
10670;861;"Python";"class Solution(object):
    def shortestSuperstring(self, A):
        """"""
        :type A: List[str]
        :rtype: str
        """"""";"";"2020-03-25 15:18:37"
10671;862;"C#";"public class Solution {
    public double KnightProbability(int N, int K, 
int r, int c) {
 
    }
}";"";"2020-03-25 15:18:37"
10672;862;"Java";"class Solution {
    public double knightProbability(int N, int K, 
int r, int c) {
 
    }
}";"";"2020-03-25 15:18:37"
10673;862;"C";"double knightProbability(int N, int K, int r, int c)
{
 
}";"";"2020-03-25 15:18:37"
10674;862;"Rust";"impl Solution {
    pub fn knight_probability(n: i32, k: i32, r: 
i32, c: i32) -> f64 {
        
    }
}";"";"2020-03-25 15:18:37"
10675;862;"Scala";"object Solution {
    def knightProbability(N: Int, K: Int, r: Int, 
c: Int): Double = {
 
    }
}";"";"2020-03-25 15:18:37"
10676;862;"Go";"func knightProbability(N int, K int, r int, c int) 
float64 {
 
}";"";"2020-03-25 15:18:37"
10677;862;"Kotlin";"class Solution {
    fun knightProbability(N: Int, K: Int, r: Int, 
c: Int): Double {
 
    }
}";"";"2020-03-25 15:18:37"
10678;862;"Python3";"class Solution:
    def knightProbability(self, N: int, K: int, r: 
int, c: int) -> float:";"";"2020-03-25 15:18:37"
10679;862;"JavaScript";"/**
 * @param {number} N
 * @param {number} K
 * @param {number} r
 * @param {number} c
 * @return {number}
 */
var knightProbability = function(N, K, r, c) {
 
};";"";"2020-03-25 15:18:37"
10680;862;"PHP";"class Solution {
 
    /**
     * @param Integer $N
     * @param Integer $K
     * @param Integer $r
     * @param Integer $c
     * @return Float
     */
    function knightProbability($N, $K, $r, $c) {
        
    }
}";"";"2020-03-25 15:18:37"
10681;862;"Swift";"class Solution {
    func knightProbability(_ N: Int, _ K: Int, _ r: 
Int, _ c: Int) -> Double {
        
    }
}";"";"2020-03-25 15:18:37"
10682;862;"Ruby";"# @param {Integer} n";"";"2020-03-25 15:18:37"
10683;862;"Python";"class Solution(object):
    def knightProbability(self, N, K, r, c):
        """"""
        :type N: int
        :type K: int
        :type r: int
        :type c: int
        :rtype: float
        """"""";"";"2020-03-25 15:18:37"
10684;863;"C#";"public class Solution {
    public int NumberOf2sInRange(int n) {
 
    }
}";"";"2020-03-25 15:18:37"
10685;863;"Java";"class Solution {
    public int numberOf2sInRange(int n) {
 
    }
}";"";"2020-03-25 15:18:37"
10686;863;"C";"int numberOf2sInRange(int n){
 
}";"";"2020-03-25 15:18:37"
10687;863;"Rust";"impl Solution {
    pub fn number_of2s_in_range(n: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:37"
10688;863;"Scala";"object Solution {
    def numberOf2sInRange(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:37"
10689;863;"Go";"func numberOf2sInRange(n int) int {
 
}";"";"2020-03-25 15:18:37"
10690;863;"Kotlin";"class Solution {
    fun numberOf2sInRange(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:37"
10691;863;"Python3";"class Solution:
    def numberOf2sInRange(self, n: int) -> int:";"";"2020-03-25 15:18:37"
10692;863;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var numberOf2sInRange = function(n) {
 
};";"";"2020-03-25 15:18:37"
10693;863;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function numberOf2sInRange($n) {
 
    }
}";"";"2020-03-25 15:18:37"
10694;863;"Swift";"class Solution {
    func numberOf2sInRange(_ n: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:37"
10695;863;"Ruby";"# @param {Integer} n
# @return {Integer}
def number_of2s_in_range(n)
 
end";"";"2020-03-25 15:18:37"
10696;863;"Python";"class Solution(object):
    def numberOf2sInRange(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:37"
10697;864;"C#";"public class Solution {
    public int IntersectionSizeTwo(int[][] 
intervals) {
 
    }
}";"";"2020-03-25 15:18:37"
10698;864;"Java";"class Solution {
    public int intersectionSizeTwo(int[][] 
intervals) {
 
    }
}";"";"2020-03-25 15:18:37"
10699;864;"Rust";"impl Solution {
    pub fn intersection_size_two(intervals: 
Vec<Vec<i32>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:37"
10700;864;"C";"int intersectionSizeTwo(int** intervals, int 
intervalsSize, int* intervalsColSize){
 
}";"";"2020-03-25 15:18:37"
10701;864;"Scala";"object Solution {
    def intersectionSizeTwo(intervals: Array[Array
[Int]]): Int = {
 
    }
}";"";"2020-03-25 15:18:37"
10702;864;"Go";"func intersectionSizeTwo(intervals [][]int) int {
 
}";"";"2020-03-25 15:18:37"
10703;864;"Kotlin";"class Solution {
    fun intersectionSizeTwo(intervals: 
Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:37"
10704;864;"Python3";"class Solution:
    def intersectionSizeTwo(self, intervals: List
[List[int]]) -> int:";"";"2020-03-25 15:18:37"
10705;864;"JavaScript";"/**
 * @param {number[][]} intervals
 * @return {number}
 */
var intersectionSizeTwo = function(intervals) {
 
};";"";"2020-03-25 15:18:37"
10706;864;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $intervals
     * @return Integer
     */
    function intersectionSizeTwo($intervals) {
        
    }
}";"";"2020-03-25 15:18:37"
10707;864;"Swift";"class Solution {
    func intersectionSizeTwo(_ intervals: [[Int]]) 
-> Int {
        
    }
}";"";"2020-03-25 15:18:37"
10708;864;"Ruby";"# @param {Integer[][]} intervals
# @return {Integer}
def intersection_size_two(intervals)
 
end";"";"2020-03-25 15:18:37"
10709;864;"Python";"class Solution(object):
    def intersectionSizeTwo(self, intervals):
        """"""
        :type intervals: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:37"
10710;865;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode ReverseBetween(ListNode head, 
int m, int n) {
 
    }
}";"";"2020-03-25 15:18:37"
10711;865;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, 
int m, int n) {
 
    }
}";"";"2020-03-25 15:18:37"
10712;865;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn reverse_between(head: 
Option<Box<ListNode>>, m: i32, n: i32) -> 
Option<Box<ListNode>> {
        
    }
}";"";"2020-03-25 15:18:37"
10713;865;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
struct ListNode* reverseBetween(struct ListNode* 
head, int m, int n){
 
}";"";"2020-03-25 15:18:37"
10714;865;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def reverseBetween(head: ListNode, m: Int, n: 
Int): ListNode = {
 
    }
}";"";"2020-03-25 15:18:37"
10715;865;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func reverseBetween(head *ListNode, m int, n int) 
*ListNode {
 
}";"";"2020-03-25 15:18:37"
10716;865;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun reverseBetween(head: ListNode?, m: Int, n: 
Int): ListNode? {
 
    }
}";"";"2020-03-25 15:18:37"
10717;865;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def reverseBetween(self, head: ListNode, m: int,
 n: int) -> ListNode:";"";"2020-03-25 15:18:37"
10718;865;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @param {number} m
 * @param {number} n
 * @return {ListNode}
 */
var reverseBetween = function(head, m, n) {
 
};";"";"2020-03-25 15:18:37"
10719;865;"PHP";"/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
class Solution {
 
    /**
     * @param ListNode $head
     * @param Integer $m
     * @param Integer $n
     * @return ListNode
     */
    function reverseBetween($head, $m, $n) {
        
    }
}";"";"2020-03-25 15:18:37"
10720;865;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func reverseBetween(_ head: ListNode?, _ m: Int,
 _ n: Int) -> ListNode? {
        
    }
}";"";"2020-03-25 15:18:37"
10721;865;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# @param {ListNode} head
# @param {Integer} m
# @param {Integer} n
# @return {ListNode}
def reverse_between(head, m, n)
 
end";"";"2020-03-25 15:18:37"
10722;865;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def reverseBetween(self, head, m, n):
        """"""
        :type head: ListNode
        :type m: int
        :type n: int
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:37"
10723;866;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode DeleteDuplicates(ListNode head) 
{
 
    }
}";"";"2020-03-25 15:18:37"
10724;866;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) 
{
 
    }
}";"";"2020-03-25 15:18:37"
10725;866;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
struct ListNode* deleteDuplicates(struct ListNode* 
head){
 
}";"";"2020-03-25 15:18:37"
10726;866;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn delete_duplicates(head: 
Option<Box<ListNode>>) -> Option<Box<ListNode>> {
        
    }
}";"";"2020-03-25 15:18:37"
10727;866;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def deleteDuplicates(head: ListNode): ListNode 
= {
 
    }
}";"";"2020-03-25 15:18:37"
10728;866;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func deleteDuplicates(head *ListNode) *ListNode {
 
}";"";"2020-03-25 15:18:37"
10729;866;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun deleteDuplicates(head: ListNode?): ListNode?
 {
 
    }
}";"";"2020-03-25 15:18:37"
10730;866;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def deleteDuplicates(self, head: ListNode) -> 
ListNode:";"";"2020-03-25 15:18:37"
10731;866;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var deleteDuplicates = function(head) {
 
};";"";"2020-03-25 15:18:37"
10732;866;"PHP";"/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
class Solution {
 
    /**
     * @param ListNode $head
     * @return ListNode
     */
    function deleteDuplicates($head) {
        
    }
}";"";"2020-03-25 15:18:37"
10733;866;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func deleteDuplicates(_ head: ListNode?) -> 
ListNode? {
        
    }
}";"";"2020-03-25 15:18:37"
10734;866;"Ruby";"# Definition for singly-linked list.";"";"2020-03-25 15:18:37"
10735;866;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def deleteDuplicates(self, head):
        """"""
        :type head: ListNode
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:37"
10736;867;"C#";"public class Solution {
    public int[] NumMovesStonesII(int[] stones) {
        
    }
}";"";"2020-03-25 15:18:37"
10737;867;"Java";"class Solution {
    public int[] numMovesStonesII(int[] stones) {
        
    }
}";"";"2020-03-25 15:18:37"
10738;867;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* numMovesStonesII(int* stones, int stonesSize, 
int* returnSize){
 
}";"";"2020-03-25 15:18:37"
10739;867;"Rust";"impl Solution {
    pub fn num_moves_stones_ii(stones: Vec<i32>) -> 
Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:37"
10740;867;"Scala";"object Solution {
    def numMovesStonesII(stones: Array[Int]): Array
[Int] = {
 
    }
}";"";"2020-03-25 15:18:37"
10741;867;"Go";"func numMovesStonesII(stones []int) []int {
    
}";"";"2020-03-25 15:18:37"
10742;867;"Kotlin";"class Solution {
    fun numMovesStonesII(stones: IntArray): 
IntArray {
 
    }
}";"";"2020-03-25 15:18:37"
10743;867;"Python3";"class Solution:
    def numMovesStonesII(self, stones: List[int]) 
-> List[int]:";"";"2020-03-25 15:18:37"
10744;867;"JavaScript";"/**
 * @param {number[]} stones
 * @return {number[]}
 */
var numMovesStonesII = function(stones) {
    
};";"";"2020-03-25 15:18:37"
10745;867;"PHP";"class Solution {
 
    /**
     * @param Integer[] $stones
     * @return Integer[]
     */
    function numMovesStonesII($stones) {
        
    }
}";"";"2020-03-25 15:18:37"
10746;867;"Swift";"class Solution {
    func numMovesStonesII(_ stones: [Int]) -> [Int] 
{
        
    }
}";"";"2020-03-25 15:18:37"
10747;867;"Ruby";"# @param {Integer[]} stones";"";"2020-03-25 15:18:37"
10748;867;"Python";"class Solution(object):
    def numMovesStonesII(self, stones):
        """"""
        :type stones: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:37"
10749;868;"C#";"public class Solution {
    public int CharacterReplacement(string s, int k)
 {
 
    }
}";"";"2020-03-25 15:18:37"
10750;868;"Java";"class Solution {
    public int characterReplacement(String s, int k)
 {
 
    }
}";"";"2020-03-25 15:18:37"
10751;868;"Rust";"impl Solution {
    pub fn character_replacement(s: String, k: i32) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:37"
10752;868;"C";"int characterReplacement(char * s, int k){
 
}";"";"2020-03-25 15:18:37"
10753;868;"Scala";"object Solution {
    def characterReplacement(s: String, k: Int): 
Int = {
 
    }
}";"";"2020-03-25 15:18:37"
10754;868;"Go";"func characterReplacement(s string, k int) int {
 
}";"";"2020-03-25 15:18:37"
10755;868;"Kotlin";"class Solution {
    fun characterReplacement(s: String, k: Int): 
Int {
 
    }
}";"";"2020-03-25 15:18:37"
10756;868;"Python3";"class Solution:
    def characterReplacement(self, s: str, k: int) 
-> int:";"";"2020-03-25 15:18:37"
10757;868;"JavaScript";"/**
 * @param {string} s
 * @param {number} k
 * @return {number}
 */
var characterReplacement = function(s, k) {
 
};";"";"2020-03-25 15:18:37"
10758;868;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @param Integer $k
     * @return Integer
     */
    function characterReplacement($s, $k) {
        
    }
}";"";"2020-03-25 15:18:37"
10759;868;"Swift";"class Solution {
    func characterReplacement(_ s: String, _ k: Int)
 -> Int {
        
    }
}";"";"2020-03-25 15:18:37"
10760;868;"Ruby";"# @param {String} s
# @param {Integer} k
# @return {Integer}
def character_replacement(s, k)
 
end";"";"2020-03-25 15:18:37"
10761;868;"Python";"class Solution(object):
    def characterReplacement(self, s, k):
        """"""
        :type s: str
        :type k: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:37"
10762;869;"C#";"public class Solution {
    public int[] SmallestRange(IList<IList<int>> 
nums) {
 
    }
}";"";"2020-03-25 15:18:37"
10763;869;"Java";"class Solution {
    public int[] smallestRange(List<List<Integer>> 
nums) {
 
    }
}";"";"2020-03-25 15:18:37"
10764;869;"Rust";"impl Solution {
    pub fn smallest_range(nums: Vec<Vec<i32>>) -> 
Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:37"
10765;869;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* smallestRange(int** nums, int numsSize, int* 
numsColSize, int* returnSize){
 
}";"";"2020-03-25 15:18:37"
10766;869;"Scala";"object Solution {
    def smallestRange(nums: List[List[Int]]): Array
[Int] = {
 
    }
}";"";"2020-03-25 15:18:37"
10767;869;"Go";"func smallestRange(nums [][]int) []int {
 
}";"";"2020-03-25 15:18:37"
10768;869;"Kotlin";"class Solution {
    fun smallestRange(nums: List<List<Int>>): 
IntArray {
 
    }
}";"";"2020-03-25 15:18:37"
10769;869;"Python3";"class Solution:
    def smallestRange(self, nums: List[List[int]]) 
-> List[int]:";"";"2020-03-25 15:18:37"
10770;869;"JavaScript";"/**
 * @param {number[][]} nums
 * @return {number[]}
 */
var smallestRange = function(nums) {
 
};";"";"2020-03-25 15:18:37"
10771;869;"PHP";"class Solution {";"";"2020-03-25 15:18:37"
10772;869;"Swift";"class Solution {
    func smallestRange(_ nums: [[Int]]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:37"
10773;869;"Ruby";"# @param {Integer[][]} nums
# @return {Integer[]}
def smallest_range(nums)
 
end";"";"2020-03-25 15:18:37"
10774;869;"Python";"class Solution(object):
    def smallestRange(self, nums):
        """"""
        :type nums: List[List[int]]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:37"
10775;870;"C#";"public class Solution {
    public double FindMaxAverage(int[] nums, int k) 
{
 
    }
}";"";"2020-03-25 15:18:37"
10776;870;"Java";"class Solution {
    public double findMaxAverage(int[] nums, int k) 
{
 
    }
}";"";"2020-03-25 15:18:37"
10777;870;"Rust";"impl Solution {
    pub fn find_max_average(nums: Vec<i32>, k: i32) 
-> f64 {
        
    }
}";"";"2020-03-25 15:18:37"
10778;870;"C";"double findMaxAverage(int* nums, int numsSize, int 
k){
 
}";"";"2020-03-25 15:18:37"
10779;870;"Scala";"object Solution {
    def findMaxAverage(nums: Array[Int], k: Int): 
Double = {
 
    }
}";"";"2020-03-25 15:18:37"
10780;870;"Go";"func findMaxAverage(nums []int, k int) float64 {
 
}";"";"2020-03-25 15:18:37"
10781;870;"Kotlin";"class Solution {
    fun findMaxAverage(nums: IntArray, k: Int): 
Double {
 
    }
}";"";"2020-03-25 15:18:37"
10782;870;"Python3";"class Solution:
    def findMaxAverage(self, nums: List[int], k: 
int) -> float:";"";"2020-03-25 15:18:37"
10783;870;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
var findMaxAverage = function(nums, k) {
 
};";"";"2020-03-25 15:18:37"
10784;870;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer $k
     * @return Float
     */
    function findMaxAverage($nums, $k) {
        
    }
}";"";"2020-03-25 15:18:37"
10785;870;"Swift";"class Solution {
    func findMaxAverage(_ nums: [Int], _ k: Int) -> 
Double {
        
    }
}";"";"2020-03-25 15:18:37"
10786;870;"Ruby";"# @param {Integer[]} nums
# @param {Integer} k
# @return {Float}
def find_max_average(nums, k)
 
end";"";"2020-03-25 15:18:37"
10787;870;"Python";"class Solution(object):
    def findMaxAverage(self, nums, k):
        """"""
        :type nums: List[int]
        :type k: int
        :rtype: float
        """"""";"";"2020-03-25 15:18:37"
10788;871;"C#";"public class Solution {
    public int RemoveStones(int[][] stones) {
 
    }
}";"";"2020-03-25 15:18:37"
10789;871;"Java";"class Solution {
    public int removeStones(int[][] stones) {
 
    }
}";"";"2020-03-25 15:18:37"
10790;871;"C";"int removeStones(int** stones, int stonesSize, int* 
stonesColSize){
 
}";"";"2020-03-25 15:18:37"
10791;871;"Rust";"impl Solution {
    pub fn remove_stones(stones: Vec<Vec<i32>>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:37"
10792;871;"Scala";"object Solution {
    def removeStones(stones: Array[Array[Int]]): 
Int = {
 
    }
}";"";"2020-03-25 15:18:37"
10793;871;"Go";"func removeStones(stones [][]int) int {
 
}";"";"2020-03-25 15:18:37"
10794;871;"Kotlin";"class Solution {
    fun removeStones(stones: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:37"
10795;871;"Python3";"class Solution:
    def removeStones(self, stones: List[List[int]]) 
-> int:";"";"2020-03-25 15:18:37"
10796;871;"JavaScript";"/**
 * @param {number[][]} stones
 * @return {number}
 */
var removeStones = function(stones) {
 
};";"";"2020-03-25 15:18:37"
10797;871;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $stones
     * @return Integer
     */
    function removeStones($stones) {
        
    }
}";"";"2020-03-25 15:18:37"
10798;871;"Swift";"class Solution {
    func removeStones(_ stones: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:37"
10799;871;"Ruby";"# @param {Integer[][]} stones";"";"2020-03-25 15:18:37"
10800;871;"Python";"class Solution(object):
    def removeStones(self, stones):
        """"""
        :type stones: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:37"
10801;872;"C#";"public class Solution {
    public int CountSegments(string s) {
 
    }
}";"";"2020-03-25 15:18:37"
10802;872;"Java";"class Solution {
    public int countSegments(String s) {
 
    }
}";"";"2020-03-25 15:18:37"
10803;872;"C";"int countSegments(char * s){
 
}";"";"2020-03-25 15:18:37"
10804;872;"Rust";"impl Solution {
    pub fn count_segments(s: String) -> i32 {
        
    }
}";"";"2020-03-25 15:18:37"
10805;872;"Scala";"object Solution {
    def countSegments(s: String): Int = {
 
    }
}";"";"2020-03-25 15:18:37"
10806;872;"Go";"func countSegments(s string) int {
 
}";"";"2020-03-25 15:18:37"
10807;872;"Kotlin";"class Solution {
    fun countSegments(s: String): Int {
 
    }
}";"";"2020-03-25 15:18:37"
10808;872;"Python3";"class Solution:
    def countSegments(self, s: str) -> int:";"";"2020-03-25 15:18:37"
10809;872;"JavaScript";"/**
 * @param {string} s
 * @return {number}
 */
var countSegments = function(s) {
 
};";"";"2020-03-25 15:18:37"
10810;872;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return Integer
     */
    function countSegments($s) {
        
    }
}";"";"2020-03-25 15:18:37"
10811;872;"Swift";"class Solution {
    func countSegments(_ s: String) -> Int {
        
    }
}";"";"2020-03-25 15:18:37"
10812;872;"Ruby";"# @param {String} s
# @return {Integer}
def count_segments(s)
 
end";"";"2020-03-25 15:18:37"
10813;872;"Python";"class Solution(object):
    def countSegments(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:37"
10814;873;"C#";"public class Solution {
    public int PileBox(int[][] box) {
 
    }
}";"";"2020-03-25 15:18:37"
10815;873;"Java";"class Solution {
    public int pileBox(int[][] box) {
 
    }
}";"";"2020-03-25 15:18:37"
10816;873;"C";"int pileBox(int** box, int boxSize, int* boxColSize)
{
 
}";"";"2020-03-25 15:18:37"
10817;873;"Rust";"impl Solution {
    pub fn pile_box(box: Vec<Vec<i32>>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:37"
10818;873;"Scala";"object Solution {
    def pileBox(box: Array[Array[Int]]): Int = {
 
    }
}";"";"2020-03-25 15:18:37"
10819;873;"Go";"func pileBox(box [][]int) int {
 
}";"";"2020-03-25 15:18:37"
10820;873;"Kotlin";"class Solution {
    fun pileBox(box: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:37"
10821;873;"Python3";"class Solution:
    def pileBox(self, box: List[List[int]]) -> int:";"";"2020-03-25 15:18:37"
10822;873;"JavaScript";"/**
 * @param {number[][]} box
 * @return {number}
 */
var pileBox = function(box) {
 
};";"";"2020-03-25 15:18:37"
10823;873;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $box
     * @return Integer
     */
    function pileBox($box) {
 
    }
}";"";"2020-03-25 15:18:37"
10824;873;"Swift";"class Solution {
    func pileBox(_ box: [[Int]]) -> Int {
 
    }
}";"";"2020-03-25 15:18:37"
10825;873;"Ruby";"# @param {Integer[][]} box
# @return {Integer}
def pile_box(box)
 
end";"";"2020-03-25 15:18:37"
10826;873;"Python";"class Solution(object):
    def pileBox(self, box):
        """"""
        :type box: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:37"
10827;874;"C#";"public class Solution {
    public int FindMin(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:37"
10828;874;"Java";"class Solution {
    public int findMin(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:37"
10829;874;"Rust";"impl Solution {
    pub fn find_min(nums: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:37"
10830;874;"C";"int findMin(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:37"
10831;874;"Scala";"object Solution {
    def findMin(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:37"
10832;874;"Go";"func findMin(nums []int) int {
 
}";"";"2020-03-25 15:18:37"
10833;874;"Kotlin";"class Solution {
    fun findMin(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:37"
10834;874;"Python3";"class Solution:
    def findMin(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:37"
10835;874;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var findMin = function(nums) {
 
};";"";"2020-03-25 15:18:37"
10836;874;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function findMin($nums) {
 
    }
}";"";"2020-03-25 15:18:37"
10837;874;"Swift";"class Solution {
    func findMin(_ nums: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:37"
10838;874;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def find_min(nums)
 
end";"";"2020-03-25 15:18:37"
10839;874;"Python";"class Solution(object):
    def findMin(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:37"
10840;875;"C#";"public class Solution {
    public int LongestWPI(int[] hours) {
 
    }
}";"";"2020-03-25 15:18:38"
10841;875;"Java";"class Solution {
    public int longestWPI(int[] hours) {
 
    }
}";"";"2020-03-25 15:18:38"
10842;875;"Rust";"impl Solution {
    pub fn longest_wpi(hours: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:38"
10843;875;"C";"int longestWPI(int* hours, int hoursSize){
 
}";"";"2020-03-25 15:18:38"
10844;875;"Scala";"object Solution {
    def longestWPI(hours: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:38"
10845;875;"Go";"func longestWPI(hours []int) int {
 
}";"";"2020-03-25 15:18:38"
10846;875;"Kotlin";"class Solution {
    fun longestWPI(hours: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:38"
10847;875;"Python3";"class Solution:
    def longestWPI(self, hours: List[int]) -> int:";"";"2020-03-25 15:18:38"
10848;875;"JavaScript";"/**
 * @param {number[]} hours
 * @return {number}
 */
var longestWPI = function(hours) {
 
};";"";"2020-03-25 15:18:38"
10849;875;"PHP";"class Solution {";"";"2020-03-25 15:18:38"
10850;875;"Swift";"class Solution {
    func longestWPI(_ hours: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:38"
10851;875;"Ruby";"# @param {Integer[]} hours
# @return {Integer}
def longest_wpi(hours)
 
end";"";"2020-03-25 15:18:38"
10852;875;"Python";"class Solution(object):
    def longestWPI(self, hours):
        """"""
        :type hours: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:38"
10853;876;"C#";"public class Solution {
    public int MinimumTotal(IList<IList<int>> 
triangle) {
 
    }
}";"";"2020-03-25 15:18:38"
10854;876;"Java";"class Solution {
    public int minimumTotal(List<List<Integer>> 
triangle) {
 
    }
}";"";"2020-03-25 15:18:38"
10855;876;"Rust";"impl Solution {
    pub fn minimum_total(triangle: Vec<Vec<i32>>) 
-> i32 {
 
    }
}";"";"2020-03-25 15:18:38"
10856;876;"C";"int minimumTotal(int** triangle, int triangleSize, 
int* triangleColSize){
 
}";"";"2020-03-25 15:18:38"
10857;876;"Scala";"object Solution {
    def minimumTotal(triangle: List[List[Int]]): 
Int = {
 
    }
}";"";"2020-03-25 15:18:38"
10858;876;"Go";"func minimumTotal(triangle [][]int) int {
 
}";"";"2020-03-25 15:18:38"
10859;876;"Kotlin";"class Solution {
    fun minimumTotal(triangle: List<List<Int>>): 
Int {
 
    }
}";"";"2020-03-25 15:18:38"
10860;876;"Python3";"class Solution:
    def minimumTotal(self, triangle: List[List[int]]
) -> int:";"";"2020-03-25 15:18:38"
10861;876;"JavaScript";"/**
 * @param {number[][]} triangle
 * @return {number}
 */
var minimumTotal = function(triangle) {
 
};";"";"2020-03-25 15:18:38"
10862;876;"PHP";"class Solution {";"";"2020-03-25 15:18:38"
10863;876;"Swift";"class Solution {
    func minimumTotal(_ triangle: [[Int]]) -> Int {
 
    }
}";"";"2020-03-25 15:18:38"
10864;876;"Ruby";"# @param {Integer[][]} triangle
# @return {Integer}
def minimum_total(triangle)
 
end";"";"2020-03-25 15:18:38"
10865;876;"Python";"class Solution(object):
    def minimumTotal(self, triangle):
        """"""
        :type triangle: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:38"
10866;877;"C#";"public class Solution {
    public int[] CountBits(int num) {
 
    }
}";"";"2020-03-25 15:18:38"
10867;877;"Java";"class Solution {
    public int[] countBits(int num) {
 
    }
}";"";"2020-03-25 15:18:38"
10868;877;"Rust";"impl Solution {
    pub fn count_bits(num: i32) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:38"
10869;877;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* countBits(int num, int* returnSize){
 
}";"";"2020-03-25 15:18:38"
10870;877;"Scala";"object Solution {
    def countBits(num: Int): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:38"
10871;877;"Go";"func countBits(num int) []int {
 
}";"";"2020-03-25 15:18:38"
10872;877;"Kotlin";"class Solution {
    fun countBits(num: Int): IntArray {
 
    }
}";"";"2020-03-25 15:18:38"
10873;877;"Python3";"class Solution:
    def countBits(self, num: int) -> List[int]:";"";"2020-03-25 15:18:38"
10874;877;"JavaScript";"/**
 * @param {number} num
 * @return {number[]}
 */
var countBits = function(num) {
 
};";"";"2020-03-25 15:18:38"
10875;877;"PHP";"class Solution {
 
    /**
     * @param Integer $num
     * @return Integer[]
     */
    function countBits($num) {
        
    }
}";"";"2020-03-25 15:18:38"
10876;877;"Swift";"class Solution {
    func countBits(_ num: Int) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:38"
10877;877;"Ruby";"# @param {Integer} num
# @return {Integer[]}
def count_bits(num)
 
end";"";"2020-03-25 15:18:38"
10878;877;"Python";"class Solution(object):
    def countBits(self, num):
        """"""
        :type num: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:38"
10879;878;"C#";"public class Solution {
    public bool ValidTicTacToe(string[] board) {
 
    }
}";"";"2020-03-25 15:18:38"
10880;878;"Java";"class Solution {
    public boolean validTicTacToe(String[] board) {
 
    }
}";"";"2020-03-25 15:18:38"
10881;878;"C";"bool validTicTacToe(char ** board, int boardSize){
 
}";"";"2020-03-25 15:18:38"
10882;878;"Rust";"impl Solution {
    pub fn valid_tic_tac_toe(board: Vec<String>) -> 
bool {
        
    }
}";"";"2020-03-25 15:18:38"
10883;878;"Scala";"object Solution {
    def validTicTacToe(board: Array[String]): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:38"
10884;878;"Go";"func validTicTacToe(board []string) bool {
 
}";"";"2020-03-25 15:18:38"
10885;878;"Kotlin";"class Solution {
    fun validTicTacToe(board: Array<String>): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:38"
10886;878;"Python3";"class Solution:
    def validTicTacToe(self, board: List[str]) -> 
bool:";"";"2020-03-25 15:18:38"
10887;878;"JavaScript";"/**
 * @param {string[]} board
 * @return {boolean}
 */
var validTicTacToe = function(board) {
 
};";"";"2020-03-25 15:18:38"
10888;878;"PHP";"class Solution {
 
    /**
     * @param String[] $board
     * @return Boolean
     */
    function validTicTacToe($board) {
        
    }
}";"";"2020-03-25 15:18:38"
10889;878;"Swift";"class Solution {
    func validTicTacToe(_ board: [String]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:38"
10890;878;"Ruby";"";"";"2020-03-25 15:18:38"
10891;878;"Python";"class Solution(object):
    def validTicTacToe(self, board):
        """"""
        :type board: List[str]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:38"
10892;879;"C#";"public class Solution {
    public int MovesToChessboard(int[][] board) {
 
    }
}";"";"2020-03-25 15:18:38"
10893;879;"Java";"class Solution {
    public int movesToChessboard(int[][] board) {
 
    }
}";"";"2020-03-25 15:18:38"
10894;879;"C";"int movesToChessboard(int** board, int boardSize, 
int* boardColSize){
 
}";"";"2020-03-25 15:18:38"
10895;879;"Scala";"object Solution {
    def movesToChessboard(board: Array[Array[Int]])
: Int = {
 
    }
}";"";"2020-03-25 15:18:38"
10896;879;"Python3";"class Solution:
    def movesToChessboard(self, board: List[List
[int]]) -> int:";"";"2020-03-25 15:18:38"
10897;879;"JavaScript";"/**
 * @param {number[][]} board
 * @return {number}
 */
var movesToChessboard = function(board) {
 
};";"";"2020-03-25 15:18:38"
10898;879;"Go";"func movesToChessboard(board [][]int) int {
 
}";"";"2020-03-25 15:18:38"
10899;879;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $board
     * @return Integer
     */
    function movesToChessboard($board) {
        
    }
}";"";"2020-03-25 15:18:38"
10900;879;"Swift";"class Solution {
    func movesToChessboard(_ board: [[Int]]) -> Int 
{
        
    }
}";"";"2020-03-25 15:18:38"
10901;879;"Ruby";"# @param {Integer[][]} board
# @return {Integer}
def moves_to_chessboard(board)
 
end";"";"2020-03-25 15:18:38"
10902;879;"Kotlin";"class Solution {
    fun movesToChessboard(board: Array<IntArray>): 
Int {
 
    }
}";"";"2020-03-25 15:18:38"
10903;879;"Python";"class Solution(object):
    def movesToChessboard(self, board):
        """"""
        :type board: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:38"
10904;880;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int MaxLevelSum(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:38"
10905;880;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int maxLevelSum(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:38"
10906;880;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn max_level_sum(root: 
Option<Rc<RefCell<TreeNode>>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:38"
10907;880;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int maxLevelSum(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:38"
10908;880;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def maxLevelSum(root: TreeNode): Int = {
 
    }
}";"";"2020-03-25 15:18:38"
10909;880;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func maxLevelSum(root *TreeNode) int {
 
}";"";"2020-03-25 15:18:38"
10910;880;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun maxLevelSum(root: TreeNode?): Int {
 
    }
}";"";"2020-03-25 15:18:38"
10911;880;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def maxLevelSum(self, root: TreeNode) -> int:";"";"2020-03-25 15:18:38"
10912;880;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var maxLevelSum = function(root) {
 
};";"";"2020-03-25 15:18:38"
10913;880;"PHP";"/**";"";"2020-03-25 15:18:38"
10914;880;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func maxLevelSum(_ root: TreeNode?) -> Int {
        
    }
}";"";"2020-03-25 15:18:38"
10915;880;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer}
def max_level_sum(root)
 
end";"";"2020-03-25 15:18:38"
10916;880;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def maxLevelSum(self, root):
        """"""
        :type root: TreeNode
        :rtype: int
        """"""";"";"2020-03-25 15:18:38"
10917;881;"C#";"public class Solution {
    public int DaysBetweenDates(string date1, 
string date2) {
 
    }
}";"";"2020-03-25 15:18:38"
10918;881;"Java";"class Solution {
    public int daysBetweenDates(String date1, 
String date2) {
 
    }
}";"";"2020-03-25 15:18:38"
10919;881;"C";"int daysBetweenDates(char * date1, char * date2){
 
}";"";"2020-03-25 15:18:38"
10920;881;"Rust";"impl Solution {
    pub fn days_between_dates(date1: String, date2: 
String) -> i32 {
        
    }
}";"";"2020-03-25 15:18:38"
10921;881;"Scala";"object Solution {
    def daysBetweenDates(date1: String, date2: 
String): Int = {
 
    }
}";"";"2020-03-25 15:18:38"
10922;881;"Go";"func daysBetweenDates(date1 string, date2 string) 
int {
 
}";"";"2020-03-25 15:18:38"
10923;881;"Kotlin";"class Solution {
    fun daysBetweenDates(date1: String, date2: 
String): Int {
 
    }
}";"";"2020-03-25 15:18:38"
10924;881;"Python3";"class Solution:
    def daysBetweenDates(self, date1: str, date2: 
str) -> int:";"";"2020-03-25 15:18:38"
10925;881;"JavaScript";"/**
 * @param {string} date1
 * @param {string} date2
 * @return {number}
 */
var daysBetweenDates = function(date1, date2) {
 
};";"";"2020-03-25 15:18:38"
10926;881;"PHP";"class Solution {
 
    /**
     * @param String $date1
     * @param String $date2
     * @return Integer
     */
    function daysBetweenDates($date1, $date2) {
        
    }
}";"";"2020-03-25 15:18:38"
10927;881;"Swift";"class Solution {
    func daysBetweenDates(_ date1: String, _ date2: 
String) -> Int {
        
    }
}";"";"2020-03-25 15:18:38"
10928;881;"Ruby";"# @param {String} date1";"";"2020-03-25 15:18:38"
10929;881;"Python";"class Solution(object):
    def daysBetweenDates(self, date1, date2):
        """"""
        :type date1: str
        :type date2: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:38"
10930;882;"C#";"public class Solution {
    public int[][] FloodFill(int[][] image, int sr, 
int sc, int newColor) {
 
    }
}";"";"2020-03-25 15:18:38"
10931;882;"Java";"class Solution {
    public int[][] floodFill(int[][] image, int sr, 
int sc, int newColor) {
 
    }
}";"";"2020-03-25 15:18:38"
10932;882;"Rust";"impl Solution {
    pub fn flood_fill(image: Vec<Vec<i32>>, sr: i32,
 sc: i32, new_color: i32) -> Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:38"
10933;882;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** floodFill(int** image, int imageSize, int* 
imageColSize, int sr, int sc, int newColor, int* 
returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:38"
10934;882;"Scala";"object Solution {
    def floodFill(image: Array[Array[Int]], sr: Int,
 sc: Int, newColor: Int): Array[Array[Int]] = {
 
    }
}";"";"2020-03-25 15:18:38"
10935;882;"Go";"func floodFill(image [][]int, sr int, sc int, 
newColor int) [][]int {
 
}";"";"2020-03-25 15:18:38"
10936;882;"Kotlin";"class Solution {
    fun floodFill(image: Array<IntArray>, sr: Int, 
sc: Int, newColor: Int): Array<IntArray> {
 
    }
}";"";"2020-03-25 15:18:38"
10937;882;"Python3";"class Solution:
    def floodFill(self, image: List[List[int]], sr: 
int, sc: int, newColor: int) -> List[List[int]]:";"";"2020-03-25 15:18:38"
10938;882;"JavaScript";"/**
 * @param {number[][]} image
 * @param {number} sr
 * @param {number} sc
 * @param {number} newColor
 * @return {number[][]}
 */
var floodFill = function(image, sr, sc, newColor) {
 
};";"";"2020-03-25 15:18:38"
10939;882;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $image
     * @param Integer $sr
     * @param Integer $sc
     * @param Integer $newColor
     * @return Integer[][]
     */
    function floodFill($image, $sr, $sc, $newColor) 
{
        
    }
}";"";"2020-03-25 15:18:38"
10940;882;"Swift";"class Solution {
    func floodFill(_ image: [[Int]], _ sr: Int, _ 
sc: Int, _ newColor: Int) -> [[Int]] {
        
    }
}";"";"2020-03-25 15:18:38"
10941;882;"Ruby";"# @param {Integer[][]} image
# @param {Integer} sr
# @param {Integer} sc
# @param {Integer} new_color
# @return {Integer[][]}
def flood_fill(image, sr, sc, new_color)
 
end";"";"2020-03-25 15:18:38"
10942;882;"Python";"class Solution(object):
    def floodFill(self, image, sr, sc, newColor):
        """"""
        :type image: List[List[int]]
        :type sr: int
        :type sc: int
        :type newColor: int
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:38"
10943;883;"MySQL";"# Write your MySQL query statement below";"";"2020-03-25 15:18:38"
10944;883;"MS SQL Server";"/* Write your T-SQL query statement below */";"";"2020-03-25 15:18:38"
10945;883;"Oracle";"/* Write your PL/SQL query statement below */";"";"2020-03-25 15:18:38"
10946;884;"C#";"public class Solution {
    public int LongestCommonSubsequence(string 
text1, string text2) {
 
    }
}";"";"2020-03-25 15:18:38"
10947;884;"Java";"class Solution {
    public int longestCommonSubsequence(String 
text1, String text2) {
 
    }
}";"";"2020-03-25 15:18:38"
10948;884;"Rust";"impl Solution {
    pub fn longest_common_subsequence(text1: String,
 text2: String) -> i32 {
        
    }
}";"";"2020-03-25 15:18:38"
10949;884;"C";"int longestCommonSubsequence(char * text1, char * 
text2){
 
}";"";"2020-03-25 15:18:38"
10950;884;"Scala";"object Solution {
    def longestCommonSubsequence(text1: String, 
text2: String): Int = {
 
    }
}";"";"2020-03-25 15:18:38"
10951;884;"Go";"func longestCommonSubsequence(text1 string, text2 
string) int {
 
}";"";"2020-03-25 15:18:38"
10952;884;"Kotlin";"class Solution {
    fun longestCommonSubsequence(text1: String, 
text2: String): Int {
 
    }
}";"";"2020-03-25 15:18:38"
10953;884;"Python3";"class Solution:
    def longestCommonSubsequence(self, text1: str, 
text2: str) -> int:";"";"2020-03-25 15:18:38"
10954;884;"JavaScript";"/**
 * @param {string} text1
 * @param {string} text2
 * @return {number}
 */
var longestCommonSubsequence = function(text1, 
text2) {
 
};";"";"2020-03-25 15:18:38"
10955;884;"PHP";"class Solution {
 
    /**
     * @param String $text1
     * @param String $text2
     * @return Integer
     */
    function longestCommonSubsequence($text1, 
$text2) {
        
    }
}";"";"2020-03-25 15:18:38"
10956;884;"Swift";"class Solution {
    func longestCommonSubsequence(_ text1: String, 
_ text2: String) -> Int {
        
    }
}";"";"2020-03-25 15:18:38"
10957;884;"Ruby";"# @param {String} text1
# @param {String} text2
# @return {Integer}
def longest_common_subsequence(text1, text2)
 
end";"";"2020-03-25 15:18:38"
10958;884;"Python";"class Solution(object):
    def longestCommonSubsequence(self, text1, text2)
:
        """"""
        :type text1: str
        :type text2: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:38"
10959;885;"C#";"public class Solution {
    public int ThirdMax(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:38"
10960;885;"Java";"class Solution {
    public int thirdMax(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:38"
10961;885;"Rust";"impl Solution {
    pub fn third_max(nums: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:38"
10962;885;"C";"int thirdMax(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:38"
10963;885;"Scala";"object Solution {
    def thirdMax(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:38"
10964;885;"Go";"func thirdMax(nums []int) int {
 
}";"";"2020-03-25 15:18:38"
10965;885;"Kotlin";"class Solution {
    fun thirdMax(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:38"
10966;885;"Python3";"class Solution:
    def thirdMax(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:38"
10967;885;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var thirdMax = function(nums) {
 
};";"";"2020-03-25 15:18:38"
10968;885;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function thirdMax($nums) {
        
    }
}";"";"2020-03-25 15:18:38"
10969;885;"Swift";"class Solution {
    func thirdMax(_ nums: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:38"
10970;885;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def third_max(nums)
 
end";"";"2020-03-25 15:18:38"
10971;885;"Python";"class Solution(object):
    def thirdMax(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:38"
10972;886;"C#";"public class Solution {
    public IList<string> FindWords(char[][] board, 
string[] words) {
 
    }
}";"";"2020-03-25 15:18:38"
10973;886;"Java";"class Solution {
    public List<String> findWords(char[][] board, 
String[] words) {
 
    }
}";"";"2020-03-25 15:18:38"
10974;886;"Rust";"impl Solution {
    pub fn find_words(board: Vec<Vec<char>>, words: 
Vec<String>) -> Vec<String> {
 
    }
}";"";"2020-03-25 15:18:38"
10975;886;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** findWords(char** board, int boardSize, int* 
boardColSize, char ** words, int wordsSize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:38"
10976;886;"Scala";"object Solution {
    def findWords(board: Array[Array[Char]], words: 
Array[String]): List[String] = {
 
    }
}";"";"2020-03-25 15:18:38"
10977;886;"Go";"func findWords(board [][]byte, words []string) []
string {
 
}";"";"2020-03-25 15:18:38"
10978;886;"Kotlin";"class Solution {
    fun findWords(board: Array<CharArray>, words: 
Array<String>): List<String> {
 
    }
}";"";"2020-03-25 15:18:38"
10979;886;"Python3";"class Solution:
    def findWords(self, board: List[List[str]], 
words: List[str]) -> List[str]:";"";"2020-03-25 15:18:38"
10980;886;"JavaScript";"/**
 * @param {character[][]} board
 * @param {string[]} words
 * @return {string[]}
 */
var findWords = function(board, words) {
 
};";"";"2020-03-25 15:18:38"
10981;886;"PHP";"class Solution {
 
    /**
     * @param String[][] $board
     * @param String[] $words
     * @return String[]
     */
    function findWords($board, $words) {
 
    }
}";"";"2020-03-25 15:18:38"
10982;886;"Swift";"class Solution {
    func findWords(_ board: [[Character]], _ words: 
[String]) -> [String] {
 
    }
}";"";"2020-03-25 15:18:38"
10983;886;"Ruby";"# @param {Character[][]} board
# @param {String[]} words
# @return {String[]}
def find_words(board, words)
 
end";"";"2020-03-25 15:18:38"
10984;886;"Python";"class Solution(object):
    def findWords(self, board, words):
        """"""
        :type board: List[List[str]]
        :type words: List[str]
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:38"
10985;887;"C#";"public class Solution {
    public int MaxAbsValExpr(int[] arr1, int[] arr2)
 {
 
    }
}";"";"2020-03-25 15:18:38"
10986;887;"Java";"class Solution {
    public int maxAbsValExpr(int[] arr1, int[] arr2)
 {
 
    }
}";"";"2020-03-25 15:18:38"
10987;887;"C";"int maxAbsValExpr(int* arr1, int arr1Size, int* 
arr2, int arr2Size){
 
}";"";"2020-03-25 15:18:38"
10988;887;"Rust";"impl Solution {
    pub fn max_abs_val_expr(arr1: Vec<i32>, arr2: 
Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:38"
10989;887;"Scala";"object Solution {
    def maxAbsValExpr(arr1: Array[Int], arr2: Array
[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:38"
10990;887;"Go";"func maxAbsValExpr(arr1 []int, arr2 []int) int {
 
}";"";"2020-03-25 15:18:38"
10991;887;"Kotlin";"class Solution {
    fun maxAbsValExpr(arr1: IntArray, arr2: 
IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:38"
10992;887;"Python3";"class Solution:
    def maxAbsValExpr(self, arr1: List[int], arr2: 
List[int]) -> int:";"";"2020-03-25 15:18:38"
10993;887;"JavaScript";"/**
 * @param {number[]} arr1
 * @param {number[]} arr2
 * @return {number}
 */
var maxAbsValExpr = function(arr1, arr2) {
 
};";"";"2020-03-25 15:18:38"
10994;887;"PHP";"class Solution {
 
    /**
     * @param Integer[] $arr1
     * @param Integer[] $arr2
     * @return Integer
     */
    function maxAbsValExpr($arr1, $arr2) {
        
    }
}";"";"2020-03-25 15:18:38"
10995;887;"Swift";"class Solution {
    func maxAbsValExpr(_ arr1: [Int], _ arr2: [Int])
 -> Int {
        
    }
}";"";"2020-03-25 15:18:38"
10996;887;"Ruby";"# @param {Integer[]} arr1
# @param {Integer[]} arr2
# @return {Integer}
def max_abs_val_expr(arr1, arr2)
 
end";"";"2020-03-25 15:18:38"
10997;887;"Python";"class Solution(object):
    def maxAbsValExpr(self, arr1, arr2):
        """"""
        :type arr1: List[int]
        :type arr2: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:38"
10998;888;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode DeleteNode(TreeNode root, int 
key) {
 
    }
}";"";"2020-03-25 15:18:38"
10999;888;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode deleteNode(TreeNode root, int 
key) {
 
    }
}";"";"2020-03-25 15:18:38"
11000;888;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* deleteNode(struct TreeNode* root, 
int key){
 
}";"";"2020-03-25 15:18:38"
11001;888;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn delete_node(root: 
Option<Rc<RefCell<TreeNode>>>, key: i32) -> 
Option<Rc<RefCell<TreeNode>>> {
        
    }";"";"2020-03-25 15:18:38"
11002;888;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def deleteNode(root: TreeNode, key: Int): 
TreeNode = {
 
    }
}";"";"2020-03-25 15:18:38"
11003;888;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func deleteNode(root *TreeNode, key int) *TreeNode {
 
}";"";"2020-03-25 15:18:38"
11004;888;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun deleteNode(root: TreeNode?, key: Int): 
TreeNode? {
 
    }
}";"";"2020-03-25 15:18:38"
11005;888;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def deleteNode(self, root: TreeNode, key: int) 
-> TreeNode:";"";"2020-03-25 15:18:38"
11006;888;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} key
 * @return {TreeNode}
 */
var deleteNode = function(root, key) {
 
};";"";"2020-03-25 15:18:38"
11007;888;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @param Integer $key
     * @return TreeNode
     */
    function deleteNode($root, $key) {
        
    }
}";"";"2020-03-25 15:18:38"
11008;888;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func deleteNode(_ root: TreeNode?, _ key: Int) 
-> TreeNode? {
        
    }
}";"";"2020-03-25 15:18:38"
11009;888;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @param {Integer} key
# @return {TreeNode}
def delete_node(root, key)
 
end";"";"2020-03-25 15:18:38"
11010;888;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def deleteNode(self, root, key):
        """"""
        :type root: TreeNode
        :type key: int
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:38"
11011;889;"C#";"public class Solution {
    public int LongestDecomposition(string text) {
 
    }
}";"";"2020-03-25 15:18:38"
11012;889;"Java";"class Solution {
    public int longestDecomposition(String text) {
 
    }
}";"";"2020-03-25 15:18:38"
11013;889;"Rust";"impl Solution {
    pub fn longest_decomposition(text: String) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:38"
11014;889;"C";"int longestDecomposition(char * text){
 
}";"";"2020-03-25 15:18:38"
11015;889;"Scala";"object Solution {
    def longestDecomposition(text: String): Int = {
 
    }
}";"";"2020-03-25 15:18:38"
11016;889;"Go";"func longestDecomposition(text string) int {
 
}";"";"2020-03-25 15:18:38"
11017;889;"Kotlin";"class Solution {
    fun longestDecomposition(text: String): Int {
 
    }
}";"";"2020-03-25 15:18:38"
11018;889;"Python3";"class Solution:
    def longestDecomposition(self, text: str) -> 
int:";"";"2020-03-25 15:18:38"
11019;889;"JavaScript";"/**
 * @param {string} text
 * @return {number}
 */
var longestDecomposition = function(text) {
 
};";"";"2020-03-25 15:18:38"
11020;889;"PHP";"class Solution {
 
    /**
     * @param String $text
     * @return Integer
     */
    function longestDecomposition($text) {
        
    }
}";"";"2020-03-25 15:18:38"
11021;889;"Swift";"class Solution {
    func longestDecomposition(_ text: String) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:38"
11022;889;"Ruby";"# @param {String} text
# @return {Integer}
def longest_decomposition(text)
 
end";"";"2020-03-25 15:18:38"
11023;889;"Python";"class Solution(object):
    def longestDecomposition(self, text):
        """"""
        :type text: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:38"
11024;890;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int LongestZigZag(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:38"
11025;890;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int longestZigZag(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:38"
11026;890;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int longestZigZag(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:38"
11027;890;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn longest_zig_zag(root: 
Option<Rc<RefCell<TreeNode>>>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:38"
11028;890;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def longestZigZag(root: TreeNode): Int = {
 
    }
}";"";"2020-03-25 15:18:38"
11029;890;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func longestZigZag(root *TreeNode) int {
 
}";"";"2020-03-25 15:18:38"
11030;890;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun longestZigZag(root: TreeNode?): Int {
 
    }
}";"";"2020-03-25 15:18:38"
11031;890;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def longestZigZag(self, root: TreeNode) -> int:";"";"2020-03-25 15:18:38"
11032;890;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var longestZigZag = function(root) {
 
};";"";"2020-03-25 15:18:38"
11033;890;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer
     */
    function longestZigZag($root) {
 
    }
}";"";"2020-03-25 15:18:38"
11034;890;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func longestZigZag(_ root: TreeNode?) -> Int {
        
    }
}";"";"2020-03-25 15:18:38"
11035;890;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer}
def longest_zig_zag(root)
 
end";"";"2020-03-25 15:18:38"
11036;890;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def longestZigZag(self, root):
        """"""
        :type root: TreeNode
        :rtype: int
        """"""";"";"2020-03-25 15:18:38"
11037;891;"C#";"public class Solution {
    public int[] HitBricks(int[][] grid, int[][] 
hits) {
 
    }
}";"";"2020-03-25 15:18:38"
11038;891;"Java";"class Solution {
    public int[] hitBricks(int[][] grid, int[][] 
hits) {
 
    }
}";"";"2020-03-25 15:18:38"
11039;891;"Rust";"impl Solution {
    pub fn hit_bricks(grid: Vec<Vec<i32>>, hits: 
Vec<Vec<i32>>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:38"
11040;891;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* hitBricks(int** grid, int gridSize, int* 
gridColSize, int** hits, int hitsSize, int* 
hitsColSize, int* returnSize){
 
}";"";"2020-03-25 15:18:38"
11041;891;"Scala";"object Solution {
    def hitBricks(grid: Array[Array[Int]], hits: 
Array[Array[Int]]): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:38"
11042;891;"Go";"func hitBricks(grid [][]int, hits [][]int) []int {
 
}";"";"2020-03-25 15:18:38"
11043;891;"Kotlin";"class Solution {
    fun hitBricks(grid: Array<IntArray>, hits: 
Array<IntArray>): IntArray {
 
    }
}";"";"2020-03-25 15:18:38"
11044;891;"Python3";"class Solution:
    def hitBricks(self, grid: List[List[int]], 
hits: List[List[int]]) -> List[int]:";"";"2020-03-25 15:18:38"
11045;891;"JavaScript";"/**
 * @param {number[][]} grid
 * @param {number[][]} hits
 * @return {number[]}
 */
var hitBricks = function(grid, hits) {
 
};";"";"2020-03-25 15:18:38"
11046;891;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $grid
     * @param Integer[][] $hits
     * @return Integer[]
     */
    function hitBricks($grid, $hits) {
        
    }
}";"";"2020-03-25 15:18:38"
11047;891;"Swift";"class Solution {
    func hitBricks(_ grid: [[Int]], _ hits: [[Int]])
 -> [Int] {
        
    }
}";"";"2020-03-25 15:18:38"
11048;891;"Ruby";"# @param {Integer[][]} grid
# @param {Integer[][]} hits
# @return {Integer[]}
def hit_bricks(grid, hits)
 
end";"";"2020-03-25 15:18:38"
11049;891;"Python";"class Solution(object):
    def hitBricks(self, grid, hits):
        """"""
        :type grid: List[List[int]]
        :type hits: List[List[int]]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:38"
11050;892;"C#";"public class Solution {
    public int LengthOfLongestSubstring(string s) {
 
    }
}";"";"2020-03-25 15:18:38"
11051;892;"Java";"class Solution {
    public int lengthOfLongestSubstring(String s) {
 
    }
}";"";"2020-03-25 15:18:38"
11052;892;"C";"int lengthOfLongestSubstring(char* s){
 
}";"";"2020-03-25 15:18:38"
11053;892;"Rust";"impl Solution {
    pub fn length_of_longest_substring(s: String) 
-> i32 {
 
    }
}";"";"2020-03-25 15:18:38"
11054;892;"Scala";"object Solution {
    def lengthOfLongestSubstring(s: String): Int = {
 
    }
}";"";"2020-03-25 15:18:38"
11055;892;"Go";"func lengthOfLongestSubstring(s string) int {
 
}";"";"2020-03-25 15:18:38"
11056;892;"Kotlin";"class Solution {
    fun lengthOfLongestSubstring(s: String): Int {
 
    }
}";"";"2020-03-25 15:18:38"
11057;892;"Python3";"class Solution:
    def lengthOfLongestSubstring(self, s: str) -> 
int:";"";"2020-03-25 15:18:38"
11058;892;"JavaScript";"/**
 * @param {string} s
 * @return {number}
 */
var lengthOfLongestSubstring = function(s) {
 
};";"";"2020-03-25 15:18:38"
11059;892;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return Integer
     */
    function lengthOfLongestSubstring($s) {
 
    }
}";"";"2020-03-25 15:18:38"
11060;892;"Swift";"class Solution {
    func lengthOfLongestSubstring(_ s: String) -> 
Int {
 
    }
}";"";"2020-03-25 15:18:38"
11061;892;"Ruby";"# @param {String} s";"";"2020-03-25 15:18:38"
11062;892;"Python";"class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:38"
11063;893;"C#";"public class Solution {
    public string LongestDupSubstring(string S) {
 
    }
}";"";"2020-03-25 15:18:38"
11064;893;"Java";"class Solution {
    public String longestDupSubstring(String S) {
 
    }
}";"";"2020-03-25 15:18:38"
11065;893;"Rust";"impl Solution {
    pub fn longest_dup_substring(s: String) -> 
String {
 
    }
}";"";"2020-03-25 15:18:38"
11066;893;"C";"char * longestDupSubstring(char * S){
 
}";"";"2020-03-25 15:18:38"
11067;893;"Scala";"object Solution {
    def longestDupSubstring(S: String): String = {
 
    }
}";"";"2020-03-25 15:18:38"
11068;893;"Go";"func longestDupSubstring(S string) string {
 
}";"";"2020-03-25 15:18:38"
11069;893;"Kotlin";"class Solution {
    fun longestDupSubstring(S: String): String {
 
    }
}";"";"2020-03-25 15:18:38"
11070;893;"Python3";"class Solution:
    def longestDupSubstring(self, S: str) -> str:";"";"2020-03-25 15:18:38"
11071;893;"JavaScript";"/**
 * @param {string} S
 * @return {string}
 */
var longestDupSubstring = function(S) {
 
};";"";"2020-03-25 15:18:38"
11072;893;"PHP";"class Solution {
 
    /**
     * @param String $S
     * @return String
     */
    function longestDupSubstring($S) {
 
    }
}";"";"2020-03-25 15:18:38"
11073;893;"Swift";"class Solution {
    func longestDupSubstring(_ S: String) -> String 
{
 
    }
}";"";"2020-03-25 15:18:38"
11074;893;"Ruby";"# @param {String} s
# @return {String}
def longest_dup_substring(s)
 
end";"";"2020-03-25 15:18:38"
11075;893;"Python";"class Solution(object):
    def longestDupSubstring(self, S):
        """"""
        :type S: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:38"
11076;894;"C#";"public class Solution {
    public int[] TwoSum(int[] nums, int target) {
 
    }
}";"";"2020-03-25 15:18:38"
11077;894;"Java";"class Solution {
    public int[] twoSum(int[] nums, int target) {
 
    }
}";"";"2020-03-25 15:18:38"
11078;894;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* twoSum(int* nums, int numsSize, int target, 
int* returnSize){
 
}";"";"2020-03-25 15:18:38"
11079;894;"Rust";"impl Solution {
    pub fn two_sum(nums: Vec<i32>, target: i32) -> 
Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:38"
11080;894;"Scala";"object Solution {
    def twoSum(nums: Array[Int], target: Int): Array
[Int] = {
 
    }
}";"";"2020-03-25 15:18:38"
11081;894;"Go";"func twoSum(nums []int, target int) []int {
 
}";"";"2020-03-25 15:18:38"
11082;894;"Kotlin";"class Solution {
    fun twoSum(nums: IntArray, target: Int): 
IntArray {
 
    }
}";"";"2020-03-25 15:18:38"
11083;894;"Python3";"class Solution:
    def twoSum(self, nums: List[int], target: int) 
-> List[int]:";"";"2020-03-25 15:18:38"
11084;894;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
var twoSum = function(nums, target) {
 
};";"";"2020-03-25 15:18:38"
11085;894;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer $target
     * @return Integer[]
     */
    function twoSum($nums, $target) {
 
    }
}";"";"2020-03-25 15:18:38"
11086;894;"Swift";"class Solution {
    func twoSum(_ nums: [Int], _ target: Int) -> 
[Int] {
 
    }
}";"";"2020-03-25 15:18:38"
11087;894;"Ruby";"# @param {Integer[]} nums
# @param {Integer} target
# @return {Integer[]}
def two_sum(nums, target)
 
end";"";"2020-03-25 15:18:38"
11088;894;"Python";"class Solution(object):
    def twoSum(self, nums, target):
        """"""
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:38"
11089;895;"C#";"public class Solution {
    public bool CanPartitionKSubsets(int[] nums, 
int k) {
 
    }
}";"";"2020-03-25 15:18:38"
11090;895;"Java";"class Solution {
    public boolean canPartitionKSubsets(int[] nums, 
int k) {
 
    }
}";"";"2020-03-25 15:18:38"
11091;895;"Rust";"impl Solution {
    pub fn can_partition_k_subsets(nums: Vec<i32>, 
k: i32) -> bool {
        
    }
}";"";"2020-03-25 15:18:38"
11092;895;"C";"bool canPartitionKSubsets(int* nums, int numsSize, 
int k){
 
}";"";"2020-03-25 15:18:38"
11093;895;"Scala";"object Solution {
    def canPartitionKSubsets(nums: Array[Int], k: 
Int): Boolean = {
 
    }
}";"";"2020-03-25 15:18:38"
11094;895;"Go";"func canPartitionKSubsets(nums []int, k int) bool {
 
}";"";"2020-03-25 15:18:38"
11095;895;"Kotlin";"class Solution {
    fun canPartitionKSubsets(nums: IntArray, k: Int)
: Boolean {
 
    }
}";"";"2020-03-25 15:18:38"
11096;895;"Python3";"class Solution:
    def canPartitionKSubsets(self, nums: List[int], 
k: int) -> bool:";"";"2020-03-25 15:18:38"
11097;895;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} k
 * @return {boolean}
 */
var canPartitionKSubsets = function(nums, k) {
 
};";"";"2020-03-25 15:18:38"
11098;895;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer $k
     * @return Boolean
     */
    function canPartitionKSubsets($nums, $k) {
        
    }
}";"";"2020-03-25 15:18:38"
11099;895;"Swift";"class Solution {
    func canPartitionKSubsets(_ nums: [Int], _ k: 
Int) -> Bool {
        
    }
}";"";"2020-03-25 15:18:38"
11100;895;"Ruby";"# @param {Integer[]} nums
# @param {Integer} k
# @return {Boolean}
def can_partition_k_subsets(nums, k)
 
end";"";"2020-03-25 15:18:38"
11101;895;"Python";"class Solution(object):
    def canPartitionKSubsets(self, nums, k):
        """"""
        :type nums: List[int]
        :type k: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:38"
11102;896;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public bool IsSubPath(ListNode head, TreeNode 
root) {
 
    }
}";"";"2020-03-25 15:18:39"
11103;896;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSubPath(ListNode head, 
TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:39"
11104;896;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
bool isSubPath(struct ListNode* head, struct 
TreeNode* root){
 
}";"";"2020-03-25 15:18:39"
11105;896;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]";"";"2020-03-25 15:18:39"
11106;896;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def isSubPath(head: ListNode, root: TreeNode): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:39"
11107;896;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func isSubPath(head *ListNode, root *TreeNode) bool 
{
 
}";"";"2020-03-25 15:18:39"
11108;896;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun isSubPath(head: ListNode?, root: TreeNode?)
: Boolean {
 
    }
}";"";"2020-03-25 15:18:39"
11109;896;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def isSubPath(self, head: ListNode, root: 
TreeNode) -> bool:";"";"2020-03-25 15:18:39"
11110;896;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {ListNode} head
 * @param {TreeNode} root
 * @return {boolean}
 */
var isSubPath = function(head, root) {
 
};";"";"2020-03-25 15:18:39"
11111;896;"PHP";"/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param ListNode $head
     * @param TreeNode $root
     * @return Boolean
     */";"";"2020-03-25 15:18:39"
11112;896;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func isSubPath(_ head: ListNode?, _ root: ";"";"2020-03-25 15:18:39"
11113;896;"Ruby";"# Definition for singly-linked list.";"";"2020-03-25 15:18:39"
11114;896;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def isSubPath(self, head, root):
        """"""
        :type head: ListNode
        :type root: TreeNode
        :rtype: bool
        """"""";"";"2020-03-25 15:18:39"
11115;897;"C#";"public class Solution {
    public int BulbSwitch(int n) {
 
    }
}";"";"2020-03-25 15:18:39"
11116;897;"Java";"class Solution {
    public int bulbSwitch(int n) {
 
    }
}";"";"2020-03-25 15:18:39"
11117;897;"C";"int bulbSwitch(int n){
 
}";"";"2020-03-25 15:18:39"
11118;897;"Rust";"impl Solution {
    pub fn bulb_switch(n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:39"
11119;897;"Scala";"object Solution {
    def bulbSwitch(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:39"
11120;897;"Go";"func bulbSwitch(n int) int {
 
}";"";"2020-03-25 15:18:39"
11121;897;"Kotlin";"class Solution {
    fun bulbSwitch(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:39"
11122;897;"Python3";"class Solution:
    def bulbSwitch(self, n: int) -> int:";"";"2020-03-25 15:18:39"
11123;897;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var bulbSwitch = function(n) {
 
};";"";"2020-03-25 15:18:39"
11124;897;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function bulbSwitch($n) {
        
    }
}";"";"2020-03-25 15:18:39"
11125;897;"Swift";"class Solution {
    func bulbSwitch(_ n: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:39"
11126;897;"Ruby";"# @param {Integer} n";"";"2020-03-25 15:18:39"
11127;897;"Python";"class Solution(object):
    def bulbSwitch(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:39"
11128;898;"C#";"public class Solution {
 
    public Solution(int[] w) {
 
    }
    
    public int PickIndex() {
 
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * Solution obj = new Solution(w);
 * int param_1 = obj.PickIndex();
 */";"";"2020-03-25 15:18:39"
11129;898;"Java";"class Solution {
 
    public Solution(int[] w) {
 
    }
    
    public int pickIndex() {
 
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * Solution obj = new Solution(w);
 * int param_1 = obj.pickIndex();
 */";"";"2020-03-25 15:18:39"
11130;898;"Rust";"struct Solution {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl Solution {
 
    fn new(w: Vec<i32>) -> Self {
 
    }
    
    fn pick_index(&self) -> i32 {
 
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * let obj = Solution::new(w);";"";"2020-03-25 15:18:39"
11131;898;"C";"typedef struct {
    
} Solution;
 
 
Solution* solutionCreate(int* w, int wSize) {
    
}
 
int solutionPickIndex(Solution* obj) {
  
}
 
void solutionFree(Solution* obj) {
    
}
 
/**
 * Your Solution struct will be instantiated and 
called as such:
 * Solution* obj = solutionCreate(w, wSize);
 * int param_1 = solutionPickIndex(obj);
 
 * solutionFree(obj);
*/";"";"2020-03-25 15:18:39"
11132;898;"Scala";"class Solution(_w: Array[Int]) {
 
    def pickIndex(): Int = {
 
    }
 
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * var obj = new Solution(w)
 * var param_1 = obj.pickIndex()
 */";"";"2020-03-25 15:18:39"
11133;898;"Go";"type Solution struct {
 
}
 
 
func Constructor(w []int) Solution {
 
}
 
 
func (this *Solution) PickIndex() int {
 
}
 
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * obj := Constructor(w);
 * param_1 := obj.PickIndex();
 */";"";"2020-03-25 15:18:39"
11134;898;"Kotlin";"class Solution(w: IntArray) {
 
    fun pickIndex(): Int {
 
    }
 
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * var obj = Solution(w)
 * var param_1 = obj.pickIndex()
 */";"";"2020-03-25 15:18:39"
11135;898;"Python3";"class Solution:
 
    def __init__(self, w: List[int]):
        
 
    def pickIndex(self) -> int:
        
 
 
# Your Solution object will be instantiated and 
called as such:
# obj = Solution(w)
# param_1 = obj.pickIndex()";"";"2020-03-25 15:18:39"
11136;898;"JavaScript";"/**
 * @param {number[]} w
 */
var Solution = function(w) {
 
};
 
/**
 * @return {number}
 */
Solution.prototype.pickIndex = function() {
 
};
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * var obj = new Solution(w)
 * var param_1 = obj.pickIndex()
 */";"";"2020-03-25 15:18:39"
11137;898;"PHP";"class Solution {
    /**
     * @param Integer[] $w
     */
    function __construct($w) {
        
    }
  
    /**
     * @return Integer
     */
    function pickIndex() {
        
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * $obj = Solution($w);
 * $ret_1 = $obj->pickIndex();
 */";"";"2020-03-25 15:18:39"
11138;898;"Swift";"class Solution {
 
    init(_ w: [Int]) {
 
    }
    
    func pickIndex() -> Int {
 
    }
}
 
/**
 * Your Solution object will be instantiated and 
called as such:
 * let obj = Solution(w)
 * let ret_1: Int = obj.pickIndex()
 */";"";"2020-03-25 15:18:39"
11139;898;"Ruby";"class Solution
 
=begin
    :type w: Integer[]
=end
    def initialize(w)
 
    end
 
 
=begin
    :rtype: Integer
=end
    def pick_index()
 
    end
 
 
end
 
# Your Solution object will be instantiated and 
called as such:
# obj = Solution.new(w)
# param_1 = obj.pick_index()";"";"2020-03-25 15:18:39"
11140;898;"Python";"class Solution(object):
 
    def __init__(self, w):
        """"""
        :type w: List[int]
        """"""
        
 
    def pickIndex(self):
        """"""
        :rtype: int
        """"""
        
 
 
# Your Solution object will be instantiated and 
called as such:
# obj = Solution(w)
# param_1 = obj.pickIndex()";"";"2020-03-25 15:18:39"
11141;899;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int PathSum(TreeNode root, int sum) {
 
    }
}";"";"2020-03-25 15:18:39"
11142;899;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int pathSum(TreeNode root, int sum) {
 
    }
}";"";"2020-03-25 15:18:39"
11143;899;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int pathSum(struct TreeNode* root, int sum){
 
}";"";"2020-03-25 15:18:39"
11144;899;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn path_sum(root: 
Option<Rc<RefCell<TreeNode>>>, sum: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:39"
11145;899;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def pathSum(root: TreeNode, sum: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:39"
11146;899;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func pathSum(root *TreeNode, sum int) int {
 
}";"";"2020-03-25 15:18:39"
11147;899;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun pathSum(root: TreeNode?, sum: Int): Int {
 
    }
}";"";"2020-03-25 15:18:39"
11148;899;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def pathSum(self, root: TreeNode, sum: int) -> 
int:";"";"2020-03-25 15:18:39"
11149;899;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} sum
 * @return {number}
 */
var pathSum = function(root, sum) {
 
};";"";"2020-03-25 15:18:39"
11150;899;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @param Integer $sum
     * @return Integer
     */
    function pathSum($root, $sum) {
 
    }
}";"";"2020-03-25 15:18:39"
11151;899;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func pathSum(_ root: TreeNode?, _ sum: Int) -> 
Int {
 
    }
}";"";"2020-03-25 15:18:39"
11152;899;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @param {Integer} sum
# @return {Integer}
def path_sum(root, sum)
 
end";"";"2020-03-25 15:18:39"
11153;899;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def pathSum(self, root, sum):
        """"""
        :type root: TreeNode
        :type sum: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:39"
11154;900;"C#";"public class Solution {
    public int FindLHS(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:39"
11155;900;"Java";"class Solution {
    public int findLHS(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:39"
11156;900;"C";"int findLHS(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:39"
11157;900;"Rust";"impl Solution {
    pub fn find_lhs(nums: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:39"
11158;900;"Scala";"object Solution {
    def findLHS(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:39"
11159;900;"Go";"func findLHS(nums []int) int {
 
}";"";"2020-03-25 15:18:39"
11160;900;"Kotlin";"class Solution {
    fun findLHS(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:39"
11161;900;"Python3";"class Solution:
    def findLHS(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:39"
11162;900;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var findLHS = function(nums) {
 
};";"";"2020-03-25 15:18:39"
11163;900;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function findLHS($nums) {
        
    }
}";"";"2020-03-25 15:18:39"
11164;900;"Swift";"class Solution {
    func findLHS(_ nums: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:39"
11165;900;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:18:39"
11166;900;"Python";"class Solution(object):
    def findLHS(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:39"
11167;901;"C#";"public class Solution {
    public IList<string> FullJustify(string[] words,
 int maxWidth) {
 
    }
}";"";"2020-03-25 15:18:39"
11168;901;"Java";"class Solution {
    public List<String> fullJustify(String[] words, 
int maxWidth) {
 
    }
}";"";"2020-03-25 15:18:39"
11169;901;"Rust";"impl Solution {
    pub fn full_justify(words: Vec<String>, 
max_width: i32) -> Vec<String> {
        
    }
}";"";"2020-03-25 15:18:39"
11170;901;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** fullJustify(char ** words, int wordsSize, 
int maxWidth, int* returnSize){
 
}";"";"2020-03-25 15:18:39"
11171;901;"Scala";"object Solution {
    def fullJustify(words: Array[String], maxWidth: 
Int): List[String] = {
 
    }
}";"";"2020-03-25 15:18:39"
11172;901;"Go";"func fullJustify(words []string, maxWidth int) []
string {
 
}";"";"2020-03-25 15:18:39"
11173;901;"Kotlin";"class Solution {
    fun fullJustify(words: Array<String>, maxWidth: 
Int): List<String> {
 
    }
}";"";"2020-03-25 15:18:39"
11174;901;"Python3";"class Solution:
    def fullJustify(self, words: List[str], 
maxWidth: int) -> List[str]:";"";"2020-03-25 15:18:39"
11175;901;"JavaScript";"/**
 * @param {string[]} words
 * @param {number} maxWidth
 * @return {string[]}
 */
var fullJustify = function(words, maxWidth) {
 
};";"";"2020-03-25 15:18:39"
11176;901;"PHP";"class Solution {
 
    /**
     * @param String[] $words
     * @param Integer $maxWidth
     * @return String[]
     */
    function fullJustify($words, $maxWidth) {
        
    }
}";"";"2020-03-25 15:18:39"
11177;901;"Swift";"class Solution {
    func fullJustify(_ words: [String], _ maxWidth: 
Int) -> [String] {
        
    }
}";"";"2020-03-25 15:18:39"
11178;901;"Ruby";"# @param {String[]} words
# @param {Integer} max_width
# @return {String[]}
def full_justify(words, max_width)
 
end";"";"2020-03-25 15:18:39"
11179;901;"Python";"class Solution(object):
    def fullJustify(self, words, maxWidth):
        """"""
        :type words: List[str]
        :type maxWidth: int
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:39"
11180;902;"C#";"public class Solution {
    public int MaxSideLength(int[][] mat, int 
threshold) {
 
    }
}";"";"2020-03-25 15:18:39"
11181;902;"Java";"class Solution {
    public int maxSideLength(int[][] mat, int 
threshold) {
 
    }
}";"";"2020-03-25 15:18:39"
11182;902;"Rust";"impl Solution {
    pub fn max_side_length(mat: Vec<Vec<i32>>, 
threshold: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:39"
11183;902;"C";"int maxSideLength(int** mat, int matSize, int* 
matColSize, int threshold){
 
}";"";"2020-03-25 15:18:39"
11184;902;"Scala";"object Solution {
    def maxSideLength(mat: Array[Array[Int]], 
threshold: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:39"
11185;902;"Go";"func maxSideLength(mat [][]int, threshold int) int {
 
}";"";"2020-03-25 15:18:39"
11186;902;"Kotlin";"class Solution {
    fun maxSideLength(mat: Array<IntArray>, 
threshold: Int): Int {
 
    }
}";"";"2020-03-25 15:18:39"
11187;902;"Python3";"class Solution:
    def maxSideLength(self, mat: List[List[int]], 
threshold: int) -> int:";"";"2020-03-25 15:18:39"
11188;902;"JavaScript";"/**
 * @param {number[][]} mat
 * @param {number} threshold
 * @return {number}
 */
var maxSideLength = function(mat, threshold) {
 
};";"";"2020-03-25 15:18:39"
11189;902;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $mat
     * @param Integer $threshold
     * @return Integer
     */
    function maxSideLength($mat, $threshold) {
 
    }
}";"";"2020-03-25 15:18:39"
11190;902;"Swift";"class Solution {
    func maxSideLength(_ mat: [[Int]], _ threshold: 
Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:39"
11191;902;"Ruby";"# @param {Integer[][]} mat
# @param {Integer} threshold
# @return {Integer}
def max_side_length(mat, threshold)
 
end";"";"2020-03-25 15:18:39"
11192;902;"Python";"class Solution(object):
    def maxSideLength(self, mat, threshold):
        """"""
        :type mat: List[List[int]]
        :type threshold: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:39"
11193;903;"C#";"public class Solution {
    public int SmallestRangeII(int[] A, int K) {
 
    }
}";"";"2020-03-25 15:18:39"
11194;903;"Java";"class Solution {
    public int smallestRangeII(int[] A, int K) {
 
    }
}";"";"2020-03-25 15:18:39"
11195;903;"Rust";"impl Solution {
    pub fn smallest_range_ii(a: Vec<i32>, k: i32) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:39"
11196;903;"C";"int smallestRangeII(int* A, int ASize, int K){
 
}";"";"2020-03-25 15:18:39"
11197;903;"Scala";"object Solution {
    def smallestRangeII(A: Array[Int], K: Int): Int 
= {
 
    }
}";"";"2020-03-25 15:18:39"
11198;903;"Go";"func smallestRangeII(A []int, K int) int {
 
}";"";"2020-03-25 15:18:39"
11199;903;"Kotlin";"class Solution {
    fun smallestRangeII(A: IntArray, K: Int): Int {
 
    }
}";"";"2020-03-25 15:18:39"
11200;903;"Python3";"class Solution:
    def smallestRangeII(self, A: List[int], K: int) 
-> int:";"";"2020-03-25 15:18:39"
11201;903;"JavaScript";"/**
 * @param {number[]} A
 * @param {number} K
 * @return {number}
 */
var smallestRangeII = function(A, K) {
 
};";"";"2020-03-25 15:18:39"
11202;903;"PHP";"class Solution {";"";"2020-03-25 15:18:39"
11203;903;"Swift";"class Solution {
    func smallestRangeII(_ A: [Int], _ K: Int) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:39"
11204;903;"Ruby";"# @param {Integer[]} a
# @param {Integer} k
# @return {Integer}
def smallest_range_ii(a, k)
 
end";"";"2020-03-25 15:18:39"
11205;903;"Python";"class Solution(object):
    def smallestRangeII(self, A, K):
        """"""
        :type A: List[int]
        :type K: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:39"
11206;904;"C#";"public class Solution {
    public string FractionToDecimal(int numerator, 
int denominator) {
 
    }
}";"";"2020-03-25 15:18:39"
11207;904;"Java";"class Solution {
    public String fractionToDecimal(int numerator, 
int denominator) {
 
    }
}";"";"2020-03-25 15:18:39"
11208;904;"C";"char * fractionToDecimal(int numerator, int 
denominator){
 
}";"";"2020-03-25 15:18:39"
11209;904;"Rust";"impl Solution {
    pub fn fraction_to_decimal(numerator: i32, 
denominator: i32) -> String {
 
    }
}";"";"2020-03-25 15:18:39"
11210;904;"Scala";"object Solution {
    def fractionToDecimal(numerator: Int, 
denominator: Int): String = {
 
    }
}";"";"2020-03-25 15:18:39"
11211;904;"Go";"func fractionToDecimal(numerator int, denominator 
int) string {
 
}";"";"2020-03-25 15:18:39"
11212;904;"Kotlin";"class Solution {
    fun fractionToDecimal(numerator: Int, 
denominator: Int): String {
 
    }
}";"";"2020-03-25 15:18:39"
11213;904;"Python3";"class Solution:
    def fractionToDecimal(self, numerator: int, 
denominator: int) -> str:";"";"2020-03-25 15:18:39"
11214;904;"JavaScript";"/**
 * @param {number} numerator
 * @param {number} denominator
 * @return {string}
 */
var fractionToDecimal = function(numerator, 
denominator) {
 
};";"";"2020-03-25 15:18:39"
11215;904;"PHP";"class Solution {
 
    /**
     * @param Integer $numerator
     * @param Integer $denominator
     * @return String
     */
    function fractionToDecimal($numerator, 
$denominator) {
 
    }
}";"";"2020-03-25 15:18:39"
11216;904;"Swift";"class Solution {
    func fractionToDecimal(_ numerator: Int, _ 
denominator: Int) -> String {
 
    }
}";"";"2020-03-25 15:18:39"
11217;904;"Ruby";"# @param {Integer} numerator";"";"2020-03-25 15:18:39"
11218;904;"Python";"class Solution(object):
    def fractionToDecimal(self, numerator, 
denominator):
        """"""
        :type numerator: int
        :type denominator: int
        :rtype: str
        """"""";"";"2020-03-25 15:18:39"
11219;905;"C#";"public class Solution {
    public int[][] Merge(int[][] intervals) {
 
    }
}";"";"2020-03-25 15:18:39"
11220;905;"Java";"class Solution {
    public int[][] merge(int[][] intervals) {
 
    }
}";"";"2020-03-25 15:18:39"
11221;905;"Rust";"impl Solution {
    pub fn merge(intervals: Vec<Vec<i32>>) -> 
Vec<Vec<i32>> {
 
    }
}";"";"2020-03-25 15:18:39"
11222;905;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** merge(int** intervals, int intervalsSize, 
int* intervalsColSize, int* returnSize, int** 
returnColumnSizes){
 
}";"";"2020-03-25 15:18:39"
11223;905;"Scala";"object Solution {
    def merge(intervals: Array[Array[Int]]): Array
[Array[Int]] = {
 
    }
}";"";"2020-03-25 15:18:39"
11224;905;"Go";"func merge(intervals [][]int) [][]int {
 
}";"";"2020-03-25 15:18:39"
11225;905;"Kotlin";"class Solution {
    fun merge(intervals: Array<IntArray>): 
Array<IntArray> {
 
    }
}";"";"2020-03-25 15:18:39"
11226;905;"Python3";"class Solution:
    def merge(self, intervals: List[List[int]]) -> 
List[List[int]]:";"";"2020-03-25 15:18:39"
11227;905;"JavaScript";"/**
 * @param {number[][]} intervals
 * @return {number[][]}
 */
var merge = function(intervals) {
 
};";"";"2020-03-25 15:18:39"
11228;905;"PHP";"class Solution {";"";"2020-03-25 15:18:39"
11229;905;"Swift";"class Solution {
    func merge(_ intervals: [[Int]]) -> [[Int]] {
        
    }
}";"";"2020-03-25 15:18:39"
11230;905;"Ruby";"# @param {Integer[][]} intervals
# @return {Integer[][]}
def merge(intervals)
 
end";"";"2020-03-25 15:18:39"
11231;905;"Python";"class Solution(object):
    def merge(self, intervals):
        """"""
        :type intervals: List[List[int]]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:39"
11232;906;"C#";"public class Solution {
    public bool CanVisitAllRooms(IList<IList<int>> 
rooms) {
 
    }
}";"";"2020-03-25 15:18:39"
11233;906;"Java";"class Solution {
    public boolean canVisitAllRooms
(List<List<Integer>> rooms) {
 
    }
}";"";"2020-03-25 15:18:39"
11234;906;"Rust";"impl Solution {
    pub fn can_visit_all_rooms(rooms: Vec<Vec<i32>>)
 -> bool {
        
    }
}";"";"2020-03-25 15:18:39"
11235;906;"C";"bool canVisitAllRooms(int** rooms, int roomsSize, 
int* roomsColSize){
 
}";"";"2020-03-25 15:18:39"
11236;906;"Scala";"object Solution {
    def canVisitAllRooms(rooms: List[List[Int]]): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:39"
11237;906;"Go";"func canVisitAllRooms(rooms [][]int) bool {
 
}";"";"2020-03-25 15:18:39"
11238;906;"Kotlin";"class Solution {
    fun canVisitAllRooms(rooms: List<List<Int>>): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:39"
11239;906;"Python3";"class Solution:
    def canVisitAllRooms(self, rooms: List[List[int]
]) -> bool:";"";"2020-03-25 15:18:39"
11240;906;"JavaScript";"/**
 * @param {number[][]} rooms
 * @return {boolean}
 */
var canVisitAllRooms = function(rooms) {
 
};";"";"2020-03-25 15:18:39"
11241;906;"PHP";"class Solution {";"";"2020-03-25 15:18:39"
11242;906;"Swift";"class Solution {
    func canVisitAllRooms(_ rooms: [[Int]]) -> Bool 
{
        
    }
}";"";"2020-03-25 15:18:39"
11243;906;"Ruby";"# @param {Integer[][]} rooms
# @return {Boolean}
def can_visit_all_rooms(rooms)
 
end";"";"2020-03-25 15:18:39"
11244;906;"Python";"class Solution(object):
    def canVisitAllRooms(self, rooms):
        """"""
        :type rooms: List[List[int]]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:39"
11245;907;"C#";"public class Solution {
    public int Change(int amount, int[] coins) {
 
    }
}";"";"2020-03-25 15:18:39"
11246;907;"Java";"class Solution {
    public int change(int amount, int[] coins) {
 
    }
}";"";"2020-03-25 15:18:39"
11247;907;"C";"int change(int amount, int* coins, int coinsSize){
 
}";"";"2020-03-25 15:18:39"
11248;907;"Rust";"impl Solution {
    pub fn change(amount: i32, coins: Vec<i32>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:39"
11249;907;"Scala";"object Solution {
    def change(amount: Int, coins: Array[Int]): Int 
= {
 
    }
}";"";"2020-03-25 15:18:39"
11250;907;"Go";"func change(amount int, coins []int) int {
 
}";"";"2020-03-25 15:18:39"
11251;907;"Kotlin";"class Solution {
    fun change(amount: Int, coins: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:39"
11252;907;"Python3";"class Solution:
    def change(self, amount: int, coins: List[int]) 
-> int:";"";"2020-03-25 15:18:39"
11253;907;"JavaScript";"/**
 * @param {number} amount
 * @param {number[]} coins
 * @return {number}
 */
var change = function(amount, coins) {
 
};";"";"2020-03-25 15:18:39"
11254;907;"PHP";"class Solution {
 
    /**
     * @param Integer $amount
     * @param Integer[] $coins
     * @return Integer
     */
    function change($amount, $coins) {
        
    }
}";"";"2020-03-25 15:18:39"
11255;907;"Swift";"class Solution {
    func change(_ amount: Int, _ coins: [Int]) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:39"
11256;907;"Ruby";"";"";"2020-03-25 15:18:39"
11257;907;"Python";"class Solution(object):
    def change(self, amount, coins):
        """"""
        :type amount: int
        :type coins: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:39"
11258;908;"C#";"public class Solution {
    public int FindTheLongestSubstring(string s) {
 
    }
}";"";"2020-03-25 15:18:39"
11259;908;"Java";"class Solution {
    public int findTheLongestSubstring(String s) {
 
    }
}";"";"2020-03-25 15:18:39"
11260;908;"Rust";"impl Solution {
    pub fn find_the_longest_substring(s: String) -> 
i32 {
 
    }
}";"";"2020-03-25 15:18:39"
11261;908;"C";"int findTheLongestSubstring(char * s){
 
}";"";"2020-03-25 15:18:39"
11262;908;"Scala";"object Solution {
    def findTheLongestSubstring(s: String): Int = {
 
    }
}";"";"2020-03-25 15:18:39"
11263;908;"Go";"func findTheLongestSubstring(s string) int {
 
}";"";"2020-03-25 15:18:39"
11264;908;"Kotlin";"class Solution {
    fun findTheLongestSubstring(s: String): Int {
 
    }
}";"";"2020-03-25 15:18:39"
11265;908;"Python3";"class Solution:
    def findTheLongestSubstring(self, s: str) -> 
int:";"";"2020-03-25 15:18:39"
11266;908;"JavaScript";"/**
 * @param {string} s
 * @return {number}
 */
var findTheLongestSubstring = function(s) {
 
};";"";"2020-03-25 15:18:39"
11267;908;"PHP";"class Solution {";"";"2020-03-25 15:18:39"
11268;908;"Swift";"class Solution {
    func findTheLongestSubstring(_ s: String) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:39"
11269;908;"Ruby";"# @param {String} s
# @return {Integer}
def find_the_longest_substring(s)
 
end";"";"2020-03-25 15:18:39"
11270;908;"Python";"class Solution(object):
    def findTheLongestSubstring(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:39"
11271;909;"C#";"public class Solution {
    public int[] CorpFlightBookings(int[][] 
bookings, int n) {
 
    }
}";"";"2020-03-25 15:18:39"
11272;909;"Java";"class Solution {
    public int[] corpFlightBookings(int[][] 
bookings, int n) {
 
    }
}";"";"2020-03-25 15:18:39"
11273;909;"Rust";"impl Solution {
    pub fn corp_flight_bookings(bookings: 
Vec<Vec<i32>>, n: i32) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:39"
11274;909;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* corpFlightBookings(int** bookings, int 
bookingsSize, int* bookingsColSize, int n, int* 
returnSize){
 
}";"";"2020-03-25 15:18:39"
11275;909;"Scala";"object Solution {
    def corpFlightBookings(bookings: Array[Array
[Int]], n: Int): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:39"
11276;909;"Go";"func corpFlightBookings(bookings [][]int, n int) []
int {
 
}";"";"2020-03-25 15:18:39"
11277;909;"Kotlin";"class Solution {
    fun corpFlightBookings(bookings: 
Array<IntArray>, n: Int): IntArray {
 
    }
}";"";"2020-03-25 15:18:39"
11278;909;"Python3";"class Solution:
    def corpFlightBookings(self, bookings: List[List
[int]], n: int) -> List[int]:";"";"2020-03-25 15:18:39"
11279;909;"JavaScript";"/**
 * @param {number[][]} bookings
 * @param {number} n
 * @return {number[]}
 */
var corpFlightBookings = function(bookings, n) {
 
};";"";"2020-03-25 15:18:39"
11280;909;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $bookings
     * @param Integer $n
     * @return Integer[]
     */
    function corpFlightBookings($bookings, $n) {
        
    }
}";"";"2020-03-25 15:18:39"
11281;909;"Swift";"class Solution {
    func corpFlightBookings(_ bookings: [[Int]], _ 
n: Int) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:39"
11282;909;"Ruby";"# @param {Integer[][]} bookings
# @param {Integer} n
# @return {Integer[]}
def corp_flight_bookings(bookings, n)
 
end";"";"2020-03-25 15:18:39"
11283;909;"Python";"class Solution(object):
    def corpFlightBookings(self, bookings, n):
        """"""
        :type bookings: List[List[int]]
        :type n: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:39"
11284;910;"C#";"public class Solution {
    public string AddBinary(string a, string b) {
 
    }
}";"";"2020-03-25 15:18:39"
11285;910;"Java";"class Solution {
    public String addBinary(String a, String b) {
 
    }
}";"";"2020-03-25 15:18:39"
11286;910;"C";"char * addBinary(char * a, char * b){
 
}";"";"2020-03-25 15:18:39"
11287;910;"Rust";"impl Solution {
    pub fn add_binary(a: String, b: String) -> 
String {
        
    }
}";"";"2020-03-25 15:18:39"
11288;910;"Scala";"object Solution {
    def addBinary(a: String, b: String): String = {
 
    }
}";"";"2020-03-25 15:18:39"
11289;910;"Go";"func addBinary(a string, b string) string {
 
}";"";"2020-03-25 15:18:39"
11290;910;"Kotlin";"class Solution {
    fun addBinary(a: String, b: String): String {
 
    }
}";"";"2020-03-25 15:18:39"
11291;910;"Python3";"class Solution:
    def addBinary(self, a: str, b: str) -> str:";"";"2020-03-25 15:18:39"
11292;910;"JavaScript";"/**
 * @param {string} a
 * @param {string} b
 * @return {string}
 */
var addBinary = function(a, b) {
 
};";"";"2020-03-25 15:18:39"
11293;910;"PHP";"class Solution {
 
    /**
     * @param String $a
     * @param String $b
     * @return String
     */
    function addBinary($a, $b) {
        
    }
}";"";"2020-03-25 15:18:39"
11294;910;"Swift";"class Solution {
    func addBinary(_ a: String, _ b: String) -> 
String {
        
    }
}";"";"2020-03-25 15:18:39"
11295;910;"Ruby";"# @param {String} a";"";"2020-03-25 15:18:39"
11296;910;"Python";"class Solution(object):
    def addBinary(self, a, b):
        """"""
        :type a: str
        :type b: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:39"
11297;911;"C#";"public class Solution {
    public IList<int> FindNumOfValidWords(string[] 
words, string[] puzzles) {
 
    }
}";"";"2020-03-25 15:18:39"
11298;911;"Java";"class Solution {
    public List<Integer> findNumOfValidWords(String
[] words, String[] puzzles) {
 
    }
}";"";"2020-03-25 15:18:39"
11299;911;"Rust";"impl Solution {
    pub fn find_num_of_valid_words(words: 
Vec<String>, puzzles: Vec<String>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:39"
11300;911;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* findNumOfValidWords(char ** words, int 
wordsSize, char ** puzzles, int puzzlesSize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:39"
11301;911;"Scala";"object Solution {
    def findNumOfValidWords(words: Array[String], 
puzzles: Array[String]): List[Int] = {
 
    }
}";"";"2020-03-25 15:18:39"
11302;911;"Go";"func findNumOfValidWords(words []string, puzzles []
string) []int {
 
}";"";"2020-03-25 15:18:39"
11303;911;"Kotlin";"class Solution {
    fun findNumOfValidWords(words: Array<String>, 
puzzles: Array<String>): List<Int> {
 
    }
}";"";"2020-03-25 15:18:39"
11304;911;"Python3";"class Solution:
    def findNumOfValidWords(self, words: List[str], 
puzzles: List[str]) -> List[int]:";"";"2020-03-25 15:18:39"
11305;911;"JavaScript";"/**
 * @param {string[]} words
 * @param {string[]} puzzles
 * @return {number[]}
 */
var findNumOfValidWords = function(words, puzzles) {
 
};";"";"2020-03-25 15:18:39"
11306;911;"PHP";"class Solution {";"";"2020-03-25 15:18:39"
11307;911;"Swift";"class Solution {
    func findNumOfValidWords(_ words: [String], _ 
puzzles: [String]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:39"
11308;911;"Ruby";"# @param {String[]} words
# @param {String[]} puzzles
# @return {Integer[]}
def find_num_of_valid_words(words, puzzles)
 
end";"";"2020-03-25 15:18:39"
11309;911;"Python";"class Solution(object):
    def findNumOfValidWords(self, words, puzzles):
        """"""
        :type words: List[str]
        :type puzzles: List[str]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:39"
11310;912;"C#";"public class Solution {
    public int FindDuplicate(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:39"
11311;912;"Java";"class Solution {
    public int findDuplicate(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:39"
11312;912;"C";"int findDuplicate(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:39"
11313;912;"Rust";"impl Solution {
    pub fn find_duplicate(nums: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:39"
11314;912;"Scala";"object Solution {
    def findDuplicate(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:39"
11315;912;"Go";"func findDuplicate(nums []int) int {
 
}";"";"2020-03-25 15:18:39"
11316;912;"Kotlin";"class Solution {
    fun findDuplicate(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:39"
11317;912;"Python3";"class Solution:";"";"2020-03-25 15:18:39"
11318;912;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var findDuplicate = function(nums) {
 
};";"";"2020-03-25 15:18:39"
11319;912;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function findDuplicate($nums) {
        
    }
}";"";"2020-03-25 15:18:39"
11320;912;"Swift";"class Solution {
    func findDuplicate(_ nums: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:39"
11321;912;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def find_duplicate(nums)
 
end";"";"2020-03-25 15:18:39"
11322;912;"Python";"class Solution(object):
    def findDuplicate(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:39"
11323;913;"C#";"public class Solution {
    public string[] FindLongestSubarray(string[] 
array) {
 
    }
}";"";"2020-03-25 15:18:39"
11324;913;"Java";"class Solution {
    public String[] findLongestSubarray(String[] 
array) {
 
    }
}";"";"2020-03-25 15:18:39"
11325;913;"Rust";"impl Solution {
    pub fn find_longest_subarray(array: Vec<String>)
 -> Vec<String> {
 
    }
}";"";"2020-03-25 15:18:39"
11326;913;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char** findLongestSubarray(char** array, int 
arraySize, int* returnSize){
 
}";"";"2020-03-25 15:18:39"
11327;913;"Scala";"object Solution {
    def findLongestSubarray(array: Array[String]): 
Array[String] = {
 
    }
}";"";"2020-03-25 15:18:39"
11328;913;"Go";"func findLongestSubarray(array []string) []string {
 
}";"";"2020-03-25 15:18:39"
11329;913;"Kotlin";"class Solution {
    fun findLongestSubarray(array: Array<String>): 
Array<String> {
 
    }
}";"";"2020-03-25 15:18:39"
11330;913;"Python3";"class Solution:
    def findLongestSubarray(self, array: List[str]) 
-> List[str]:";"";"2020-03-25 15:18:39"
11331;913;"JavaScript";"/**
 * @param {string[]} array
 * @return {string[]}
 */
var findLongestSubarray = function(array) {
 
};";"";"2020-03-25 15:18:39"
11332;913;"PHP";"";"";"2020-03-25 15:18:39"
11333;913;"Swift";"class Solution {
    func findLongestSubarray(_ array: [String]) -> 
[String] {
 
    }
}";"";"2020-03-25 15:18:39"
11334;913;"Ruby";"# @param {String[]} array
# @return {String[]}
def find_longest_subarray(array)
 
end";"";"2020-03-25 15:18:39"
11335;913;"Python";"class Solution(object):
    def findLongestSubarray(self, array):
        """"""
        :type array: List[str]
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:39"
11336;914;"C#";"public class Solution {
    public int IslandPerimeter(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:39"
11337;914;"Java";"class Solution {
    public int islandPerimeter(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:39"
11338;914;"C";"int islandPerimeter(int** grid, int gridSize, int* 
gridColSize){
 
}";"";"2020-03-25 15:18:39"
11339;914;"Rust";"impl Solution {
    pub fn island_perimeter(grid: Vec<Vec<i32>>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:39"
11340;914;"Scala";"object Solution {
    def islandPerimeter(grid: Array[Array[Int]]): 
Int = {
 
    }
}";"";"2020-03-25 15:18:39"
11341;914;"Go";"func islandPerimeter(grid [][]int) int {
 
}";"";"2020-03-25 15:18:39"
11342;914;"Kotlin";"class Solution {
    fun islandPerimeter(grid: Array<IntArray>): Int 
{
 
    }
}";"";"2020-03-25 15:18:39"
11343;914;"Python3";"class Solution:
    def islandPerimeter(self, grid: List[List[int]])
 -> int:";"";"2020-03-25 15:18:39"
11344;914;"JavaScript";"/**
 * @param {number[][]} grid
 * @return {number}
 */
var islandPerimeter = function(grid) {
 
};";"";"2020-03-25 15:18:39"
11345;914;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $grid
     * @return Integer
     */
    function islandPerimeter($grid) {
        
    }
}";"";"2020-03-25 15:18:39"
11346;914;"Swift";"class Solution {
    func islandPerimeter(_ grid: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:39"
11347;914;"Ruby";"# @param {Integer[][]} grid
# @return {Integer}
def island_perimeter(grid)
 
end";"";"2020-03-25 15:18:39"
11348;914;"Python";"class Solution(object):
    def islandPerimeter(self, grid):
        """"""
        :type grid: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:39"
11349;915;"C#";"public class Solution {
    public int MergeStones(int[] stones, int K) {
 
    }
}";"";"2020-03-25 15:18:40"
11350;915;"Java";"class Solution {
    public int mergeStones(int[] stones, int K) {
 
    }
}";"";"2020-03-25 15:18:40"
11351;915;"C";"int mergeStones(int* stones, int stonesSize, int K){
 
}";"";"2020-03-25 15:18:40"
11352;915;"Rust";"impl Solution {
    pub fn merge_stones(stones: Vec<i32>, k: i32) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:40"
11353;915;"Scala";"object Solution {
    def mergeStones(stones: Array[Int], K: Int): 
Int = {
 
    }
}";"";"2020-03-25 15:18:40"
11354;915;"Go";"func mergeStones(stones []int, K int) int {
 
}";"";"2020-03-25 15:18:40"
11355;915;"Kotlin";"class Solution {
    fun mergeStones(stones: IntArray, K: Int): Int {
 
    }
}";"";"2020-03-25 15:18:40"
11356;915;"Python3";"class Solution:
    def mergeStones(self, stones: List[int], K: int)
 -> int:";"";"2020-03-25 15:18:40"
11357;915;"JavaScript";"/**
 * @param {number[]} stones
 * @param {number} K
 * @return {number}
 */
var mergeStones = function(stones, K) {
 
};";"";"2020-03-25 15:18:40"
11358;915;"PHP";"class Solution {
 
    /**
     * @param Integer[] $stones
     * @param Integer $K
     * @return Integer
     */
    function mergeStones($stones, $K) {
        
    }
}";"";"2020-03-25 15:18:40"
11359;915;"Swift";"class Solution {
    func mergeStones(_ stones: [Int], _ K: Int) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:40"
11360;915;"Ruby";"# @param {Integer[]} stones";"";"2020-03-25 15:18:40"
11361;915;"Python";"class Solution(object):
    def mergeStones(self, stones, K):
        """"""
        :type stones: List[int]
        :type K: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:40"
11362;916;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode BuildTree(int[] inorder, int[] 
postorder) {
 
    }
}";"";"2020-03-25 15:18:40"
11363;916;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] 
postorder) {
 
    }
}";"";"2020-03-25 15:18:40"
11364;916;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* buildTree(int* inorder, int 
inorderSize, int* postorder, int postorderSize){
 
}";"";"2020-03-25 15:18:40"
11365;916;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn build_tree(inorder: Vec<i32>, postorder: 
Vec<i32>) -> Option<Rc<RefCell<TreeNode>>> {
        
    }
}";"";"2020-03-25 15:18:40"
11366;916;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def buildTree(inorder: Array[Int], postorder: 
Array[Int]): TreeNode = {
 
    }
}";"";"2020-03-25 15:18:40"
11367;916;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func buildTree(inorder []int, postorder []int) 
*TreeNode {
 
}";"";"2020-03-25 15:18:40"
11368;916;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun buildTree(inorder: IntArray, postorder: 
IntArray): TreeNode? {
 
    }
}";"";"2020-03-25 15:18:40"
11369;916;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def buildTree(self, inorder: List[int], 
postorder: List[int]) -> TreeNode:";"";"2020-03-25 15:18:40"
11370;916;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {number[]} inorder
 * @param {number[]} postorder
 * @return {TreeNode}
 */
var buildTree = function(inorder, postorder) {
 
};";"";"2020-03-25 15:18:40"
11371;916;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param Integer[] $inorder
     * @param Integer[] $postorder
     * @return TreeNode
     */
    function buildTree($inorder, $postorder) {
        
    }
}";"";"2020-03-25 15:18:40"
11372;916;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func buildTree(_ inorder: [Int], _ postorder: 
[Int]) -> TreeNode? {
        
    }
}";"";"2020-03-25 15:18:40"
11373;916;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:40"
11374;916;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def buildTree(self, inorder, postorder):
        """"""
        :type inorder: List[int]
        :type postorder: List[int]
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:40"
11375;917;"C#";"public class Solution {
    public bool ValidPalindrome(string s) {
 
    }
}";"";"2020-03-25 15:18:40"
11376;917;"Java";"class Solution {
    public boolean validPalindrome(String s) {
 
    }
}";"";"2020-03-25 15:18:40"
11377;917;"Rust";"impl Solution {
    pub fn valid_palindrome(s: String) -> bool {
        
    }
}";"";"2020-03-25 15:18:40"
11378;917;"C";"bool validPalindrome(char * s){
 
}";"";"2020-03-25 15:18:40"
11379;917;"Scala";"object Solution {
    def validPalindrome(s: String): Boolean = {
 
    }
}";"";"2020-03-25 15:18:40"
11380;917;"Go";"func validPalindrome(s string) bool {
 
}";"";"2020-03-25 15:18:40"
11381;917;"Kotlin";"class Solution {
    fun validPalindrome(s: String): Boolean {
 
    }
}";"";"2020-03-25 15:18:40"
11382;917;"Python3";"class Solution:
    def validPalindrome(self, s: str) -> bool:";"";"2020-03-25 15:18:40"
11383;917;"JavaScript";"/**
 * @param {string} s
 * @return {boolean}
 */
var validPalindrome = function(s) {
 
};";"";"2020-03-25 15:18:40"
11384;917;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return Boolean
     */
    function validPalindrome($s) {
        
    }
}";"";"2020-03-25 15:18:40"
11385;917;"Swift";"class Solution {
    func validPalindrome(_ s: String) -> Bool {
        
    }
}";"";"2020-03-25 15:18:40"
11386;917;"Ruby";"# @param {String} s
# @return {Boolean}
def valid_palindrome(s)
 
end";"";"2020-03-25 15:18:40"
11387;917;"Python";"class Solution(object):
    def validPalindrome(self, s):
        """"""
        :type s: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:40"
11388;918;"C#";"public class Solution {
    public bool Exist(char[][] board, string word) {
 
    }
}";"";"2020-03-25 15:18:40"
11389;918;"Java";"class Solution {
    public boolean exist(char[][] board, String 
word) {
 
    }
}";"";"2020-03-25 15:18:40"
11390;918;"C";"bool exist(char** board, int boardSize, int* 
boardColSize, char* word){
 
}";"";"2020-03-25 15:18:40"
11391;918;"Rust";"impl Solution {
    pub fn exist(board: Vec<Vec<char>>, word: 
String) -> bool {
 
    }
}";"";"2020-03-25 15:18:40"
11392;918;"Scala";"object Solution {
    def exist(board: Array[Array[Char]], word: 
String): Boolean = {
 
    }
}";"";"2020-03-25 15:18:40"
11393;918;"Go";"func exist(board [][]byte, word string) bool {
 
}";"";"2020-03-25 15:18:40"
11394;918;"Kotlin";"class Solution {
    fun exist(board: Array<CharArray>, word: String)
: Boolean {
 
    }
}";"";"2020-03-25 15:18:40"
11395;918;"Python3";"class Solution:
    def exist(self, board: List[List[str]], word: 
str) -> bool:";"";"2020-03-25 15:18:40"
11396;918;"JavaScript";"/**
 * @param {character[][]} board
 * @param {string} word
 * @return {boolean}
 */
var exist = function(board, word) {
 
};";"";"2020-03-25 15:18:40"
11397;918;"PHP";"class Solution {
 
    /**
     * @param String[][] $board
     * @param String $word
     * @return Boolean
     */
    function exist($board, $word) {
 
    }
}";"";"2020-03-25 15:18:40"
11398;918;"Swift";"class Solution {
    func exist(_ board: [[Character]], _ word: 
String) -> Bool {
 
    }
}";"";"2020-03-25 15:18:40"
11399;918;"Ruby";"# @param {Character[][]} board";"";"2020-03-25 15:18:40"
11400;918;"Python";"class Solution(object):
    def exist(self, board, word):
        """"""
        :type board: List[List[str]]
        :type word: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:40"
11401;919;"C#";"public class Solution {
    public int PalindromePartition(string s, int k) 
{
 
    }
}";"";"2020-03-25 15:18:40"
11402;919;"Java";"class Solution {
    public int palindromePartition(String s, int k) 
{
 
    }
}";"";"2020-03-25 15:18:40"
11403;919;"Rust";"impl Solution {
    pub fn palindrome_partition(s: String, k: i32) 
-> i32 {
 
    }
}";"";"2020-03-25 15:18:40"
11404;919;"C";"int palindromePartition(char * s, int k){
 
}";"";"2020-03-25 15:18:40"
11405;919;"Scala";"object Solution {
    def palindromePartition(s: String, k: Int): Int 
= {
 
    }
}";"";"2020-03-25 15:18:40"
11406;919;"Go";"func palindromePartition(s string, k int) int {
 
}";"";"2020-03-25 15:18:40"
11407;919;"Kotlin";"class Solution {
    fun palindromePartition(s: String, k: Int): Int 
{
 
    }
}";"";"2020-03-25 15:18:40"
11408;919;"Python3";"class Solution:
    def palindromePartition(self, s: str, k: int) 
-> int:";"";"2020-03-25 15:18:40"
11409;919;"JavaScript";"/**
 * @param {string} s
 * @param {number} k
 * @return {number}
 */
var palindromePartition = function(s, k) {
 
};";"";"2020-03-25 15:18:40"
11410;919;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @param Integer $k
     * @return Integer
     */
    function palindromePartition($s, $k) {
 
    }
}";"";"2020-03-25 15:18:40"
11411;919;"Swift";"class Solution {
    func palindromePartition(_ s: String, _ k: Int) 
-> Int {
 
    }
}";"";"2020-03-25 15:18:40"
11412;919;"Ruby";"# @param {String} s
# @param {Integer} k
# @return {Integer}
def palindrome_partition(s, k)
 
end";"";"2020-03-25 15:18:40"
11413;919;"Python";"class Solution(object):
    def palindromePartition(self, s, k):
        """"""
        :type s: str
        :type k: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:40"
11414;920;"C#";"public class Solution {
    public void SortColors(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:40"
11415;920;"Java";"class Solution {
    public void sortColors(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:40"
11416;920;"C";"void sortColors(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:40"
11417;920;"Rust";"impl Solution {
    pub fn sort_colors(nums: &mut Vec<i32>) {
        
    }
}";"";"2020-03-25 15:18:40"
11418;920;"Scala";"object Solution {
    def sortColors(nums: Array[Int]): Unit = {
 
    }
}";"";"2020-03-25 15:18:40"
11419;920;"Go";"func sortColors(nums []int)  {
 
}";"";"2020-03-25 15:18:40"
11420;920;"Kotlin";"class Solution {
    fun sortColors(nums: IntArray): Unit {
 
    }
}";"";"2020-03-25 15:18:40"
11421;920;"Python3";"class Solution:
    def sortColors(self, nums: List[int]) -> None:
        """"""
        Do not return anything, modify nums 
in-place instead.
        """"""";"";"2020-03-25 15:18:40"
11422;920;"JavaScript";"/**
 * @param {number[]} nums
 * @return {void} Do not return anything, modify 
nums in-place instead.
 */
var sortColors = function(nums) {
 
};";"";"2020-03-25 15:18:40"
11423;920;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return NULL
     */
    function sortColors(&$nums) {
        
    }
}";"";"2020-03-25 15:18:40"
11424;920;"Swift";"class Solution {
    func sortColors(_ nums: inout [Int]) {
        
    }
}";"";"2020-03-25 15:18:40"
11425;920;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:18:40"
11426;920;"Python";"class Solution(object):
    def sortColors(self, nums):
        """"""
        :type nums: List[int]
        :rtype: None Do not return anything, modify 
nums in-place instead.
        """"""";"";"2020-03-25 15:18:40"
11427;921;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode MergeTwoLists(ListNode l1, 
ListNode l2) {
 
    }
}";"";"2020-03-25 15:18:40"
11428;921;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, 
ListNode l2) {
 
    }
}";"";"2020-03-25 15:18:40"
11429;921;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn merge_two_lists(l1: 
Option<Box<ListNode>>, l2: Option<Box<ListNode>>) 
-> Option<Box<ListNode>> {
 
    }
}";"";"2020-03-25 15:18:40"
11430;921;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
struct ListNode* mergeTwoLists(struct ListNode* l1, 
struct ListNode* l2){
 
}";"";"2020-03-25 15:18:40"
11431;921;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def mergeTwoLists(l1: ListNode, l2: ListNode): 
ListNode = {
 
    }
}";"";"2020-03-25 15:18:40"
11432;921;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func mergeTwoLists(l1 *ListNode, l2 *ListNode) 
*ListNode {
 
}";"";"2020-03-25 15:18:40"
11433;921;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun mergeTwoLists(l1: ListNode?, l2: ListNode?)
: ListNode? {
 
    }
}";"";"2020-03-25 15:18:40"
11434;921;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: 
ListNode) -> ListNode:";"";"2020-03-25 15:18:40"
11435;921;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */
var mergeTwoLists = function(l1, l2) {
 
};";"";"2020-03-25 15:18:40"
11436;921;"PHP";"/**";"";"2020-03-25 15:18:40"
11437;921;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func mergeTwoLists(_ l1: ListNode?, _ l2: 
ListNode?) -> ListNode? {
 
    }
}";"";"2020-03-25 15:18:40"
11438;921;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# @param {ListNode} l1
# @param {ListNode} l2
# @return {ListNode}
def merge_two_lists(l1, l2)
 
end";"";"2020-03-25 15:18:40"
11439;921;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def mergeTwoLists(self, l1, l2):
        """"""
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:40"
11440;922;"C#";"public class Solution {
    public bool IsMatch(string s, string p) {
 
    }
}";"";"2020-03-25 15:18:40"
11441;922;"Java";"class Solution {
    public boolean isMatch(String s, String p) {
 
    }
}";"";"2020-03-25 15:18:40"
11442;922;"C";"bool isMatch(char * s, char * p){
 
}";"";"2020-03-25 15:18:40"
11443;922;"Rust";"impl Solution {
    pub fn is_match(s: String, p: String) -> bool {
        
    }
}";"";"2020-03-25 15:18:40"
11444;922;"Scala";"object Solution {
    def isMatch(s: String, p: String): Boolean = {
 
    }
}";"";"2020-03-25 15:18:40"
11445;922;"Go";"func isMatch(s string, p string) bool {
 
}";"";"2020-03-25 15:18:40"
11446;922;"Kotlin";"class Solution {
    fun isMatch(s: String, p: String): Boolean {
 
    }
}";"";"2020-03-25 15:18:40"
11447;922;"Python3";"class Solution:
    def isMatch(self, s: str, p: str) -> bool:";"";"2020-03-25 15:18:40"
11448;922;"JavaScript";"/**
 * @param {string} s
 * @param {string} p
 * @return {boolean}
 */
var isMatch = function(s, p) {
 
};";"";"2020-03-25 15:18:40"
11449;922;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @param String $p
     * @return Boolean
     */
    function isMatch($s, $p) {
        
    }
}";"";"2020-03-25 15:18:40"
11450;922;"Swift";"class Solution {
    func isMatch(_ s: String, _ p: String) -> Bool {
        
    }
}";"";"2020-03-25 15:18:40"
11451;922;"Ruby";"# @param {String} s";"";"2020-03-25 15:18:40"
11452;922;"Python";"class Solution(object):
    def isMatch(self, s, p):
        """"""
        :type s: str
        :type p: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:40"
11453;923;"C#";"public class SortedStack {
 
    public SortedStack() {
 
    }
    
    public void Push(int val) {
 
    }
    
    public void Pop() {
 
    }
    
    public int Peek() {
 
    }
    
    public bool IsEmpty() {
 
    }
}
 
/**
 * Your SortedStack object will be instantiated and 
called as such:";"";"2020-03-25 15:18:40"
11454;923;"Java";"class SortedStack {
 
    public SortedStack() {
 
    }
    
    public void push(int val) {
 
    }
    
    public void pop() {
 
    }
    
    public int peek() {
 
    }
    
    public boolean isEmpty() {
 
    }
}
 
/**
 * Your SortedStack object will be instantiated and 
called as such:";"";"2020-03-25 15:18:40"
11455;923;"Rust";"struct SortedStack {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl SortedStack {
 
    fn new() -> Self {
 
    }
    
    fn push(&self, val: i32) {
 
    }
    
    fn pop(&self) {
 
    }
    
    fn peek(&self) -> i32 {";"";"2020-03-25 15:18:40"
11456;923;"C";"typedef struct {
 
} SortedStack;
 
 
SortedStack* sortedStackCreate() {
 
}
 
void sortedStackPush(SortedStack* obj, int val) {
 
}
 
void sortedStackPop(SortedStack* obj) {
 
}
 
int sortedStackPeek(SortedStack* obj) {
 
}
 
bool sortedStackIsEmpty(SortedStack* obj) {
 
}
 
void sortedStackFree(SortedStack* obj) {";"";"2020-03-25 15:18:40"
11457;923;"Scala";"class SortedStack() {
 
    def push(`val`: Int) {
 
    }
 
    def pop() {
 
    }
 
    def peek(): Int = {
 
    }
 
    def isEmpty(): Boolean = {
 
    }
 
}
 
/**
 * Your SortedStack object will be instantiated and 
called as such:
 * var obj = new SortedStack()
 * obj.push(`val`)
 * obj.pop()";"";"2020-03-25 15:18:40"
11458;923;"Go";"type SortedStack struct {
 
}
 
 
func Constructor() SortedStack {
 
}
 
 
func (this *SortedStack) Push(val int)  {
 
}
 
 
func (this *SortedStack) Pop()  {
 
}
 
 
func (this *SortedStack) Peek() int {
 
}
 
 
func (this *SortedStack) IsEmpty() bool {";"";"2020-03-25 15:18:40"
11459;923;"Kotlin";"class SortedStack() {
 
    fun push(`val`: Int) {
 
    }
 
    fun pop() {
 
    }
 
    fun peek(): Int {
 
    }
 
    fun isEmpty(): Boolean {
 
    }
 
}
 
/**
 * Your SortedStack object will be instantiated and 
called as such:
 * var obj = SortedStack()
 * obj.push(`val`)
 * obj.pop()";"";"2020-03-25 15:18:40"
11460;923;"Python3";"class SortedStack:
 
    def __init__(self):
 
 
    def push(self, val: int) -> None:
 
 
    def pop(self) -> None:
 
 
    def peek(self) -> int:
 
 
    def isEmpty(self) -> bool:
 
 
 
# Your SortedStack object will be instantiated and 
called as such:
# obj = SortedStack()
# obj.push(val)
# obj.pop()
# param_3 = obj.peek()
# param_4 = obj.isEmpty()";"";"2020-03-25 15:18:40"
11461;923;"JavaScript";"var SortedStack = function() {
 
};
 
/** 
 * @param {number} val
 * @return {void}
 */
SortedStack.prototype.push = function(val) {
 
};
 
/**
 * @return {void}
 */
SortedStack.prototype.pop = function() {
 
};
 
/**
 * @return {number}
 */
SortedStack.prototype.peek = function() {
 
};
 ";"";"2020-03-25 15:18:40"
11462;923;"PHP";"class SortedStack {
    /**
     */
    function __construct() {
 
    }
 
    /**
     * @param Integer $val
     * @return NULL
     */
    function push($val) {
 
    }
 
    /**
     * @return NULL
     */
    function pop() {
 
    }
 
    /**
     * @return Integer
     */
    function peek() {";"";"2020-03-25 15:18:40"
11463;923;"Swift";"class SortedStack {
 
    init() {
 
    }
    
    func push(_ val: Int) {
 
    }
    
    func pop() {
 
    }
    
    func peek() -> Int {
 
    }
    
    func isEmpty() -> Bool {
 
    }
}
 
/**
 * Your SortedStack object will be instantiated and 
called as such:";"";"2020-03-25 15:18:40"
11464;923;"Ruby";"class SortedStack
    def initialize()
 
    end
 
 
=begin
    :type val: Integer
    :rtype: Void
=end
    def push(val)
 
    end
 
 
=begin
    :rtype: Void
=end
    def pop()
 
    end
 
 
=begin
    :rtype: Integer
=end";"";"2020-03-25 15:18:40"
11465;923;"Python";"class SortedStack(object):
 
    def __init__(self):
 
 
    def push(self, val):
        """"""
        :type val: int
        :rtype: None
        """"""
 
 
    def pop(self):
        """"""
        :rtype: None
        """"""
 
 
    def peek(self):
        """"""
        :rtype: int
        """"""
 
 
    def isEmpty(self):
        """"""";"";"2020-03-25 15:18:40"
11466;924;"C#";"public class Solution {
    public IList<string> SubdomainVisits(string[] 
cpdomains) {
 
    }
}";"";"2020-03-25 15:18:40"
11467;924;"Java";"class Solution {
    public List<String> subdomainVisits(String[] 
cpdomains) {
 
    }
}";"";"2020-03-25 15:18:40"
11468;924;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** subdomainVisits(char ** cpdomains, int 
cpdomainsSize, int* returnSize){
 
}";"";"2020-03-25 15:18:40"
11469;924;"Rust";"impl Solution {
    pub fn subdomain_visits(cpdomains: Vec<String>) 
-> Vec<String> {
        
    }
}";"";"2020-03-25 15:18:40"
11470;924;"Scala";"object Solution {
    def subdomainVisits(cpdomains: Array[String]): 
List[String] = {
 
    }
}";"";"2020-03-25 15:18:40"
11471;924;"Go";"func subdomainVisits(cpdomains []string) []string {
 
}";"";"2020-03-25 15:18:40"
11472;924;"Kotlin";"class Solution {
    fun subdomainVisits(cpdomains: Array<String>): 
List<String> {
 
    }
}";"";"2020-03-25 15:18:40"
11473;924;"Python3";"class Solution:
    def subdomainVisits(self, cpdomains: List[str]) 
-> List[str]:";"";"2020-03-25 15:18:40"
11474;924;"JavaScript";"/**
 * @param {string[]} cpdomains
 * @return {string[]}
 */
var subdomainVisits = function(cpdomains) {
 
};";"";"2020-03-25 15:18:40"
11475;924;"PHP";"class Solution {
 
    /**
     * @param String[] $cpdomains
     * @return String[]
     */
    function subdomainVisits($cpdomains) {
        
    }
}";"";"2020-03-25 15:18:40"
11476;924;"Swift";"class Solution {
    func subdomainVisits(_ cpdomains: [String]) -> 
[String] {
        
    }
}";"";"2020-03-25 15:18:40"
11477;924;"Ruby";"# @param {String[]} cpdomains
# @return {String[]}
def subdomain_visits(cpdomains)
 
end";"";"2020-03-25 15:18:40"
11478;924;"Python";"class Solution(object):
    def subdomainVisits(self, cpdomains):
        """"""
        :type cpdomains: List[str]
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:40"
11479;925;"C#";"public class Solution {
    public int MinSteps(string s, string t) {
 
    }
}";"";"2020-03-25 15:18:40"
11480;925;"Java";"class Solution {
    public int minSteps(String s, String t) {
 
    }
}";"";"2020-03-25 15:18:40"
11481;925;"C";"int minSteps(char * s, char * t){
 
}";"";"2020-03-25 15:18:40"
11482;925;"Rust";"impl Solution {
    pub fn min_steps(s: String, t: String) -> i32 {
 
    }
}";"";"2020-03-25 15:18:40"
11483;925;"Scala";"object Solution {
    def minSteps(s: String, t: String): Int = {
 
    }
}";"";"2020-03-25 15:18:40"
11484;925;"Go";"func minSteps(s string, t string) int {
 
}";"";"2020-03-25 15:18:40"
11485;925;"Kotlin";"class Solution {
    fun minSteps(s: String, t: String): Int {
 
    }
}";"";"2020-03-25 15:18:40"
11486;925;"Python3";"class Solution:
    def minSteps(self, s: str, t: str) -> int:";"";"2020-03-25 15:18:40"
11487;925;"JavaScript";"/**
 * @param {string} s
 * @param {string} t
 * @return {number}
 */
var minSteps = function(s, t) {
 
};";"";"2020-03-25 15:18:40"
11488;925;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @param String $t
     * @return Integer
     */
    function minSteps($s, $t) {
 
    }
}";"";"2020-03-25 15:18:40"
11489;925;"Swift";"class Solution {
    func minSteps(_ s: String, _ t: String) -> Int {
        
    }
}";"";"2020-03-25 15:18:40"
11490;925;"Ruby";"# @param {String} s";"";"2020-03-25 15:18:40"
11491;925;"Python";"class Solution(object):
    def minSteps(self, s, t):
        """"""
        :type s: str
        :type t: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:40"
11492;926;"C#";"public class Solution {
    public int MaxProfit(int[] prices) {
 
    }
}";"";"2020-03-25 15:18:40"
11493;926;"Java";"class Solution {
    public int maxProfit(int[] prices) {
 
    }
}";"";"2020-03-25 15:18:40"
11494;926;"Rust";"impl Solution {
    pub fn max_profit(prices: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:40"
11495;926;"C";"int maxProfit(int* prices, int pricesSize){
 
}";"";"2020-03-25 15:18:40"
11496;926;"Scala";"object Solution {
    def maxProfit(prices: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:40"
11497;926;"Go";"func maxProfit(prices []int) int {
 
}";"";"2020-03-25 15:18:40"
11498;926;"Kotlin";"class Solution {
    fun maxProfit(prices: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:40"
11499;926;"Python3";"class Solution:
    def maxProfit(self, prices: List[int]) -> int:";"";"2020-03-25 15:18:40"
11500;926;"JavaScript";"/**
 * @param {number[]} prices
 * @return {number}
 */
var maxProfit = function(prices) {
 
};";"";"2020-03-25 15:18:40"
11501;926;"PHP";"class Solution {
 
    /**
     * @param Integer[] $prices
     * @return Integer
     */
    function maxProfit($prices) {
        
    }
}";"";"2020-03-25 15:18:40"
11502;926;"Swift";"class Solution {
    func maxProfit(_ prices: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:40"
11503;926;"Ruby";"# @param {Integer[]} prices
# @return {Integer}
def max_profit(prices)
 
end";"";"2020-03-25 15:18:40"
11504;926;"Python";"class Solution(object):
    def maxProfit(self, prices):
        """"""
        :type prices: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:40"
11505;927;"C#";"public class Solution {
    public int GetSum(int a, int b) {
 
    }
}";"";"2020-03-25 15:18:40"
11506;927;"Java";"class Solution {
    public int getSum(int a, int b) {
 
    }
}";"";"2020-03-25 15:18:40"
11507;927;"Rust";"impl Solution {
    pub fn get_sum(a: i32, b: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:40"
11508;927;"C";"int getSum(int a, int b){
 
}";"";"2020-03-25 15:18:40"
11509;927;"Scala";"object Solution {
    def getSum(a: Int, b: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:40"
11510;927;"Go";"func getSum(a int, b int) int {
 
}";"";"2020-03-25 15:18:40"
11511;927;"Kotlin";"class Solution {
    fun getSum(a: Int, b: Int): Int {
 
    }
}";"";"2020-03-25 15:18:40"
11512;927;"Python3";"class Solution:
    def getSum(self, a: int, b: int) -> int:";"";"2020-03-25 15:18:40"
11513;927;"JavaScript";"/**
 * @param {number} a
 * @param {number} b
 * @return {number}
 */
var getSum = function(a, b) {
 
};";"";"2020-03-25 15:18:40"
11514;927;"PHP";"class Solution {";"";"2020-03-25 15:18:40"
11515;927;"Swift";"class Solution {
    func getSum(_ a: Int, _ b: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:40"
11516;927;"Ruby";"# @param {Integer} a
# @param {Integer} b
# @return {Integer}
def get_sum(a, b)
 
end";"";"2020-03-25 15:18:40"
11517;927;"Python";"class Solution(object):
    def getSum(self, a, b):
        """"""
        :type a: int
        :type b: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:40"
11518;928;"C#";"public class Solution {
    public int RomanToInt(string s) {
 
    }
}";"";"2020-03-25 15:18:40"
11519;928;"Java";"class Solution {
    public int romanToInt(String s) {
 
    }
}";"";"2020-03-25 15:18:40"
11520;928;"Rust";"impl Solution {
    pub fn roman_to_int(s: String) -> i32 {
        
    }
}";"";"2020-03-25 15:18:40"
11521;928;"C";"int romanToInt(char * s){
 
}";"";"2020-03-25 15:18:40"
11522;928;"Scala";"object Solution {
    def romanToInt(s: String): Int = {
 
    }
}";"";"2020-03-25 15:18:40"
11523;928;"Go";"func romanToInt(s string) int {
 
}";"";"2020-03-25 15:18:40"
11524;928;"Kotlin";"class Solution {
    fun romanToInt(s: String): Int {
 
    }
}";"";"2020-03-25 15:18:40"
11525;928;"Python3";"class Solution:
    def romanToInt(self, s: str) -> int:";"";"2020-03-25 15:18:40"
11526;928;"JavaScript";"/**
 * @param {string} s
 * @return {number}
 */
var romanToInt = function(s) {
 
};";"";"2020-03-25 15:18:40"
11527;928;"PHP";"class Solution {";"";"2020-03-25 15:18:40"
11528;928;"Swift";"class Solution {
    func romanToInt(_ s: String) -> Int {
        
    }
}";"";"2020-03-25 15:18:40"
11529;928;"Ruby";"# @param {String} s
# @return {Integer}
def roman_to_int(s)
 
end";"";"2020-03-25 15:18:40"
11530;928;"Python";"class Solution(object):
    def romanToInt(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:40"
11531;929;"C#";"public class Solution {
    public int ClimbStairs(int n) {
 
    }
}";"";"2020-03-25 15:18:40"
11532;929;"Java";"class Solution {
    public int climbStairs(int n) {
 
    }
}";"";"2020-03-25 15:18:40"
11533;929;"Rust";"impl Solution {
    pub fn climb_stairs(n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:40"
11534;929;"C";"int climbStairs(int n){
 
}";"";"2020-03-25 15:18:40"
11535;929;"Scala";"object Solution {
    def climbStairs(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:40"
11536;929;"Go";"func climbStairs(n int) int {
 
}";"";"2020-03-25 15:18:40"
11537;929;"Kotlin";"class Solution {
    fun climbStairs(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:40"
11538;929;"Python3";"class Solution:
    def climbStairs(self, n: int) -> int:";"";"2020-03-25 15:18:40"
11539;929;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var climbStairs = function(n) {
 
};";"";"2020-03-25 15:18:40"
11540;929;"PHP";"class Solution {";"";"2020-03-25 15:18:40"
11541;929;"Swift";"class Solution {
    func climbStairs(_ n: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:40"
11542;929;"Ruby";"# @param {Integer} n
# @return {Integer}
def climb_stairs(n)
 
end";"";"2020-03-25 15:18:40"
11543;929;"Python";"class Solution(object):
    def climbStairs(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:40"
11544;930;"C#";"public class Solution {
    public string FrequencySort(string s) {
 
    }
}";"";"2020-03-25 15:18:40"
11545;930;"Java";"class Solution {
    public String frequencySort(String s) {
 
    }
}";"";"2020-03-25 15:18:40"
11546;930;"Rust";"impl Solution {
    pub fn frequency_sort(s: String) -> String {
        
    }
}";"";"2020-03-25 15:18:40"
11547;930;"C";"char * frequencySort(char * s){
 
}";"";"2020-03-25 15:18:40"
11548;930;"Scala";"object Solution {
    def frequencySort(s: String): String = {
 
    }
}";"";"2020-03-25 15:18:40"
11549;930;"Go";"func frequencySort(s string) string {
 
}";"";"2020-03-25 15:18:40"
11550;930;"Kotlin";"class Solution {
    fun frequencySort(s: String): String {
 
    }
}";"";"2020-03-25 15:18:40"
11551;930;"Python3";"class Solution:
    def frequencySort(self, s: str) -> str:";"";"2020-03-25 15:18:40"
11552;930;"JavaScript";"/**
 * @param {string} s
 * @return {string}
 */
var frequencySort = function(s) {
 
};";"";"2020-03-25 15:18:40"
11553;930;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return String
     */
    function frequencySort($s) {
        
    }
}";"";"2020-03-25 15:18:40"
11554;930;"Swift";"class Solution {
    func frequencySort(_ s: String) -> String {
        
    }
}";"";"2020-03-25 15:18:40"
11555;930;"Ruby";"# @param {String} s
# @return {String}
def frequency_sort(s)
 
end";"";"2020-03-25 15:18:40"
11556;930;"Python";"class Solution(object):
    def frequencySort(self, s):
        """"""
        :type s: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:40"
11557;931;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int[] NextLargerNodes(ListNode head) {
 
    }
}";"";"2020-03-25 15:18:40"
11558;931;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public int[] nextLargerNodes(ListNode head) {
 
    }
}";"";"2020-03-25 15:18:40"
11559;931;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* nextLargerNodes(struct ListNode* head, int* 
returnSize){
 
}";"";"2020-03-25 15:18:40"
11560;931;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn next_larger_nodes(head: 
Option<Box<ListNode>>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:40"
11561;931;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def nextLargerNodes(head: ListNode): Array[Int] 
= {
 
    }
}";"";"2020-03-25 15:18:40"
11562;931;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func nextLargerNodes(head *ListNode) []int {
 
}";"";"2020-03-25 15:18:40"
11563;931;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun nextLargerNodes(head: ListNode?): IntArray {
 
    }
}";"";"2020-03-25 15:18:40"
11564;931;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def nextLargerNodes(self, head: ListNode) -> 
List[int]:";"";"2020-03-25 15:18:40"
11565;931;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @return {number[]}
 */
var nextLargerNodes = function(head) {
 
};";"";"2020-03-25 15:18:40"
11566;931;"PHP";"/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
class Solution {
 
    /**
     * @param ListNode $head
     * @return Integer[]
     */
    function nextLargerNodes($head) {
        
    }
}";"";"2020-03-25 15:18:40"
11567;931;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func nextLargerNodes(_ head: ListNode?) -> [Int]
 {
        
    }
}";"";"2020-03-25 15:18:40"
11568;931;"Ruby";"# Definition for singly-linked list.";"";"2020-03-25 15:18:40"
11569;931;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def nextLargerNodes(self, head):
        """"""
        :type head: ListNode
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:40"
11570;932;"C#";"public class Solution {
    public int MinPathSum(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:40"
11571;932;"Java";"class Solution {
    public int minPathSum(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:40"
11572;932;"Rust";"impl Solution {
    pub fn min_path_sum(grid: Vec<Vec<i32>>) -> i32 
{
        
    }
}";"";"2020-03-25 15:18:40"
11573;932;"C";"int minPathSum(int** grid, int gridSize, int* 
gridColSize){
 
}";"";"2020-03-25 15:18:40"
11574;932;"Scala";"object Solution {
    def minPathSum(grid: Array[Array[Int]]): Int = {
 
    }
}";"";"2020-03-25 15:18:40"
11575;932;"Go";"func minPathSum(grid [][]int) int {
 
}";"";"2020-03-25 15:18:40"
11576;932;"Kotlin";"class Solution {
    fun minPathSum(grid: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:40"
11577;932;"Python3";"class Solution:
    def minPathSum(self, grid: List[List[int]]) -> 
int:";"";"2020-03-25 15:18:40"
11578;932;"JavaScript";"/**
 * @param {number[][]} grid
 * @return {number}
 */
var minPathSum = function(grid) {
 
};";"";"2020-03-25 15:18:40"
11579;932;"PHP";"class Solution {";"";"2020-03-25 15:18:40"
11580;932;"Swift";"class Solution {
    func minPathSum(_ grid: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:40"
11581;932;"Ruby";"# @param {Integer[][]} grid
# @return {Integer}
def min_path_sum(grid)
 
end";"";"2020-03-25 15:18:40"
11582;932;"Python";"class Solution(object):
    def minPathSum(self, grid):
        """"""
        :type grid: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:40"
11583;933;"MySQL";"# Write your MySQL query statement below";"";"2020-03-25 15:18:41"
11584;933;"MS SQL Server";"/* Write your T-SQL query statement below */";"";"2020-03-25 15:18:41"
11585;933;"Oracle";"/* Write your PL/SQL query statement below */";"";"2020-03-25 15:18:41"
11586;934;"C#";"public class Solution {
    public int[] KthSmallestPrimeFraction(int[] A, 
int K) {
 
    }
}";"";"2020-03-25 15:18:41"
11587;934;"Java";"class Solution {
    public int[] kthSmallestPrimeFraction(int[] A, 
int K) {
 
    }
}";"";"2020-03-25 15:18:41"
11588;934;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* kthSmallestPrimeFraction(int* A, int ASize, 
int K, int* returnSize){
 
}";"";"2020-03-25 15:18:41"
11589;934;"Rust";"impl Solution {
    pub fn kth_smallest_prime_fraction(a: Vec<i32>, 
k: i32) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:41"
11590;934;"Scala";"object Solution {
    def kthSmallestPrimeFraction(A: Array[Int], K: 
Int): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:41"
11591;934;"Go";"func kthSmallestPrimeFraction(A []int, K int) []int 
{
 
}";"";"2020-03-25 15:18:41"
11592;934;"Kotlin";"class Solution {
    fun kthSmallestPrimeFraction(A: IntArray, K: 
Int): IntArray {
 
    }
}";"";"2020-03-25 15:18:41"
11593;934;"Python3";"class Solution:
    def kthSmallestPrimeFraction(self, A: List[int],
 K: int) -> List[int]:";"";"2020-03-25 15:18:41"
11594;934;"JavaScript";"/**
 * @param {number[]} A
 * @param {number} K
 * @return {number[]}
 */
var kthSmallestPrimeFraction = function(A, K) {
 
};";"";"2020-03-25 15:18:41"
11595;934;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @param Integer $K
     * @return Integer[]
     */
    function kthSmallestPrimeFraction($A, $K) {
        
    }
}";"";"2020-03-25 15:18:41"
11596;934;"Swift";"class Solution {
    func kthSmallestPrimeFraction(_ A: [Int], _ K: 
Int) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:41"
11597;934;"Ruby";"# @param {Integer[]} a
# @param {Integer} k
# @return {Integer[]}
def kth_smallest_prime_fraction(a, k)
 
end";"";"2020-03-25 15:18:41"
11598;934;"Python";"class Solution(object):
    def kthSmallestPrimeFraction(self, A, K):
        """"""
        :type A: List[int]
        :type K: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:41"
11599;935;"C#";"public class Solution {
    public int[][] Transpose(int[][] A) {
 
    }
}";"";"2020-03-25 15:18:41"
11600;935;"Java";"class Solution {
    public int[][] transpose(int[][] A) {
 
    }
}";"";"2020-03-25 15:18:41"
11601;935;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** transpose(int** A, int ASize, int* AColSize, 
int* returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:41"
11602;935;"Rust";"impl Solution {
    pub fn transpose(a: Vec<Vec<i32>>) -> 
Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:41"
11603;935;"Scala";"object Solution {
    def transpose(A: Array[Array[Int]]): Array[Array
[Int]] = {
 
    }
}";"";"2020-03-25 15:18:41"
11604;935;"Go";"func transpose(A [][]int) [][]int {
 
}";"";"2020-03-25 15:18:41"
11605;935;"Kotlin";"class Solution {
    fun transpose(A: Array<IntArray>): 
Array<IntArray> {
 
    }
}";"";"2020-03-25 15:18:41"
11606;935;"Python3";"class Solution:
    def transpose(self, A: List[List[int]]) -> List
[List[int]]:";"";"2020-03-25 15:18:41"
11607;935;"JavaScript";"/**
 * @param {number[][]} A
 * @return {number[][]}
 */
var transpose = function(A) {
 
};";"";"2020-03-25 15:18:41"
11608;935;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $A
     * @return Integer[][]
     */
    function transpose($A) {
        
    }
}";"";"2020-03-25 15:18:41"
11609;935;"Swift";"class Solution {
    func transpose(_ A: [[Int]]) -> [[Int]] {
        
    }
}";"";"2020-03-25 15:18:41"
11610;935;"Ruby";"# @param {Integer[][]} a";"";"2020-03-25 15:18:41"
11611;935;"Python";"class Solution(object):
    def transpose(self, A):
        """"""
        :type A: List[List[int]]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:41"
11612;936;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode BuildTree(int[] preorder, int[] 
inorder) {
 
    }
}";"";"2020-03-25 15:18:41"
11613;936;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] 
inorder) {
 
    }
}";"";"2020-03-25 15:18:41"
11614;936;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn build_tree(preorder: Vec<i32>, inorder: 
Vec<i32>) -> Option<Rc<RefCell<TreeNode>>> {
        
    }
}";"";"2020-03-25 15:18:41"
11615;936;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* buildTree(int* preorder, int 
preorderSize, int* inorder, int inorderSize){
 
}";"";"2020-03-25 15:18:41"
11616;936;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def buildTree(preorder: Array[Int], inorder: 
Array[Int]): TreeNode = {
 
    }
}";"";"2020-03-25 15:18:41"
11617;936;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func buildTree(preorder []int, inorder []int) 
*TreeNode {
 
}";"";"2020-03-25 15:18:41"
11618;936;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun buildTree(preorder: IntArray, inorder: 
IntArray): TreeNode? {
 
    }
}";"";"2020-03-25 15:18:41"
11619;936;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def buildTree(self, preorder: List[int], 
inorder: List[int]) -> TreeNode:";"";"2020-03-25 15:18:41"
11620;936;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {number[]} preorder
 * @param {number[]} inorder
 * @return {TreeNode}
 */
var buildTree = function(preorder, inorder) {
 
};";"";"2020-03-25 15:18:41"
11621;936;"PHP";"/**";"";"2020-03-25 15:18:41"
11622;936;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func buildTree(_ preorder: [Int], _ inorder: 
[Int]) -> TreeNode? {
        
    }
}";"";"2020-03-25 15:18:41"
11623;936;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {Integer[]} preorder
# @param {Integer[]} inorder
# @return {TreeNode}
def build_tree(preorder, inorder)
 
end";"";"2020-03-25 15:18:41"
11624;936;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def buildTree(self, preorder, inorder):
        """"""
        :type preorder: List[int]
        :type inorder: List[int]
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:41"
11625;937;"C#";"public class Solution {
    public int[][] IntervalIntersection(int[][] A, 
int[][] B) {
 
    }
}";"";"2020-03-25 15:18:41"
11626;937;"Java";"class Solution {
    public int[][] intervalIntersection(int[][] A, 
int[][] B) {
 
    }
}";"";"2020-03-25 15:18:41"
11627;937;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** intervalIntersection(int** A, int ASize, int* 
AColSize, int** B, int BSize, int* BColSize, int* 
returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:41"
11628;937;"Rust";"impl Solution {
    pub fn interval_intersection(a: Vec<Vec<i32>>, 
b: Vec<Vec<i32>>) -> Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:41"
11629;937;"Scala";"object Solution {
    def intervalIntersection(A: Array[Array[Int]], 
B: Array[Array[Int]]): Array[Array[Int]] = {
 
    }
}";"";"2020-03-25 15:18:41"
11630;937;"Go";"func intervalIntersection(A [][]int, B [][]int) [][]
int {
 
}";"";"2020-03-25 15:18:41"
11631;937;"Kotlin";"class Solution {
    fun intervalIntersection(A: Array<IntArray>, B: 
Array<IntArray>): Array<IntArray> {
 
    }
}";"";"2020-03-25 15:18:41"
11632;937;"Python3";"class Solution:
    def intervalIntersection(self, A: List[List[int]
], B: List[List[int]]) -> List[List[int]]:";"";"2020-03-25 15:18:41"
11633;937;"JavaScript";"/**
 * @param {number[][]} A
 * @param {number[][]} B
 * @return {number[][]}
 */
var intervalIntersection = function(A, B) {
 
};";"";"2020-03-25 15:18:41"
11634;937;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $A
     * @param Integer[][] $B
     * @return Integer[][]
     */
    function intervalIntersection($A, $B) {
        
    }
}";"";"2020-03-25 15:18:41"
11635;937;"Swift";"class Solution {
    func intervalIntersection(_ A: [[Int]], _ B: [
[Int]]) -> [[Int]] {
        
    }
}";"";"2020-03-25 15:18:41"
11636;937;"Ruby";"# @param {Integer[][]} a";"";"2020-03-25 15:18:41"
11637;937;"Python";"class Solution(object):
    def intervalIntersection(self, A, B):
        """"""
        :type A: List[List[int]]
        :type B: List[List[int]]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:41"
11638;938;"C#";"public class Solution {
    public int[] Intersection(int[] nums1, int[] 
nums2) {
 
    }
}";"";"2020-03-25 15:18:41"
11639;938;"Java";"class Solution {
    public int[] intersection(int[] nums1, int[] 
nums2) {
 
    }
}";"";"2020-03-25 15:18:41"
11640;938;"Rust";"impl Solution {
    pub fn intersection(nums1: Vec<i32>, nums2: 
Vec<i32>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:41"
11641;938;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* intersection(int* nums1, int nums1Size, int* 
nums2, int nums2Size, int* returnSize){
 
}";"";"2020-03-25 15:18:41"
11642;938;"Scala";"object Solution {
    def intersection(nums1: Array[Int], nums2: Array
[Int]): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:41"
11643;938;"Go";"func intersection(nums1 []int, nums2 []int) []int {
 
}";"";"2020-03-25 15:18:41"
11644;938;"Kotlin";"class Solution {
    fun intersection(nums1: IntArray, nums2: 
IntArray): IntArray {
 
    }
}";"";"2020-03-25 15:18:41"
11645;938;"Python3";"class Solution:
    def intersection(self, nums1: List[int], nums2: 
List[int]) -> List[int]:";"";"2020-03-25 15:18:41"
11646;938;"JavaScript";"/**
 * @param {number[]} nums1
 * @param {number[]} nums2
 * @return {number[]}
 */
var intersection = function(nums1, nums2) {
 
};";"";"2020-03-25 15:18:41"
11647;938;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums1
     * @param Integer[] $nums2
     * @return Integer[]
     */
    function intersection($nums1, $nums2) {
        
    }
}";"";"2020-03-25 15:18:41"
11648;938;"Swift";"class Solution {
    func intersection(_ nums1: [Int], _ nums2: [Int]
) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:41"
11649;938;"Ruby";"# @param {Integer[]} nums1
# @param {Integer[]} nums2
# @return {Integer[]}
def intersection(nums1, nums2)
 
end";"";"2020-03-25 15:18:41"
11650;938;"Python";"class Solution(object):
    def intersection(self, nums1, nums2):
        """"""
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:41"
11651;939;"C#";"public class Solution {
    public int NumEnclaves(int[][] A) {
 
    }
}";"";"2020-03-25 15:18:41"
11652;939;"Java";"class Solution {
    public int numEnclaves(int[][] A) {
 
    }
}";"";"2020-03-25 15:18:41"
11653;939;"Rust";"impl Solution {
    pub fn num_enclaves(a: Vec<Vec<i32>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:41"
11654;939;"C";"int numEnclaves(int** A, int ASize, int* AColSize){
 
}";"";"2020-03-25 15:18:41"
11655;939;"Scala";"object Solution {
    def numEnclaves(A: Array[Array[Int]]): Int = {
 
    }
}";"";"2020-03-25 15:18:41"
11656;939;"Go";"func numEnclaves(A [][]int) int {
 
}";"";"2020-03-25 15:18:41"
11657;939;"Kotlin";"class Solution {
    fun numEnclaves(A: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:41"
11658;939;"Python3";"class Solution:
    def numEnclaves(self, A: List[List[int]]) -> 
int:";"";"2020-03-25 15:18:41"
11659;939;"JavaScript";"/**
 * @param {number[][]} A
 * @return {number}
 */
var numEnclaves = function(A) {
 
};";"";"2020-03-25 15:18:41"
11660;939;"PHP";"class Solution {";"";"2020-03-25 15:18:41"
11661;939;"Swift";"class Solution {
    func numEnclaves(_ A: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:41"
11662;939;"Ruby";"# @param {Integer[][]} a
# @return {Integer}
def num_enclaves(a)
 
end";"";"2020-03-25 15:18:41"
11663;939;"Python";"class Solution(object):
    def numEnclaves(self, A):
        """"""
        :type A: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:41"
11664;940;"C#";"public class Solution {
    public int InsertBits(int N, int M, int i, int 
j) {
 
    }
}";"";"2020-03-25 15:18:41"
11665;940;"Java";"class Solution {
    public int insertBits(int N, int M, int i, int 
j) {
 
    }
}";"";"2020-03-25 15:18:41"
11666;940;"Rust";"impl Solution {
    pub fn insert_bits(n: i32, m: i32, i: i32, j: 
i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:41"
11667;940;"C";"int insertBits(int N, int M, int i, int j){
 
}";"";"2020-03-25 15:18:41"
11668;940;"Scala";"object Solution {
    def insertBits(N: Int, M: Int, i: Int, j: Int): 
Int = {
 
    }
}";"";"2020-03-25 15:18:41"
11669;940;"Go";"func insertBits(N int, M int, i int, j int) int {
 
}";"";"2020-03-25 15:18:41"
11670;940;"Kotlin";"class Solution {
    fun insertBits(N: Int, M: Int, i: Int, j: Int): 
Int {
 
    }
}";"";"2020-03-25 15:18:41"
11671;940;"Python3";"class Solution:
    def insertBits(self, N: int, M: int, i: int, j: 
int) -> int:";"";"2020-03-25 15:18:41"
11672;940;"JavaScript";"/**
 * @param {number} N
 * @param {number} M
 * @param {number} i
 * @param {number} j
 * @return {number}
 */
var insertBits = function(N, M, i, j) {
 
};";"";"2020-03-25 15:18:41"
11673;940;"PHP";"class Solution {
 
    /**
     * @param Integer $N
     * @param Integer $M
     * @param Integer $i
     * @param Integer $j
     * @return Integer
     */
    function insertBits($N, $M, $i, $j) {
 
    }
}";"";"2020-03-25 15:18:41"
11674;940;"Swift";"class Solution {
    func insertBits(_ N: Int, _ M: Int, _ i: Int, _ 
j: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:41"
11675;940;"Ruby";"# @param {Integer} n
# @param {Integer} m
# @param {Integer} i
# @param {Integer} j
# @return {Integer}
def insert_bits(n, m, i, j)
 
end";"";"2020-03-25 15:18:41"
11676;940;"Python";"class Solution(object):
    def insertBits(self, N, M, i, j):
        """"""
        :type N: int
        :type M: int
        :type i: int
        :type j: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:41"
11677;941;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode SortedArrayToBST(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:41"
11678;941;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:41"
11679;941;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* sortedArrayToBST(int* nums, int 
numsSize){
 
}";"";"2020-03-25 15:18:41"
11680;941;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn sorted_array_to_bst(nums: Vec<i32>) -> 
Option<Rc<RefCell<TreeNode>>> {
 
    }
}";"";"2020-03-25 15:18:41"
11681;941;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def sortedArrayToBST(nums: Array[Int]): 
TreeNode = {
 
    }
}";"";"2020-03-25 15:18:41"
11682;941;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func sortedArrayToBST(nums []int) *TreeNode {
 
}";"";"2020-03-25 15:18:41"
11683;941;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun sortedArrayToBST(nums: IntArray): TreeNode? 
{
 
    }
}";"";"2020-03-25 15:18:41"
11684;941;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def sortedArrayToBST(self, nums: List[int]) -> 
TreeNode:";"";"2020-03-25 15:18:41"
11685;941;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {number[]} nums
 * @return {TreeNode}
 */
var sortedArrayToBST = function(nums) {
 
};";"";"2020-03-25 15:18:41"
11686;941;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param Integer[] $nums
     * @return TreeNode
     */
    function sortedArrayToBST($nums) {
 
    }
}";"";"2020-03-25 15:18:41"
11687;941;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func sortedArrayToBST(_ nums: [Int]) -> 
TreeNode? {
 
    }
}";"";"2020-03-25 15:18:41"
11688;941;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {Integer[]} nums
# @return {TreeNode}
def sorted_array_to_bst(nums)
 
end";"";"2020-03-25 15:18:41"
11689;941;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def sortedArrayToBST(self, nums):
        """"""
        :type nums: List[int]
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:41"
11690;942;"C#";"public class Solution {
    public int DistinctEchoSubstrings(string text) {
 
    }
}";"";"2020-03-25 15:18:41"
11691;942;"Java";"class Solution {
    public int distinctEchoSubstrings(String text) {
 
    }
}";"";"2020-03-25 15:18:41"
11692;942;"Rust";"impl Solution {
    pub fn distinct_echo_substrings(text: String) 
-> i32 {
 
    }
}";"";"2020-03-25 15:18:41"
11693;942;"C";"int distinctEchoSubstrings(char * text){
 
}";"";"2020-03-25 15:18:41"
11694;942;"Scala";"object Solution {
    def distinctEchoSubstrings(text: String): Int = 
{
 
    }
}";"";"2020-03-25 15:18:41"
11695;942;"Go";"func distinctEchoSubstrings(text string) int {
 
}";"";"2020-03-25 15:18:41"
11696;942;"Kotlin";"class Solution {
    fun distinctEchoSubstrings(text: String): Int {
 
    }
}";"";"2020-03-25 15:18:41"
11697;942;"Python3";"class Solution:
    def distinctEchoSubstrings(self, text: str) -> 
int:";"";"2020-03-25 15:18:41"
11698;942;"JavaScript";"/**
 * @param {string} text
 * @return {number}
 */
var distinctEchoSubstrings = function(text) {
 
};";"";"2020-03-25 15:18:41"
11699;942;"PHP";"class Solution {";"";"2020-03-25 15:18:41"
11700;942;"Swift";"class Solution {
    func distinctEchoSubstrings(_ text: String) -> 
Int {
 
    }
}";"";"2020-03-25 15:18:41"
11701;942;"Ruby";"# @param {String} text
# @return {Integer}
def distinct_echo_substrings(text)
 
end";"";"2020-03-25 15:18:41"
11702;942;"Python";"class Solution(object):
    def distinctEchoSubstrings(self, text):
        """"""
        :type text: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:41"
11703;943;"C#";"public class Solution {
    public int MaxNumberOfBalloons(string text) {
 
    }
}";"";"2020-03-25 15:18:41"
11704;943;"Java";"class Solution {
    public int maxNumberOfBalloons(String text) {
 
    }
}";"";"2020-03-25 15:18:41"
11705;943;"C";"int maxNumberOfBalloons(char * text){
 
}";"";"2020-03-25 15:18:41"
11706;943;"Rust";"impl Solution {
    pub fn max_number_of_balloons(text: String) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:41"
11707;943;"Scala";"object Solution {
    def maxNumberOfBalloons(text: String): Int = {
 
    }
}";"";"2020-03-25 15:18:41"
11708;943;"Go";"func maxNumberOfBalloons(text string) int {
 
}";"";"2020-03-25 15:18:41"
11709;943;"Kotlin";"class Solution {
    fun maxNumberOfBalloons(text: String): Int {
 
    }
}";"";"2020-03-25 15:18:41"
11710;943;"Python3";"class Solution:
    def maxNumberOfBalloons(self, text: str) -> int:";"";"2020-03-25 15:18:41"
11711;943;"JavaScript";"/**
 * @param {string} text
 * @return {number}
 */
var maxNumberOfBalloons = function(text) {
 
};";"";"2020-03-25 15:18:41"
11712;943;"PHP";"class Solution {
 
    /**
     * @param String $text
     * @return Integer
     */
    function maxNumberOfBalloons($text) {
        
    }
}";"";"2020-03-25 15:18:41"
11713;943;"Swift";"class Solution {
    func maxNumberOfBalloons(_ text: String) -> Int 
{
        
    }
}";"";"2020-03-25 15:18:41"
11714;943;"Ruby";"# @param {String} text
# @return {Integer}
def max_number_of_balloons(text)
 
end";"";"2020-03-25 15:18:41"
11715;943;"Python";"class Solution(object):
    def maxNumberOfBalloons(self, text):
        """"""
        :type text: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:41"
11716;944;"C#";"public class Solution {
    public int FirstMissingPositive(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:41"
11717;944;"Java";"class Solution {
    public int firstMissingPositive(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:41"
11718;944;"Rust";"impl Solution {
    pub fn first_missing_positive(nums: Vec<i32>) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:41"
11719;944;"C";"int firstMissingPositive(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:41"
11720;944;"Scala";"object Solution {
    def firstMissingPositive(nums: Array[Int]): Int 
= {
 
    }
}";"";"2020-03-25 15:18:41"
11721;944;"Go";"func firstMissingPositive(nums []int) int {
 
}";"";"2020-03-25 15:18:41"
11722;944;"Kotlin";"class Solution {
    fun firstMissingPositive(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:41"
11723;944;"Python3";"class Solution:
    def firstMissingPositive(self, nums: List[int]) 
-> int:";"";"2020-03-25 15:18:41"
11724;944;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var firstMissingPositive = function(nums) {
 
};";"";"2020-03-25 15:18:41"
11725;944;"PHP";"class Solution {";"";"2020-03-25 15:18:41"
11726;944;"Swift";"class Solution {
    func firstMissingPositive(_ nums: [Int]) -> Int 
{
        
    }
}";"";"2020-03-25 15:18:41"
11727;944;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def first_missing_positive(nums)
 
end";"";"2020-03-25 15:18:41"
11728;944;"Python";"class Solution(object):
    def firstMissingPositive(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:41"
11729;945;"C#";"public class Solution {
    public string[] Permutation(string S) {
 
    }
}";"";"2020-03-25 15:18:41"
11730;945;"Java";"class Solution {
    public String[] permutation(String S) {
 
    }
}";"";"2020-03-25 15:18:41"
11731;945;"Rust";"impl Solution {
    pub fn permutation(s: String) -> Vec<String> {
 
    }
}";"";"2020-03-25 15:18:41"
11732;945;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char** permutation(char* S, int* returnSize){
 
}";"";"2020-03-25 15:18:41"
11733;945;"Scala";"object Solution {
    def permutation(S: String): Array[String] = {
 
    }
}";"";"2020-03-25 15:18:41"
11734;945;"Go";"func permutation(S string) []string {
 
}";"";"2020-03-25 15:18:41"
11735;945;"Kotlin";"class Solution {
    fun permutation(S: String): Array<String> {
 
    }
}";"";"2020-03-25 15:18:41"
11736;945;"Python3";"class Solution:
    def permutation(self, S: str) -> List[str]:";"";"2020-03-25 15:18:41"
11737;945;"JavaScript";"/**
 * @param {string} S
 * @return {string[]}
 */
var permutation = function(S) {
 
};";"";"2020-03-25 15:18:41"
11738;945;"PHP";"class Solution {
 
    /**
     * @param String $S
     * @return String[]
     */
    function permutation($S) {
 
    }
}";"";"2020-03-25 15:18:41"
11739;945;"Swift";"class Solution {
    func permutation(_ S: String) -> [String] {
 
    }
}";"";"2020-03-25 15:18:41"
11740;945;"Ruby";"# @param {String} s
# @return {String[]}
def permutation(s)
 
end";"";"2020-03-25 15:18:41"
11741;945;"Python";"class Solution(object):
    def permutation(self, S):
        """"""
        :type S: str
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:41"
11742;946;"C#";"public class Solution {
    public int NumFactoredBinaryTrees(int[] A) {
 
    }
}";"";"2020-03-25 15:18:41"
11743;946;"Java";"class Solution {
    public int numFactoredBinaryTrees(int[] A) {
 
    }
}";"";"2020-03-25 15:18:41"
11744;946;"Rust";"impl Solution {
    pub fn num_factored_binary_trees(a: Vec<i32>) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:41"
11745;946;"C";"int numFactoredBinaryTrees(int* A, int ASize){
 
}";"";"2020-03-25 15:18:41"
11746;946;"Scala";"object Solution {
    def numFactoredBinaryTrees(A: Array[Int]): Int 
= {
 
    }
}";"";"2020-03-25 15:18:41"
11747;946;"Go";"func numFactoredBinaryTrees(A []int) int {
 
}";"";"2020-03-25 15:18:41"
11748;946;"Kotlin";"class Solution {
    fun numFactoredBinaryTrees(A: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:41"
11749;946;"Python3";"class Solution:
    def numFactoredBinaryTrees(self, A: List[int]) 
-> int:";"";"2020-03-25 15:18:41"
11750;946;"JavaScript";"/**
 * @param {number[]} A
 * @return {number}
 */
var numFactoredBinaryTrees = function(A) {
 
};";"";"2020-03-25 15:18:41"
11751;946;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @return Integer
     */
    function numFactoredBinaryTrees($A) {
        
    }
}";"";"2020-03-25 15:18:41"
11752;946;"Swift";"class Solution {
    func numFactoredBinaryTrees(_ A: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:41"
11753;946;"Ruby";"# @param {Integer[]} a
# @return {Integer}
def num_factored_binary_trees(a)
 
end";"";"2020-03-25 15:18:41"
11754;946;"Python";"class Solution(object):
    def numFactoredBinaryTrees(self, A):
        """"""
        :type A: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:41"
11755;947;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int MinDiffInBST(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:41"
11756;947;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int minDiffInBST(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:41"
11757;947;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int minDiffInBST(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:41"
11758;947;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def minDiffInBST(self, root: TreeNode) -> int:";"";"2020-03-25 15:18:41"
11759;947;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var minDiffInBST = function(root) {
 
};";"";"2020-03-25 15:18:41"
11760;947;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:41"
11761;947;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def minDiffInBST(self, root):
        """"""
        :type root: TreeNode
        :rtype: int
        """"""";"";"2020-03-25 15:18:41"
11762;948;"C#";"public class Solution {
    public int MinDistance(string word1, string 
word2) {
 
    }
}";"";"2020-03-25 15:18:41"
11763;948;"Java";"class Solution {
    public int minDistance(String word1, String 
word2) {
 
    }
}";"";"2020-03-25 15:18:41"
11764;948;"Rust";"impl Solution {
    pub fn min_distance(word1: String, word2: 
String) -> i32 {
        
    }
}";"";"2020-03-25 15:18:41"
11765;948;"C";"int minDistance(char * word1, char * word2){
 
}";"";"2020-03-25 15:18:41"
11766;948;"Scala";"object Solution {
    def minDistance(word1: String, word2: String): 
Int = {
 
    }
}";"";"2020-03-25 15:18:41"
11767;948;"Go";"func minDistance(word1 string, word2 string) int {
 
}";"";"2020-03-25 15:18:41"
11768;948;"Kotlin";"class Solution {
    fun minDistance(word1: String, word2: String): 
Int {
 
    }
}";"";"2020-03-25 15:18:41"
11769;948;"Python3";"class Solution:
    def minDistance(self, word1: str, word2: str) 
-> int:";"";"2020-03-25 15:18:41"
11770;948;"JavaScript";"/**
 * @param {string} word1
 * @param {string} word2
 * @return {number}
 */
var minDistance = function(word1, word2) {
 
};";"";"2020-03-25 15:18:41"
11771;948;"PHP";"class Solution {";"";"2020-03-25 15:18:41"
11772;948;"Swift";"class Solution {
    func minDistance(_ word1: String, _ word2: 
String) -> Int {
        
    }
}";"";"2020-03-25 15:18:41"
11773;948;"Ruby";"# @param {String} word1
# @param {String} word2
# @return {Integer}
def min_distance(word1, word2)
 
end";"";"2020-03-25 15:18:41"
11774;948;"Python";"class Solution(object):
    def minDistance(self, word1, word2):
        """"""
        :type word1: str
        :type word2: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:41"
11775;949;"C#";"public class Solution {
    public string ReverseWords(string s) {
 
    }
}";"";"2020-03-25 15:18:41"
11776;949;"Java";"class Solution {
    public String reverseWords(String s) {
 
    }
}";"";"2020-03-25 15:18:41"
11777;949;"C";"char * reverseWords(char * s){
 
}";"";"2020-03-25 15:18:41"
11778;949;"Rust";"impl Solution {
    pub fn reverse_words(s: String) -> String {
        
    }
}";"";"2020-03-25 15:18:41"
11779;949;"Scala";"object Solution {
    def reverseWords(s: String): String = {
 
    }
}";"";"2020-03-25 15:18:41"
11780;949;"Go";"func reverseWords(s string) string {
 
}";"";"2020-03-25 15:18:41"
11781;949;"Kotlin";"class Solution {
    fun reverseWords(s: String): String {
 
    }
}";"";"2020-03-25 15:18:41"
11782;949;"Python3";"class Solution:
    def reverseWords(self, s: str) -> str:";"";"2020-03-25 15:18:41"
11783;949;"JavaScript";"/**
 * @param {string} s
 * @return {string}
 */
var reverseWords = function(s) {
 
};";"";"2020-03-25 15:18:41"
11784;949;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return String
     */
    function reverseWords($s) {
        
    }
}";"";"2020-03-25 15:18:41"
11785;949;"Swift";"class Solution {
    func reverseWords(_ s: String) -> String {
        
    }
}";"";"2020-03-25 15:18:41"
11786;949;"Ruby";"# @param {String} s
# @return {String}
def reverse_words(s)
 
end";"";"2020-03-25 15:18:41"
11787;949;"Python";"class Solution(object):
    def reverseWords(self, s):
        """"""
        :type s: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:41"
11788;950;"C#";"public class Operations {
 
    public Operations() {
 
    }
    
    public int Minus(int a, int b) {
 
    }
    
    public int Multiply(int a, int b) {
 
    }
    
    public int Divide(int a, int b) {
 
    }
}
 
/**
 * Your Operations object will be instantiated and 
called as such:
 * Operations obj = new Operations();
 * int param_1 = obj.Minus(a,b);
 * int param_2 = obj.Multiply(a,b);
 * int param_3 = obj.Divide(a,b);";"";"2020-03-25 15:18:41"
11789;950;"Java";"class Operations {
 
    public Operations() {
 
    }
    
    public int minus(int a, int b) {
 
    }
    
    public int multiply(int a, int b) {
 
    }
    
    public int divide(int a, int b) {
 
    }
}
 
/**
 * Your Operations object will be instantiated and 
called as such:
 * Operations obj = new Operations();
 * int param_1 = obj.minus(a,b);
 * int param_2 = obj.multiply(a,b);
 * int param_3 = obj.divide(a,b);";"";"2020-03-25 15:18:41"
11790;950;"C";"typedef struct {
 
} Operations;
 
 
Operations* operationsCreate() {
 
}
 
int operationsMinus(Operations* obj, int a, int b) {
 
}
 
int operationsMultiply(Operations* obj, int a, int 
b) {
 
}
 
int operationsDivide(Operations* obj, int a, int b) 
{
 
}
 
void operationsFree(Operations* obj) {
 
}";"";"2020-03-25 15:18:41"
11791;950;"Rust";"struct Operations {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl Operations {
 
    fn new() -> Self {
 
    }
    
    fn minus(&self, a: i32, b: i32) -> i32 {
 
    }
    
    fn multiply(&self, a: i32, b: i32) -> i32 {
 
    }
    
    fn divide(&self, a: i32, b: i32) -> i32 {";"";"2020-03-25 15:18:41"
11792;950;"Scala";"class Operations() {
 
    def minus(a: Int, b: Int): Int = {
 
    }
 
    def multiply(a: Int, b: Int): Int = {
 
    }
 
    def divide(a: Int, b: Int): Int = {
 
    }
 
}
 
/**
 * Your Operations object will be instantiated and 
called as such:
 * var obj = new Operations()
 * var param_1 = obj.minus(a,b)
 * var param_2 = obj.multiply(a,b)
 * var param_3 = obj.divide(a,b)
 */";"";"2020-03-25 15:18:41"
11793;950;"Go";"type Operations struct {
 
}
 
 
func Constructor() Operations {
 
}
 
 
func (this *Operations) Minus(a int, b int) int {
 
}
 
 
func (this *Operations) Multiply(a int, b int) int {
 
}
 
 
func (this *Operations) Divide(a int, b int) int {
 
}
 
 
/**";"";"2020-03-25 15:18:41"
11794;950;"Kotlin";"class Operations() {
 
    fun minus(a: Int, b: Int): Int {
 
    }
 
    fun multiply(a: Int, b: Int): Int {
 
    }
 
    fun divide(a: Int, b: Int): Int {
 
    }
 
}
 
/**
 * Your Operations object will be instantiated and 
called as such:
 * var obj = Operations()
 * var param_1 = obj.minus(a,b)
 * var param_2 = obj.multiply(a,b)
 * var param_3 = obj.divide(a,b)
 */";"";"2020-03-25 15:18:41"
11795;950;"Python3";"class Operations:
 
    def __init__(self):
 
 
    def minus(self, a: int, b: int) -> int:
 
 
    def multiply(self, a: int, b: int) -> int:
 
 
    def divide(self, a: int, b: int) -> int:
 
 
 
# Your Operations object will be instantiated and 
called as such:
# obj = Operations()
# param_1 = obj.minus(a,b)
# param_2 = obj.multiply(a,b)
# param_3 = obj.divide(a,b)";"";"2020-03-25 15:18:41"
11796;950;"JavaScript";"var Operations = function() {
 
};
 
/** 
 * @param {number} a 
 * @param {number} b
 * @return {number}
 */
Operations.prototype.minus = function(a, b) {
 
};
 
/** 
 * @param {number} a 
 * @param {number} b
 * @return {number}
 */
Operations.prototype.multiply = function(a, b) {
 
};
 
/** 
 * @param {number} a 
 * @param {number} b
 * @return {number}";"";"2020-03-25 15:18:41"
11797;950;"PHP";"class Operations {
    /**
     */
    function __construct() {
 
    }
 
    /**
     * @param Integer $a
     * @param Integer $b
     * @return Integer
     */
    function minus($a, $b) {
 
    }
 
    /**
     * @param Integer $a
     * @param Integer $b
     * @return Integer
     */
    function multiply($a, $b) {
 
    }
 
    /**";"";"2020-03-25 15:18:41"
11798;950;"Swift";"class Operations {
 
    init() {
 
    }
    
    func minus(_ a: Int, _ b: Int) -> Int {
 
    }
    
    func multiply(_ a: Int, _ b: Int) -> Int {
 
    }
    
    func divide(_ a: Int, _ b: Int) -> Int {
 
    }
}
 
/**
 * Your Operations object will be instantiated and 
called as such:
 * let obj = Operations()
 * let ret_1: Int = obj.minus(a, b)
 * let ret_2: Int = obj.multiply(a, b)
 * let ret_3: Int = obj.divide(a, b)";"";"2020-03-25 15:18:41"
11799;950;"Ruby";"class Operations
    def initialize()
 
    end
 
 
=begin
    :type a: Integer
    :type b: Integer
    :rtype: Integer
=end
    def minus(a, b)
 
    end
 
 
=begin
    :type a: Integer
    :type b: Integer
    :rtype: Integer
=end
    def multiply(a, b)
 
    end
 
 ";"";"2020-03-25 15:18:41"
11800;950;"Python";"class Operations(object):
 
    def __init__(self):
 
 
    def minus(self, a, b):
        """"""
        :type a: int
        :type b: int
        :rtype: int
        """"""
 
 
    def multiply(self, a, b):
        """"""
        :type a: int
        :type b: int
        :rtype: int
        """"""
 
 
    def divide(self, a, b):
        """"""
        :type a: int
        :type b: int
        :rtype: int";"";"2020-03-25 15:18:41"
11801;951;"C#";"public class Solution {
    public int RectangleArea(int[][] rectangles) {
 
    }
}";"";"2020-03-25 15:18:41"
11802;951;"Java";"class Solution {
    public int rectangleArea(int[][] rectangles) {
 
    }
}";"";"2020-03-25 15:18:41"
11803;951;"C";"int rectangleArea(int** rectangles, int 
rectanglesSize, int* rectanglesColSize){
 
}";"";"2020-03-25 15:18:41"
11804;951;"Rust";"impl Solution {
    pub fn rectangle_area(rectangles: Vec<Vec<i32>>)
 -> i32 {
        
    }
}";"";"2020-03-25 15:18:41"
11805;951;"Scala";"object Solution {
    def rectangleArea(rectangles: Array[Array[Int]])
: Int = {
 
    }
}";"";"2020-03-25 15:18:41"
11806;951;"Go";"func rectangleArea(rectangles [][]int) int {
 
}";"";"2020-03-25 15:18:41"
11807;951;"Kotlin";"class Solution {
    fun rectangleArea(rectangles: Array<IntArray>): 
Int {
 
    }
}";"";"2020-03-25 15:18:41"
11808;951;"Python3";"class Solution:
    def rectangleArea(self, rectangles: List[List
[int]]) -> int:";"";"2020-03-25 15:18:41"
11809;951;"JavaScript";"/**
 * @param {number[][]} rectangles
 * @return {number}
 */
var rectangleArea = function(rectangles) {
 
};";"";"2020-03-25 15:18:41"
11810;951;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $rectangles
     * @return Integer
     */
    function rectangleArea($rectangles) {
        
    }
}";"";"2020-03-25 15:18:41"
11811;951;"Swift";"class Solution {
    func rectangleArea(_ rectangles: [[Int]]) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:41"
11812;951;"Ruby";"# @param {Integer[][]} rectangles";"";"2020-03-25 15:18:41"
11813;951;"Python";"class Solution(object):
    def rectangleArea(self, rectangles):
        """"""
        :type rectangles: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:41"
11814;952;"C#";"public class Solution {
    public int GetMaxRepetitions(string s1, int n1, 
string s2, int n2) {
 
    }
}";"";"2020-03-25 15:18:41"
11815;952;"Java";"class Solution {
    public int getMaxRepetitions(String s1, int n1, 
String s2, int n2) {
 
    }
}";"";"2020-03-25 15:18:41"
11816;952;"C";"int getMaxRepetitions(char * s1, int n1, char * s2, 
int n2){
 
}";"";"2020-03-25 15:18:41"
11817;952;"Rust";"impl Solution {
    pub fn get_max_repetitions(s1: String, n1: i32, 
s2: String, n2: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:41"
11818;952;"Scala";"object Solution {
    def getMaxRepetitions(s1: String, n1: Int, s2: 
String, n2: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:41"
11819;952;"Go";"func getMaxRepetitions(s1 string, n1 int, s2 string,
 n2 int) int {
 
}";"";"2020-03-25 15:18:41"
11820;952;"Kotlin";"class Solution {
    fun getMaxRepetitions(s1: String, n1: Int, s2: 
String, n2: Int): Int {
 
    }
}";"";"2020-03-25 15:18:41"
11821;952;"Python3";"class Solution:
    def getMaxRepetitions(self, s1: str, n1: int, 
s2: str, n2: int) -> int:";"";"2020-03-25 15:18:41"
11822;952;"JavaScript";"/**
 * @param {string} s1
 * @param {number} n1
 * @param {string} s2
 * @param {number} n2
 * @return {number}
 */
var getMaxRepetitions = function(s1, n1, s2, n2) {
 
};";"";"2020-03-25 15:18:41"
11823;952;"PHP";"class Solution {
 
    /**
     * @param String $s1
     * @param Integer $n1
     * @param String $s2
     * @param Integer $n2
     * @return Integer
     */
    function getMaxRepetitions($s1, $n1, $s2, $n2) {
        
    }
}";"";"2020-03-25 15:18:41"
11824;952;"Swift";"class Solution {
    func getMaxRepetitions(_ s1: String, _ n1: Int, 
_ s2: String, _ n2: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:41"
11825;952;"Ruby";"# @param {String} s1
# @param {Integer} n1
# @param {String} s2
# @param {Integer} n2
# @return {Integer}
def get_max_repetitions(s1, n1, s2, n2)
 
end";"";"2020-03-25 15:18:41"
11826;952;"Python";"class Solution(object):
    def getMaxRepetitions(self, s1, n1, s2, n2):
        """"""
        :type s1: str
        :type n1: int
        :type s2: str
        :type n2: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:41"
11827;953;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode LowestCommonAncestor(TreeNode 
root, TreeNode p, TreeNode q) {
        
    }
}";"";"2020-03-25 15:18:42"
11828;953;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode 
root, TreeNode p, TreeNode q) {
        
    }
}";"";"2020-03-25 15:18:42"
11829;953;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
struct TreeNode* lowestCommonAncestor(struct 
TreeNode* root, struct TreeNode* p, struct 
TreeNode* q) {
    
}";"";"2020-03-25 15:18:42"
11830;953;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode',
 p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':";"";"2020-03-25 15:18:42"
11831;953;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {TreeNode} p
 * @param {TreeNode} q
 * @return {TreeNode}
 */
var lowestCommonAncestor = function(root, p, q) {
    
};";"";"2020-03-25 15:18:42"
11832;953;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @param {TreeNode} p
# @param {TreeNode} q
# @return {TreeNode}
def lowest_common_ancestor(root, p, q)
    
end";"";"2020-03-25 15:18:42"
11833;953;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        """"""
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:42"
11834;954;"C#";"public class WordDictionary {
 
    /** Initialize your data structure here. */
    public WordDictionary() {
 
    }
    
    /** Adds a word into the data structure. */
    public void AddWord(string word) {
 
    }
    
    /** Returns if the word is in the data 
structure. A word could contain the dot character 
'.' to represent any one letter. */
    public bool Search(string word) {
 
    }
}
 
/**
 * Your WordDictionary object will be instantiated 
and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.AddWord(word);
 * bool param_2 = obj.Search(word);";"";"2020-03-25 15:18:42"
11835;954;"Java";"class WordDictionary {
 
    /** Initialize your data structure here. */
    public WordDictionary() {
 
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
 
    }
    
    /** Returns if the word is in the data 
structure. A word could contain the dot character 
'.' to represent any one letter. */
    public boolean search(String word) {
 
    }
}
 
/**
 * Your WordDictionary object will be instantiated 
and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);";"";"2020-03-25 15:18:42"
11836;954;"C";"typedef struct {
    
} WordDictionary;
 
/** Initialize your data structure here. */
 
WordDictionary* wordDictionaryCreate() {
    
}
 
/** Adds a word into the data structure. */
void wordDictionaryAddWord(WordDictionary* obj, 
char * word) {
  
}
 
/** Returns if the word is in the data structure. A 
word could contain the dot character '.' to 
represent any one letter. */
bool wordDictionarySearch(WordDictionary* obj, char 
* word) {
  
}
 
void wordDictionaryFree(WordDictionary* obj) {
    ";"";"2020-03-25 15:18:42"
11837;954;"Rust";"struct WordDictionary {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl WordDictionary {
 
    /** Initialize your data structure here. */
    fn new() -> Self {
 
    }
    
    /** Adds a word into the data structure. */
    fn add_word(&self, word: String) {
 
    }
    
    /** Returns if the word is in the data 
structure. A word could contain the dot character 
'.' to represent any one letter. */";"";"2020-03-25 15:18:42"
11838;954;"Scala";"class WordDictionary() {
 
    /** Initialize your data structure here. */
 
 
    /** Adds a word into the data structure. */
    def addWord(word: String) {
 
    }
 
    /** Returns if the word is in the data 
structure. A word could contain the dot character 
'.' to represent any one letter. */
    def search(word: String): Boolean = {
 
    }
 
}
 
/**
 * Your WordDictionary object will be instantiated 
and called as such:
 * var obj = new WordDictionary()
 * obj.addWord(word)
 * var param_2 = obj.search(word)
 */";"";"2020-03-25 15:18:42"
11839;954;"Go";"type WordDictionary struct {
 
}
 
 
/** Initialize your data structure here. */
func Constructor() WordDictionary {
 
}
 
 
/** Adds a word into the data structure. */
func (this *WordDictionary) AddWord(word string)  {
 
}
 
 
/** Returns if the word is in the data structure. A 
word could contain the dot character '.' to 
represent any one letter. */
func (this *WordDictionary) Search(word string) 
bool {
 
}
 
 ";"";"2020-03-25 15:18:42"
11840;954;"Kotlin";"class WordDictionary() {
 
    /** Initialize your data structure here. */
 
 
    /** Adds a word into the data structure. */
    fun addWord(word: String) {
 
    }
 
    /** Returns if the word is in the data 
structure. A word could contain the dot character 
'.' to represent any one letter. */
    fun search(word: String): Boolean {
 
    }
 
}
 
/**
 * Your WordDictionary object will be instantiated 
and called as such:
 * var obj = WordDictionary()
 * obj.addWord(word)
 * var param_2 = obj.search(word)
 */";"";"2020-03-25 15:18:42"
11841;954;"Python3";"class WordDictionary:
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
 
 
    def addWord(self, word: str) -> None:
        """"""
        Adds a word into the data structure.
        """"""
 
 
    def search(self, word: str) -> bool:
        """"""
        Returns if the word is in the data 
structure. A word could contain the dot character 
'.' to represent any one letter.
        """"""
 
 
 
# Your WordDictionary object will be instantiated 
and called as such:
# obj = WordDictionary()";"";"2020-03-25 15:18:42"
11842;954;"JavaScript";"/**
 * Initialize your data structure here.
 */
var WordDictionary = function() {
 
};
 
/**
 * Adds a word into the data structure. 
 * @param {string} word
 * @return {void}
 */
WordDictionary.prototype.addWord = function(word) {
 
};
 
/**
 * Returns if the word is in the data structure. A 
word could contain the dot character '.' to 
represent any one letter. 
 * @param {string} word
 * @return {boolean}
 */
WordDictionary.prototype.search = function(word) {
 
};";"";"2020-03-25 15:18:42"
11843;954;"PHP";"class WordDictionary {
    /**
     * Initialize your data structure here.
     */
    function __construct() {
 
    }
 
    /**
     * Adds a word into the data structure.
     * @param String $word
     * @return NULL
     */
    function addWord($word) {
 
    }
 
    /**
     * Returns if the word is in the data 
structure. A word could contain the dot character 
'.' to represent any one letter.
     * @param String $word
     * @return Boolean
     */
    function search($word) {
 ";"";"2020-03-25 15:18:42"
11844;954;"Swift";"class WordDictionary {
 
    /** Initialize your data structure here. */
    init() {
 
    }
    
    /** Adds a word into the data structure. */
    func addWord(_ word: String) {
 
    }
    
    /** Returns if the word is in the data 
structure. A word could contain the dot character 
'.' to represent any one letter. */
    func search(_ word: String) -> Bool {
 
    }
}
 
/**
 * Your WordDictionary object will be instantiated 
and called as such:
 * let obj = WordDictionary()
 * obj.addWord(word)
 * let ret_2: Bool = obj.search(word)";"";"2020-03-25 15:18:42"
11845;954;"Ruby";"class WordDictionary
 
=begin
    Initialize your data structure here.
=end
    def initialize()
 
    end
 
 
=begin
    Adds a word into the data structure.
    :type word: String
    :rtype: Void
=end
    def add_word(word)
 
    end
 
 
=begin
    Returns if the word is in the data structure. A 
word could contain the dot character '.' to 
represent any one letter.
    :type word: String
    :rtype: Boolean";"";"2020-03-25 15:18:42"
11846;954;"Python";"class WordDictionary(object):
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
 
 
    def addWord(self, word):
        """"""
        Adds a word into the data structure.
        :type word: str
        :rtype: None
        """"""
 
 
    def search(self, word):
        """"""
        Returns if the word is in the data 
structure. A word could contain the dot character 
'.' to represent any one letter.
        :type word: str
        :rtype: bool
        """"""
 
 ";"";"2020-03-25 15:18:42"
11847;955;"C#";"public class StreamRank {
 
    public StreamRank() {
 
    }
    
    public void Track(int x) {
 
    }
    
    public int GetRankOfNumber(int x) {
 
    }
}
 
/**
 * Your StreamRank object will be instantiated and 
called as such:
 * StreamRank obj = new StreamRank();
 * obj.Track(x);
 * int param_2 = obj.GetRankOfNumber(x);
 */";"";"2020-03-25 15:18:42"
11848;955;"Java";"class StreamRank {
 
    public StreamRank() {
 
    }
    
    public void track(int x) {
 
    }
    
    public int getRankOfNumber(int x) {
 
    }
}
 
/**
 * Your StreamRank object will be instantiated and 
called as such:
 * StreamRank obj = new StreamRank();
 * obj.track(x);
 * int param_2 = obj.getRankOfNumber(x);
 */";"";"2020-03-25 15:18:42"
11849;955;"C";"typedef struct {
 
} StreamRank;
 
 
StreamRank* streamRankCreate() {
 
}
 
void streamRankTrack(StreamRank* obj, int x) {
 
}
 
int streamRankGetRankOfNumber(StreamRank* obj, int 
x) {
 
}
 
void streamRankFree(StreamRank* obj) {
 
}
 
/**
 * Your StreamRank struct will be instantiated and 
called as such:
 * StreamRank* obj = streamRankCreate();";"";"2020-03-25 15:18:42"
11850;955;"Rust";"struct StreamRank {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl StreamRank {
 
    fn new() -> Self {
 
    }
    
    fn track(&self, x: i32) {
 
    }
    
    fn get_rank_of_number(&self, x: i32) -> i32 {
 
    }
}
 ";"";"2020-03-25 15:18:42"
11851;955;"Scala";"class StreamRank() {
 
    def track(x: Int) {
 
    }
 
    def getRankOfNumber(x: Int): Int = {
 
    }
 
}
 
/**
 * Your StreamRank object will be instantiated and 
called as such:
 * var obj = new StreamRank()
 * obj.track(x)
 * var param_2 = obj.getRankOfNumber(x)
 */";"";"2020-03-25 15:18:42"
11852;955;"Go";"type StreamRank struct {
 
}
 
 
func Constructor() StreamRank {
 
}
 
 
func (this *StreamRank) Track(x int)  {
 
}
 
 
func (this *StreamRank) GetRankOfNumber(x int) int {
 
}
 
 
/**
 * Your StreamRank object will be instantiated and 
called as such:
 * obj := Constructor();
 * obj.Track(x);
 * param_2 := obj.GetRankOfNumber(x);";"";"2020-03-25 15:18:42"
11853;955;"Kotlin";"class StreamRank() {
 
    fun track(x: Int) {
 
    }
 
    fun getRankOfNumber(x: Int): Int {
 
    }
 
}
 
/**
 * Your StreamRank object will be instantiated and 
called as such:
 * var obj = StreamRank()
 * obj.track(x)
 * var param_2 = obj.getRankOfNumber(x)
 */";"";"2020-03-25 15:18:42"
11854;955;"Python3";"class StreamRank:
 
    def __init__(self):
 
 
    def track(self, x: int) -> None:
 
 
    def getRankOfNumber(self, x: int) -> int:
 
 
 
# Your StreamRank object will be instantiated and 
called as such:
# obj = StreamRank()
# obj.track(x)
# param_2 = obj.getRankOfNumber(x)";"";"2020-03-25 15:18:42"
11855;955;"JavaScript";"var StreamRank = function() {
 
};
 
/** 
 * @param {number} x
 * @return {void}
 */
StreamRank.prototype.track = function(x) {
 
};
 
/** 
 * @param {number} x
 * @return {number}
 */
StreamRank.prototype.getRankOfNumber = function(x) {
 
};
 
/**
 * Your StreamRank object will be instantiated and 
called as such:
 * var obj = new StreamRank()
 * obj.track(x)
 * var param_2 = obj.getRankOfNumber(x)";"";"2020-03-25 15:18:42"
11856;955;"PHP";"class StreamRank {
    /**
     */
    function __construct() {
 
    }
 
    /**
     * @param Integer $x
     * @return NULL
     */
    function track($x) {
 
    }
 
    /**
     * @param Integer $x
     * @return Integer
     */
    function getRankOfNumber($x) {
 
    }
}
 
/**
 * Your StreamRank object will be instantiated and ";"";"2020-03-25 15:18:42"
11857;955;"Swift";"class StreamRank {
 
    init() {
 
    }
    
    func track(_ x: Int) {
 
    }
    
    func getRankOfNumber(_ x: Int) -> Int {
 
    }
}
 
/**
 * Your StreamRank object will be instantiated and 
called as such:
 * let obj = StreamRank()
 * obj.track(x)
 * let ret_2: Int = obj.getRankOfNumber(x)
 */";"";"2020-03-25 15:18:42"
11858;955;"Ruby";"class StreamRank
    def initialize()
 
    end
 
 
=begin
    :type x: Integer
    :rtype: Void
=end
    def track(x)
 
    end
 
 
=begin
    :type x: Integer
    :rtype: Integer
=end
    def get_rank_of_number(x)
 
    end
 
 
end
 ";"";"2020-03-25 15:18:42"
11859;955;"Python";"class StreamRank(object):
 
    def __init__(self):
 
 
    def track(self, x):
        """"""
        :type x: int
        :rtype: None
        """"""
 
 
    def getRankOfNumber(self, x):
        """"""
        :type x: int
        :rtype: int
        """"""
 
 
 
# Your StreamRank object will be instantiated and 
called as such:
# obj = StreamRank()
# obj.track(x)
# param_2 = obj.getRankOfNumber(x)";"";"2020-03-25 15:18:42"
11860;956;"C#";"public class Solution {
    public IList<IList<string>> GroupAnagrams(string
[] strs) {
 
    }
}";"";"2020-03-25 15:18:42"
11861;956;"Java";"class Solution {
    public List<List<String>> groupAnagrams(String[]
 strs) {
 
    }
}";"";"2020-03-25 15:18:42"
11862;956;"Rust";"impl Solution {
    pub fn group_anagrams(strs: Vec<String>) -> 
Vec<Vec<String>> {
        
    }
}";"";"2020-03-25 15:18:42"
11863;956;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
char *** groupAnagrams(char ** strs, int strsSize, 
int* returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:42"
11864;956;"Scala";"object Solution {
    def groupAnagrams(strs: Array[String]): List
[List[String]] = {
 
    }
}";"";"2020-03-25 15:18:42"
11865;956;"Go";"func groupAnagrams(strs []string) [][]string {
 
}";"";"2020-03-25 15:18:42"
11866;956;"Kotlin";"class Solution {
    fun groupAnagrams(strs: Array<String>): 
List<List<String>> {
 
    }
}";"";"2020-03-25 15:18:42"
11867;956;"Python3";"class Solution:
    def groupAnagrams(self, strs: List[str]) -> List
[List[str]]:";"";"2020-03-25 15:18:42"
11868;956;"JavaScript";"/**
 * @param {string[]} strs
 * @return {string[][]}
 */
var groupAnagrams = function(strs) {
 
};";"";"2020-03-25 15:18:42"
11869;956;"PHP";"class Solution {";"";"2020-03-25 15:18:42"
11870;956;"Swift";"class Solution {
    func groupAnagrams(_ strs: [String]) -> [
[String]] {
        
    }
}";"";"2020-03-25 15:18:42"
11871;956;"Ruby";"# @param {String[]} strs
# @return {String[][]}
def group_anagrams(strs)
 
end";"";"2020-03-25 15:18:42"
11872;956;"Python";"class Solution(object):
    def groupAnagrams(self, strs):
        """"""
        :type strs: List[str]
        :rtype: List[List[str]]
        """"""";"";"2020-03-25 15:18:42"
11873;957;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int MaxDepth(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:42"
11874;957;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:42"
11875;957;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int maxDepth(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:42"
11876;957;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn max_depth(root: 
Option<Rc<RefCell<TreeNode>>>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:42"
11877;957;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def maxDepth(root: TreeNode): Int = {
 
    }
}";"";"2020-03-25 15:18:42"
11878;957;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func maxDepth(root *TreeNode) int {
 
}";"";"2020-03-25 15:18:42"
11879;957;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun maxDepth(root: TreeNode?): Int {
 
    }
}";"";"2020-03-25 15:18:42"
11880;957;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def maxDepth(self, root: TreeNode) -> int:";"";"2020-03-25 15:18:42"
11881;957;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var maxDepth = function(root) {
 
};";"";"2020-03-25 15:18:42"
11882;957;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer
     */
    function maxDepth($root) {
 
    }
}";"";"2020-03-25 15:18:42"
11883;957;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func maxDepth(_ root: TreeNode?) -> Int {
 
    }
}";"";"2020-03-25 15:18:42"
11884;957;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer}
def max_depth(root)
 
end";"";"2020-03-25 15:18:42"
11885;957;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def maxDepth(self, root):
        """"""
        :type root: TreeNode
        :rtype: int
        """"""";"";"2020-03-25 15:18:42"
11886;958;"C#";"public class Solution {
    public int NumPairsDivisibleBy60(int[] time) {
 
    }
}";"";"2020-03-25 15:18:42"
11887;958;"Java";"class Solution {
    public int numPairsDivisibleBy60(int[] time) {
 
    }
}";"";"2020-03-25 15:18:42"
11888;958;"C";"int numPairsDivisibleBy60(int* time, int timeSize){
 
}";"";"2020-03-25 15:18:42"
11889;958;"Rust";"impl Solution {
    pub fn num_pairs_divisible_by60(time: Vec<i32>) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:42"
11890;958;"Scala";"object Solution {
    def numPairsDivisibleBy60(time: Array[Int]): 
Int = {
 
    }
}";"";"2020-03-25 15:18:42"
11891;958;"Go";"func numPairsDivisibleBy60(time []int) int {
 
}";"";"2020-03-25 15:18:42"
11892;958;"Kotlin";"class Solution {
    fun numPairsDivisibleBy60(time: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:42"
11893;958;"Python3";"class Solution:
    def numPairsDivisibleBy60(self, time: List[int])
 -> int:";"";"2020-03-25 15:18:42"
11894;958;"JavaScript";"/**
 * @param {number[]} time
 * @return {number}
 */
var numPairsDivisibleBy60 = function(time) {
 
};";"";"2020-03-25 15:18:42"
11895;958;"PHP";"class Solution {
 
    /**
     * @param Integer[] $time
     * @return Integer
     */
    function numPairsDivisibleBy60($time) {
        
    }
}";"";"2020-03-25 15:18:42"
11896;958;"Swift";"class Solution {
    func numPairsDivisibleBy60(_ time: [Int]) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:42"
11897;958;"Ruby";"# @param {Integer[]} time";"";"2020-03-25 15:18:42"
11898;958;"Python";"class Solution(object):
    def numPairsDivisibleBy60(self, time):
        """"""
        :type time: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:42"
11899;959;"C#";"public class Solution {
    public char[][] UpdateBoard(char[][] board, int
[] click) {
 
    }
}";"";"2020-03-25 15:18:42"
11900;959;"Java";"class Solution {
    public char[][] updateBoard(char[][] board, int
[] click) {
 
    }
}";"";"2020-03-25 15:18:42"
11901;959;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
char** updateBoard(char** board, int boardSize, 
int* boardColSize, int* click, int clickSize, int* 
returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:42"
11902;959;"Rust";"impl Solution {
    pub fn update_board(board: Vec<Vec<char>>, 
click: Vec<i32>) -> Vec<Vec<char>> {
        
    }
}";"";"2020-03-25 15:18:42"
11903;959;"Scala";"object Solution {
    def updateBoard(board: Array[Array[Char]], 
click: Array[Int]): Array[Array[Char]] = {
 
    }
}";"";"2020-03-25 15:18:42"
11904;959;"Go";"func updateBoard(board [][]byte, click []int) [][]
byte {
 
}";"";"2020-03-25 15:18:42"
11905;959;"Kotlin";"class Solution {
    fun updateBoard(board: Array<CharArray>, click: 
IntArray): Array<CharArray> {
 
    }
}";"";"2020-03-25 15:18:42"
11906;959;"Python3";"class Solution:
    def updateBoard(self, board: List[List[str]], 
click: List[int]) -> List[List[str]]:";"";"2020-03-25 15:18:42"
11907;959;"JavaScript";"/**
 * @param {character[][]} board
 * @param {number[]} click
 * @return {character[][]}
 */
var updateBoard = function(board, click) {
 
};";"";"2020-03-25 15:18:42"
11908;959;"PHP";"class Solution {
 
    /**
     * @param String[][] $board
     * @param Integer[] $click
     * @return String[][]
     */
    function updateBoard($board, $click) {
        
    }
}";"";"2020-03-25 15:18:42"
11909;959;"Swift";"class Solution {
    func updateBoard(_ board: [[Character]], _ 
click: [Int]) -> [[Character]] {
        
    }
}";"";"2020-03-25 15:18:42"
11910;959;"Ruby";"# @param {Character[][]} board
# @param {Integer[]} click
# @return {Character[][]}
def update_board(board, click)
 
end";"";"2020-03-25 15:18:42"
11911;959;"Python";"class Solution(object):
    def updateBoard(self, board, click):
        """"""
        :type board: List[List[str]]
        :type click: List[int]
        :rtype: List[List[str]]
        """"""";"";"2020-03-25 15:18:42"
11912;960;"C#";"public class Solution {
    public IList<string> CommonChars(string[] A) {
 
    }
}";"";"2020-03-25 15:18:42"
11913;960;"Java";"class Solution {
    public List<String> commonChars(String[] A) {
 
    }
}";"";"2020-03-25 15:18:42"
11914;960;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** commonChars(char ** A, int ASize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:42"
11915;960;"Rust";"impl Solution {
    pub fn common_chars(a: Vec<String>) -> 
Vec<String> {
        
    }
}";"";"2020-03-25 15:18:42"
11916;960;"Scala";"object Solution {
    def commonChars(A: Array[String]): List[String] 
= {
 
    }
}";"";"2020-03-25 15:18:42"
11917;960;"Go";"func commonChars(A []string) []string {
 
}";"";"2020-03-25 15:18:42"
11918;960;"Kotlin";"class Solution {
    fun commonChars(A: Array<String>): List<String> 
{
 
    }
}";"";"2020-03-25 15:18:42"
11919;960;"Python3";"class Solution:
    def commonChars(self, A: List[str]) -> List[str]
:";"";"2020-03-25 15:18:42"
11920;960;"JavaScript";"/**
 * @param {string[]} A
 * @return {string[]}
 */
var commonChars = function(A) {
 
};";"";"2020-03-25 15:18:42"
11921;960;"PHP";"class Solution {
 
    /**
     * @param String[] $A
     * @return String[]
     */
    function commonChars($A) {
        
    }
}";"";"2020-03-25 15:18:42"
11922;960;"Swift";"class Solution {
    func commonChars(_ A: [String]) -> [String] {
        
    }
}";"";"2020-03-25 15:18:42"
11923;960;"Ruby";"# @param {String[]} a";"";"2020-03-25 15:18:42"
11924;960;"Python";"class Solution(object):
    def commonChars(self, A):
        """"""
        :type A: List[str]
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:42"
11925;961;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public bool IsBalanced(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:42"
11926;961;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isBalanced(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:42"
11927;961;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
bool isBalanced(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:42"
11928;961;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn is_balanced(root: 
Option<Rc<RefCell<TreeNode>>>) -> bool {
 
    }
}";"";"2020-03-25 15:18:42"
11929;961;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def isBalanced(root: TreeNode): Boolean = {
 
    }
}";"";"2020-03-25 15:18:42"
11930;961;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func isBalanced(root *TreeNode) bool {
 
}";"";"2020-03-25 15:18:42"
11931;961;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun isBalanced(root: TreeNode?): Boolean {
 
    }
}";"";"2020-03-25 15:18:42"
11932;961;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def isBalanced(self, root: TreeNode) -> bool:";"";"2020-03-25 15:18:42"
11933;961;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isBalanced = function(root) {
 
};";"";"2020-03-25 15:18:42"
11934;961;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Boolean
     */
    function isBalanced($root) {
 
    }
}";"";"2020-03-25 15:18:42"
11935;961;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func isBalanced(_ root: TreeNode?) -> Bool {
 
    }
}";"";"2020-03-25 15:18:42"
11936;961;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Boolean}
def is_balanced(root)
 
end";"";"2020-03-25 15:18:42"
11937;961;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def isBalanced(self, root):
        """"""
        :type root: TreeNode
        :rtype: bool
        """"""";"";"2020-03-25 15:18:42"
11938;962;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int KthLargest(TreeNode root, int k) {
 
    }
}";"";"2020-03-25 15:18:42"
11939;962;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int kthLargest(TreeNode root, int k) {
 
    }
}";"";"2020-03-25 15:18:42"
11940;962;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn kth_largest(root: 
Option<Rc<RefCell<TreeNode>>>, k: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:42"
11941;962;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int kthLargest(struct TreeNode* root, int k){
 
}";"";"2020-03-25 15:18:42"
11942;962;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def kthLargest(root: TreeNode, k: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:42"
11943;962;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func kthLargest(root *TreeNode, k int) int {
 
}";"";"2020-03-25 15:18:42"
11944;962;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun kthLargest(root: TreeNode?, k: Int): Int {
 
    }
}";"";"2020-03-25 15:18:42"
11945;962;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def kthLargest(self, root: TreeNode, k: int) -> 
int:";"";"2020-03-25 15:18:42"
11946;962;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} k
 * @return {number}
 */
var kthLargest = function(root, k) {
 
};";"";"2020-03-25 15:18:42"
11947;962;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @param Integer $k
     * @return Integer
     */
    function kthLargest($root, $k) {
 
    }
}";"";"2020-03-25 15:18:42"
11948;962;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func kthLargest(_ root: TreeNode?, _ k: Int) -> 
Int {
 
    }
}";"";"2020-03-25 15:18:42"
11949;962;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @param {Integer} k
# @return {Integer}
def kth_largest(root, k)
 
end";"";"2020-03-25 15:18:42"
11950;962;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def kthLargest(self, root, k):
        """"""
        :type root: TreeNode
        :type k: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:42"
11951;963;"C#";"public class Solution {
    public int ContainVirus(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:42"
11952;963;"Java";"class Solution {
    public int containVirus(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:42"
11953;963;"C";"int containVirus(int** grid, int gridSize, int* 
gridColSize){
 
}";"";"2020-03-25 15:18:42"
11954;963;"Rust";"impl Solution {
    pub fn contain_virus(grid: Vec<Vec<i32>>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:42"
11955;963;"Scala";"object Solution {
    def containVirus(grid: Array[Array[Int]]): Int 
= {
 
    }
}";"";"2020-03-25 15:18:42"
11956;963;"Go";"func containVirus(grid [][]int) int {
 
}";"";"2020-03-25 15:18:42"
11957;963;"Kotlin";"class Solution {
    fun containVirus(grid: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:42"
11958;963;"Python3";"class Solution:
    def containVirus(self, grid: List[List[int]]) 
-> int:";"";"2020-03-25 15:18:42"
11959;963;"JavaScript";"/**
 * @param {number[][]} grid
 * @return {number}
 */
var containVirus = function(grid) {
 
};";"";"2020-03-25 15:18:42"
11960;963;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $grid
     * @return Integer
     */
    function containVirus($grid) {
        
    }
}";"";"2020-03-25 15:18:42"
11961;963;"Swift";"class Solution {
    func containVirus(_ grid: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:42"
11962;963;"Ruby";"# @param {Integer[][]} grid
# @return {Integer}
def contain_virus(grid)
 
end";"";"2020-03-25 15:18:42"
11963;963;"Python";"class Solution(object):
    def containVirus(self, grid):
        """"""
        :type grid: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:42"
11964;964;"C#";"public class Solution {
    public int[] SmallerNumbersThanCurrent(int[] 
nums) {
 
    }
}";"";"2020-03-25 15:18:42"
11965;964;"Java";"class Solution {
    public int[] smallerNumbersThanCurrent(int[] 
nums) {
 
    }
}";"";"2020-03-25 15:18:42"
11966;964;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* smallerNumbersThanCurrent(int* nums, int 
numsSize, int* returnSize){
 
}";"";"2020-03-25 15:18:42"
11967;964;"Rust";"impl Solution {
    pub fn smaller_numbers_than_current(nums: 
Vec<i32>) -> Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:42"
11968;964;"Scala";"object Solution {
    def smallerNumbersThanCurrent(nums: Array[Int])
: Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:42"
11969;964;"Go";"func smallerNumbersThanCurrent(nums []int) []int {
 
}";"";"2020-03-25 15:18:42"
11970;964;"Kotlin";"class Solution {
    fun smallerNumbersThanCurrent(nums: IntArray): 
IntArray {
 
    }
}";"";"2020-03-25 15:18:42"
11971;964;"Python3";"class Solution:
    def smallerNumbersThanCurrent(self, nums: List
[int]) -> List[int]:";"";"2020-03-25 15:18:42"
11972;964;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number[]}
 */
var smallerNumbersThanCurrent = function(nums) {
 
};";"";"2020-03-25 15:18:42"
11973;964;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer[]
     */
    function smallerNumbersThanCurrent($nums) {
 
    }
}";"";"2020-03-25 15:18:42"
11974;964;"Swift";"class Solution {
    func smallerNumbersThanCurrent(_ nums: [Int]) 
-> [Int] {
        
    }
}";"";"2020-03-25 15:18:42"
11975;964;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:18:42"
11976;964;"Python";"class Solution(object):
    def smallerNumbersThanCurrent(self, nums):
        """"""
        :type nums: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:42"
11977;965;"C#";"public class Solution {
    public IList<string> AmbiguousCoordinates
(string S) {
 
    }
}";"";"2020-03-25 15:18:42"
11978;965;"Java";"class Solution {
    public List<String> ambiguousCoordinates(String 
S) {
 
    }
}";"";"2020-03-25 15:18:42"
11979;965;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** ambiguousCoordinates(char * S, int* 
returnSize){
 
}";"";"2020-03-25 15:18:42"
11980;965;"Rust";"impl Solution {
    pub fn ambiguous_coordinates(s: String) -> 
Vec<String> {
        
    }
}";"";"2020-03-25 15:18:42"
11981;965;"Scala";"object Solution {
    def ambiguousCoordinates(S: String): List
[String] = {
 
    }
}";"";"2020-03-25 15:18:42"
11982;965;"Go";"func ambiguousCoordinates(S string) []string {
 
}";"";"2020-03-25 15:18:42"
11983;965;"Kotlin";"class Solution {
    fun ambiguousCoordinates(S: String): 
List<String> {
 
    }
}";"";"2020-03-25 15:18:42"
11984;965;"Python3";"class Solution:
    def ambiguousCoordinates(self, S: str) -> List
[str]:";"";"2020-03-25 15:18:42"
11985;965;"JavaScript";"/**
 * @param {string} S
 * @return {string[]}
 */
var ambiguousCoordinates = function(S) {
 
};";"";"2020-03-25 15:18:42"
11986;965;"PHP";"class Solution {
 
    /**
     * @param String $S
     * @return String[]
     */
    function ambiguousCoordinates($S) {
        
    }
}";"";"2020-03-25 15:18:42"
11987;965;"Swift";"class Solution {
    func ambiguousCoordinates(_ S: String) -> 
[String] {
        
    }
}";"";"2020-03-25 15:18:42"
11988;965;"Ruby";"# @param {String} s
# @return {String[]}
def ambiguous_coordinates(s)
 
end";"";"2020-03-25 15:18:42"
11989;965;"Python";"class Solution(object):
    def ambiguousCoordinates(self, S):
        """"""
        :type S: str
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:42"
11990;966;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode RotateRight(ListNode head, int 
k) {
 
    }
}";"";"2020-03-25 15:18:42"
11991;966;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int 
k) {
 
    }
}";"";"2020-03-25 15:18:42"
11992;966;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
struct ListNode* rotateRight(struct ListNode* head, 
int k){
 
}";"";"2020-03-25 15:18:42"
11993;966;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn rotate_right(head: Option<Box<ListNode>>,
 k: i32) -> Option<Box<ListNode>> {
        
    }
}";"";"2020-03-25 15:18:42"
11994;966;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def rotateRight(head: ListNode, k: Int): 
ListNode = {
 
    }
}";"";"2020-03-25 15:18:42"
11995;966;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func rotateRight(head *ListNode, k int) *ListNode {
 
}";"";"2020-03-25 15:18:42"
11996;966;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun rotateRight(head: ListNode?, k: Int): 
ListNode? {
 
    }
}";"";"2020-03-25 15:18:42"
11997;966;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def rotateRight(self, head: ListNode, k: int) 
-> ListNode:";"";"2020-03-25 15:18:42"
11998;966;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @param {number} k
 * @return {ListNode}
 */
var rotateRight = function(head, k) {
 
};";"";"2020-03-25 15:18:42"
11999;966;"PHP";"/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
class Solution {
 
    /**
     * @param ListNode $head
     * @param Integer $k
     * @return ListNode
     */
    function rotateRight($head, $k) {
        
    }
}";"";"2020-03-25 15:18:42"
12000;966;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func rotateRight(_ head: ListNode?, _ k: Int) 
-> ListNode? {
        
    }
}";"";"2020-03-25 15:18:42"
12001;966;"Ruby";"# Definition for singly-linked list.";"";"2020-03-25 15:18:42"
12002;966;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def rotateRight(self, head, k):
        """"""
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:42"
12003;967;"C#";"public class Solution {
    public int NumMusicPlaylists(int N, int L, int 
K) {
 
    }
}";"";"2020-03-25 15:18:42"
12004;967;"Java";"class Solution {
    public int numMusicPlaylists(int N, int L, int 
K) {
 
    }
}";"";"2020-03-25 15:18:42"
12005;967;"Rust";"impl Solution {
    pub fn num_music_playlists(n: i32, l: i32, k: 
i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:42"
12006;967;"C";"int numMusicPlaylists(int N, int L, int K){
 
}";"";"2020-03-25 15:18:42"
12007;967;"Scala";"object Solution {
    def numMusicPlaylists(N: Int, L: Int, K: Int): 
Int = {
 
    }
}";"";"2020-03-25 15:18:42"
12008;967;"Go";"func numMusicPlaylists(N int, L int, K int) int {
 
}";"";"2020-03-25 15:18:42"
12009;967;"Kotlin";"class Solution {
    fun numMusicPlaylists(N: Int, L: Int, K: Int): 
Int {
 
    }
}";"";"2020-03-25 15:18:42"
12010;967;"Python3";"class Solution:
    def numMusicPlaylists(self, N: int, L: int, K: 
int) -> int:";"";"2020-03-25 15:18:42"
12011;967;"JavaScript";"/**
 * @param {number} N
 * @param {number} L
 * @param {number} K
 * @return {number}
 */
var numMusicPlaylists = function(N, L, K) {
 
};";"";"2020-03-25 15:18:42"
12012;967;"PHP";"class Solution {";"";"2020-03-25 15:18:42"
12013;967;"Swift";"class Solution {
    func numMusicPlaylists(_ N: Int, _ L: Int, _ K: 
Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:42"
12014;967;"Ruby";"# @param {Integer} n
# @param {Integer} l
# @param {Integer} k
# @return {Integer}
def num_music_playlists(n, l, k)
 
end";"";"2020-03-25 15:18:42"
12015;967;"Python";"class Solution(object):
    def numMusicPlaylists(self, N, L, K):
        """"""
        :type N: int
        :type L: int
        :type K: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:42"
12016;968;"C#";"public class Solution {
    public int LongestValidParentheses(string s) {
 
    }
}";"";"2020-03-25 15:18:42"
12017;968;"Java";"class Solution {
    public int longestValidParentheses(String s) {
 
    }
}";"";"2020-03-25 15:18:42"
12018;968;"Rust";"impl Solution {
    pub fn longest_valid_parentheses(s: String) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:42"
12019;968;"C";"int longestValidParentheses(char * s){
 
}";"";"2020-03-25 15:18:42"
12020;968;"Scala";"object Solution {
    def longestValidParentheses(s: String): Int = {
 
    }
}";"";"2020-03-25 15:18:42"
12021;968;"Go";"func longestValidParentheses(s string) int {
 
}";"";"2020-03-25 15:18:42"
12022;968;"Kotlin";"class Solution {
    fun longestValidParentheses(s: String): Int {
 
    }
}";"";"2020-03-25 15:18:42"
12023;968;"Python3";"class Solution:
    def longestValidParentheses(self, s: str) -> 
int:";"";"2020-03-25 15:18:42"
12024;968;"JavaScript";"/**
 * @param {string} s
 * @return {number}
 */
var longestValidParentheses = function(s) {
 
};";"";"2020-03-25 15:18:42"
12025;968;"PHP";"class Solution {";"";"2020-03-25 15:18:42"
12026;968;"Swift";"class Solution {
    func longestValidParentheses(_ s: String) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:42"
12027;968;"Ruby";"# @param {String} s
# @return {Integer}
def longest_valid_parentheses(s)
 
end";"";"2020-03-25 15:18:42"
12028;968;"Python";"class Solution(object):
    def longestValidParentheses(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:42"
12029;969;"C#";"public class Solution {
    public int FindUnsortedSubarray(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:42"
12030;969;"Java";"class Solution {
    public int findUnsortedSubarray(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:42"
12031;969;"Rust";"impl Solution {
    pub fn find_unsorted_subarray(nums: Vec<i32>) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:42"
12032;969;"C";"int findUnsortedSubarray(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:42"
12033;969;"Scala";"object Solution {
    def findUnsortedSubarray(nums: Array[Int]): Int 
= {
 
    }
}";"";"2020-03-25 15:18:42"
12034;969;"Go";"func findUnsortedSubarray(nums []int) int {
 
}";"";"2020-03-25 15:18:42"
12035;969;"Kotlin";"class Solution {
    fun findUnsortedSubarray(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:42"
12036;969;"Python3";"class Solution:
    def findUnsortedSubarray(self, nums: List[int]) 
-> int:";"";"2020-03-25 15:18:42"
12037;969;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var findUnsortedSubarray = function(nums) {
 
};";"";"2020-03-25 15:18:42"
12038;969;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function findUnsortedSubarray($nums) {
        
    }
}";"";"2020-03-25 15:18:42"
12039;969;"Swift";"class Solution {
    func findUnsortedSubarray(_ nums: [Int]) -> Int 
{
        
    }
}";"";"2020-03-25 15:18:42"
12040;969;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def find_unsorted_subarray(nums)
 
end";"";"2020-03-25 15:18:42"
12041;969;"Python";"class Solution(object):
    def findUnsortedSubarray(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:42"
12042;970;"C#";"public class Solution {
    public IList<int> FindMinHeightTrees(int n, int
[][] edges) {
 
    }
}";"";"2020-03-25 15:18:42"
12043;970;"Java";"class Solution {
    public List<Integer> findMinHeightTrees(int n, 
int[][] edges) {
 
    }
}";"";"2020-03-25 15:18:42"
12044;970;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* findMinHeightTrees(int n, int** edges, int 
edgesSize, int* edgesColSize, int* returnSize){
 
}";"";"2020-03-25 15:18:42"
12045;970;"Rust";"impl Solution {
    pub fn find_min_height_trees(n: i32, edges: 
Vec<Vec<i32>>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:42"
12046;970;"Scala";"object Solution {
    def findMinHeightTrees(n: Int, edges: Array
[Array[Int]]): List[Int] = {
 
    }
}";"";"2020-03-25 15:18:42"
12047;970;"Go";"func findMinHeightTrees(n int, edges [][]int) []int 
{
 
}";"";"2020-03-25 15:18:42"
12048;970;"Kotlin";"class Solution {
    fun findMinHeightTrees(n: Int, edges: 
Array<IntArray>): List<Int> {
 
    }
}";"";"2020-03-25 15:18:42"
12049;970;"Python3";"class Solution:
    def findMinHeightTrees(self, n: int, edges: List
[List[int]]) -> List[int]:";"";"2020-03-25 15:18:42"
12050;970;"JavaScript";"/**
 * @param {number} n
 * @param {number[][]} edges
 * @return {number[]}
 */
var findMinHeightTrees = function(n, edges) {
 
};";"";"2020-03-25 15:18:42"
12051;970;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @param Integer[][] $edges
     * @return Integer[]
     */
    function findMinHeightTrees($n, $edges) {
        
    }
}";"";"2020-03-25 15:18:42"
12052;970;"Swift";"class Solution {
    func findMinHeightTrees(_ n: Int, _ edges: [
[Int]]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:42"
12053;970;"Ruby";"# @param {Integer} n
# @param {Integer[][]} edges
# @return {Integer[]}
def find_min_height_trees(n, edges)
 
end";"";"2020-03-25 15:18:42"
12054;970;"Python";"class Solution(object):
    def findMinHeightTrees(self, n, edges):
        """"""
        :type n: int
        :type edges: List[List[int]]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:42"
12055;971;"C#";"public class Solution {
    public string PredictPartyVictory(string senate)
 {
 
    }
}";"";"2020-03-25 15:18:42"
12056;971;"Java";"class Solution {
    public String predictPartyVictory(String senate)
 {
 
    }
}";"";"2020-03-25 15:18:42"
12057;971;"C";"char * predictPartyVictory(char * senate){
 
}";"";"2020-03-25 15:18:42"
12058;971;"Rust";"impl Solution {
    pub fn predict_party_victory(senate: String) -> 
String {
        
    }
}";"";"2020-03-25 15:18:42"
12059;971;"Scala";"object Solution {
    def predictPartyVictory(senate: String): String 
= {
 
    }
}";"";"2020-03-25 15:18:42"
12060;971;"Go";"func predictPartyVictory(senate string) string {
 
}";"";"2020-03-25 15:18:42"
12061;971;"Kotlin";"class Solution {
    fun predictPartyVictory(senate: String): String 
{
 
    }
}";"";"2020-03-25 15:18:42"
12062;971;"Python3";"class Solution:
    def predictPartyVictory(self, senate: str) -> 
str:";"";"2020-03-25 15:18:42"
12063;971;"JavaScript";"/**
 * @param {string} senate
 * @return {string}
 */
var predictPartyVictory = function(senate) {
 
};";"";"2020-03-25 15:18:42"
12064;971;"PHP";"class Solution {
 
    /**
     * @param String $senate
     * @return String
     */
    function predictPartyVictory($senate) {
        
    }
}";"";"2020-03-25 15:18:42"
12065;971;"Swift";"class Solution {
    func predictPartyVictory(_ senate: String) -> 
String {
        
    }
}";"";"2020-03-25 15:18:42"
12066;971;"Ruby";"# @param {String} senate
# @return {String}
def predict_party_victory(senate)
 
end";"";"2020-03-25 15:18:42"
12067;971;"Python";"class Solution(object):
    def predictPartyVictory(self, senate):
        """"""
        :type senate: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:42"
12068;972;"C#";"public class Solution {
    public int NextGreaterElement(int n) {
 
    }
}";"";"2020-03-25 15:18:42"
12069;972;"Java";"class Solution {
    public int nextGreaterElement(int n) {
 
    }
}";"";"2020-03-25 15:18:42"
12070;972;"Rust";"impl Solution {
    pub fn next_greater_element(n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:42"
12071;972;"C";"int nextGreaterElement(int n){
 
}";"";"2020-03-25 15:18:42"
12072;972;"Scala";"object Solution {
    def nextGreaterElement(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:42"
12073;972;"Go";"func nextGreaterElement(n int) int {
 
}";"";"2020-03-25 15:18:42"
12074;972;"Kotlin";"class Solution {
    fun nextGreaterElement(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:42"
12075;972;"Python3";"class Solution:
    def nextGreaterElement(self, n: int) -> int:";"";"2020-03-25 15:18:42"
12076;972;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var nextGreaterElement = function(n) {
 
};";"";"2020-03-25 15:18:42"
12077;972;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function nextGreaterElement($n) {
        
    }
}";"";"2020-03-25 15:18:42"
12078;972;"Swift";"class Solution {
    func nextGreaterElement(_ n: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:42"
12079;972;"Ruby";"# @param {Integer} n
# @return {Integer}
def next_greater_element(n)
 
end";"";"2020-03-25 15:18:42"
12080;972;"Python";"class Solution(object):
    def nextGreaterElement(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:42"
12081;973;"C#";"public class Solution {
    public bool IsValidSerialization(string 
preorder) {
 
    }
}";"";"2020-03-25 15:18:43"
12082;973;"Java";"class Solution {
    public boolean isValidSerialization(String 
preorder) {
 
    }
}";"";"2020-03-25 15:18:43"
12083;973;"Rust";"impl Solution {
    pub fn is_valid_serialization(preorder: String) 
-> bool {
        
    }
}";"";"2020-03-25 15:18:43"
12084;973;"C";"bool isValidSerialization(char * preorder){
 
}";"";"2020-03-25 15:18:43"
12085;973;"Scala";"object Solution {
    def isValidSerialization(preorder: String): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:43"
12086;973;"Go";"func isValidSerialization(preorder string) bool {
 
}";"";"2020-03-25 15:18:43"
12087;973;"Kotlin";"class Solution {
    fun isValidSerialization(preorder: String): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:43"
12088;973;"Python3";"class Solution:
    def isValidSerialization(self, preorder: str) 
-> bool:";"";"2020-03-25 15:18:43"
12089;973;"JavaScript";"/**
 * @param {string} preorder
 * @return {boolean}
 */
var isValidSerialization = function(preorder) {
 
};";"";"2020-03-25 15:18:43"
12090;973;"PHP";"class Solution {
 
    /**
     * @param String $preorder
     * @return Boolean
     */
    function isValidSerialization($preorder) {
        
    }
}";"";"2020-03-25 15:18:43"
12091;973;"Swift";"class Solution {
    func isValidSerialization(_ preorder: String) 
-> Bool {
        
    }
}";"";"2020-03-25 15:18:43"
12092;973;"Ruby";"# @param {String} preorder
# @return {Boolean}
def is_valid_serialization(preorder)
 
end";"";"2020-03-25 15:18:43"
12093;973;"Python";"class Solution(object):
    def isValidSerialization(self, preorder):
        """"""
        :type preorder: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:43"
12094;974;"C#";"public class Solution {
    public bool PredictTheWinner(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:43"
12095;974;"Java";"class Solution {
    public boolean PredictTheWinner(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:43"
12096;974;"Rust";"impl Solution {
    pub fn predict_the_winner(nums: Vec<i32>) -> 
bool {
        
    }
}";"";"2020-03-25 15:18:43"
12097;974;"C";"bool PredictTheWinner(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:43"
12098;974;"Scala";"object Solution {
    def PredictTheWinner(nums: Array[Int]): Boolean 
= {
 
    }
}";"";"2020-03-25 15:18:43"
12099;974;"Go";"func PredictTheWinner(nums []int) bool {
 
}";"";"2020-03-25 15:18:43"
12100;974;"Kotlin";"class Solution {
    fun PredictTheWinner(nums: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:43"
12101;974;"Python3";"class Solution:
    def PredictTheWinner(self, nums: List[int]) -> 
bool:";"";"2020-03-25 15:18:43"
12102;974;"JavaScript";"/**
 * @param {number[]} nums
 * @return {boolean}
 */
var PredictTheWinner = function(nums) {
 
};";"";"2020-03-25 15:18:43"
12103;974;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Boolean
     */
    function PredictTheWinner($nums) {
        
    }
}";"";"2020-03-25 15:18:43"
12104;974;"Swift";"class Solution {
    func PredictTheWinner(_ nums: [Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:43"
12105;974;"Ruby";"# @param {Integer[]} nums
# @return {Boolean}
def predict_the_winner(nums)
 
end";"";"2020-03-25 15:18:43"
12106;974;"Python";"class Solution(object):
    def PredictTheWinner(self, nums):
        """"""
        :type nums: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:43"
12107;975;"C#";"public class Solution {
    public int[] FindDiagonalOrder(int[][] matrix) {
 
    }
}";"";"2020-03-25 15:18:43"
12108;975;"Java";"class Solution {
    public int[] findDiagonalOrder(int[][] matrix) {
 
    }
}";"";"2020-03-25 15:18:43"
12109;975;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* findDiagonalOrder(int** matrix, int matrixSize,
 int* matrixColSize, int* returnSize){
 
}";"";"2020-03-25 15:18:43"
12110;975;"Rust";"impl Solution {
    pub fn find_diagonal_order(matrix: 
Vec<Vec<i32>>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:43"
12111;975;"Scala";"object Solution {
    def findDiagonalOrder(matrix: Array[Array[Int]])
: Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:43"
12112;975;"Python3";"class Solution:
    def findDiagonalOrder(self, matrix: List[List
[int]]) -> List[int]:";"";"2020-03-25 15:18:43"
12113;975;"Go";"func findDiagonalOrder(matrix [][]int) []int {
 
}";"";"2020-03-25 15:18:43"
12114;975;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $matrix
     * @return Integer[]
     */
    function findDiagonalOrder($matrix) {
        
    }
}";"";"2020-03-25 15:18:43"
12115;975;"Swift";"class Solution {
    func findDiagonalOrder(_ matrix: [[Int]]) -> 
[Int] {
        
    }
}";"";"2020-03-25 15:18:43"
12116;975;"Ruby";"# @param {Integer[][]} matrix
# @return {Integer[]}
def find_diagonal_order(matrix)
 
end";"";"2020-03-25 15:18:43"
12117;975;"Python";"class Solution(object):
    def findDiagonalOrder(self, matrix):
        """"""
        :type matrix: List[List[int]]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:43"
12118;975;"Kotlin";"class Solution {
    fun findDiagonalOrder(matrix: Array<IntArray>): 
IntArray {
 
    }
}";"";"2020-03-25 15:18:43"
12119;976;"C#";"public class Solution {
    public int TotalNQueens(int n) {
 
    }
}";"";"2020-03-25 15:18:43"
12120;976;"Java";"class Solution {
    public int totalNQueens(int n) {
 
    }
}";"";"2020-03-25 15:18:43"
12121;976;"Rust";"impl Solution {
    pub fn total_n_queens(n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:43"
12122;976;"C";"int totalNQueens(int n){
 
}";"";"2020-03-25 15:18:43"
12123;976;"Scala";"object Solution {
    def totalNQueens(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:43"
12124;976;"Go";"func totalNQueens(n int) int {
 
}";"";"2020-03-25 15:18:43"
12125;976;"Kotlin";"class Solution {
    fun totalNQueens(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:43"
12126;976;"Python3";"class Solution:
    def totalNQueens(self, n: int) -> int:";"";"2020-03-25 15:18:43"
12127;976;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var totalNQueens = function(n) {
 
};";"";"2020-03-25 15:18:43"
12128;976;"PHP";"class Solution {";"";"2020-03-25 15:18:43"
12129;976;"Swift";"class Solution {
    func totalNQueens(_ n: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:43"
12130;976;"Ruby";"# @param {Integer} n
# @return {Integer}
def total_n_queens(n)
 
end";"";"2020-03-25 15:18:43"
12131;976;"Python";"class Solution(object):
    def totalNQueens(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:43"
12132;977;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode LowestCommonAncestor(TreeNode 
root, TreeNode p, TreeNode q) {
        
    }
}";"";"2020-03-25 15:18:43"
12133;977;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode 
root, TreeNode p, TreeNode q) {
        
    }
}";"";"2020-03-25 15:18:43"
12134;977;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
struct TreeNode* lowestCommonAncestor(struct 
TreeNode* root, struct TreeNode* p, struct 
TreeNode* q) {
    
}";"";"2020-03-25 15:18:43"
12135;977;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode',
 p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':";"";"2020-03-25 15:18:43"
12136;977;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {TreeNode} p
 * @param {TreeNode} q
 * @return {TreeNode}
 */
var lowestCommonAncestor = function(root, p, q) {
    
};";"";"2020-03-25 15:18:43"
12137;977;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @param {TreeNode} p
# @param {TreeNode} q
# @return {TreeNode}
def lowest_common_ancestor(root, p, q)
    
end";"";"2020-03-25 15:18:43"
12138;977;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        """"""
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:43"
12139;978;"C#";"public class Solution {
    public IList<int> LuckyNumbers (int[][] matrix) 
{
 
    }
}";"";"2020-03-25 15:18:43"
12140;978;"Java";"class Solution {
    public List<Integer> luckyNumbers (int[][] 
matrix) {
 
    }
}";"";"2020-03-25 15:18:43"
12141;978;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* luckyNumbers (int** matrix, int matrixSize, 
int* matrixColSize, int* returnSize){
 
}";"";"2020-03-25 15:18:43"
12142;978;"Rust";"impl Solution {
    pub fn lucky_numbers (matrix: Vec<Vec<i32>>) -> 
Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:43"
12143;978;"Scala";"object Solution {
    def luckyNumbers (matrix: Array[Array[Int]]): 
List[Int] = {
 
    }
}";"";"2020-03-25 15:18:43"
12144;978;"Go";"func luckyNumbers (matrix [][]int) []int {
 
}";"";"2020-03-25 15:18:43"
12145;978;"Kotlin";"class Solution {
    fun luckyNumbers (matrix: Array<IntArray>): 
List<Int> {
 
    }
}";"";"2020-03-25 15:18:43"
12146;978;"JavaScript";"/**
 * @param {number[][]} matrix
 * @return {number[]}
 */
var luckyNumbers  = function(matrix) {
 
};";"";"2020-03-25 15:18:43"
12147;978;"Python3";"class Solution:
    def luckyNumbers (self, matrix: List[List[int]])
 -> List[int]:";"";"2020-03-25 15:18:43"
12148;978;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $matrix
     * @return Integer[]
     */
    function luckyNumbers ($matrix) {
 
    }
}";"";"2020-03-25 15:18:43"
12149;978;"Swift";"class Solution {
    func luckyNumbers (_ matrix: [[Int]]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:43"
12150;978;"Ruby";"# @param {Integer[][]} matrix
# @return {Integer[]}
def lucky_numbers (matrix)
 
end";"";"2020-03-25 15:18:43"
12151;978;"Python";"class Solution(object):
    def luckyNumbers (self, matrix):
        """"""
        :type matrix: List[List[int]]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:43"
12152;979;"C#";"public class Solution {
    public int[] SmallestSufficientTeam(string[] 
req_skills, IList<IList<string>> people) {
 
    }
}";"";"2020-03-25 15:18:43"
12153;979;"Java";"class Solution {
    public int[] smallestSufficientTeam(String[] 
req_skills, List<List<String>> people) {
 
    }
}";"";"2020-03-25 15:18:43"
12154;979;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* smallestSufficientTeam(char ** req_skills, int 
req_skillsSize, char *** people, int peopleSize, 
int* peopleColSize, int* returnSize){
 
}";"";"2020-03-25 15:18:43"
12155;979;"Rust";"impl Solution {
    pub fn smallest_sufficient_team(req_skills: 
Vec<String>, people: Vec<Vec<String>>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:43"
12156;979;"Scala";"object Solution {
    def smallestSufficientTeam(req_skills: Array
[String], people: List[List[String]]): Array[Int] = 
{
 
    }
}";"";"2020-03-25 15:18:43"
12157;979;"Go";"func smallestSufficientTeam(req_skills []string, 
people [][]string) []int {
 
}";"";"2020-03-25 15:18:43"
12158;979;"Kotlin";"class Solution {
    fun smallestSufficientTeam(req_skills: 
Array<String>, people: List<List<String>>): 
IntArray {
 
    }
}";"";"2020-03-25 15:18:43"
12159;979;"Python3";"class Solution:
    def smallestSufficientTeam(self, req_skills: 
List[str], people: List[List[str]]) -> List[int]:";"";"2020-03-25 15:18:43"
12160;979;"JavaScript";"/**
 * @param {string[]} req_skills
 * @param {string[][]} people
 * @return {number[]}
 */
var smallestSufficientTeam = function(req_skills, 
people) {
 
};";"";"2020-03-25 15:18:43"
12161;979;"PHP";"class Solution {
 
    /**
     * @param String[] $req_skills
     * @param String[][] $people
     * @return Integer[]
     */
    function smallestSufficientTeam($req_skills, 
$people) {
        
    }
}";"";"2020-03-25 15:18:43"
12162;979;"Swift";"class Solution {
    func smallestSufficientTeam(_ req_skills: 
[String], _ people: [[String]]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:43"
12163;979;"Ruby";"# @param {String[]} req_skills";"";"2020-03-25 15:18:43"
12164;979;"Python";"class Solution(object):
    def smallestSufficientTeam(self, req_skills, 
people):
        """"""
        :type req_skills: List[str]
        :type people: List[List[str]]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:43"
12165;980;"C#";"public class Solution {
    public int MakeConnected(int n, int[][] 
connections) {
        
    }
}";"";"2020-03-25 15:18:43"
12166;980;"Java";"class Solution {
    public int makeConnected(int n, int[][] 
connections) {
 
    }
}";"";"2020-03-25 15:18:43"
12167;980;"C";"int makeConnected(int n, int** connections, int 
connectionsSize, int* connectionsColSize){
 
}";"";"2020-03-25 15:18:43"
12168;980;"Rust";"impl Solution {
    pub fn make_connected(n: i32, connections: 
Vec<Vec<i32>>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:43"
12169;980;"Scala";"object Solution {
    def makeConnected(n: Int, connections: Array
[Array[Int]]): Int = {
 
    }
}";"";"2020-03-25 15:18:43"
12170;980;"Go";"func makeConnected(n int, connections [][]int) int {
 
}";"";"2020-03-25 15:18:43"
12171;980;"Kotlin";"class Solution {
    fun makeConnected(n: Int, connections: 
Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:43"
12172;980;"Python3";"class Solution:
    def makeConnected(self, n: int, connections: 
List[List[int]]) -> int:";"";"2020-03-25 15:18:43"
12173;980;"JavaScript";"/**
 * @param {number} n
 * @param {number[][]} connections
 * @return {number}
 */
var makeConnected = function(n, connections) {
    
};";"";"2020-03-25 15:18:43"
12174;980;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @param Integer[][] $connections
     * @return Integer
     */
    function makeConnected($n, $connections) {
 
    }
}";"";"2020-03-25 15:18:43"
12175;980;"Swift";"class Solution {
    func makeConnected(_ n: Int, _ connections: [
[Int]]) -> Int {
 
    }
}";"";"2020-03-25 15:18:43"
12176;980;"Ruby";"# @param {Integer} n
# @param {Integer[][]} connections
# @return {Integer}
def make_connected(n, connections)
    
end";"";"2020-03-25 15:18:43"
12177;980;"Python";"class Solution(object):
    def makeConnected(self, n, connections):
        """"""
        :type n: int
        :type connections: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:43"
12178;981;"C#";"public class Solution {
    public IList<int> SelfDividingNumbers(int left, 
int right) {
 
    }
}";"";"2020-03-25 15:18:43"
12179;981;"Java";"class Solution {
    public List<Integer> selfDividingNumbers(int 
left, int right) {
 
    }
}";"";"2020-03-25 15:18:43"
12180;981;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* selfDividingNumbers(int left, int right, int* 
returnSize){
 
}";"";"2020-03-25 15:18:43"
12181;981;"Rust";"impl Solution {
    pub fn self_dividing_numbers(left: i32, right: 
i32) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:43"
12182;981;"Scala";"object Solution {
    def selfDividingNumbers(left: Int, right: Int): 
List[Int] = {
 
    }
}";"";"2020-03-25 15:18:43"
12183;981;"Go";"func selfDividingNumbers(left int, right int) []int 
{
 
}";"";"2020-03-25 15:18:43"
12184;981;"Kotlin";"class Solution {
    fun selfDividingNumbers(left: Int, right: Int): 
List<Int> {
 
    }
}";"";"2020-03-25 15:18:43"
12185;981;"Python3";"class Solution:
    def selfDividingNumbers(self, left: int, right: 
int) -> List[int]:";"";"2020-03-25 15:18:43"
12186;981;"JavaScript";"/**
 * @param {number} left
 * @param {number} right
 * @return {number[]}
 */
var selfDividingNumbers = function(left, right) {
 
};";"";"2020-03-25 15:18:43"
12187;981;"PHP";"class Solution {
 
    /**
     * @param Integer $left
     * @param Integer $right
     * @return Integer[]
     */
    function selfDividingNumbers($left, $right) {
        
    }
}";"";"2020-03-25 15:18:43"
12188;981;"Swift";"class Solution {
    func selfDividingNumbers(_ left: Int, _ right: 
Int) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:43"
12189;981;"Ruby";"# @param {Integer} left";"";"2020-03-25 15:18:43"
12190;981;"Python";"class Solution(object):
    def selfDividingNumbers(self, left, right):
        """"""
        :type left: int
        :type right: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:43"
12191;982;"C#";"public class Solution {
    public int NetworkDelayTime(int[][] times, int 
N, int K) {
 
    }
}";"";"2020-03-25 15:18:43"
12192;982;"Java";"class Solution {
    public int networkDelayTime(int[][] times, int 
N, int K) {
 
    }
}";"";"2020-03-25 15:18:43"
12193;982;"C";"int networkDelayTime(int** times, int timesSize, 
int* timesColSize, int N, int K){
 
}";"";"2020-03-25 15:18:43"
12194;982;"Rust";"impl Solution {
    pub fn network_delay_time(times: Vec<Vec<i32>>, 
n: i32, k: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:43"
12195;982;"Scala";"object Solution {
    def networkDelayTime(times: Array[Array[Int]], 
N: Int, K: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:43"
12196;982;"Go";"func networkDelayTime(times [][]int, N int, K int) 
int {
 
}";"";"2020-03-25 15:18:43"
12197;982;"Kotlin";"class Solution {
    fun networkDelayTime(times: Array<IntArray>, N: 
Int, K: Int): Int {
 
    }
}";"";"2020-03-25 15:18:43"
12198;982;"Python3";"class Solution:
    def networkDelayTime(self, times: List[List[int]
], N: int, K: int) -> int:";"";"2020-03-25 15:18:43"
12199;982;"JavaScript";"/**
 * @param {number[][]} times
 * @param {number} N
 * @param {number} K
 * @return {number}
 */
var networkDelayTime = function(times, N, K) {
 
};";"";"2020-03-25 15:18:43"
12200;982;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $times
     * @param Integer $N
     * @param Integer $K
     * @return Integer
     */
    function networkDelayTime($times, $N, $K) {
 
    }
}";"";"2020-03-25 15:18:43"
12201;982;"Swift";"class Solution {
    func networkDelayTime(_ times: [[Int]], _ N: 
Int, _ K: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:43"
12202;982;"Ruby";"# @param {Integer[][]} times
# @param {Integer} n
# @param {Integer} k
# @return {Integer}
def network_delay_time(times, n, k)
 
end";"";"2020-03-25 15:18:43"
12203;982;"Python";"class Solution(object):
    def networkDelayTime(self, times, N, K):
        """"""
        :type times: List[List[int]]
        :type N: int
        :type K: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:43"
12204;983;"C#";"public class Solution {
    public string MinWindow(string s, string t) {
 
    }
}";"";"2020-03-25 15:18:43"
12205;983;"Java";"class Solution {
    public String minWindow(String s, String t) {
 
    }
}";"";"2020-03-25 15:18:43"
12206;983;"Rust";"impl Solution {
    pub fn min_window(s: String, t: String) -> 
String {
        
    }
}";"";"2020-03-25 15:18:43"
12207;983;"C";"char * minWindow(char * s, char * t){
 
}";"";"2020-03-25 15:18:43"
12208;983;"Scala";"object Solution {
    def minWindow(s: String, t: String): String = {
 
    }
}";"";"2020-03-25 15:18:43"
12209;983;"Go";"func minWindow(s string, t string) string {
 
}";"";"2020-03-25 15:18:43"
12210;983;"Kotlin";"class Solution {
    fun minWindow(s: String, t: String): String {
 
    }
}";"";"2020-03-25 15:18:43"
12211;983;"Python3";"class Solution:
    def minWindow(self, s: str, t: str) -> str:";"";"2020-03-25 15:18:43"
12212;983;"JavaScript";"/**
 * @param {string} s
 * @param {string} t
 * @return {string}
 */
var minWindow = function(s, t) {
 
};";"";"2020-03-25 15:18:43"
12213;983;"PHP";"class Solution {";"";"2020-03-25 15:18:43"
12214;983;"Swift";"class Solution {
    func minWindow(_ s: String, _ t: String) -> 
String {
        
    }
}";"";"2020-03-25 15:18:43"
12215;983;"Ruby";"# @param {String} s
# @param {String} t
# @return {String}
def min_window(s, t)
 
end";"";"2020-03-25 15:18:43"
12216;983;"Python";"class Solution(object):
    def minWindow(self, s, t):
        """"""
        :type s: str
        :type t: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:43"
12217;984;"C#";"public class Solution {
    public int FindString(string[] words, string s) 
{
 
    }
}";"";"2020-03-25 15:18:43"
12218;984;"Java";"class Solution {
    public int findString(String[] words, String s) 
{
 
    }
}";"";"2020-03-25 15:18:43"
12219;984;"Rust";"impl Solution {
    pub fn find_string(words: Vec<String>, s: 
String) -> i32 {
 
    }
}";"";"2020-03-25 15:18:43"
12220;984;"C";"int findString(char** words, int wordsSize, char* s)
{
 
}";"";"2020-03-25 15:18:43"
12221;984;"Scala";"object Solution {
    def findString(words: Array[String], s: String)
: Int = {
 
    }
}";"";"2020-03-25 15:18:43"
12222;984;"Go";"func findString(words []string, s string) int {
 
}";"";"2020-03-25 15:18:43"
12223;984;"Kotlin";"class Solution {
    fun findString(words: Array<String>, s: String)
: Int {
 
    }
}";"";"2020-03-25 15:18:43"
12224;984;"Python3";"class Solution:
    def findString(self, words: List[str], s: str) 
-> int:";"";"2020-03-25 15:18:43"
12225;984;"JavaScript";"/**
 * @param {string[]} words
 * @param {string} s
 * @return {number}
 */
var findString = function(words, s) {
 
};";"";"2020-03-25 15:18:43"
12226;984;"PHP";"class Solution {
 
    /**
     * @param String[] $words
     * @param String $s
     * @return Integer
     */
    function findString($words, $s) {
 
    }
}";"";"2020-03-25 15:18:43"
12227;984;"Swift";"class Solution {
    func findString(_ words: [String], _ s: String) 
-> Int {
 
    }
}";"";"2020-03-25 15:18:43"
12228;984;"Ruby";"# @param {String[]} words
# @param {String} s
# @return {Integer}
def find_string(words, s)
 
end";"";"2020-03-25 15:18:43"
12229;984;"Python";"class Solution(object):
    def findString(self, words, s):
        """"""
        :type words: List[str]
        :type s: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:43"
12230;985;"C#";"public class Solution {
    public int NumSimilarGroups(string[] A) {
 
    }
}";"";"2020-03-25 15:18:43"
12231;985;"Java";"class Solution {
    public int numSimilarGroups(String[] A) {
 
    }
}";"";"2020-03-25 15:18:43"
12232;985;"Rust";"impl Solution {
    pub fn num_similar_groups(a: Vec<String>) -> 
i32 {
 
    }
}";"";"2020-03-25 15:18:43"
12233;985;"C";"int numSimilarGroups(char ** A, int ASize){
 
}";"";"2020-03-25 15:18:43"
12234;985;"Scala";"object Solution {
    def numSimilarGroups(A: Array[String]): Int = {
 
    }
}";"";"2020-03-25 15:18:43"
12235;985;"Go";"func numSimilarGroups(A []string) int {
 
}";"";"2020-03-25 15:18:43"
12236;985;"Kotlin";"class Solution {
    fun numSimilarGroups(A: Array<String>): Int {
 
    }
}";"";"2020-03-25 15:18:43"
12237;985;"Python3";"class Solution:
    def numSimilarGroups(self, A: List[str]) -> int:";"";"2020-03-25 15:18:43"
12238;985;"JavaScript";"/**
 * @param {string[]} A
 * @return {number}
 */
var numSimilarGroups = function(A) {
 
};";"";"2020-03-25 15:18:43"
12239;985;"PHP";"class Solution {";"";"2020-03-25 15:18:43"
12240;985;"Swift";"class Solution {
    func numSimilarGroups(_ A: [String]) -> Int {
 
    }
}";"";"2020-03-25 15:18:43"
12241;985;"Ruby";"# @param {String[]} a
# @return {Integer}
def num_similar_groups(a)
 
end";"";"2020-03-25 15:18:43"
12242;985;"Python";"class Solution(object):
    def numSimilarGroups(self, A):
        """"""
        :type A: List[str]
        :rtype: int
        """"""";"";"2020-03-25 15:18:43"
12243;986;"C#";"public class Solution {
    public int CarFleet(int target, int[] position, 
int[] speed) {
 
    }
}";"";"2020-03-25 15:18:43"
12244;986;"Java";"class Solution {
    public int carFleet(int target, int[] position, 
int[] speed) {
 
    }
}";"";"2020-03-25 15:18:43"
12245;986;"Rust";"impl Solution {
    pub fn car_fleet(target: i32, position: 
Vec<i32>, speed: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:43"
12246;986;"C";"int carFleet(int target, int* position, int 
positionSize, int* speed, int speedSize){
 
}";"";"2020-03-25 15:18:43"
12247;986;"Scala";"object Solution {
    def carFleet(target: Int, position: Array[Int], 
speed: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:43"
12248;986;"Go";"func carFleet(target int, position []int, speed []
int) int {
 
}";"";"2020-03-25 15:18:43"
12249;986;"Kotlin";"class Solution {
    fun carFleet(target: Int, position: IntArray, 
speed: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:43"
12250;986;"Python3";"class Solution:
    def carFleet(self, target: int, position: List
[int], speed: List[int]) -> int:";"";"2020-03-25 15:18:43"
12251;986;"JavaScript";"/**
 * @param {number} target
 * @param {number[]} position
 * @param {number[]} speed
 * @return {number}
 */
var carFleet = function(target, position, speed) {
 
};";"";"2020-03-25 15:18:43"
12252;986;"PHP";"class Solution {";"";"2020-03-25 15:18:43"
12253;986;"Swift";"class Solution {
    func carFleet(_ target: Int, _ position: [Int], 
_ speed: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:43"
12254;986;"Ruby";"# @param {Integer} target
# @param {Integer[]} position
# @param {Integer[]} speed
# @return {Integer}
def car_fleet(target, position, speed)
 
end";"";"2020-03-25 15:18:43"
12255;986;"Python";"class Solution(object):
    def carFleet(self, target, position, speed):
        """"""
        :type target: int
        :type position: List[int]
        :type speed: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:43"
12256;987;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode DeleteDuplicates(ListNode head) 
{
 
    }
}";"";"2020-03-25 15:18:43"
12257;987;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) 
{
 
    }
}";"";"2020-03-25 15:18:43"
12258;987;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn delete_duplicates(head: 
Option<Box<ListNode>>) -> Option<Box<ListNode>> {
        
    }
}";"";"2020-03-25 15:18:43"
12259;987;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
struct ListNode* deleteDuplicates(struct ListNode* 
head){
 
}";"";"2020-03-25 15:18:43"
12260;987;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def deleteDuplicates(head: ListNode): ListNode 
= {
 
    }
}";"";"2020-03-25 15:18:43"
12261;987;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func deleteDuplicates(head *ListNode) *ListNode {
 
}";"";"2020-03-25 15:18:43"
12262;987;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun deleteDuplicates(head: ListNode?): ListNode?
 {
 
    }
}";"";"2020-03-25 15:18:43"
12263;987;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def deleteDuplicates(self, head: ListNode) -> 
ListNode:";"";"2020-03-25 15:18:43"
12264;987;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var deleteDuplicates = function(head) {
 
};";"";"2020-03-25 15:18:43"
12265;987;"PHP";"/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
class Solution {
 
    /**
     * @param ListNode $head
     * @return ListNode
     */
    function deleteDuplicates($head) {
        
    }
}";"";"2020-03-25 15:18:43"
12266;987;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func deleteDuplicates(_ head: ListNode?) -> 
ListNode? {
        
    }
}";"";"2020-03-25 15:18:43"
12267;987;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# @param {ListNode} head
# @return {ListNode}
def delete_duplicates(head)
 
end";"";"2020-03-25 15:18:43"
12268;987;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def deleteDuplicates(self, head):
        """"""
        :type head: ListNode
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:43"
12269;988;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void DeleteNode(ListNode node) {
        
    }
}";"";"2020-03-25 15:18:43"
12270;988;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public void deleteNode(ListNode node) {
        
    }
}";"";"2020-03-25 15:18:43"
12271;988;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
void deleteNode(struct ListNode* node) {
    
}";"";"2020-03-25 15:18:43"
12272;988;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def deleteNode(self, node):
        """"""
        :type node: ListNode
        :rtype: void Do not return anything, modify 
node in-place instead.
        """"""";"";"2020-03-25 15:18:43"
12273;988;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} node
 * @return {void} Do not return anything, modify 
node in-place instead.
 */
var deleteNode = function(node) {
    
};";"";"2020-03-25 15:18:43"
12274;988;"Ruby";"# Definition for singly-linked list.";"";"2020-03-25 15:18:43"
12275;988;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def deleteNode(self, node):
        """"""
        :type node: ListNode
        :rtype: void Do not return anything, modify 
node in-place instead.
        """"""";"";"2020-03-25 15:18:43"
12276;989;"C#";"public class Solution {
    public int CuttingRope(int n) {
 
    }
}";"";"2020-03-25 15:18:43"
12277;989;"Java";"class Solution {
    public int cuttingRope(int n) {
 
    }
}";"";"2020-03-25 15:18:43"
12278;989;"Rust";"impl Solution {
    pub fn cutting_rope(n: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:43"
12279;989;"C";"int cuttingRope(int n){
 
}";"";"2020-03-25 15:18:43"
12280;989;"Scala";"object Solution {
    def cuttingRope(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:43"
12281;989;"Go";"func cuttingRope(n int) int {
 
}";"";"2020-03-25 15:18:43"
12282;989;"Kotlin";"class Solution {
    fun cuttingRope(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:43"
12283;989;"Python3";"class Solution:
    def cuttingRope(self, n: int) -> int:";"";"2020-03-25 15:18:43"
12284;989;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var cuttingRope = function(n) {
 
};";"";"2020-03-25 15:18:43"
12285;989;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function cuttingRope($n) {
 
    }
}";"";"2020-03-25 15:18:43"
12286;989;"Swift";"class Solution {
    func cuttingRope(_ n: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:43"
12287;989;"Ruby";"# @param {Integer} n
# @return {Integer}
def cutting_rope(n)
 
end";"";"2020-03-25 15:18:43"
12288;989;"Python";"class Solution(object):
    def cuttingRope(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:43"
12289;990;"C#";"public class Solution {
    public int NumDupDigitsAtMostN(int N) {
 
    }
}";"";"2020-03-25 15:18:43"
12290;990;"Java";"class Solution {
    public int numDupDigitsAtMostN(int N) {
 
    }
}";"";"2020-03-25 15:18:43"
12291;990;"C";"int numDupDigitsAtMostN(int N){
 
}";"";"2020-03-25 15:18:43"
12292;990;"Rust";"impl Solution {
    pub fn num_dup_digits_at_most_n(n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:43"
12293;990;"Scala";"object Solution {
    def numDupDigitsAtMostN(N: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:43"
12294;990;"Go";"func numDupDigitsAtMostN(N int) int {
 
}";"";"2020-03-25 15:18:43"
12295;990;"Kotlin";"class Solution {
    fun numDupDigitsAtMostN(N: Int): Int {
 
    }
}";"";"2020-03-25 15:18:43"
12296;990;"Python3";"class Solution:
    def numDupDigitsAtMostN(self, N: int) -> int:";"";"2020-03-25 15:18:43"
12297;990;"JavaScript";"/**
 * @param {number} N
 * @return {number}
 */
var numDupDigitsAtMostN = function(N) {
 
};";"";"2020-03-25 15:18:43"
12298;990;"PHP";"class Solution {
 
    /**
     * @param Integer $N
     * @return Integer
     */
    function numDupDigitsAtMostN($N) {
        
    }
}";"";"2020-03-25 15:18:43"
12299;990;"Swift";"class Solution {
    func numDupDigitsAtMostN(_ N: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:43"
12300;990;"Ruby";"# @param {Integer} n";"";"2020-03-25 15:18:43"
12301;990;"Python";"class Solution(object):
    def numDupDigitsAtMostN(self, N):
        """"""
        :type N: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:43"
12302;991;"C#";"public class Solution {
    public int Divide(int dividend, int divisor) {
 
    }
}";"";"2020-03-25 15:18:43"
12303;991;"Java";"class Solution {
    public int divide(int dividend, int divisor) {
 
    }
}";"";"2020-03-25 15:18:43"
12304;991;"C";"int divide(int dividend, int divisor){
 
}";"";"2020-03-25 15:18:43"
12305;991;"Rust";"impl Solution {
    pub fn divide(dividend: i32, divisor: i32) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:43"
12306;991;"Scala";"object Solution {
    def divide(dividend: Int, divisor: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:43"
12307;991;"Go";"func divide(dividend int, divisor int) int {
 
}";"";"2020-03-25 15:18:43"
12308;991;"Kotlin";"class Solution {
    fun divide(dividend: Int, divisor: Int): Int {
 
    }
}";"";"2020-03-25 15:18:43"
12309;991;"Python3";"class Solution:
    def divide(self, dividend: int, divisor: int) 
-> int:";"";"2020-03-25 15:18:43"
12310;991;"JavaScript";"/**
 * @param {number} dividend
 * @param {number} divisor
 * @return {number}
 */
var divide = function(dividend, divisor) {
 
};";"";"2020-03-25 15:18:43"
12311;991;"PHP";"class Solution {
 
    /**
     * @param Integer $dividend
     * @param Integer $divisor
     * @return Integer
     */
    function divide($dividend, $divisor) {
        
    }
}";"";"2020-03-25 15:18:43"
12312;991;"Swift";"class Solution {
    func divide(_ dividend: Int, _ divisor: Int) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:43"
12313;991;"Ruby";"# @param {Integer} dividend";"";"2020-03-25 15:18:43"
12314;991;"Python";"class Solution(object):
    def divide(self, dividend, divisor):
        """"""
        :type dividend: int
        :type divisor: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:43"
12315;992;"C#";"public class Solution {
    public int LastRemaining(int n) {
 
    }
}";"";"2020-03-25 15:18:43"
12316;992;"Java";"class Solution {
    public int lastRemaining(int n) {
 
    }
}";"";"2020-03-25 15:18:43"
12317;992;"Rust";"impl Solution {
    pub fn last_remaining(n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:43"
12318;992;"C";"int lastRemaining(int n){
 
}";"";"2020-03-25 15:18:43"
12319;992;"Scala";"object Solution {
    def lastRemaining(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:43"
12320;992;"Go";"func lastRemaining(n int) int {
 
}";"";"2020-03-25 15:18:43"
12321;992;"Kotlin";"class Solution {
    fun lastRemaining(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:43"
12322;992;"Python3";"class Solution:
    def lastRemaining(self, n: int) -> int:";"";"2020-03-25 15:18:43"
12323;992;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var lastRemaining = function(n) {
 
};";"";"2020-03-25 15:18:43"
12324;992;"PHP";"class Solution {";"";"2020-03-25 15:18:43"
12325;992;"Swift";"class Solution {
    func lastRemaining(_ n: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:43"
12326;992;"Ruby";"# @param {Integer} n
# @return {Integer}
def last_remaining(n)
 
end";"";"2020-03-25 15:18:43"
12327;992;"Python";"class Solution(object):
    def lastRemaining(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:43"
12328;993;"C#";"public class Solution {
    public int[] TwoSum(int[] nums, int target) {
 
    }
}";"";"2020-03-25 15:18:44"
12329;993;"Java";"class Solution {
    public int[] twoSum(int[] nums, int target) {
 
    }
}";"";"2020-03-25 15:18:44"
12330;993;"C++";"class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int 
target) {
        
    }
};";"";"2020-03-25 15:18:44"
12331;993;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* twoSum(int* nums, int numsSize, int target, 
int* returnSize){
 
}";"";"2020-03-25 15:18:44"
12332;993;"Scala";"object Solution {
    def twoSum(nums: Array[Int], target: Int): Array
[Int] = {
 
    }
}";"";"2020-03-25 15:18:44"
12333;993;"Python3";"class Solution:
    def twoSum(self, nums: List[int], target: int) 
-> List[int]:";"";"2020-03-25 15:18:44"
12334;993;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
var twoSum = function(nums, target) {
 
};";"";"2020-03-25 15:18:44"
12335;993;"Go";"func twoSum(nums []int, target int) []int {
 
}";"";"2020-03-25 15:18:44"
12336;993;"Swift";"class Solution {
    func twoSum(_ nums: [Int], _ target: Int) -> 
[Int] {
        
    }
}";"";"2020-03-25 15:18:44"
12337;993;"Ruby";"# @param {Integer[]} nums
# @param {Integer} target
# @return {Integer[]}
def two_sum(nums, target)
 
end";"";"2020-03-25 15:18:44"
12338;993;"Python";"class Solution(object):
    def twoSum(self, nums, target):
        """"""
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:44"
12339;993;"Kotlin";"class Solution {
    fun twoSum(nums: IntArray, target: Int): 
IntArray {
 
    }
}";"";"2020-03-25 15:18:44"
12340;994;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int GetMinimumDifference(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:44"
12341;994;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int getMinimumDifference(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:44"
12342;994;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn get_minimum_difference(root: 
Option<Rc<RefCell<TreeNode>>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:44"
12343;994;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int getMinimumDifference(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:44"
12344;994;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def getMinimumDifference(root: TreeNode): Int = 
{
 
    }
}";"";"2020-03-25 15:18:44"
12345;994;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func getMinimumDifference(root *TreeNode) int {
 
}";"";"2020-03-25 15:18:44"
12346;994;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun getMinimumDifference(root: TreeNode?): Int {
 
    }
}";"";"2020-03-25 15:18:44"
12347;994;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def getMinimumDifference(self, root: TreeNode) 
-> int:";"";"2020-03-25 15:18:44"
12348;994;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var getMinimumDifference = function(root) {
 
};";"";"2020-03-25 15:18:44"
12349;994;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer
     */
    function getMinimumDifference($root) {
        
    }
}";"";"2020-03-25 15:18:44"
12350;994;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func getMinimumDifference(_ root: TreeNode?) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:44"
12351;994;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer}
def get_minimum_difference(root)
 
end";"";"2020-03-25 15:18:44"
12352;994;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def getMinimumDifference(self, root):
        """"""
        :type root: TreeNode
        :rtype: int
        """"""";"";"2020-03-25 15:18:44"
12353;995;"C#";"public class Solution {
    public int[] SortArrayByParity(int[] A) {
 
    }
}";"";"2020-03-25 15:18:44"
12354;995;"Java";"class Solution {
    public int[] sortArrayByParity(int[] A) {
 
    }
}";"";"2020-03-25 15:18:44"
12355;995;"Rust";"impl Solution {
    pub fn sort_array_by_parity(a: Vec<i32>) -> 
Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:44"
12356;995;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* sortArrayByParity(int* A, int ASize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:44"
12357;995;"Scala";"object Solution {
    def sortArrayByParity(A: Array[Int]): Array[Int]
 = {
 
    }
}";"";"2020-03-25 15:18:44"
12358;995;"Go";"func sortArrayByParity(A []int) []int {
 
}";"";"2020-03-25 15:18:44"
12359;995;"Kotlin";"class Solution {
    fun sortArrayByParity(A: IntArray): IntArray {
 
    }
}";"";"2020-03-25 15:18:44"
12360;995;"Python3";"class Solution:
    def sortArrayByParity(self, A: List[int]) -> 
List[int]:";"";"2020-03-25 15:18:44"
12361;995;"JavaScript";"/**
 * @param {number[]} A
 * @return {number[]}
 */
var sortArrayByParity = function(A) {
 
};";"";"2020-03-25 15:18:44"
12362;995;"PHP";"class Solution {";"";"2020-03-25 15:18:44"
12363;995;"Swift";"class Solution {
    func sortArrayByParity(_ A: [Int]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:44"
12364;995;"Ruby";"# @param {Integer[]} a
# @return {Integer[]}
def sort_array_by_parity(a)
 
end";"";"2020-03-25 15:18:44"
12365;995;"Python";"class Solution(object):
    def sortArrayByParity(self, A):
        """"""
        :type A: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:44"
12366;996;"C#";"public class Solution {
    public bool JudgeCircle(string moves) {
 
    }
}";"";"2020-03-25 15:18:44"
12367;996;"Java";"class Solution {
    public boolean judgeCircle(String moves) {
 
    }
}";"";"2020-03-25 15:18:44"
12368;996;"C";"bool judgeCircle(char * moves){
 
}";"";"2020-03-25 15:18:44"
12369;996;"Rust";"impl Solution {
    pub fn judge_circle(moves: String) -> bool {
        
    }
}";"";"2020-03-25 15:18:44"
12370;996;"Scala";"object Solution {
    def judgeCircle(moves: String): Boolean = {
 
    }
}";"";"2020-03-25 15:18:44"
12371;996;"Go";"func judgeCircle(moves string) bool {
 
}";"";"2020-03-25 15:18:44"
12372;996;"Kotlin";"class Solution {
    fun judgeCircle(moves: String): Boolean {
 
    }
}";"";"2020-03-25 15:18:44"
12373;996;"Python3";"class Solution:
    def judgeCircle(self, moves: str) -> bool:";"";"2020-03-25 15:18:44"
12374;996;"JavaScript";"/**
 * @param {string} moves
 * @return {boolean}
 */
var judgeCircle = function(moves) {
 
};";"";"2020-03-25 15:18:44"
12375;996;"PHP";"class Solution {
 
    /**
     * @param String $moves
     * @return Boolean
     */
    function judgeCircle($moves) {
        
    }
}";"";"2020-03-25 15:18:44"
12376;996;"Swift";"class Solution {
    func judgeCircle(_ moves: String) -> Bool {
        
    }
}";"";"2020-03-25 15:18:44"
12377;996;"Ruby";"# @param {String} moves
# @return {Boolean}
def judge_circle(moves)
 
end";"";"2020-03-25 15:18:44"
12378;996;"Python";"class Solution(object):
    def judgeCircle(self, moves):
        """"""
        :type moves: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:44"
12379;997;"C#";"public class Solution {
    public int MinArray(int[] numbers) {
 
    }
}";"";"2020-03-25 15:18:44"
12380;997;"Java";"class Solution {
    public int minArray(int[] numbers) {
 
    }
}";"";"2020-03-25 15:18:44"
12381;997;"Rust";"impl Solution {
    pub fn min_array(numbers: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:44"
12382;997;"C";"int minArray(int* numbers, int numbersSize){
 
}";"";"2020-03-25 15:18:44"
12383;997;"Scala";"object Solution {
    def minArray(numbers: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:44"
12384;997;"Go";"func minArray(numbers []int) int {
 
}";"";"2020-03-25 15:18:44"
12385;997;"Kotlin";"class Solution {
    fun minArray(numbers: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:44"
12386;997;"Python3";"class Solution:
    def minArray(self, numbers: List[int]) -> int:";"";"2020-03-25 15:18:44"
12387;997;"JavaScript";"/**
 * @param {number[]} numbers
 * @return {number}
 */
var minArray = function(numbers) {
 
};";"";"2020-03-25 15:18:44"
12388;997;"PHP";"class Solution {";"";"2020-03-25 15:18:44"
12389;997;"Swift";"class Solution {
    func minArray(_ numbers: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:44"
12390;997;"Ruby";"# @param {Integer[]} numbers
# @return {Integer}
def min_array(numbers)
 
end";"";"2020-03-25 15:18:44"
12391;997;"Python";"class Solution(object):
    def minArray(self, numbers):
        """"""
        :type numbers: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:44"
12392;998;"C#";"public class Solution {
    public int ShoppingOffers(IList<int> price, 
IList<IList<int>> special, IList<int> needs) {
 
    }
}";"";"2020-03-25 15:18:44"
12393;998;"Java";"class Solution {
    public int shoppingOffers(List<Integer> price, 
List<List<Integer>> special, List<Integer> needs) {
 
    }
}";"";"2020-03-25 15:18:44"
12394;998;"Rust";"impl Solution {
    pub fn shopping_offers(price: Vec<i32>, 
special: Vec<Vec<i32>>, needs: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:44"
12395;998;"C";"int shoppingOffers(int* price, int priceSize, int** 
special, int specialSize, int* specialColSize, int* 
needs, int needsSize){
 
}";"";"2020-03-25 15:18:44"
12396;998;"Scala";"object Solution {
    def shoppingOffers(price: List[Int], special: 
List[List[Int]], needs: List[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:44"
12397;998;"Go";"func shoppingOffers(price []int, special [][]int, 
needs []int) int {
 
}";"";"2020-03-25 15:18:44"
12398;998;"Kotlin";"class Solution {
    fun shoppingOffers(price: List<Int>, special: 
List<List<Int>>, needs: List<Int>): Int {
 
    }
}";"";"2020-03-25 15:18:44"
12399;998;"Python3";"class Solution:
    def shoppingOffers(self, price: List[int], 
special: List[List[int]], needs: List[int]) -> int:";"";"2020-03-25 15:18:44"
12400;998;"JavaScript";"/**
 * @param {number[]} price
 * @param {number[][]} special
 * @param {number[]} needs
 * @return {number}
 */
var shoppingOffers = function(price, special, needs)
 {
 
};";"";"2020-03-25 15:18:44"
12401;998;"PHP";"class Solution {
 
    /**
     * @param Integer[] $price
     * @param Integer[][] $special
     * @param Integer[] $needs
     * @return Integer
     */
    function shoppingOffers($price, $special, 
$needs) {
        
    }
}";"";"2020-03-25 15:18:44"
12402;998;"Swift";"class Solution {
    func shoppingOffers(_ price: [Int], _ special: [
[Int]], _ needs: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:44"
12403;998;"Ruby";"# @param {Integer[]} price
# @param {Integer[][]} special
# @param {Integer[]} needs
# @return {Integer}
def shopping_offers(price, special, needs)
 
end";"";"2020-03-25 15:18:44"
12404;998;"Python";"class Solution(object):
    def shoppingOffers(self, price, special, needs):
        """"""
        :type price: List[int]
        :type special: List[List[int]]
        :type needs: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:44"
12405;999;"C#";"public class Solution {
    public double[] SampleStats(int[] count) {
 
    }
}";"";"2020-03-25 15:18:44"
12406;999;"Java";"class Solution {
    public double[] sampleStats(int[] count) {
 
    }
}";"";"2020-03-25 15:18:44"
12407;999;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
double* sampleStats(int* count, int countSize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:44"
12408;999;"Rust";"impl Solution {
    pub fn sample_stats(count: Vec<i32>) -> 
Vec<f64> {
        
    }
}";"";"2020-03-25 15:18:44"
12409;999;"Scala";"object Solution {
    def sampleStats(count: Array[Int]): Array
[Double] = {
 
    }
}";"";"2020-03-25 15:18:44"
12410;999;"Go";"func sampleStats(count []int) []float64 {
 
}";"";"2020-03-25 15:18:44"
12411;999;"Kotlin";"class Solution {
    fun sampleStats(count: IntArray): DoubleArray {
 
    }
}";"";"2020-03-25 15:18:44"
12412;999;"Python3";"class Solution:
    def sampleStats(self, count: List[int]) -> List
[float]:";"";"2020-03-25 15:18:44"
12413;999;"JavaScript";"/**
 * @param {number[]} count
 * @return {number[]}
 */
var sampleStats = function(count) {
 
};";"";"2020-03-25 15:18:44"
12414;999;"PHP";"class Solution {
 
    /**
     * @param Integer[] $count
     * @return Float[]
     */
    function sampleStats($count) {
        
    }
}";"";"2020-03-25 15:18:44"
12415;999;"Swift";"class Solution {
    func sampleStats(_ count: [Int]) -> [Double] {
        
    }
}";"";"2020-03-25 15:18:44"
12416;999;"Ruby";"# @param {Integer[]} count
# @return {Float[]}
def sample_stats(count)
 
end";"";"2020-03-25 15:18:44"
12417;999;"Python";"class Solution(object):
    def sampleStats(self, count):
        """"""
        :type count: List[int]
        :rtype: List[float]
        """"""";"";"2020-03-25 15:18:44"
12418;1000;"C#";"public class Solution {
    public IList<int> PowerfulIntegers(int x, int y,
 int bound) {
 
    }
}";"";"2020-03-25 15:18:44"
12419;1000;"Java";"class Solution {
    public List<Integer> powerfulIntegers(int x, 
int y, int bound) {
 
    }
}";"";"2020-03-25 15:18:44"
12420;1000;"Rust";"impl Solution {
    pub fn powerful_integers(x: i32, y: i32, bound: 
i32) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:44"
12421;1000;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* powerfulIntegers(int x, int y, int bound, int* 
returnSize){
 
}";"";"2020-03-25 15:18:44"
12422;1000;"Scala";"object Solution {
    def powerfulIntegers(x: Int, y: Int, bound: Int)
: List[Int] = {
 
    }
}";"";"2020-03-25 15:18:44"
12423;1000;"Go";"func powerfulIntegers(x int, y int, bound int) []
int {
 
}";"";"2020-03-25 15:18:44"
12424;1000;"Kotlin";"class Solution {
    fun powerfulIntegers(x: Int, y: Int, bound: Int)
: List<Int> {
 
    }
}";"";"2020-03-25 15:18:44"
12425;1000;"Python3";"class Solution:
    def powerfulIntegers(self, x: int, y: int, 
bound: int) -> List[int]:";"";"2020-03-25 15:18:44"
12426;1000;"JavaScript";"/**
 * @param {number} x
 * @param {number} y
 * @param {number} bound
 * @return {number[]}
 */
var powerfulIntegers = function(x, y, bound) {
 
};";"";"2020-03-25 15:18:44"
12427;1000;"PHP";"class Solution {";"";"2020-03-25 15:18:44"
12428;1000;"Swift";"class Solution {
    func powerfulIntegers(_ x: Int, _ y: Int, _ 
bound: Int) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:44"
12429;1000;"Ruby";"# @param {Integer} x
# @param {Integer} y
# @param {Integer} bound
# @return {Integer[]}
def powerful_integers(x, y, bound)
 
end";"";"2020-03-25 15:18:44"
12430;1000;"Python";"class Solution(object):
    def powerfulIntegers(self, x, y, bound):
        """"""
        :type x: int
        :type y: int
        :type bound: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:44"
12431;1001;"C#";"public class Solution {
    public int MatrixScore(int[][] A) {
 
    }
}";"";"2020-03-25 15:18:44"
12432;1001;"Java";"class Solution {
    public int matrixScore(int[][] A) {
 
    }
}";"";"2020-03-25 15:18:44"
12433;1001;"Rust";"impl Solution {
    pub fn matrix_score(a: Vec<Vec<i32>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:44"
12434;1001;"C";"int matrixScore(int** A, int ASize, int* AColSize){
 
}";"";"2020-03-25 15:18:44"
12435;1001;"Scala";"object Solution {
    def matrixScore(A: Array[Array[Int]]): Int = {
 
    }
}";"";"2020-03-25 15:18:44"
12436;1001;"JavaScript";"/**
 * @param {number[][]} A
 * @return {number}
 */
var matrixScore = function(A) {
 
};";"";"2020-03-25 15:18:44"
12437;1001;"Go";"func matrixScore(A [][]int) int {
 
}";"";"2020-03-25 15:18:44"
12438;1001;"PHP";"class Solution {";"";"2020-03-25 15:18:44"
12439;1001;"Swift";"class Solution {
    func matrixScore(_ A: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:44"
12440;1001;"Ruby";"# @param {Integer[][]} a
# @return {Integer}
def matrix_score(a)
 
end";"";"2020-03-25 15:18:44"
12441;1001;"Kotlin";"class Solution {
    fun matrixScore(A: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:44"
12442;1001;"Python";"class Solution(object):
    def matrixScore(self, A):
        """"""
        :type A: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:44"
12443;1002;"C#";"public class Solution {
    public bool PyramidTransition(string bottom, 
IList<string> allowed) {
 
    }
}";"";"2020-03-25 15:18:44"
12444;1002;"Java";"class Solution {
    public boolean pyramidTransition(String bottom, 
List<String> allowed) {
 
    }
}";"";"2020-03-25 15:18:44"
12445;1002;"C";"bool pyramidTransition(char * bottom, char ** 
allowed, int allowedSize){
 
}";"";"2020-03-25 15:18:44"
12446;1002;"Rust";"impl Solution {
    pub fn pyramid_transition(bottom: String, 
allowed: Vec<String>) -> bool {
        
    }
}";"";"2020-03-25 15:18:44"
12447;1002;"Scala";"object Solution {
    def pyramidTransition(bottom: String, allowed: 
List[String]): Boolean = {
 
    }
}";"";"2020-03-25 15:18:44"
12448;1002;"Go";"func pyramidTransition(bottom string, allowed []
string) bool {
 
}";"";"2020-03-25 15:18:44"
12449;1002;"Kotlin";"class Solution {
    fun pyramidTransition(bottom: String, allowed: 
List<String>): Boolean {
 
    }
}";"";"2020-03-25 15:18:44"
12450;1002;"Python3";"class Solution:
    def pyramidTransition(self, bottom: str, 
allowed: List[str]) -> bool:";"";"2020-03-25 15:18:44"
12451;1002;"JavaScript";"/**
 * @param {string} bottom
 * @param {string[]} allowed
 * @return {boolean}
 */
var pyramidTransition = function(bottom, allowed) {
 
};";"";"2020-03-25 15:18:44"
12452;1002;"PHP";"class Solution {
 
    /**
     * @param String $bottom
     * @param String[] $allowed
     * @return Boolean
     */
    function pyramidTransition($bottom, $allowed) {
        
    }
}";"";"2020-03-25 15:18:44"
12453;1002;"Swift";"class Solution {
    func pyramidTransition(_ bottom: String, _ 
allowed: [String]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:44"
12454;1002;"Ruby";"# @param {String} bottom
# @param {String[]} allowed
# @return {Boolean}
def pyramid_transition(bottom, allowed)
 
end";"";"2020-03-25 15:18:44"
12455;1002;"Python";"class Solution(object):
    def pyramidTransition(self, bottom, allowed):
        """"""
        :type bottom: str
        :type allowed: List[str]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:44"
12456;1003;"C#";"public class Solution {
    public int Fib(int n) {
 
    }
}";"";"2020-03-25 15:18:44"
12457;1003;"Java";"class Solution {
    public int fib(int n) {
 
    }
}";"";"2020-03-25 15:18:44"
12458;1003;"Rust";"impl Solution {
    pub fn fib(n: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:44"
12459;1003;"C";"int fib(int n){
 
}";"";"2020-03-25 15:18:44"
12460;1003;"Scala";"object Solution {
    def fib(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:44"
12461;1003;"Go";"func fib(n int) int {
 
}";"";"2020-03-25 15:18:44"
12462;1003;"Kotlin";"class Solution {
    fun fib(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:44"
12463;1003;"Python3";"class Solution:
    def fib(self, n: int) -> int:";"";"2020-03-25 15:18:44"
12464;1003;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var fib = function(n) {
 
};";"";"2020-03-25 15:18:44"
12465;1003;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function fib($n) {
 
    }
}";"";"2020-03-25 15:18:44"
12466;1003;"Swift";"class Solution {
    func fib(_ n: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:44"
12467;1003;"Ruby";"# @param {Integer} n
# @return {Integer}
def fib(n)
 
end";"";"2020-03-25 15:18:44"
12468;1003;"Python";"class Solution(object):
    def fib(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:44"
12469;1004;"C#";"public class Solution {
    public int[] ConstructArray(int n, int k) {
 
    }
}";"";"2020-03-25 15:18:44"
12470;1004;"Java";"class Solution {
    public int[] constructArray(int n, int k) {
 
    }
}";"";"2020-03-25 15:18:44"
12471;1004;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* constructArray(int n, int k, int* returnSize){
 
}";"";"2020-03-25 15:18:44"
12472;1004;"Rust";"impl Solution {
    pub fn construct_array(n: i32, k: i32) -> 
Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:44"
12473;1004;"Scala";"object Solution {
    def constructArray(n: Int, k: Int): Array[Int] 
= {
 
    }
}";"";"2020-03-25 15:18:44"
12474;1004;"Go";"func constructArray(n int, k int) []int {
 
}";"";"2020-03-25 15:18:44"
12475;1004;"Kotlin";"class Solution {
    fun constructArray(n: Int, k: Int): IntArray {
 
    }
}";"";"2020-03-25 15:18:44"
12476;1004;"Python3";"class Solution:
    def constructArray(self, n: int, k: int) -> List
[int]:";"";"2020-03-25 15:18:44"
12477;1004;"JavaScript";"/**
 * @param {number} n
 * @param {number} k
 * @return {number[]}
 */
var constructArray = function(n, k) {
 
};";"";"2020-03-25 15:18:44"
12478;1004;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @param Integer $k
     * @return Integer[]
     */
    function constructArray($n, $k) {
        
    }
}";"";"2020-03-25 15:18:44"
12479;1004;"Swift";"class Solution {
    func constructArray(_ n: Int, _ k: Int) -> [Int]
 {
        
    }
}";"";"2020-03-25 15:18:44"
12480;1004;"Ruby";"# @param {Integer} n";"";"2020-03-25 15:18:44"
12481;1004;"Python";"class Solution(object):
    def constructArray(self, n, k):
        """"""
        :type n: int
        :type k: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:44"
12482;1005;"C#";"public class Solution {
    public int BestSeqAtIndex(int[] height, int[] 
weight) {
 
    }
}";"";"2020-03-25 15:18:44"
12483;1005;"Java";"class Solution {
    public int bestSeqAtIndex(int[] height, int[] 
weight) {
 
    }
}";"";"2020-03-25 15:18:44"
12484;1005;"C";"int bestSeqAtIndex(int* height, int heightSize, 
int* weight, int weightSize){
 
}";"";"2020-03-25 15:18:44"
12485;1005;"Rust";"impl Solution {
    pub fn best_seq_at_index(height: Vec<i32>, 
weight: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:44"
12486;1005;"Scala";"object Solution {
    def bestSeqAtIndex(height: Array[Int], weight: 
Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:44"
12487;1005;"Go";"func bestSeqAtIndex(height []int, weight []int) int 
{
 
}";"";"2020-03-25 15:18:44"
12488;1005;"Kotlin";"class Solution {
    fun bestSeqAtIndex(height: IntArray, weight: 
IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:44"
12489;1005;"Python3";"class Solution:
    def bestSeqAtIndex(self, height: List[int], 
weight: List[int]) -> int:";"";"2020-03-25 15:18:44"
12490;1005;"JavaScript";"/**
 * @param {number[]} height
 * @param {number[]} weight
 * @return {number}
 */
var bestSeqAtIndex = function(height, weight) {
 
};";"";"2020-03-25 15:18:44"
12491;1005;"PHP";"class Solution {
 
    /**
     * @param Integer[] $height
     * @param Integer[] $weight
     * @return Integer
     */
    function bestSeqAtIndex($height, $weight) {
 
    }
}";"";"2020-03-25 15:18:44"
12492;1005;"Swift";"class Solution {
    func bestSeqAtIndex(_ height: [Int], _ weight: 
[Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:44"
12493;1005;"Ruby";"# @param {Integer[]} height";"";"2020-03-25 15:18:44"
12494;1005;"Python";"class Solution(object):
    def bestSeqAtIndex(self, height, weight):
        """"""
        :type height: List[int]
        :type weight: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:44"
12495;1006;"C#";"public class Solution {
    public IList<IList<int>> PathWithObstacles(int[]
[] obstacleGrid) {
 
    }
}";"";"2020-03-25 15:18:44"
12496;1006;"Java";"class Solution {
    public List<List<Integer>> pathWithObstacles(int
[][] obstacleGrid) {
 
    }
}";"";"2020-03-25 15:18:44"
12497;1006;"Rust";"impl Solution {
    pub fn path_with_obstacles(obstacle_grid: 
Vec<Vec<i32>>) -> Vec<Vec<i32>> {
 
    }
}";"";"2020-03-25 15:18:44"
12498;1006;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** pathWithObstacles(int** obstacleGrid, int 
obstacleGridSize, int* obstacleGridColSize, int* 
returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:44"
12499;1006;"Scala";"object Solution {
    def pathWithObstacles(obstacleGrid: Array[Array
[Int]]): List[List[Int]] = {
 
    }
}";"";"2020-03-25 15:18:44"
12500;1006;"Go";"func pathWithObstacles(obstacleGrid [][]int) [][]
int {
 
}";"";"2020-03-25 15:18:44"
12501;1006;"Kotlin";"class Solution {
    fun pathWithObstacles(obstacleGrid: 
Array<IntArray>): List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:44"
12502;1006;"Python3";"class Solution:
    def pathWithObstacles(self, obstacleGrid: List
[List[int]]) -> List[List[int]]:";"";"2020-03-25 15:18:44"
12503;1006;"JavaScript";"/**
 * @param {number[][]} obstacleGrid
 * @return {number[][]}
 */
var pathWithObstacles = function(obstacleGrid) {
 
};";"";"2020-03-25 15:18:44"
12504;1006;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $obstacleGrid
     * @return Integer[][]
     */
    function pathWithObstacles($obstacleGrid) {
 
    }
}";"";"2020-03-25 15:18:44"
12505;1006;"Swift";"class Solution {
    func pathWithObstacles(_ obstacleGrid: [[Int]]) 
-> [[Int]] {
 
    }
}";"";"2020-03-25 15:18:44"
12506;1006;"Ruby";"# @param {Integer[][]} obstacle_grid
# @return {Integer[][]}
def path_with_obstacles(obstacle_grid)
 
end";"";"2020-03-25 15:18:44"
12507;1006;"Python";"class Solution(object):
    def pathWithObstacles(self, obstacleGrid):
        """"""
        :type obstacleGrid: List[List[int]]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:44"
12508;1007;"C#";"public class Solution {
    public IList<IList<int>> ThreeSum(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:44"
12509;1007;"Java";"class Solution {
    public List<List<Integer>> threeSum(int[] nums) 
{
 
    }
}";"";"2020-03-25 15:18:44"
12510;1007;"Rust";"impl Solution {
    pub fn three_sum(nums: Vec<i32>) -> 
Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:44"
12511;1007;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** threeSum(int* nums, int numsSize, int* 
returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:44"
12512;1007;"Scala";"object Solution {
    def threeSum(nums: Array[Int]): List[List[Int]] 
= {
 
    }
}";"";"2020-03-25 15:18:44"
12513;1007;"Go";"func threeSum(nums []int) [][]int {
 
}";"";"2020-03-25 15:18:44"
12514;1007;"Kotlin";"class Solution {
    fun threeSum(nums: IntArray): List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:44"
12515;1007;"Python3";"class Solution:
    def threeSum(self, nums: List[int]) -> List[List
[int]]:";"";"2020-03-25 15:18:44"
12516;1007;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number[][]}
 */
var threeSum = function(nums) {
 
};";"";"2020-03-25 15:18:44"
12517;1007;"PHP";"class Solution {";"";"2020-03-25 15:18:44"
12518;1007;"Swift";"class Solution {
    func threeSum(_ nums: [Int]) -> [[Int]] {
        
    }
}";"";"2020-03-25 15:18:44"
12519;1007;"Ruby";"# @param {Integer[]} nums
# @return {Integer[][]}
def three_sum(nums)
 
end";"";"2020-03-25 15:18:44"
12520;1007;"Python";"class Solution(object):
    def threeSum(self, nums):
        """"""
        :type nums: List[int]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:44"
12521;1008;"C#";"public class Solution {
    public void Rotate(int[][] matrix) {
 
    }
}";"";"2020-03-25 15:18:44"
12522;1008;"Java";"class Solution {
    public void rotate(int[][] matrix) {
 
    }
}";"";"2020-03-25 15:18:44"
12523;1008;"Rust";"impl Solution {
    pub fn rotate(matrix: &mut Vec<Vec<i32>>) {
 
    }
}";"";"2020-03-25 15:18:44"
12524;1008;"C";"void rotate(int** matrix, int matrixSize, int* 
matrixColSize){
 
}";"";"2020-03-25 15:18:44"
12525;1008;"Scala";"object Solution {
    def rotate(matrix: Array[Array[Int]]): Unit = {
 
    }
}";"";"2020-03-25 15:18:44"
12526;1008;"Go";"func rotate(matrix [][]int)  {
 
}";"";"2020-03-25 15:18:44"
12527;1008;"Kotlin";"class Solution {
    fun rotate(matrix: Array<IntArray>): Unit {
 
    }
}";"";"2020-03-25 15:18:44"
12528;1008;"Python3";"class Solution:
    def rotate(self, matrix: List[List[int]]) -> 
None:
        """"""
        Do not return anything, modify matrix 
in-place instead.
        """"""";"";"2020-03-25 15:18:44"
12529;1008;"JavaScript";"/**
 * @param {number[][]} matrix
 * @return {void} Do not return anything, modify 
matrix in-place instead.
 */
var rotate = function(matrix) {
 
};";"";"2020-03-25 15:18:44"
12530;1008;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $matrix
     * @return NULL
     */
    function rotate(&$matrix) {
 
    }
}";"";"2020-03-25 15:18:44"
12531;1008;"Swift";"class Solution {
    func rotate(_ matrix: inout [[Int]]) {
 
    }
}";"";"2020-03-25 15:18:44"
12532;1008;"Ruby";"# @param {Integer[][]} matrix
# @return {Void} Do not return anything, modify 
matrix in-place instead.
def rotate(matrix)
 
end";"";"2020-03-25 15:18:44"
12533;1008;"Python";"class Solution(object):
    def rotate(self, matrix):
        """"""
        :type matrix: List[List[int]]
        :rtype: None Do not return anything, modify 
matrix in-place instead.
        """"""";"";"2020-03-25 15:18:44"
12534;1009;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<int> FlipMatchVoyage(TreeNode root,
 int[] voyage) {
 
    }
}";"";"2020-03-25 15:18:44"
12535;1009;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> flipMatchVoyage(TreeNode 
root, int[] voyage) {
 
    }
}";"";"2020-03-25 15:18:44"
12536;1009;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* flipMatchVoyage(struct TreeNode* root, int* 
voyage, int voyageSize, int* returnSize){
 
}";"";"2020-03-25 15:18:44"
12537;1009;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn flip_match_voyage(root: 
Option<Rc<RefCell<TreeNode>>>, voyage: Vec<i32>) -> 
Vec<i32> {
        
    }";"";"2020-03-25 15:18:44"
12538;1009;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def flipMatchVoyage(root: TreeNode, voyage: 
Array[Int]): List[Int] = {
 
    }
}";"";"2020-03-25 15:18:44"
12539;1009;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func flipMatchVoyage(root *TreeNode, voyage []int) 
[]int {
 
}";"";"2020-03-25 15:18:44"
12540;1009;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun flipMatchVoyage(root: TreeNode?, voyage: 
IntArray): List<Int> {
 
    }
}";"";"2020-03-25 15:18:44"
12541;1009;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def flipMatchVoyage(self, root: TreeNode, 
voyage: List[int]) -> List[int]:";"";"2020-03-25 15:18:44"
12542;1009;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number[]} voyage
 * @return {number[]}
 */
var flipMatchVoyage = function(root, voyage) {
 
};";"";"2020-03-25 15:18:44"
12543;1009;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @param Integer[] $voyage
     * @return Integer[]
     */
    function flipMatchVoyage($root, $voyage) {
        
    }
}";"";"2020-03-25 15:18:44"
12544;1009;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func flipMatchVoyage(_ root: TreeNode?, _ 
voyage: [Int]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:44"
12545;1009;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:44"
12546;1009;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def flipMatchVoyage(self, root, voyage):
        """"""
        :type root: TreeNode
        :type voyage: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:44"
12547;1010;"MS SQL Server";"/* Write your T-SQL query statement below */";"";"2020-03-25 15:18:44"
12548;1010;"Oracle";"/* Write your PL/SQL query statement below */";"";"2020-03-25 15:18:44"
12549;1011;"C#";"public class Solution {
    public int PivotIndex(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:44"
12550;1011;"Java";"class Solution {
    public int pivotIndex(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:44"
12551;1011;"Rust";"impl Solution {
    pub fn pivot_index(nums: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:44"
12552;1011;"C";"int pivotIndex(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:44"
12553;1011;"Scala";"object Solution {
    def pivotIndex(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:44"
12554;1011;"Python3";"class Solution:
    def pivotIndex(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:44"
12555;1011;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var pivotIndex = function(nums) {
 
};";"";"2020-03-25 15:18:44"
12556;1011;"Go";"func pivotIndex(nums []int) int {
 
}";"";"2020-03-25 15:18:44"
12557;1011;"PHP";"class Solution {";"";"2020-03-25 15:18:44"
12558;1011;"Swift";"class Solution {
    func pivotIndex(_ nums: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:44"
12559;1011;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def pivot_index(nums)
 
end";"";"2020-03-25 15:18:44"
12560;1011;"Kotlin";"class Solution {
    fun pivotIndex(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:44"
12561;1012;"C#";"public class Solution {
    public int MaxSumDivThree(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:44"
12562;1012;"Java";"class Solution {
    public int maxSumDivThree(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:44"
12563;1012;"C";"int maxSumDivThree(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:44"
12564;1012;"Rust";"impl Solution {
    pub fn max_sum_div_three(nums: Vec<i32>) -> i32 
{
 
    }
}";"";"2020-03-25 15:18:44"
12565;1012;"Scala";"object Solution {
    def maxSumDivThree(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:44"
12566;1012;"Go";"func maxSumDivThree(nums []int) int {
 
}";"";"2020-03-25 15:18:44"
12567;1012;"Kotlin";"class Solution {
    fun maxSumDivThree(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:44"
12568;1012;"Python3";"class Solution:
    def maxSumDivThree(self, nums: List[int]) -> 
int:";"";"2020-03-25 15:18:44"
12569;1012;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var maxSumDivThree = function(nums) {
 
};";"";"2020-03-25 15:18:44"
12570;1012;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function maxSumDivThree($nums) {
 
    }
}";"";"2020-03-25 15:18:44"
12571;1012;"Swift";"class Solution {
    func maxSumDivThree(_ nums: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:44"
12572;1012;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def max_sum_div_three(nums)
 
end";"";"2020-03-25 15:18:44"
12573;1012;"Python";"class Solution(object):
    def maxSumDivThree(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:44"
12574;1013;"C#";"public class Solution {
    public int EvalRPN(string[] tokens) {
 
    }
}";"";"2020-03-25 15:18:45"
12575;1013;"Java";"class Solution {
    public int evalRPN(String[] tokens) {
 
    }
}";"";"2020-03-25 15:18:45"
12576;1013;"Rust";"impl Solution {
    pub fn eval_rpn(tokens: Vec<String>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:45"
12577;1013;"C";"int evalRPN(char ** tokens, int tokensSize){
 
}";"";"2020-03-25 15:18:45"
12578;1013;"Scala";"object Solution {
    def evalRPN(tokens: Array[String]): Int = {
 
    }
}";"";"2020-03-25 15:18:45"
12579;1013;"Go";"func evalRPN(tokens []string) int {
 
}";"";"2020-03-25 15:18:45"
12580;1013;"Kotlin";"class Solution {
    fun evalRPN(tokens: Array<String>): Int {
 
    }
}";"";"2020-03-25 15:18:45"
12581;1013;"Python3";"class Solution:
    def evalRPN(self, tokens: List[str]) -> int:";"";"2020-03-25 15:18:45"
12582;1013;"JavaScript";"/**
 * @param {string[]} tokens
 * @return {number}
 */
var evalRPN = function(tokens) {
 
};";"";"2020-03-25 15:18:45"
12583;1013;"PHP";"class Solution {";"";"2020-03-25 15:18:45"
12584;1013;"Swift";"class Solution {
    func evalRPN(_ tokens: [String]) -> Int {
 
    }
}";"";"2020-03-25 15:18:45"
12585;1013;"Ruby";"# @param {String[]} tokens
# @return {Integer}
def eval_rpn(tokens)
 
end";"";"2020-03-25 15:18:45"
12586;1013;"Python";"class Solution(object):
    def evalRPN(self, tokens):
        """"""
        :type tokens: List[str]
        :rtype: int
        """"""";"";"2020-03-25 15:18:45"
12587;1014;"C#";"public class Solution {
    public int Flipgame(int[] fronts, int[] backs) {
 
    }
}";"";"2020-03-25 15:18:45"
12588;1014;"Java";"class Solution {
    public int flipgame(int[] fronts, int[] backs) {
 
    }
}";"";"2020-03-25 15:18:45"
12589;1014;"C";"int flipgame(int* fronts, int frontsSize, int* 
backs, int backsSize){
 
}";"";"2020-03-25 15:18:45"
12590;1014;"Rust";"impl Solution {
    pub fn flipgame(fronts: Vec<i32>, backs: 
Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:45"
12591;1014;"Scala";"object Solution {
    def flipgame(fronts: Array[Int], backs: Array
[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:45"
12592;1014;"Go";"func flipgame(fronts []int, backs []int) int {
 
}";"";"2020-03-25 15:18:45"
12593;1014;"Kotlin";"class Solution {
    fun flipgame(fronts: IntArray, backs: IntArray)
: Int {
 
    }
}";"";"2020-03-25 15:18:45"
12594;1014;"Python3";"class Solution:
    def flipgame(self, fronts: List[int], backs: 
List[int]) -> int:";"";"2020-03-25 15:18:45"
12595;1014;"JavaScript";"/**
 * @param {number[]} fronts
 * @param {number[]} backs
 * @return {number}
 */
var flipgame = function(fronts, backs) {
 
};";"";"2020-03-25 15:18:45"
12596;1014;"PHP";"class Solution {
 
    /**
     * @param Integer[] $fronts
     * @param Integer[] $backs
     * @return Integer
     */
    function flipgame($fronts, $backs) {
        
    }
}";"";"2020-03-25 15:18:45"
12597;1014;"Swift";"class Solution {
    func flipgame(_ fronts: [Int], _ backs: [Int]) 
-> Int {
        
    }
}";"";"2020-03-25 15:18:45"
12598;1014;"Ruby";"# @param {Integer[]} fronts
# @param {Integer[]} backs
# @return {Integer}
def flipgame(fronts, backs)
 
end";"";"2020-03-25 15:18:45"
12599;1014;"Python";"class Solution(object):
    def flipgame(self, fronts, backs):
        """"""
        :type fronts: List[int]
        :type backs: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:45"
12600;1015;"C#";"public class Solution {
    public IList<int> FallingSquares(int[][] 
positions) {
 
    }
}";"";"2020-03-25 15:18:45"
12601;1015;"Java";"class Solution {
    public List<Integer> fallingSquares(int[][] 
positions) {
 
    }
}";"";"2020-03-25 15:18:45"
12602;1015;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* fallingSquares(int** positions, int 
positionsSize, int* positionsColSize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:45"
12603;1015;"Python3";"class Solution:
    def fallingSquares(self, positions: List[List
[int]]) -> List[int]:";"";"2020-03-25 15:18:45"
12604;1015;"JavaScript";"/**
 * @param {number[][]} positions
 * @return {number[]}
 */
var fallingSquares = function(positions) {
 
};";"";"2020-03-25 15:18:45"
12605;1015;"Ruby";"# @param {Integer[][]} positions
# @return {Integer[]}
def falling_squares(positions)
 
end";"";"2020-03-25 15:18:45"
12606;1015;"Python";"class Solution(object):
    def fallingSquares(self, positions):
        """"""
        :type positions: List[List[int]]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:45"
12607;1016;"C#";"public class Solution {
    public string CompressString(string S) {
 
    }
}";"";"2020-03-25 15:18:45"
12608;1016;"Java";"class Solution {
    public String compressString(String S) {
 
    }
}";"";"2020-03-25 15:18:45"
12609;1016;"C";"char* compressString(char* S){
 
}";"";"2020-03-25 15:18:45"
12610;1016;"Rust";"impl Solution {
    pub fn compress_string(s: String) -> String {
 
    }
}";"";"2020-03-25 15:18:45"
12611;1016;"Scala";"object Solution {
    def compressString(S: String): String = {
 
    }
}";"";"2020-03-25 15:18:45"
12612;1016;"Go";"func compressString(S string) string {
 
}";"";"2020-03-25 15:18:45"
12613;1016;"Kotlin";"class Solution {
    fun compressString(S: String): String {
 
    }
}";"";"2020-03-25 15:18:45"
12614;1016;"Python3";"class Solution:
    def compressString(self, S: str) -> str:";"";"2020-03-25 15:18:45"
12615;1016;"JavaScript";"/**
 * @param {string} S
 * @return {string}
 */
var compressString = function(S) {
 
};";"";"2020-03-25 15:18:45"
12616;1016;"PHP";"class Solution {
 
    /**
     * @param String $S
     * @return String
     */
    function compressString($S) {
 
    }
}";"";"2020-03-25 15:18:45"
12617;1016;"Swift";"class Solution {
    func compressString(_ S: String) -> String {
 
    }
}";"";"2020-03-25 15:18:45"
12618;1016;"Ruby";"# @param {String} s
# @return {String}
def compress_string(s)
 
end";"";"2020-03-25 15:18:45"
12619;1016;"Python";"class Solution(object):
    def compressString(self, S):
        """"""
        :type S: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:45"
12620;1017;"C#";"public class Solution {
    public int MaxTurbulenceSize(int[] A) {
 
    }
}";"";"2020-03-25 15:18:45"
12621;1017;"Java";"class Solution {
    public int maxTurbulenceSize(int[] A) {
 
    }
}";"";"2020-03-25 15:18:45"
12622;1017;"C";"int maxTurbulenceSize(int* A, int ASize){
 
}";"";"2020-03-25 15:18:45"
12623;1017;"Rust";"impl Solution {
    pub fn max_turbulence_size(a: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:45"
12624;1017;"Scala";"object Solution {
    def maxTurbulenceSize(A: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:45"
12625;1017;"Go";"func maxTurbulenceSize(A []int) int {
 
}";"";"2020-03-25 15:18:45"
12626;1017;"Kotlin";"class Solution {
    fun maxTurbulenceSize(A: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:45"
12627;1017;"Python3";"class Solution:
    def maxTurbulenceSize(self, A: List[int]) -> 
int:";"";"2020-03-25 15:18:45"
12628;1017;"JavaScript";"/**
 * @param {number[]} A
 * @return {number}
 */
var maxTurbulenceSize = function(A) {
 
};";"";"2020-03-25 15:18:45"
12629;1017;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @return Integer
     */
    function maxTurbulenceSize($A) {
        
    }
}";"";"2020-03-25 15:18:45"
12630;1017;"Swift";"class Solution {
    func maxTurbulenceSize(_ A: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:45"
12631;1017;"Ruby";"# @param {Integer[]} a";"";"2020-03-25 15:18:45"
12632;1017;"Python";"class Solution(object):
    def maxTurbulenceSize(self, A):
        """"""
        :type A: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:45"
12633;1018;"C#";"public class Solution {
    public int ReversePairs(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:45"
12634;1018;"Java";"class Solution {
    public int reversePairs(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:45"
12635;1018;"Rust";"impl Solution {
    pub fn reverse_pairs(nums: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:45"
12636;1018;"C";"int reversePairs(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:45"
12637;1018;"Scala";"object Solution {
    def reversePairs(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:45"
12638;1018;"Go";"func reversePairs(nums []int) int {
 
}";"";"2020-03-25 15:18:45"
12639;1018;"Kotlin";"class Solution {
    fun reversePairs(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:45"
12640;1018;"Python3";"class Solution:
    def reversePairs(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:45"
12641;1018;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var reversePairs = function(nums) {
 
};";"";"2020-03-25 15:18:45"
12642;1018;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function reversePairs($nums) {
        
    }
}";"";"2020-03-25 15:18:45"
12643;1018;"Swift";"class Solution {
    func reversePairs(_ nums: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:45"
12644;1018;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def reverse_pairs(nums)
 
end";"";"2020-03-25 15:18:45"
12645;1018;"Python";"class Solution(object):
    def reversePairs(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:45"
12646;1019;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int NumComponents(ListNode head, int[] G)
 {
 
    }
}";"";"2020-03-25 15:18:45"
12647;1019;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public int numComponents(ListNode head, int[] G)
 {
 
    }
}";"";"2020-03-25 15:18:45"
12648;1019;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn num_components(head: 
Option<Box<ListNode>>, g: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:45"
12649;1019;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
int numComponents(struct ListNode* head, int* G, 
int GSize){
 
}";"";"2020-03-25 15:18:45"
12650;1019;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def numComponents(head: ListNode, G: Array[Int])
: Int = {
 
    }
}";"";"2020-03-25 15:18:45"
12651;1019;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func numComponents(head *ListNode, G []int) int {
 
}";"";"2020-03-25 15:18:45"
12652;1019;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun numComponents(head: ListNode?, G: IntArray)
: Int {
 
    }
}";"";"2020-03-25 15:18:45"
12653;1019;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def numComponents(self, head: ListNode, G: List
[int]) -> int:";"";"2020-03-25 15:18:45"
12654;1019;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @param {number[]} G
 * @return {number}
 */
var numComponents = function(head, G) {
 
};";"";"2020-03-25 15:18:45"
12655;1019;"PHP";"/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
class Solution {
 
    /**
     * @param ListNode $head
     * @param Integer[] $G
     * @return Integer
     */
    function numComponents($head, $G) {
        
    }
}";"";"2020-03-25 15:18:45"
12656;1019;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func numComponents(_ head: ListNode?, _ G: [Int]
) -> Int {
        
    }
}";"";"2020-03-25 15:18:45"
12657;1019;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# @param {ListNode} head
# @param {Integer[]} g
# @return {Integer}
def num_components(head, g)
 
end";"";"2020-03-25 15:18:45"
12658;1019;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def numComponents(self, head, G):
        """"""
        :type head: ListNode
        :type G: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:45"
12659;1020;"C#";"public class Solution {
    public void GameOfLife(int[][] board) {
 
    }
}";"";"2020-03-25 15:18:45"
12660;1020;"Java";"class Solution {
    public void gameOfLife(int[][] board) {
 
    }
}";"";"2020-03-25 15:18:45"
12661;1020;"Rust";"impl Solution {
    pub fn game_of_life(board: &mut Vec<Vec<i32>>) {
        
    }
}";"";"2020-03-25 15:18:45"
12662;1020;"C";"void gameOfLife(int** board, int boardSize, int* 
boardColSize){
 
}";"";"2020-03-25 15:18:45"
12663;1020;"Scala";"object Solution {
    def gameOfLife(board: Array[Array[Int]]): Unit 
= {
 
    }
}";"";"2020-03-25 15:18:45"
12664;1020;"Go";"func gameOfLife(board [][]int)  {
 
}";"";"2020-03-25 15:18:45"
12665;1020;"Kotlin";"class Solution {
    fun gameOfLife(board: Array<IntArray>): Unit {
 
    }
}";"";"2020-03-25 15:18:45"
12666;1020;"Python3";"class Solution:
    def gameOfLife(self, board: List[List[int]]) -> 
None:
        """"""
        Do not return anything, modify board 
in-place instead.
        """"""";"";"2020-03-25 15:18:45"
12667;1020;"JavaScript";"/**
 * @param {number[][]} board
 * @return {void} Do not return anything, modify 
board in-place instead.
 */
var gameOfLife = function(board) {
 
};";"";"2020-03-25 15:18:45"
12668;1020;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $board
     * @return NULL
     */
    function gameOfLife(&$board) {
        
    }
}";"";"2020-03-25 15:18:45"
12669;1020;"Swift";"class Solution {
    func gameOfLife(_ board: inout [[Int]]) {
        
    }
}";"";"2020-03-25 15:18:45"
12670;1020;"Ruby";"# @param {Integer[][]} board
# @return {Void} Do not return anything, modify 
board in-place instead.
def game_of_life(board)
 
end";"";"2020-03-25 15:18:45"
12671;1020;"Python";"class Solution(object):
    def gameOfLife(self, board):
        """"""
        :type board: List[List[int]]
        :rtype: None Do not return anything, modify 
board in-place instead.
        """"""";"";"2020-03-25 15:18:45"
12672;1021;"C#";"public class Solution {
    public int NumberOfArithmeticSlices(int[] A) {
 
    }
}";"";"2020-03-25 15:18:45"
12673;1021;"Java";"class Solution {
    public int numberOfArithmeticSlices(int[] A) {
 
    }
}";"";"2020-03-25 15:18:45"
12674;1021;"C";"int numberOfArithmeticSlices(int* A, int ASize){
 
}";"";"2020-03-25 15:18:45"
12675;1021;"Rust";"impl Solution {
    pub fn number_of_arithmetic_slices(a: Vec<i32>) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:45"
12676;1021;"Scala";"object Solution {
    def numberOfArithmeticSlices(A: Array[Int]): 
Int = {
 
    }
}";"";"2020-03-25 15:18:45"
12677;1021;"Go";"func numberOfArithmeticSlices(A []int) int {
 
}";"";"2020-03-25 15:18:45"
12678;1021;"Kotlin";"class Solution {
    fun numberOfArithmeticSlices(A: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:45"
12679;1021;"Python3";"class Solution:
    def numberOfArithmeticSlices(self, A: List[int])
 -> int:";"";"2020-03-25 15:18:45"
12680;1021;"JavaScript";"/**
 * @param {number[]} A
 * @return {number}
 */
var numberOfArithmeticSlices = function(A) {
 
};";"";"2020-03-25 15:18:45"
12681;1021;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @return Integer
     */
    function numberOfArithmeticSlices($A) {
        
    }
}";"";"2020-03-25 15:18:45"
12682;1021;"Swift";"class Solution {
    func numberOfArithmeticSlices(_ A: [Int]) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:45"
12683;1021;"Ruby";"# @param {Integer[]} a
# @return {Integer}
def number_of_arithmetic_slices(a)
 
end";"";"2020-03-25 15:18:45"
12684;1021;"Python";"class Solution(object):
    def numberOfArithmeticSlices(self, A):
        """"""
        :type A: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:45"
12685;1022;"C#";"public class Solution {
    public int MaxAliveYear(int[] birth, int[] 
death) {
 
    }
}";"";"2020-03-25 15:18:45"
12686;1022;"Java";"class Solution {
    public int maxAliveYear(int[] birth, int[] 
death) {
 
    }
}";"";"2020-03-25 15:18:45"
12687;1022;"Rust";"impl Solution {
    pub fn max_alive_year(birth: Vec<i32>, death: 
Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:45"
12688;1022;"C";"int maxAliveYear(int* birth, int birthSize, int* 
death, int deathSize){
 
}";"";"2020-03-25 15:18:45"
12689;1022;"Scala";"object Solution {
    def maxAliveYear(birth: Array[Int], death: Array
[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:45"
12690;1022;"Go";"func maxAliveYear(birth []int, death []int) int {
 
}";"";"2020-03-25 15:18:45"
12691;1022;"Kotlin";"class Solution {
    fun maxAliveYear(birth: IntArray, death: 
IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:45"
12692;1022;"Python3";"class Solution:
    def maxAliveYear(self, birth: List[int], death: 
List[int]) -> int:";"";"2020-03-25 15:18:45"
12693;1022;"JavaScript";"/**
 * @param {number[]} birth
 * @param {number[]} death
 * @return {number}
 */
var maxAliveYear = function(birth, death) {
 
};";"";"2020-03-25 15:18:45"
12694;1022;"PHP";"class Solution {
 
    /**
     * @param Integer[] $birth
     * @param Integer[] $death
     * @return Integer
     */
    function maxAliveYear($birth, $death) {
 
    }
}";"";"2020-03-25 15:18:45"
12695;1022;"Swift";"class Solution {
    func maxAliveYear(_ birth: [Int], _ death: [Int]
) -> Int {
 
    }
}";"";"2020-03-25 15:18:45"
12696;1022;"Ruby";"# @param {Integer[]} birth
# @param {Integer[]} death
# @return {Integer}
def max_alive_year(birth, death)
 
end";"";"2020-03-25 15:18:45"
12697;1022;"Python";"class Solution(object):
    def maxAliveYear(self, birth, death):
        """"""
        :type birth: List[int]
        :type death: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:45"
12698;1023;"C#";"public class Solution {
    public void WiggleSort(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:45"
12699;1023;"Java";"class Solution {
    public void wiggleSort(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:45"
12700;1023;"Rust";"impl Solution {
    pub fn wiggle_sort(nums: &mut Vec<i32>) {
        
    }
}";"";"2020-03-25 15:18:45"
12701;1023;"C";"void wiggleSort(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:45"
12702;1023;"Scala";"object Solution {
    def wiggleSort(nums: Array[Int]): Unit = {
 
    }
}";"";"2020-03-25 15:18:45"
12703;1023;"Go";"func wiggleSort(nums []int)  {
 
}";"";"2020-03-25 15:18:45"
12704;1023;"Kotlin";"class Solution {
    fun wiggleSort(nums: IntArray): Unit {
 
    }
}";"";"2020-03-25 15:18:45"
12705;1023;"Python3";"class Solution:
    def wiggleSort(self, nums: List[int]) -> None:
        """"""
        Do not return anything, modify nums 
in-place instead.
        """"""";"";"2020-03-25 15:18:45"
12706;1023;"JavaScript";"/**
 * @param {number[]} nums
 * @return {void} Do not return anything, modify 
nums in-place instead.
 */
var wiggleSort = function(nums) {
 
};";"";"2020-03-25 15:18:45"
12707;1023;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return NULL
     */
    function wiggleSort(&$nums) {
        
    }
}";"";"2020-03-25 15:18:45"
12708;1023;"Swift";"class Solution {
    func wiggleSort(_ nums: inout [Int]) {
        
    }
}";"";"2020-03-25 15:18:45"
12709;1023;"Ruby";"# @param {Integer[]} nums
# @return {Void} Do not return anything, modify 
nums in-place instead.
def wiggle_sort(nums)
 
end";"";"2020-03-25 15:18:45"
12710;1023;"Python";"class Solution(object):
    def wiggleSort(self, nums):
        """"""
        :type nums: List[int]
        :rtype: None Do not return anything, modify 
nums in-place instead.
        """"""";"";"2020-03-25 15:18:45"
12711;1024;"C#";"public class Solution {
    public bool IsValid(string S) {
 
    }
}";"";"2020-03-25 15:18:45"
12712;1024;"Java";"class Solution {
    public boolean isValid(String S) {
 
    }
}";"";"2020-03-25 15:18:45"
12713;1024;"Rust";"impl Solution {
    pub fn is_valid(s: String) -> bool {
        
    }
}";"";"2020-03-25 15:18:45"
12714;1024;"C";"bool isValid(char * S){
 
}";"";"2020-03-25 15:18:45"
12715;1024;"Scala";"object Solution {
    def isValid(S: String): Boolean = {
 
    }
}";"";"2020-03-25 15:18:45"
12716;1024;"Go";"func isValid(S string) bool {
 
}";"";"2020-03-25 15:18:45"
12717;1024;"Kotlin";"class Solution {
    fun isValid(S: String): Boolean {
 
    }
}";"";"2020-03-25 15:18:45"
12718;1024;"Python3";"class Solution:
    def isValid(self, S: str) -> bool:";"";"2020-03-25 15:18:45"
12719;1024;"JavaScript";"/**
 * @param {string} S
 * @return {boolean}
 */
var isValid = function(S) {
 
};";"";"2020-03-25 15:18:45"
12720;1024;"PHP";"class Solution {";"";"2020-03-25 15:18:45"
12721;1024;"Swift";"class Solution {
    func isValid(_ S: String) -> Bool {
        
    }
}";"";"2020-03-25 15:18:45"
12722;1024;"Ruby";"# @param {String} s
# @return {Boolean}
def is_valid(s)
 
end";"";"2020-03-25 15:18:45"
12723;1024;"Python";"class Solution(object):
    def isValid(self, S):
        """"""
        :type S: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:45"
12724;1025;"C#";"public class Solution {
    public int ShortestPathLength(int[][] graph) {
 
    }
}";"";"2020-03-25 15:18:45"
12725;1025;"Java";"class Solution {
    public int shortestPathLength(int[][] graph) {
 
    }
}";"";"2020-03-25 15:18:45"
12726;1025;"Rust";"impl Solution {
    pub fn shortest_path_length(graph: 
Vec<Vec<i32>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:45"
12727;1025;"C";"int shortestPathLength(int** graph, int graphSize, 
int* graphColSize){
 
}";"";"2020-03-25 15:18:45"
12728;1025;"Scala";"object Solution {
    def shortestPathLength(graph: Array[Array[Int]])
: Int = {
 
    }
}";"";"2020-03-25 15:18:45"
12729;1025;"Go";"func shortestPathLength(graph [][]int) int {
 
}";"";"2020-03-25 15:18:45"
12730;1025;"Kotlin";"class Solution {
    fun shortestPathLength(graph: Array<IntArray>): 
Int {
 
    }
}";"";"2020-03-25 15:18:45"
12731;1025;"Python3";"class Solution:
    def shortestPathLength(self, graph: List[List
[int]]) -> int:";"";"2020-03-25 15:18:45"
12732;1025;"JavaScript";"/**
 * @param {number[][]} graph
 * @return {number}
 */
var shortestPathLength = function(graph) {
 
};";"";"2020-03-25 15:18:45"
12733;1025;"PHP";"class Solution {";"";"2020-03-25 15:18:45"
12734;1025;"Swift";"class Solution {
    func shortestPathLength(_ graph: [[Int]]) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:45"
12735;1025;"Ruby";"# @param {Integer[][]} graph
# @return {Integer}
def shortest_path_length(graph)
 
end";"";"2020-03-25 15:18:45"
12736;1025;"Python";"class Solution(object):
    def shortestPathLength(self, graph):
        """"""
        :type graph: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:45"
12737;1026;"C#";"public class Solution {
    public string GetPermutation(int n, int k) {
 
    }
}";"";"2020-03-25 15:18:45"
12738;1026;"Java";"class Solution {
    public String getPermutation(int n, int k) {
 
    }
}";"";"2020-03-25 15:18:45"
12739;1026;"Rust";"impl Solution {
    pub fn get_permutation(n: i32, k: i32) -> 
String {
        
    }
}";"";"2020-03-25 15:18:45"
12740;1026;"C";"char * getPermutation(int n, int k){
 
}";"";"2020-03-25 15:18:45"
12741;1026;"Scala";"object Solution {
    def getPermutation(n: Int, k: Int): String = {
 
    }
}";"";"2020-03-25 15:18:45"
12742;1026;"Go";"func getPermutation(n int, k int) string {
 
}";"";"2020-03-25 15:18:45"
12743;1026;"Kotlin";"class Solution {
    fun getPermutation(n: Int, k: Int): String {
 
    }
}";"";"2020-03-25 15:18:45"
12744;1026;"Python3";"class Solution:
    def getPermutation(self, n: int, k: int) -> str:";"";"2020-03-25 15:18:45"
12745;1026;"JavaScript";"/**
 * @param {number} n
 * @param {number} k
 * @return {string}
 */
var getPermutation = function(n, k) {
 
};";"";"2020-03-25 15:18:45"
12746;1026;"PHP";"class Solution {";"";"2020-03-25 15:18:45"
12747;1026;"Swift";"class Solution {
    func getPermutation(_ n: Int, _ k: Int) -> 
String {
        
    }
}";"";"2020-03-25 15:18:45"
12748;1026;"Ruby";"# @param {Integer} n
# @param {Integer} k
# @return {String}
def get_permutation(n, k)
 
end";"";"2020-03-25 15:18:45"
12749;1026;"Python";"class Solution(object):
    def getPermutation(self, n, k):
        """"""
        :type n: int
        :type k: int
        :rtype: str
        """"""";"";"2020-03-25 15:18:45"
12750;1027;"C#";"public class Solution {
    public int OddCells(int n, int m, int[][] 
indices) {
 
    }
}";"";"2020-03-25 15:18:45"
12751;1027;"Java";"class Solution {
    public int oddCells(int n, int m, int[][] 
indices) {
 
    }
}";"";"2020-03-25 15:18:45"
12752;1027;"C";"int oddCells(int n, int m, int** indices, int 
indicesSize, int* indicesColSize){
 
}";"";"2020-03-25 15:18:45"
12753;1027;"Rust";"impl Solution {
    pub fn odd_cells(n: i32, m: i32, indices: 
Vec<Vec<i32>>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:45"
12754;1027;"Scala";"object Solution {
    def oddCells(n: Int, m: Int, indices: Array
[Array[Int]]): Int = {
 
    }
}";"";"2020-03-25 15:18:45"
12755;1027;"Go";"func oddCells(n int, m int, indices [][]int) int {
 
}";"";"2020-03-25 15:18:45"
12756;1027;"Kotlin";"class Solution {
    fun oddCells(n: Int, m: Int, indices: 
Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:45"
12757;1027;"Python3";"class Solution:
    def oddCells(self, n: int, m: int, indices: List
[List[int]]) -> int:";"";"2020-03-25 15:18:45"
12758;1027;"JavaScript";"/**
 * @param {number} n
 * @param {number} m
 * @param {number[][]} indices
 * @return {number}
 */
var oddCells = function(n, m, indices) {
 
};";"";"2020-03-25 15:18:45"
12759;1027;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @param Integer $m
     * @param Integer[][] $indices
     * @return Integer
     */
    function oddCells($n, $m, $indices) {
 
    }
}";"";"2020-03-25 15:18:45"
12760;1027;"Swift";"class Solution {
    func oddCells(_ n: Int, _ m: Int, _ indices: [
[Int]]) -> Int {
 
    }
}";"";"2020-03-25 15:18:45"
12761;1027;"Ruby";"# @param {Integer} n
# @param {Integer} m
# @param {Integer[][]} indices
# @return {Integer}
def odd_cells(n, m, indices)
 
end";"";"2020-03-25 15:18:45"
12762;1027;"Python";"class Solution(object):
    def oddCells(self, n, m, indices):
        """"""
        :type n: int
        :type m: int
        :type indices: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:45"
12763;1028;"Java";"class Solution {
    public int[] addNegabinary(int[] arr1, int[] 
arr2) {
 
    }
}";"";"2020-03-25 15:18:45"
12764;1028;"Python3";"class Solution:
    def addNegabinary(self, arr1: List[int], arr2: 
List[int]) -> List[int]:";"";"2020-03-25 15:18:45"
12765;1028;"JavaScript";"/**
 * @param {number[]} arr1
 * @param {number[]} arr2
 * @return {number[]}
 */
var addNegabinary = function(arr1, arr2) {
 
};";"";"2020-03-25 15:18:45"
12766;1028;"PHP";"class Solution {
 
    /**
     * @param Integer[] $arr1
     * @param Integer[] $arr2
     * @return Integer[]
     */
    function addNegabinary($arr1, $arr2) {
        
    }
}";"";"2020-03-25 15:18:45"
12767;1028;"Python";"class Solution(object):
    def addNegabinary(self, arr1, arr2):
        """"""
        :type arr1: List[int]
        :type arr2: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:45"
12768;1029;"C#";"public class Solution {
    public int LongestMountain(int[] A) {
 
    }
}";"";"2020-03-25 15:18:45"
12769;1029;"Java";"class Solution {
    public int longestMountain(int[] A) {
 
    }
}";"";"2020-03-25 15:18:45"
12770;1029;"Rust";"impl Solution {
    pub fn longest_mountain(a: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:45"
12771;1029;"C";"int longestMountain(int* A, int ASize){
 
}";"";"2020-03-25 15:18:45"
12772;1029;"Scala";"object Solution {
    def longestMountain(A: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:45"
12773;1029;"Go";"func longestMountain(A []int) int {
 
}";"";"2020-03-25 15:18:45"
12774;1029;"Kotlin";"class Solution {
    fun longestMountain(A: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:45"
12775;1029;"Python3";"class Solution:
    def longestMountain(self, A: List[int]) -> int:";"";"2020-03-25 15:18:45"
12776;1029;"JavaScript";"/**
 * @param {number[]} A
 * @return {number}
 */
var longestMountain = function(A) {
 
};";"";"2020-03-25 15:18:45"
12777;1029;"PHP";"class Solution {";"";"2020-03-25 15:18:45"
12778;1029;"Swift";"class Solution {
    func longestMountain(_ A: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:45"
12779;1029;"Ruby";"# @param {Integer[]} a
# @return {Integer}
def longest_mountain(a)
 
end";"";"2020-03-25 15:18:45"
12780;1029;"Python";"class Solution(object):
    def longestMountain(self, A):
        """"""
        :type A: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:45"
12781;1030;"C#";"public class StreamChecker {
 
    public StreamChecker(string[] words) {
 
    }
    
    public bool Query(char letter) {
 
    }
}
 
/**
 * Your StreamChecker object will be instantiated 
and called as such:
 * StreamChecker obj = new StreamChecker(words);
 * bool param_1 = obj.Query(letter);
 */";"";"2020-03-25 15:18:45"
12782;1030;"Java";"class StreamChecker {
 
    public StreamChecker(String[] words) {
 
    }
    
    public boolean query(char letter) {
 
    }
}
 
/**
 * Your StreamChecker object will be instantiated 
and called as such:
 * StreamChecker obj = new StreamChecker(words);
 * boolean param_1 = obj.query(letter);
 */";"";"2020-03-25 15:18:45"
12783;1030;"C++";"class StreamChecker {";"";"2020-03-25 15:18:45"
12784;1030;"C";"typedef struct {
    
} StreamChecker;
 
 
StreamChecker* streamCheckerCreate(char ** words, 
int wordsSize) {
    
}
 
bool streamCheckerQuery(StreamChecker* obj, char 
letter) {
  
}
 
void streamCheckerFree(StreamChecker* obj) {
    
}
 
/**
 * Your StreamChecker struct will be instantiated 
and called as such:
 * StreamChecker* obj = streamCheckerCreate(words, 
wordsSize);
 * bool param_1 = streamCheckerQuery(obj, letter);
 ";"";"2020-03-25 15:18:45"
12785;1030;"Python3";"class StreamChecker:
 
    def __init__(self, words: List[str]):
        
 
    def query(self, letter: str) -> bool:
        
 
 
# Your StreamChecker object will be instantiated 
and called as such:
# obj = StreamChecker(words)
# param_1 = obj.query(letter)";"";"2020-03-25 15:18:45"
12786;1030;"JavaScript";"/**
 * @param {string[]} words
 */
var StreamChecker = function(words) {
 
};
 
/** 
 * @param {character} letter
 * @return {boolean}
 */
StreamChecker.prototype.query = function(letter) {
 
};
 
/**
 * Your StreamChecker object will be instantiated 
and called as such:
 * var obj = new StreamChecker(words)
 * var param_1 = obj.query(letter)
 */";"";"2020-03-25 15:18:45"
12787;1030;"PHP";"class StreamChecker {
    /**
     * @param String[] $words
     */
    function __construct($words) {
        
    }
  
    /**
     * @param String $letter
     * @return Boolean
     */
    function query($letter) {
        
    }
}
 
/**
 * Your StreamChecker object will be instantiated 
and called as such:
 * $obj = StreamChecker($words);
 * $ret_1 = $obj->query($letter);
 */";"";"2020-03-25 15:18:45"
12788;1030;"Python";"class StreamChecker(object):
 
    def __init__(self, words):
        """"""
        :type words: List[str]
        """"""
        
 
    def query(self, letter):
        """"""
        :type letter: str
        :rtype: bool
        """"""
        
 
 
# Your StreamChecker object will be instantiated 
and called as such:
# obj = StreamChecker(words)
# param_1 = obj.query(letter)";"";"2020-03-25 15:18:45"
12789;1031;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode 
root, TreeNode p, TreeNode q) {
        
    }
}";"";"2020-03-25 15:18:45"
12790;1031;"C";"/**";"";"2020-03-25 15:18:45"
12791;1031;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def lowestCommonAncestor(self, root: TreeNode, 
p: TreeNode, q: TreeNode) -> TreeNode:";"";"2020-03-25 15:18:45"
12792;1031;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        """"""
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:45"
12793;1032;"C#";"public class Solution {
    public IList<IList<string>> SolveNQueens(int n) 
{
 
    }
}";"";"2020-03-25 15:18:45"
12794;1032;"Java";"class Solution {
    public List<List<String>> solveNQueens(int n) {
 
    }
}";"";"2020-03-25 15:18:45"
12795;1032;"Rust";"impl Solution {
    pub fn solve_n_queens(n: i32) -> 
Vec<Vec<String>> {
 
    }
}";"";"2020-03-25 15:18:45"
12796;1032;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
char*** solveNQueens(int n, int* returnSize, int** 
returnColumnSizes){
 
}";"";"2020-03-25 15:18:45"
12797;1032;"Scala";"object Solution {
    def solveNQueens(n: Int): List[List[String]] = {
 
    }
}";"";"2020-03-25 15:18:45"
12798;1032;"Go";"func solveNQueens(n int) [][]string {
 
}";"";"2020-03-25 15:18:45"
12799;1032;"Kotlin";"class Solution {
    fun solveNQueens(n: Int): List<List<String>> {
 
    }
}";"";"2020-03-25 15:18:45"
12800;1032;"Python3";"class Solution:
    def solveNQueens(self, n: int) -> List[List[str]
]:";"";"2020-03-25 15:18:45"
12801;1032;"JavaScript";"/**
 * @param {number} n
 * @return {string[][]}
 */
var solveNQueens = function(n) {
 
};";"";"2020-03-25 15:18:45"
12802;1032;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return String[][]
     */
    function solveNQueens($n) {
 
    }
}";"";"2020-03-25 15:18:45"
12803;1032;"Swift";"class Solution {
    func solveNQueens(_ n: Int) -> [[String]] {
 
    }
}";"";"2020-03-25 15:18:45"
12804;1032;"Ruby";"# @param {Integer} n
# @return {String[][]}
def solve_n_queens(n)
 
end";"";"2020-03-25 15:18:45"
12805;1032;"Python";"class Solution(object):
    def solveNQueens(self, n):
        """"""
        :type n: int
        :rtype: List[List[str]]
        """"""";"";"2020-03-25 15:18:45"
12806;1033;"C#";"public class Solution {
    public int NumDecodings(string s) {
 
    }
}";"";"2020-03-25 15:18:45"
12807;1033;"Java";"class Solution {
    public int numDecodings(String s) {
 
    }
}";"";"2020-03-25 15:18:45"
12808;1033;"C";"int numDecodings(char * s){
 
}";"";"2020-03-25 15:18:45"
12809;1033;"Rust";"impl Solution {
    pub fn num_decodings(s: String) -> i32 {
        
    }
}";"";"2020-03-25 15:18:45"
12810;1033;"Scala";"object Solution {
    def numDecodings(s: String): Int = {
 
    }
}";"";"2020-03-25 15:18:45"
12811;1033;"Go";"func numDecodings(s string) int {
 
}";"";"2020-03-25 15:18:45"
12812;1033;"Kotlin";"class Solution {
    fun numDecodings(s: String): Int {
 
    }
}";"";"2020-03-25 15:18:45"
12813;1033;"Python3";"class Solution:
    def numDecodings(self, s: str) -> int:";"";"2020-03-25 15:18:45"
12814;1033;"JavaScript";"/**
 * @param {string} s
 * @return {number}
 */
var numDecodings = function(s) {
 
};";"";"2020-03-25 15:18:45"
12815;1033;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return Integer
     */
    function numDecodings($s) {
        
    }
}";"";"2020-03-25 15:18:45"
12816;1033;"Swift";"class Solution {
    func numDecodings(_ s: String) -> Int {
        
    }
}";"";"2020-03-25 15:18:45"
12817;1033;"Ruby";"# @param {String} s";"";"2020-03-25 15:18:45"
12818;1033;"Python";"class Solution(object):
    def numDecodings(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:45"
12819;1034;"C#";"public class Solution {
    public int[] DistributeCandies(int candies, int 
num_people) {
 
    }
}";"";"2020-03-25 15:18:45"
12820;1034;"Java";"class Solution {
    public int[] distributeCandies(int candies, int 
num_people) {
 
    }
}";"";"2020-03-25 15:18:45"
12821;1034;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* distributeCandies(int candies, int num_people, 
int* returnSize){
 
}";"";"2020-03-25 15:18:45"
12822;1034;"Rust";"impl Solution {
    pub fn distribute_candies(candies: i32, 
num_people: i32) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:45"
12823;1034;"Scala";"object Solution {
    def distributeCandies(candies: Int, num_people: 
Int): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:45"
12824;1034;"Go";"func distributeCandies(candies int, num_people int) 
[]int {
 
}";"";"2020-03-25 15:18:45"
12825;1034;"Kotlin";"class Solution {
    fun distributeCandies(candies: Int, num_people: 
Int): IntArray {
 
    }
}";"";"2020-03-25 15:18:45"
12826;1034;"Python3";"class Solution:
    def distributeCandies(self, candies: int, 
num_people: int) -> List[int]:";"";"2020-03-25 15:18:45"
12827;1034;"JavaScript";"/**
 * @param {number} candies
 * @param {number} num_people
 * @return {number[]}
 */
var distributeCandies = function(candies, 
num_people) {
 
};";"";"2020-03-25 15:18:45"
12828;1034;"PHP";"class Solution {
 
    /**
     * @param Integer $candies
     * @param Integer $num_people
     * @return Integer[]
     */
    function distributeCandies($candies, 
$num_people) {
        
    }
}";"";"2020-03-25 15:18:45"
12829;1034;"Swift";"class Solution {
    func distributeCandies(_ candies: Int, _ 
num_people: Int) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:45"
12830;1034;"Ruby";"# @param {Integer} candies";"";"2020-03-25 15:18:45"
12831;1034;"Python";"class Solution(object):
    def distributeCandies(self, candies, num_people)
:
        """"""
        :type candies: int
        :type num_people: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:45"
12832;1035;"C#";"public class Solution {
    public string DayOfTheWeek(int day, int month, 
int year) {
 
    }
}";"";"2020-03-25 15:18:45"
12833;1035;"Java";"class Solution {
    public String dayOfTheWeek(int day, int month, 
int year) {
 
    }
}";"";"2020-03-25 15:18:45"
12834;1035;"Rust";"impl Solution {
    pub fn day_of_the_week(day: i32, month: i32, 
year: i32) -> String {
        
    }
}";"";"2020-03-25 15:18:45"
12835;1035;"C";"char * dayOfTheWeek(int day, int month, int year){
 
}";"";"2020-03-25 15:18:45"
12836;1035;"Scala";"object Solution {
    def dayOfTheWeek(day: Int, month: Int, year: 
Int): String = {
 
    }
}";"";"2020-03-25 15:18:45"
12837;1035;"Go";"func dayOfTheWeek(day int, month int, year int) 
string {
 
}";"";"2020-03-25 15:18:45"
12838;1035;"Kotlin";"class Solution {
    fun dayOfTheWeek(day: Int, month: Int, year: 
Int): String {
 
    }
}";"";"2020-03-25 15:18:45"
12839;1035;"Python3";"class Solution:
    def dayOfTheWeek(self, day: int, month: int, 
year: int) -> str:";"";"2020-03-25 15:18:45"
12840;1035;"JavaScript";"/**
 * @param {number} day
 * @param {number} month
 * @param {number} year
 * @return {string}
 */
var dayOfTheWeek = function(day, month, year) {
 
};";"";"2020-03-25 15:18:45"
12841;1035;"PHP";"class Solution {
 
    /**
     * @param Integer $day
     * @param Integer $month
     * @param Integer $year
     * @return String
     */
    function dayOfTheWeek($day, $month, $year) {
        
    }
}";"";"2020-03-25 15:18:45"
12842;1035;"Swift";"class Solution {
    func dayOfTheWeek(_ day: Int, _ month: Int, _ 
year: Int) -> String {
        
    }
}";"";"2020-03-25 15:18:45"
12843;1035;"Ruby";"# @param {Integer} day
# @param {Integer} month
# @param {Integer} year
# @return {String}
def day_of_the_week(day, month, year)
 
end";"";"2020-03-25 15:18:45"
12844;1035;"Python";"class Solution(object):
    def dayOfTheWeek(self, day, month, year):
        """"""
        :type day: int
        :type month: int
        :type year: int
        :rtype: str
        """"""";"";"2020-03-25 15:18:45"
12845;1036;"C#";"public class MyCalendarThree {
 
    public MyCalendarThree() {
 
    }
    
    public int Book(int start, int end) {
 
    }
}
 
/**
 * Your MyCalendarThree object will be instantiated 
and called as such:
 * MyCalendarThree obj = new MyCalendarThree();
 * int param_1 = obj.Book(start,end);
 */";"";"2020-03-25 15:18:46"
12846;1036;"Java";"class MyCalendarThree {
 
    public MyCalendarThree() {
 
    }
    
    public int book(int start, int end) {
 
    }
}
 
/**
 * Your MyCalendarThree object will be instantiated 
and called as such:
 * MyCalendarThree obj = new MyCalendarThree();
 * int param_1 = obj.book(start,end);
 */";"";"2020-03-25 15:18:46"
12847;1036;"C";"typedef struct {
    
} MyCalendarThree;
 
 
MyCalendarThree* myCalendarThreeCreate() {
    
}
 
int myCalendarThreeBook(MyCalendarThree* obj, int 
start, int end) {
  
}
 
void myCalendarThreeFree(MyCalendarThree* obj) {
    
}
 
/**
 * Your MyCalendarThree struct will be instantiated 
and called as such:
 * MyCalendarThree* obj = myCalendarThreeCreate();
 * int param_1 = myCalendarThreeBook(obj, start, 
end);
 
 * myCalendarThreeFree(obj);";"";"2020-03-25 15:18:46"
12848;1036;"Rust";"struct MyCalendarThree {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl MyCalendarThree {
 
    fn new() -> Self {
        
    }
    
    fn book(&self, start: i32, end: i32) -> i32 {
        
    }
}
 
/**
 * Your MyCalendarThree object will be instantiated 
and called as such:
 * let obj = MyCalendarThree::new();";"";"2020-03-25 15:18:46"
12849;1036;"Scala";"class MyCalendarThree() {
 
    def book(start: Int, end: Int): Int = {
 
    }
 
}
 
/**
 * Your MyCalendarThree object will be instantiated 
and called as such:
 * var obj = new MyCalendarThree()
 * var param_1 = obj.book(start,end)
 */";"";"2020-03-25 15:18:46"
12850;1036;"Go";"type MyCalendarThree struct {
 
}
 
 
func Constructor() MyCalendarThree {
 
}
 
 
func (this *MyCalendarThree) Book(start int, end 
int) int {
 
}
 
 
/**
 * Your MyCalendarThree object will be instantiated 
and called as such:
 * obj := Constructor();
 * param_1 := obj.Book(start,end);
 */";"";"2020-03-25 15:18:46"
12851;1036;"Kotlin";"class MyCalendarThree() {
 
    fun book(start: Int, end: Int): Int {
 
    }
 
}
 
/**
 * Your MyCalendarThree object will be instantiated 
and called as such:
 * var obj = MyCalendarThree()
 * var param_1 = obj.book(start,end)
 */";"";"2020-03-25 15:18:46"
12852;1036;"Python3";"class MyCalendarThree:
 
    def __init__(self):
        
 
    def book(self, start: int, end: int) -> int:
        
 
 
# Your MyCalendarThree object will be instantiated 
and called as such:
# obj = MyCalendarThree()
# param_1 = obj.book(start,end)";"";"2020-03-25 15:18:46"
12853;1036;"JavaScript";"var MyCalendarThree = function() {
 
};
 
/** 
 * @param {number} start 
 * @param {number} end
 * @return {number}
 */
MyCalendarThree.prototype.book = function(start, 
end) {
 
};
 
/**
 * Your MyCalendarThree object will be instantiated 
and called as such:
 * var obj = new MyCalendarThree()
 * var param_1 = obj.book(start,end)
 */";"";"2020-03-25 15:18:46"
12854;1036;"PHP";"class MyCalendarThree {
    /**
     */
    function __construct() {
        
    }
  
    /**
     * @param Integer $start
     * @param Integer $end
     * @return Integer
     */
    function book($start, $end) {
        
    }
}
 
/**
 * Your MyCalendarThree object will be instantiated 
and called as such:
 * $obj = MyCalendarThree();
 * $ret_1 = $obj->book($start, $end);
 */";"";"2020-03-25 15:18:46"
12855;1036;"Swift";"class MyCalendarThree {
 
    init() {
        
    }
    
    func book(_ start: Int, _ end: Int) -> Int {
        
    }
}
 
/**
 * Your MyCalendarThree object will be instantiated 
and called as such:
 * let obj = MyCalendarThree()
 * let ret_1: Int = obj.book(start, end)
 */";"";"2020-03-25 15:18:46"
12856;1036;"Ruby";"class MyCalendarThree
    def initialize()
 
    end
 
 
=begin
    :type start: Integer
    :type end: Integer
    :rtype: Integer
=end
    def book(start, end)
 
    end
 
 
end
 
# Your MyCalendarThree object will be instantiated 
and called as such:
# obj = MyCalendarThree.new()
# param_1 = obj.book(start, end)";"";"2020-03-25 15:18:46"
12857;1036;"Python";"class MyCalendarThree(object):
 
    def __init__(self):
        
 
    def book(self, start, end):
        """"""
        :type start: int
        :type end: int
        :rtype: int
        """"""
        
 
 
# Your MyCalendarThree object will be instantiated 
and called as such:
# obj = MyCalendarThree()
# param_1 = obj.book(start,end)";"";"2020-03-25 15:18:46"
12858;1037;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
 
    // Encodes a tree to a single string.
    public string serialize(TreeNode root) {
        
    }
 
    // Decodes your encoded data to tree.
    public TreeNode deserialize(string data) {
        
    }
}
 
// Your Codec object will be instantiated and 
called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));";"";"2020-03-25 15:18:46"
12859;1037;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
 
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        
    }
 
    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        
    }
}
 
// Your Codec object will be instantiated and 
called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));";"";"2020-03-25 15:18:46"
12860;1037;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
/** Encodes a tree to a single string. */
char* serialize(struct TreeNode* root) {
    
}
 
/** Decodes your encoded data to tree. */
struct TreeNode* deserialize(char* data) {
    
}
 
// Your functions will be called as such:
// char* data = serialize(root);
// deserialize(data);";"";"2020-03-25 15:18:46"
12861;1037;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
 
/**
 * Encodes a tree to a single string.
 *
 * @param {TreeNode} root
 * @return {string}
 */
var serialize = function(root) {
    
};
 
/**
 * Decodes your encoded data to tree.
 *
 * @param {string} data
 * @return {TreeNode}
 */
var deserialize = function(data) {
    ";"";"2020-03-25 15:18:46"
12862;1037;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Codec:
 
    def serialize(self, root: TreeNode) -> str:
        """"""Encodes a tree to a single string.
        """"""
        
 
    def deserialize(self, data: str) -> TreeNode:
        """"""Decodes your encoded data to tree.
        """"""
        
 
# Your Codec object will be instantiated and called 
as such:
# codec = Codec()
# codec.deserialize(codec.serialize(root))";"";"2020-03-25 15:18:46"
12863;1037;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
 
type Codec struct {
    
}
 
func Constructor() Codec {
    
}
 
// Serializes a tree to a single string.
func (this *Codec) serialize(root *TreeNode) string 
{
    
}
 
// Deserializes your encoded data to tree.
func (this *Codec) deserialize(data string) 
*TreeNode {    ";"";"2020-03-25 15:18:46"
12864;1037;"PHP";"/**";"";"2020-03-25 15:18:46"
12865;1037;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# Encodes a tree to a single string.
#
# @param {TreeNode} root
# @return {string}
def serialize(root)
    
end
 
# Decodes your encoded data to tree.
#
# @param {string} data
# @return {TreeNode}
def deserialize(data)
    
end
 
 ";"";"2020-03-25 15:18:46"
12866;1037;"Kotlin";"/**
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
 
class Codec() {
    // Encodes a URL to a shortened URL.
    fun serialize(root: TreeNode?): String {
        
    }
 
    // Decodes your encoded data to tree.
    fun deserialize(data: String): TreeNode? {
        
    }
}
 
/**
 * Your Codec object will be instantiated and 
called as such:
 * var obj = Codec()
 * var data = obj.encode(longUrl)
 * var ans = obj.decode(data)";"";"2020-03-25 15:18:46"
12867;1037;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Codec:
 
    def serialize(self, root):
        """"""Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """"""
        
 
    def deserialize(self, data):
        """"""Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """"""
        
 
# Your Codec object will be instantiated and called ";"";"2020-03-25 15:18:46"
12868;1038;"C#";"public class Solution {
    public bool IsNStraightHand(int[] hand, int W) {
 
    }
}";"";"2020-03-25 15:18:46"
12869;1038;"Java";"class Solution {
    public boolean isNStraightHand(int[] hand, int 
W) {
 
    }
}";"";"2020-03-25 15:18:46"
12870;1038;"C";"bool isNStraightHand(int* hand, int handSize, int W)
{
 
}";"";"2020-03-25 15:18:46"
12871;1038;"Rust";"impl Solution {
    pub fn is_n_straight_hand(hand: Vec<i32>, w: 
i32) -> bool {
        
    }
}";"";"2020-03-25 15:18:46"
12872;1038;"Scala";"object Solution {
    def isNStraightHand(hand: Array[Int], W: Int): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:46"
12873;1038;"Go";"func isNStraightHand(hand []int, W int) bool {
 
}";"";"2020-03-25 15:18:46"
12874;1038;"Kotlin";"class Solution {
    fun isNStraightHand(hand: IntArray, W: Int): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:46"
12875;1038;"Python3";"class Solution:
    def isNStraightHand(self, hand: List[int], W: 
int) -> bool:";"";"2020-03-25 15:18:46"
12876;1038;"JavaScript";"/**
 * @param {number[]} hand
 * @param {number} W
 * @return {boolean}
 */
var isNStraightHand = function(hand, W) {
 
};";"";"2020-03-25 15:18:46"
12877;1038;"PHP";"class Solution {
 
    /**
     * @param Integer[] $hand
     * @param Integer $W
     * @return Boolean
     */
    function isNStraightHand($hand, $W) {
        
    }
}";"";"2020-03-25 15:18:46"
12878;1038;"Swift";"class Solution {
    func isNStraightHand(_ hand: [Int], _ W: Int) 
-> Bool {
        
    }
}";"";"2020-03-25 15:18:46"
12879;1038;"Ruby";"# @param {Integer[]} hand";"";"2020-03-25 15:18:46"
12880;1038;"Python";"class Solution(object):
    def isNStraightHand(self, hand, W):
        """"""
        :type hand: List[int]
        :type W: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:46"
12881;1039;"C#";"public class MyCircularQueue {
 
    /** Initialize your data structure here. Set 
the size of the queue to be k. */
    public MyCircularQueue(int k) {
 
    }
    
    /** Insert an element into the circular queue. 
Return true if the operation is successful. */
    public bool EnQueue(int value) {
 
    }
    
    /** Delete an element from the circular queue. 
Return true if the operation is successful. */
    public bool DeQueue() {
 
    }
    
    /** Get the front item from the queue. */
    public int Front() {
 
    }
    
    /** Get the last item from the queue. */";"";"2020-03-25 15:18:46"
12882;1039;"Java";"class MyCircularQueue {
 
    /** Initialize your data structure here. Set 
the size of the queue to be k. */
    public MyCircularQueue(int k) {
 
    }
    
    /** Insert an element into the circular queue. 
Return true if the operation is successful. */
    public boolean enQueue(int value) {
 
    }
    
    /** Delete an element from the circular queue. 
Return true if the operation is successful. */
    public boolean deQueue() {
 
    }
    
    /** Get the front item from the queue. */
    public int Front() {
 
    }
    
    /** Get the last item from the queue. */";"";"2020-03-25 15:18:46"
12883;1039;"Rust";"struct MyCircularQueue {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl MyCircularQueue {
 
    /** Initialize your data structure here. Set 
the size of the queue to be k. */
    fn new(k: i32) -> Self {
        
    }
    
    /** Insert an element into the circular queue. 
Return true if the operation is successful. */
    fn en_queue(&self, value: i32) -> bool {
        
    }
    
    /** Delete an element from the circular queue. ";"";"2020-03-25 15:18:46"
12884;1039;"C";"typedef struct {
    
} MyCircularQueue;
 
/** Initialize your data structure here. Set the 
size of the queue to be k. */
 
MyCircularQueue* myCircularQueueCreate(int k) {
    
}
 
/** Insert an element into the circular queue. 
Return true if the operation is successful. */
bool myCircularQueueEnQueue(MyCircularQueue* obj, 
int value) {
  
}
 
/** Delete an element from the circular queue. 
Return true if the operation is successful. */
bool myCircularQueueDeQueue(MyCircularQueue* obj) {
  
}
 
/** Get the front item from the queue. */
int myCircularQueueFront(MyCircularQueue* obj) {";"";"2020-03-25 15:18:46"
12885;1039;"Scala";"class MyCircularQueue(_k: Int) {
 
    /** Initialize your data structure here. Set 
the size of the queue to be k. */
 
 
    /** Insert an element into the circular queue. 
Return true if the operation is successful. */
    def enQueue(value: Int): Boolean = {
 
    }
 
    /** Delete an element from the circular queue. 
Return true if the operation is successful. */
    def deQueue(): Boolean = {
 
    }
 
    /** Get the front item from the queue. */
    def Front(): Int = {
 
    }
 
    /** Get the last item from the queue. */
    def Rear(): Int = {
 ";"";"2020-03-25 15:18:46"
12886;1039;"Go";"type MyCircularQueue struct {
 
}
 
 
/** Initialize your data structure here. Set the 
size of the queue to be k. */
func Constructor(k int) MyCircularQueue {
 
}
 
 
/** Insert an element into the circular queue. 
Return true if the operation is successful. */
func (this *MyCircularQueue) EnQueue(value int) 
bool {
 
}
 
 
/** Delete an element from the circular queue. 
Return true if the operation is successful. */
func (this *MyCircularQueue) DeQueue() bool {
 
}
 ";"";"2020-03-25 15:18:46"
12887;1039;"Kotlin";"class MyCircularQueue(k: Int) {
 
    /** Initialize your data structure here. Set 
the size of the queue to be k. */
 
 
    /** Insert an element into the circular queue. 
Return true if the operation is successful. */
    fun enQueue(value: Int): Boolean {
 
    }
 
    /** Delete an element from the circular queue. 
Return true if the operation is successful. */
    fun deQueue(): Boolean {
 
    }
 
    /** Get the front item from the queue. */
    fun Front(): Int {
 
    }
 
    /** Get the last item from the queue. */
    fun Rear(): Int {
 ";"";"2020-03-25 15:18:46"
12888;1039;"Python3";"class MyCircularQueue:
 
    def __init__(self, k: int):
        """"""
        Initialize your data structure here. Set 
the size of the queue to be k.
        """"""
        
 
    def enQueue(self, value: int) -> bool:
        """"""
        Insert an element into the circular queue. 
Return true if the operation is successful.
        """"""
        
 
    def deQueue(self) -> bool:
        """"""
        Delete an element from the circular queue. 
Return true if the operation is successful.
        """"""
        
 
    def Front(self) -> int:
        """"""
        Get the front item from the queue.";"";"2020-03-25 15:18:46"
12889;1039;"JavaScript";"/**
 * Initialize your data structure here. Set the 
size of the queue to be k.
 * @param {number} k
 */
var MyCircularQueue = function(k) {
 
};
 
/**
 * Insert an element into the circular queue. 
Return true if the operation is successful. 
 * @param {number} value
 * @return {boolean}
 */
MyCircularQueue.prototype.enQueue = function(value) 
{
 
};
 
/**
 * Delete an element from the circular queue. 
Return true if the operation is successful.
 * @return {boolean}
 */
MyCircularQueue.prototype.deQueue = function() {";"";"2020-03-25 15:18:46"
12890;1039;"PHP";"class MyCircularQueue {
    /**
     * Initialize your data structure here. Set the 
size of the queue to be k.
     * @param Integer $k
     */
    function __construct($k) {
        
    }
  
    /**
     * Insert an element into the circular queue. 
Return true if the operation is successful.
     * @param Integer $value
     * @return Boolean
     */
    function enQueue($value) {
        
    }
  
    /**
     * Delete an element from the circular queue. 
Return true if the operation is successful.
     * @return Boolean
     */
    function deQueue() {";"";"2020-03-25 15:18:46"
12891;1039;"Swift";"class MyCircularQueue {
 
    /** Initialize your data structure here. Set 
the size of the queue to be k. */
    init(_ k: Int) {
        
    }
    
    /** Insert an element into the circular queue. 
Return true if the operation is successful. */
    func enQueue(_ value: Int) -> Bool {
        
    }
    
    /** Delete an element from the circular queue. 
Return true if the operation is successful. */
    func deQueue() -> Bool {
        
    }
    
    /** Get the front item from the queue. */
    func Front() -> Int {
        
    }
    
    /** Get the last item from the queue. */";"";"2020-03-25 15:18:46"
12892;1039;"Ruby";"class MyCircularQueue
 
=begin
    Initialize your data structure here. Set the 
size of the queue to be k.
    :type k: Integer
=end
    def initialize(k)
 
    end
 
 
=begin
    Insert an element into the circular queue. 
Return true if the operation is successful.
    :type value: Integer
    :rtype: Boolean
=end
    def en_queue(value)
 
    end
 
 
=begin
    Delete an element from the circular queue. 
Return true if the operation is successful.";"";"2020-03-25 15:18:46"
12893;1039;"Python";"class MyCircularQueue(object):
 
    def __init__(self, k):
        """"""
        Initialize your data structure here. Set 
the size of the queue to be k.
        :type k: int
        """"""
        
 
    def enQueue(self, value):
        """"""
        Insert an element into the circular queue. 
Return true if the operation is successful.
        :type value: int
        :rtype: bool
        """"""
        
 
    def deQueue(self):
        """"""
        Delete an element from the circular queue. 
Return true if the operation is successful.
        :rtype: bool
        """"""
        ";"";"2020-03-25 15:18:46"
12894;1040;"C#";"public class Solution {
    public int ShipWithinDays(int[] weights, int D) 
{
 
    }
}";"";"2020-03-25 15:18:46"
12895;1040;"Java";"class Solution {
    public int shipWithinDays(int[] weights, int D) 
{
 
    }
}";"";"2020-03-25 15:18:46"
12896;1040;"Rust";"impl Solution {
    pub fn ship_within_days(weights: Vec<i32>, d: 
i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:46"
12897;1040;"C";"int shipWithinDays(int* weights, int weightsSize, 
int D){
 
}";"";"2020-03-25 15:18:46"
12898;1040;"Scala";"object Solution {
    def shipWithinDays(weights: Array[Int], D: Int)
: Int = {
 
    }
}";"";"2020-03-25 15:18:46"
12899;1040;"Go";"func shipWithinDays(weights []int, D int) int {
 
}";"";"2020-03-25 15:18:46"
12900;1040;"Kotlin";"class Solution {
    fun shipWithinDays(weights: IntArray, D: Int): 
Int {
 
    }
}";"";"2020-03-25 15:18:46"
12901;1040;"Python3";"class Solution:
    def shipWithinDays(self, weights: List[int], D: 
int) -> int:";"";"2020-03-25 15:18:46"
12902;1040;"JavaScript";"/**
 * @param {number[]} weights
 * @param {number} D
 * @return {number}
 */
var shipWithinDays = function(weights, D) {
 
};";"";"2020-03-25 15:18:46"
12903;1040;"PHP";"class Solution {";"";"2020-03-25 15:18:46"
12904;1040;"Swift";"class Solution {
    func shipWithinDays(_ weights: [Int], _ D: Int) 
-> Int {
        
    }
}";"";"2020-03-25 15:18:46"
12905;1040;"Ruby";"# @param {Integer[]} weights
# @param {Integer} d
# @return {Integer}
def ship_within_days(weights, d)
 
end";"";"2020-03-25 15:18:46"
12906;1040;"Python";"class Solution(object):
    def shipWithinDays(self, weights, D):
        """"""
        :type weights: List[int]
        :type D: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:46"
12907;1041;"C#";"public class MedianFinder {
 
    /** initialize your data structure here. */
    public MedianFinder() {
 
    }
    
    public void AddNum(int num) {
 
    }
    
    public double FindMedian() {
 
    }
}
 
/**
 * Your MedianFinder object will be instantiated 
and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.AddNum(num);
 * double param_2 = obj.FindMedian();
 */";"";"2020-03-25 15:18:46"
12908;1041;"Java";"class MedianFinder {
 
    /** initialize your data structure here. */
    public MedianFinder() {
 
    }
    
    public void addNum(int num) {
 
    }
    
    public double findMedian() {
 
    }
}
 
/**
 * Your MedianFinder object will be instantiated 
and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */";"";"2020-03-25 15:18:46"
12909;1041;"C";"typedef struct {
 
} MedianFinder;
 
/** initialize your data structure here. */
 
MedianFinder* medianFinderCreate() {
 
}
 
void medianFinderAddNum(MedianFinder* obj, int num) 
{
 
}
 
double medianFinderFindMedian(MedianFinder* obj) {
 
}
 
void medianFinderFree(MedianFinder* obj) {
 
}
 
/**
 * Your MedianFinder struct will be instantiated 
and called as such:";"";"2020-03-25 15:18:46"
12910;1041;"Rust";"struct MedianFinder {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl MedianFinder {
 
    /** initialize your data structure here. */
    fn new() -> Self {
 
    }
    
    fn add_num(&self, num: i32) {
 
    }
    
    fn find_median(&self) -> f64 {
 
    }
}";"";"2020-03-25 15:18:46"
12911;1041;"Scala";"class MedianFinder() {
 
    /** initialize your data structure here. */
 
 
    def addNum(num: Int) {
 
    }
 
    def findMedian(): Double = {
 
    }
 
}
 
/**
 * Your MedianFinder object will be instantiated 
and called as such:
 * var obj = new MedianFinder()
 * obj.addNum(num)
 * var param_2 = obj.findMedian()
 */";"";"2020-03-25 15:18:46"
12912;1041;"Go";"type MedianFinder struct {
 
}
 
 
/** initialize your data structure here. */
func Constructor() MedianFinder {
 
}
 
 
func (this *MedianFinder) AddNum(num int)  {
 
}
 
 
func (this *MedianFinder) FindMedian() float64 {
 
}
 
 
/**
 * Your MedianFinder object will be instantiated 
and called as such:
 * obj := Constructor();
 * obj.AddNum(num);";"";"2020-03-25 15:18:46"
12913;1041;"Kotlin";"class MedianFinder() {
 
    /** initialize your data structure here. */
 
 
    fun addNum(num: Int) {
 
    }
 
    fun findMedian(): Double {
 
    }
 
}
 
/**
 * Your MedianFinder object will be instantiated 
and called as such:
 * var obj = MedianFinder()
 * obj.addNum(num)
 * var param_2 = obj.findMedian()
 */";"";"2020-03-25 15:18:46"
12914;1041;"Python3";"class MedianFinder:
 
    def __init__(self):
        """"""
        initialize your data structure here.
        """"""
 
 
    def addNum(self, num: int) -> None:
 
 
    def findMedian(self) -> float:
 
 
 
# Your MedianFinder object will be instantiated and 
called as such:
# obj = MedianFinder()
# obj.addNum(num)
# param_2 = obj.findMedian()";"";"2020-03-25 15:18:46"
12915;1041;"JavaScript";"/**
 * initialize your data structure here.
 */
var MedianFinder = function() {
 
};
 
/** 
 * @param {number} num
 * @return {void}
 */
MedianFinder.prototype.addNum = function(num) {
 
};
 
/**
 * @return {number}
 */
MedianFinder.prototype.findMedian = function() {
 
};
 
/**
 * Your MedianFinder object will be instantiated 
and called as such:
 * var obj = new MedianFinder()";"";"2020-03-25 15:18:46"
12916;1041;"PHP";"class MedianFinder {
    /**
     * initialize your data structure here.
     */
    function __construct() {
 
    }
 
    /**
     * @param Integer $num
     * @return NULL
     */
    function addNum($num) {
 
    }
 
    /**
     * @return Float
     */
    function findMedian() {
 
    }
}
 
/**
 * Your MedianFinder object will be instantiated ";"";"2020-03-25 15:18:46"
12917;1041;"Swift";"class MedianFinder {
 
    /** initialize your data structure here. */
    init() {
 
    }
    
    func addNum(_ num: Int) {
 
    }
    
    func findMedian() -> Double {
 
    }
}
 
/**
 * Your MedianFinder object will be instantiated 
and called as such:
 * let obj = MedianFinder()
 * obj.addNum(num)
 * let ret_2: Double = obj.findMedian()
 */";"";"2020-03-25 15:18:46"
12918;1041;"Ruby";"class MedianFinder
 
=begin
    initialize your data structure here.
=end
    def initialize()
 
    end
 
 
=begin
    :type num: Integer
    :rtype: Void
=end
    def add_num(num)
 
    end
 
 
=begin
    :rtype: Float
=end
    def find_median()
 
    end
 ";"";"2020-03-25 15:18:46"
12919;1041;"Python";"class MedianFinder(object):
 
    def __init__(self):
        """"""
        initialize your data structure here.
        """"""
 
 
    def addNum(self, num):
        """"""
        :type num: int
        :rtype: None
        """"""
 
 
    def findMedian(self):
        """"""
        :rtype: float
        """"""
 
 
 
# Your MedianFinder object will be instantiated and 
called as such:
# obj = MedianFinder()
# obj.addNum(num)";"";"2020-03-25 15:18:46"
12920;1042;"C#";"public class Solution {
    public int[][] FindContinuousSequence(int 
target) {
 
    }
}";"";"2020-03-25 15:18:46"
12921;1042;"Java";"class Solution {
    public int[][] findContinuousSequence(int 
target) {
 
    }
}";"";"2020-03-25 15:18:46"
12922;1042;"Rust";"impl Solution {
    pub fn find_continuous_sequence(target: i32) -> 
Vec<Vec<i32>> {
 
    }
}";"";"2020-03-25 15:18:46"
12923;1042;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** findContinuousSequence(int target, int* 
returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:46"
12924;1042;"Python3";"class Solution:
    def findContinuousSequence(self, target: int) 
-> List[List[int]]:";"";"2020-03-25 15:18:46"
12925;1042;"JavaScript";"/**
 * @param {number} target
 * @return {number[][]}
 */
var findContinuousSequence = function(target) {
 
};";"";"2020-03-25 15:18:46"
12926;1042;"Go";"func findContinuousSequence(target int) [][]int {
 
}";"";"2020-03-25 15:18:46"
12927;1042;"PHP";"class Solution {
 
    /**
     * @param Integer $target
     * @return Integer[][]
     */
    function findContinuousSequence($target) {
 
    }
}";"";"2020-03-25 15:18:46"
12928;1042;"Swift";"class Solution {
    func findContinuousSequence(_ target: Int) -> [
[Int]] {
 
    }
}";"";"2020-03-25 15:18:46"
12929;1042;"Ruby";"# @param {Integer} target
# @return {Integer[][]}
def find_continuous_sequence(target)
 
end";"";"2020-03-25 15:18:46"
12930;1042;"Kotlin";"class Solution {
    fun findContinuousSequence(target: Int): 
Array<IntArray> {
 
    }
}";"";"2020-03-25 15:18:46"
12931;1042;"Python";"class Solution(object):
    def findContinuousSequence(self, target):
        """"""
        :type target: int
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:46"
12932;1043;"C#";"public class Solution {
    public int[] MasterMind(string solution, string 
guess) {
 
    }
}";"";"2020-03-25 15:18:46"
12933;1043;"Java";"class Solution {
    public int[] masterMind(String solution, String 
guess) {
 
    }
}";"";"2020-03-25 15:18:46"
12934;1043;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* masterMind(char* solution, char* guess, int* 
returnSize){
 
}";"";"2020-03-25 15:18:46"
12935;1043;"Rust";"impl Solution {
    pub fn master_mind(solution: String, guess: 
String) -> Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:46"
12936;1043;"Scala";"object Solution {
    def masterMind(solution: String, guess: String)
: Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:46"
12937;1043;"Go";"func masterMind(solution string, guess string) []
int {
 
}";"";"2020-03-25 15:18:46"
12938;1043;"Kotlin";"class Solution {
    fun masterMind(solution: String, guess: String)
: IntArray {
 
    }
}";"";"2020-03-25 15:18:46"
12939;1043;"Python3";"class Solution:
    def masterMind(self, solution: str, guess: str) 
-> List[int]:";"";"2020-03-25 15:18:46"
12940;1043;"JavaScript";"/**
 * @param {string} solution
 * @param {string} guess
 * @return {number[]}
 */
var masterMind = function(solution, guess) {
 
};";"";"2020-03-25 15:18:46"
12941;1043;"PHP";"class Solution {
 
    /**
     * @param String $solution
     * @param String $guess
     * @return Integer[]
     */
    function masterMind($solution, $guess) {
 
    }
}";"";"2020-03-25 15:18:46"
12942;1043;"Swift";"class Solution {
    func masterMind(_ solution: String, _ guess: 
String) -> [Int] {
 
    }
}";"";"2020-03-25 15:18:46"
12943;1043;"Ruby";"# @param {String} solution";"";"2020-03-25 15:18:46"
12944;1043;"Python";"class Solution(object):
    def masterMind(self, solution, guess):
        """"""
        :type solution: str
        :type guess: str
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:46"
12945;1044;"C#";"public class Solution {
    public bool IsInterleave(string s1, string s2, 
string s3) {
 
    }
}";"";"2020-03-25 15:18:46"
12946;1044;"Java";"class Solution {
    public boolean isInterleave(String s1, String 
s2, String s3) {
 
    }
}";"";"2020-03-25 15:18:46"
12947;1044;"C";"bool isInterleave(char * s1, char * s2, char * s3){
 
}";"";"2020-03-25 15:18:46"
12948;1044;"Rust";"impl Solution {
    pub fn is_interleave(s1: String, s2: String, 
s3: String) -> bool {
        
    }
}";"";"2020-03-25 15:18:46"
12949;1044;"Scala";"object Solution {
    def isInterleave(s1: String, s2: String, s3: 
String): Boolean = {
 
    }
}";"";"2020-03-25 15:18:46"
12950;1044;"Go";"func isInterleave(s1 string, s2 string, s3 string) 
bool {
 
}";"";"2020-03-25 15:18:46"
12951;1044;"Kotlin";"class Solution {
    fun isInterleave(s1: String, s2: String, s3: 
String): Boolean {
 
    }
}";"";"2020-03-25 15:18:46"
12952;1044;"Python3";"class Solution:
    def isInterleave(self, s1: str, s2: str, s3: 
str) -> bool:";"";"2020-03-25 15:18:46"
12953;1044;"JavaScript";"/**
 * @param {string} s1
 * @param {string} s2
 * @param {string} s3
 * @return {boolean}
 */
var isInterleave = function(s1, s2, s3) {
 
};";"";"2020-03-25 15:18:46"
12954;1044;"PHP";"class Solution {
 
    /**
     * @param String $s1
     * @param String $s2
     * @param String $s3
     * @return Boolean
     */
    function isInterleave($s1, $s2, $s3) {
        
    }
}";"";"2020-03-25 15:18:46"
12955;1044;"Swift";"class Solution {
    func isInterleave(_ s1: String, _ s2: String, _ 
s3: String) -> Bool {
        
    }
}";"";"2020-03-25 15:18:46"
12956;1044;"Ruby";"# @param {String} s1";"";"2020-03-25 15:18:46"
12957;1044;"Python";"class Solution(object):
    def isInterleave(self, s1, s2, s3):
        """"""
        :type s1: str
        :type s2: str
        :type s3: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:46"
12958;1045;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<IList<int>> BSTSequences(TreeNode 
root) {
 
    }
}";"";"2020-03-25 15:18:46"
12959;1045;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> BSTSequences
(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:46"
12960;1045;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** BSTSequences(struct TreeNode* root, int* 
returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:46"
12961;1045;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn bst_sequences(root: 
Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<i32>> {
 
    }
}";"";"2020-03-25 15:18:46"
12962;1045;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def BSTSequences(root: TreeNode): List[List[Int]
] = {
 
    }
}";"";"2020-03-25 15:18:46"
12963;1045;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func BSTSequences(root *TreeNode) [][]int {
 
}";"";"2020-03-25 15:18:46"
12964;1045;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun BSTSequences(root: TreeNode?): 
List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:46"
12965;1045;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def BSTSequences(self, root: TreeNode) -> List
[List[int]]:";"";"2020-03-25 15:18:46"
12966;1045;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[][]}
 */
var BSTSequences = function(root) {
 
};";"";"2020-03-25 15:18:46"
12967;1045;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer[][]
     */
    function BSTSequences($root) {
 
    }
}";"";"2020-03-25 15:18:46"
12968;1045;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func BSTSequences(_ root: TreeNode?) -> [[Int]] 
{
 
    }
}";"";"2020-03-25 15:18:46"
12969;1045;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer[][]}
def bst_sequences(root)
 
end";"";"2020-03-25 15:18:46"
12970;1045;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def BSTSequences(self, root):
        """"""
        :type root: TreeNode
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:46"
12971;1046;"C#";"public class Solution {
    public int SearchInsert(int[] nums, int target) 
{
 
    }
}";"";"2020-03-25 15:18:46"
12972;1046;"Java";"class Solution {
    public int searchInsert(int[] nums, int target) 
{
 
    }
}";"";"2020-03-25 15:18:46"
12973;1046;"C";"int searchInsert(int* nums, int numsSize, int 
target){
 
}";"";"2020-03-25 15:18:46"
12974;1046;"Rust";"impl Solution {
    pub fn search_insert(nums: Vec<i32>, target: 
i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:46"
12975;1046;"Scala";"object Solution {
    def searchInsert(nums: Array[Int], target: Int)
: Int = {
 
    }
}";"";"2020-03-25 15:18:46"
12976;1046;"Go";"func searchInsert(nums []int, target int) int {
 
}";"";"2020-03-25 15:18:46"
12977;1046;"Kotlin";"class Solution {
    fun searchInsert(nums: IntArray, target: Int): 
Int {
 
    }
}";"";"2020-03-25 15:18:46"
12978;1046;"Python3";"class Solution:
    def searchInsert(self, nums: List[int], target: 
int) -> int:";"";"2020-03-25 15:18:46"
12979;1046;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */
var searchInsert = function(nums, target) {
 
};";"";"2020-03-25 15:18:46"
12980;1046;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer $target
     * @return Integer
     */
    function searchInsert($nums, $target) {
        
    }
}";"";"2020-03-25 15:18:46"
12981;1046;"Swift";"class Solution {
    func searchInsert(_ nums: [Int], _ target: Int) 
-> Int {
        
    }
}";"";"2020-03-25 15:18:46"
12982;1046;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:18:46"
12983;1046;"Python";"class Solution(object):
    def searchInsert(self, nums, target):
        """"""
        :type nums: List[int]
        :type target: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:46"
12984;1047;"C#";"public class Solution {
    public int RemoveDuplicates(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:46"
12985;1047;"Java";"class Solution {
    public int removeDuplicates(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:46"
12986;1047;"Rust";"impl Solution {
    pub fn remove_duplicates(nums: &mut Vec<i32>) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:46"
12987;1047;"C";"int removeDuplicates(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:46"
12988;1047;"Scala";"object Solution {
    def removeDuplicates(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:46"
12989;1047;"Go";"func removeDuplicates(nums []int) int {
 
}";"";"2020-03-25 15:18:46"
12990;1047;"Kotlin";"class Solution {
    fun removeDuplicates(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:46"
12991;1047;"Python3";"class Solution:
    def removeDuplicates(self, nums: List[int]) -> 
int:";"";"2020-03-25 15:18:46"
12992;1047;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var removeDuplicates = function(nums) {
 
};";"";"2020-03-25 15:18:46"
12993;1047;"PHP";"class Solution {";"";"2020-03-25 15:18:46"
12994;1047;"Swift";"class Solution {
    func removeDuplicates(_ nums: inout [Int]) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:46"
12995;1047;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def remove_duplicates(nums)
 
end";"";"2020-03-25 15:18:46"
12996;1047;"Python";"class Solution(object):
    def removeDuplicates(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:46"
12997;1048;"C#";"public class Solution {
    public IList<int> FindDuplicates(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:46"
12998;1048;"Java";"class Solution {
    public List<Integer> findDuplicates(int[] nums) 
{
 
    }
}";"";"2020-03-25 15:18:46"
12999;1048;"Rust";"impl Solution {
    pub fn find_duplicates(nums: Vec<i32>) -> 
Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:46"
13000;1048;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* findDuplicates(int* nums, int numsSize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:46"
13001;1048;"Scala";"object Solution {
    def findDuplicates(nums: Array[Int]): List[Int] 
= {
 
    }
}";"";"2020-03-25 15:18:46"
13002;1048;"Go";"func findDuplicates(nums []int) []int {
 
}";"";"2020-03-25 15:18:46"
13003;1048;"Kotlin";"class Solution {
    fun findDuplicates(nums: IntArray): List<Int> {
 
    }
}";"";"2020-03-25 15:18:46"
13004;1048;"Python3";"class Solution:
    def findDuplicates(self, nums: List[int]) -> 
List[int]:";"";"2020-03-25 15:18:46"
13005;1048;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number[]}
 */
var findDuplicates = function(nums) {
 
};";"";"2020-03-25 15:18:46"
13006;1048;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer[]
     */
    function findDuplicates($nums) {
        
    }
}";"";"2020-03-25 15:18:46"
13007;1048;"Swift";"class Solution {
    func findDuplicates(_ nums: [Int]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:46"
13008;1048;"Ruby";"# @param {Integer[]} nums
# @return {Integer[]}
def find_duplicates(nums)
 
end";"";"2020-03-25 15:18:46"
13009;1048;"Python";"class Solution(object):
    def findDuplicates(self, nums):
        """"""
        :type nums: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:46"
13010;1049;"C#";"public class Solution {
    public IList<string> RemoveSubfolders(string[] 
folder) {
 
    }
}";"";"2020-03-25 15:18:46"
13011;1049;"Java";"class Solution {
    public List<String> removeSubfolders(String[] 
folder) {
 
    }
}";"";"2020-03-25 15:18:46"
13012;1049;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** removeSubfolders(char ** folder, int 
folderSize, int* returnSize){
 
}";"";"2020-03-25 15:18:46"
13013;1049;"Rust";"impl Solution {
    pub fn remove_subfolders(folder: Vec<String>) 
-> Vec<String> {
 
    }
}";"";"2020-03-25 15:18:46"
13014;1049;"Scala";"object Solution {
    def removeSubfolders(folder: Array[String]): 
List[String] = {
 
    }
}";"";"2020-03-25 15:18:46"
13015;1049;"Go";"func removeSubfolders(folder []string) []string {
 
}";"";"2020-03-25 15:18:46"
13016;1049;"Kotlin";"class Solution {
    fun removeSubfolders(folder: Array<String>): 
List<String> {
 
    }
}";"";"2020-03-25 15:18:46"
13017;1049;"Python3";"class Solution:
    def removeSubfolders(self, folder: List[str]) 
-> List[str]:";"";"2020-03-25 15:18:46"
13018;1049;"JavaScript";"/**
 * @param {string[]} folder
 * @return {string[]}
 */
var removeSubfolders = function(folder) {
 
};";"";"2020-03-25 15:18:46"
13019;1049;"PHP";"class Solution {
 
    /**
     * @param String[] $folder
     * @return String[]
     */
    function removeSubfolders($folder) {
 
    }
}";"";"2020-03-25 15:18:46"
13020;1049;"Swift";"class Solution {
    func removeSubfolders(_ folder: [String]) -> 
[String] {
 
    }
}";"";"2020-03-25 15:18:46"
13021;1049;"Ruby";"# @param {String[]} folder";"";"2020-03-25 15:18:46"
13022;1049;"Python";"class Solution(object):
    def removeSubfolders(self, folder):
        """"""
        :type folder: List[str]
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:46"
13023;1050;"C#";"public class Solution {
    public int FindMaxLength(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:46"
13024;1050;"Java";"class Solution {
    public int findMaxLength(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:46"
13025;1050;"Rust";"impl Solution {
    pub fn find_max_length(nums: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:46"
13026;1050;"C";"int findMaxLength(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:46"
13027;1050;"Scala";"object Solution {
    def findMaxLength(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:46"
13028;1050;"Go";"func findMaxLength(nums []int) int {
 
}";"";"2020-03-25 15:18:46"
13029;1050;"Kotlin";"class Solution {
    fun findMaxLength(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:46"
13030;1050;"Python3";"class Solution:
    def findMaxLength(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:46"
13031;1050;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var findMaxLength = function(nums) {
 
};";"";"2020-03-25 15:18:46"
13032;1050;"PHP";"class Solution {";"";"2020-03-25 15:18:46"
13033;1050;"Swift";"class Solution {
    func findMaxLength(_ nums: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:46"
13034;1050;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def find_max_length(nums)
 
end";"";"2020-03-25 15:18:46"
13035;1050;"Python";"class Solution(object):
    def findMaxLength(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:46"
13036;1051;"C#";"public class Solution {
    public char NextGreatestLetter(char[] letters, 
char target) {
 
    }
}";"";"2020-03-25 15:18:46"
13037;1051;"Java";"class Solution {
    public char nextGreatestLetter(char[] letters, 
char target) {
 
    }
}";"";"2020-03-25 15:18:46"
13038;1051;"Rust";"impl Solution {
    pub fn next_greatest_letter(letters: Vec<char>, 
target: char) -> char {
        
    }
}";"";"2020-03-25 15:18:46"
13039;1051;"C";"char nextGreatestLetter(char* letters, int 
lettersSize, char target){
 
}";"";"2020-03-25 15:18:46"
13040;1051;"Scala";"object Solution {
    def nextGreatestLetter(letters: Array[Char], 
target: Char): Char = {
 
    }
}";"";"2020-03-25 15:18:46"
13041;1051;"Go";"func nextGreatestLetter(letters []byte, target byte)
 byte {
 
}";"";"2020-03-25 15:18:46"
13042;1051;"Kotlin";"class Solution {
    fun nextGreatestLetter(letters: CharArray, 
target: Char): Char {
 
    }
}";"";"2020-03-25 15:18:46"
13043;1051;"Python3";"class Solution:
    def nextGreatestLetter(self, letters: List[str],
 target: str) -> str:";"";"2020-03-25 15:18:46"
13044;1051;"JavaScript";"/**
 * @param {character[]} letters
 * @param {character} target
 * @return {character}
 */
var nextGreatestLetter = function(letters, target) {
 
};";"";"2020-03-25 15:18:46"
13045;1051;"PHP";"class Solution {
 
    /**
     * @param String[] $letters
     * @param String $target
     * @return String
     */
    function nextGreatestLetter($letters, $target) {
        
    }
}";"";"2020-03-25 15:18:46"
13046;1051;"Swift";"class Solution {
    func nextGreatestLetter(_ letters: [Character], 
_ target: Character) -> Character {
        
    }
}";"";"2020-03-25 15:18:46"
13047;1051;"Ruby";"# @param {Character[]} letters
# @param {Character} target
# @return {Character}
def next_greatest_letter(letters, target)
 
end";"";"2020-03-25 15:18:46"
13048;1051;"Python";"class Solution(object):
    def nextGreatestLetter(self, letters, target):
        """"""
        :type letters: List[str]
        :type target: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:46"
13049;1052;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void RecoverTree(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:46"
13050;1052;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public void recoverTree(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:46"
13051;1052;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn recover_tree(root: &mut 
Option<Rc<RefCell<TreeNode>>>) {
        
    }
}";"";"2020-03-25 15:18:46"
13052;1052;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
void recoverTree(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:46"
13053;1052;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def recoverTree(root: TreeNode): Unit = {
 
    }
}";"";"2020-03-25 15:18:46"
13054;1052;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func recoverTree(root *TreeNode)  {
 
}";"";"2020-03-25 15:18:46"
13055;1052;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun recoverTree(root: TreeNode?): Unit {
 
    }
}";"";"2020-03-25 15:18:46"
13056;1052;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def recoverTree(self, root: TreeNode) -> None:
        """"""
        Do not return anything, modify root 
in-place instead.
        """"""";"";"2020-03-25 15:18:46"
13057;1052;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {void} Do not return anything, modify 
root in-place instead.
 */
var recoverTree = function(root) {
 
};";"";"2020-03-25 15:18:46"
13058;1052;"PHP";"/**";"";"2020-03-25 15:18:46"
13059;1052;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func recoverTree(_ root: TreeNode?) {
        
    }
}";"";"2020-03-25 15:18:46"
13060;1052;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Void} Do not return anything, modify 
root in-place instead.
def recover_tree(root)
 
end";"";"2020-03-25 15:18:46"
13061;1052;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def recoverTree(self, root):
        """"""
        :type root: TreeNode
        :rtype: None Do not return anything, modify 
root in-place instead.
        """"""";"";"2020-03-25 15:18:46"
13062;1053;"Bash";"# Read from the file file.txt and output the tenth 
line to stdout.";"";"2020-03-25 15:18:46"
13063;1054;"C#";"public class Solution {
    public string FindLongestWord(string s, 
IList<string> d) {
 
    }
}";"";"2020-03-25 15:18:46"
13064;1054;"Java";"class Solution {
    public String findLongestWord(String s, 
List<String> d) {
 
    }
}";"";"2020-03-25 15:18:46"
13065;1054;"C";"char * findLongestWord(char * s, char ** d, int 
dSize){
 
}";"";"2020-03-25 15:18:46"
13066;1054;"Rust";"impl Solution {
    pub fn find_longest_word(s: String, d: 
Vec<String>) -> String {
        
    }
}";"";"2020-03-25 15:18:46"
13067;1054;"Scala";"object Solution {
    def findLongestWord(s: String, d: List[String])
: String = {
 
    }
}";"";"2020-03-25 15:18:46"
13068;1054;"Go";"func findLongestWord(s string, d []string) string {
 
}";"";"2020-03-25 15:18:46"
13069;1054;"Kotlin";"class Solution {
    fun findLongestWord(s: String, d: List<String>)
: String {
 
    }
}";"";"2020-03-25 15:18:46"
13070;1054;"Python3";"class Solution:
    def findLongestWord(self, s: str, d: List[str]) 
-> str:";"";"2020-03-25 15:18:46"
13071;1054;"JavaScript";"/**
 * @param {string} s
 * @param {string[]} d
 * @return {string}
 */
var findLongestWord = function(s, d) {
 
};";"";"2020-03-25 15:18:46"
13072;1054;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @param String[] $d
     * @return String
     */
    function findLongestWord($s, $d) {
        
    }
}";"";"2020-03-25 15:18:46"
13073;1054;"Swift";"class Solution {
    func findLongestWord(_ s: String, _ d: [String])
 -> String {
        
    }
}";"";"2020-03-25 15:18:46"
13074;1054;"Ruby";"# @param {String} s
# @param {String[]} d
# @return {String}
def find_longest_word(s, d)
 
end";"";"2020-03-25 15:18:46"
13075;1054;"Python";"class Solution(object):
    def findLongestWord(self, s, d):
        """"""
        :type s: str
        :type d: List[str]
        :rtype: str
        """"""";"";"2020-03-25 15:18:46"
13076;1055;"C#";"public class Solution {
    public int MaxEqualRowsAfterFlips(int[][] 
matrix) {
 
    }
}";"";"2020-03-25 15:18:47"
13077;1055;"Java";"class Solution {
    public int maxEqualRowsAfterFlips(int[][] 
matrix) {
 
    }
}";"";"2020-03-25 15:18:47"
13078;1055;"C";"int maxEqualRowsAfterFlips(int** matrix, int 
matrixSize, int* matrixColSize){
 
}";"";"2020-03-25 15:18:47"
13079;1055;"Python3";"class Solution:
    def maxEqualRowsAfterFlips(self, matrix: List
[List[int]]) -> int:";"";"2020-03-25 15:18:47"
13080;1055;"JavaScript";"/**
 * @param {number[][]} matrix
 * @return {number}
 */
var maxEqualRowsAfterFlips = function(matrix) {
 
};";"";"2020-03-25 15:18:47"
13081;1055;"Ruby";"";"";"2020-03-25 15:18:47"
13082;1055;"Python";"class Solution(object):
    def maxEqualRowsAfterFlips(self, matrix):
        """"""
        :type matrix: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:47"
13083;1056;"C#";"public class Solution {
    public string SmallestGoodBase(string n) {
 
    }
}";"";"2020-03-25 15:18:47"
13084;1056;"Java";"class Solution {
    public String smallestGoodBase(String n) {
 
    }
}";"";"2020-03-25 15:18:47"
13085;1056;"C";"char * smallestGoodBase(char * n){
 
}";"";"2020-03-25 15:18:47"
13086;1056;"Rust";"impl Solution {
    pub fn smallest_good_base(n: String) -> String {
        
    }
}";"";"2020-03-25 15:18:47"
13087;1056;"Scala";"object Solution {
    def smallestGoodBase(n: String): String = {
 
    }
}";"";"2020-03-25 15:18:47"
13088;1056;"Go";"func smallestGoodBase(n string) string {
 
}";"";"2020-03-25 15:18:47"
13089;1056;"Kotlin";"class Solution {
    fun smallestGoodBase(n: String): String {
 
    }
}";"";"2020-03-25 15:18:47"
13090;1056;"Python3";"class Solution:
    def smallestGoodBase(self, n: str) -> str:";"";"2020-03-25 15:18:47"
13091;1056;"JavaScript";"/**
 * @param {string} n
 * @return {string}
 */
var smallestGoodBase = function(n) {
 
};";"";"2020-03-25 15:18:47"
13092;1056;"PHP";"class Solution {
 
    /**
     * @param String $n
     * @return String
     */
    function smallestGoodBase($n) {
        
    }
}";"";"2020-03-25 15:18:47"
13093;1056;"Swift";"class Solution {
    func smallestGoodBase(_ n: String) -> String {
        
    }
}";"";"2020-03-25 15:18:47"
13094;1056;"Ruby";"# @param {String} n";"";"2020-03-25 15:18:47"
13095;1056;"Python";"class Solution(object):
    def smallestGoodBase(self, n):
        """"""
        :type n: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:47"
13096;1057;"C#";"public class Solution {
    public string FreqAlphabets(string s) {
 
    }
}";"";"2020-03-25 15:18:47"
13097;1057;"Java";"class Solution {
    public String freqAlphabets(String s) {
 
    }
}";"";"2020-03-25 15:18:47"
13098;1057;"C";"char * freqAlphabets(char * s){
 
}";"";"2020-03-25 15:18:47"
13099;1057;"Rust";"impl Solution {
    pub fn freq_alphabets(s: String) -> String {
 
    }
}";"";"2020-03-25 15:18:47"
13100;1057;"Scala";"object Solution {
    def freqAlphabets(s: String): String = {
 
    }
}";"";"2020-03-25 15:18:47"
13101;1057;"Go";"func freqAlphabets(s string) string {
 
}";"";"2020-03-25 15:18:47"
13102;1057;"Kotlin";"class Solution {
    fun freqAlphabets(s: String): String {
 
    }
}";"";"2020-03-25 15:18:47"
13103;1057;"Python3";"class Solution:
    def freqAlphabets(self, s: str) -> str:";"";"2020-03-25 15:18:47"
13104;1057;"JavaScript";"/**
 * @param {string} s
 * @return {string}
 */
var freqAlphabets = function(s) {
 
};";"";"2020-03-25 15:18:47"
13105;1057;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return String
     */
    function freqAlphabets($s) {
 
    }
}";"";"2020-03-25 15:18:47"
13106;1057;"Swift";"class Solution {
    func freqAlphabets(_ s: String) -> String {
 
    }
}";"";"2020-03-25 15:18:47"
13107;1057;"Ruby";"# @param {String} s
# @return {String}
def freq_alphabets(s)
 
end";"";"2020-03-25 15:18:47"
13108;1057;"Python";"class Solution(object):
    def freqAlphabets(self, s):
        """"""
        :type s: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:47"
13109;1058;"C#";"public class Codec {
 
    // Encodes a URL to a shortened URL
    public string encode(string longUrl) {
        
    }
 
    // Decodes a shortened URL to its original URL.
    public string decode(string shortUrl) {
        
    }
}
 
// Your Codec object will be instantiated and 
called as such:
// Codec codec = new Codec();
// codec.decode(codec.encode(url));";"";"2020-03-25 15:18:47"
13110;1058;"Java";"public class Codec {
 
    // Encodes a URL to a shortened URL.
    public String encode(String longUrl) {
        
    }
 
    // Decodes a shortened URL to its original URL.
    public String decode(String shortUrl) {
        
    }
}
 
// Your Codec object will be instantiated and 
called as such:
// Codec codec = new Codec();
// codec.decode(codec.encode(url));";"";"2020-03-25 15:18:47"
13111;1058;"C++";"class Solution {";"";"2020-03-25 15:18:47"
13112;1058;"C";"/** Encodes a URL to a shortened URL. */
char* encode(char* longUrl) {
    
}
 
/** Decodes a shortened URL to its original URL. */
char* decode(char* shortUrl) {
    
}
 
// Your functions will be called as such:
// char* s = encode(s);
// decode(s);";"";"2020-03-25 15:18:47"
13113;1058;"Python3";"class Codec:
 
    def encode(self, longUrl: str) -> str:
        """"""Encodes a URL to a shortened URL.
        """"""
        
 
    def decode(self, shortUrl: str) -> str:
        """"""Decodes a shortened URL to its original 
URL.
        """"""
        
 
# Your Codec object will be instantiated and called 
as such:
# codec = Codec()
# codec.decode(codec.encode(url))";"";"2020-03-25 15:18:47"
13114;1058;"JavaScript";"/**
 * Encodes a URL to a shortened URL.
 *
 * @param {string} longUrl
 * @return {string}
 */
var encode = function(longUrl) {
    
};
 
/**
 * Decodes a shortened URL to its original URL.
 *
 * @param {string} shortUrl
 * @return {string}
 */
var decode = function(shortUrl) {
    
};
 
/**
 * Your functions will be called as such:
 * decode(encode(url));
 */";"";"2020-03-25 15:18:47"
13115;1058;"Go";"type Codec struct {
    
}
 
 
func Constructor() Codec {
    
}
 
// Encodes a URL to a shortened URL.
func (this *Codec) encode(longUrl string) string {
    
}
 
// Decodes a shortened URL to its original URL.
func (this *Codec) decode(shortUrl string) string {
    
}
 
 
/**
 * Your Codec object will be instantiated and 
called as such:
 * obj := Constructor();
 * url := obj.encode(longUrl);
 * ans := obj.decode(url);";"";"2020-03-25 15:18:47"
13116;1058;"Ruby";"# Encodes a URL to a shortened URL.
#
# @param {string} longUrl
# @return {string}
def encode(longUrl)
    
end
 
# Decodes a shortened URL to its original URL.
#
# @param {string} shortUrl
# @return {string}
def decode(shortUrl)
    
end
 
 
# Your functions will be called as such:
# decode(encode(url))";"";"2020-03-25 15:18:47"
13117;1058;"Python";"class Codec:
 
    def encode(self, longUrl):
        """"""Encodes a URL to a shortened URL.
        
        :type longUrl: str
        :rtype: str
        """"""
        
 
    def decode(self, shortUrl):
        """"""Decodes a shortened URL to its original 
URL.
        
        :type shortUrl: str
        :rtype: str
        """"""
        
 
# Your Codec object will be instantiated and called 
as such:
# codec = Codec()
# codec.decode(codec.encode(url))";"";"2020-03-25 15:18:47"
13118;1058;"Kotlin";"class Codec() {
    // Encodes a URL to a shortened URL.
    fun encode(longUrl: String): String {
        
    }
 
    // Decodes a shortened URL to its original URL.
    fun decode(shortUrl: String): String {
        
    }
}
 
/**
 * Your Codec object will be instantiated and 
called as such:
 * var obj = Codec()
 * var url = obj.encode(longUrl)
 * var ans = obj.decode(url)
 */";"";"2020-03-25 15:18:47"
13119;1059;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
 
public class Solution {
    public TreeNode GetTargetCopy(TreeNode original,
 TreeNode cloned, TreeNode target) {
        
    }
}";"";"2020-03-25 15:18:47"
13120;1059;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
class Solution {
    public final TreeNode getTargetCopy(final 
TreeNode original, final TreeNode cloned, final 
TreeNode target) {
        
    }
}";"";"2020-03-25 15:18:47"
13121;1059;"C++";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right
(NULL) {}
 * };
 */
 
class Solution {
public:
    TreeNode* getTargetCopy(TreeNode* original, 
TreeNode* cloned, TreeNode* target) {
        
    }
};";"";"2020-03-25 15:18:47"
13122;1059;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def getTargetCopy(self, original: TreeNode, 
cloned: TreeNode, target: TreeNode) -> TreeNode:";"";"2020-03-25 15:18:47"
13123;1059;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} original
 * @param {TreeNode} cloned
 * @param {TreeNode} target
 * @return {TreeNode}
 */
 
var getTargetCopy = function(original, cloned, 
target) {
    
};";"";"2020-03-25 15:18:47"
13124;1059;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def getTargetCopy(self, original, cloned, 
target):
        """"""
        :type original: TreeNode
        :type cloned: TreeNode
        :type target: TreeNode
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:47"
13125;1060;"C#";"public class Solution {
    public bool ValidSquare(int[] p1, int[] p2, int
[] p3, int[] p4) {
 
    }
}";"";"2020-03-25 15:18:47"
13126;1060;"Java";"class Solution {
    public boolean validSquare(int[] p1, int[] p2, 
int[] p3, int[] p4) {
 
    }
}";"";"2020-03-25 15:18:47"
13127;1060;"Rust";"impl Solution {
    pub fn valid_square(p1: Vec<i32>, p2: Vec<i32>, 
p3: Vec<i32>, p4: Vec<i32>) -> bool {
        
    }
}";"";"2020-03-25 15:18:47"
13128;1060;"C";"bool validSquare(int* p1, int p1Size, int* p2, int 
p2Size, int* p3, int p3Size, int* p4, int p4Size){
 
}";"";"2020-03-25 15:18:47"
13129;1060;"Scala";"object Solution {
    def validSquare(p1: Array[Int], p2: Array[Int], 
p3: Array[Int], p4: Array[Int]): Boolean = {
 
    }
}";"";"2020-03-25 15:18:47"
13130;1060;"Go";"func validSquare(p1 []int, p2 []int, p3 []int, p4 []
int) bool {
 
}";"";"2020-03-25 15:18:47"
13131;1060;"Kotlin";"class Solution {
    fun validSquare(p1: IntArray, p2: IntArray, p3: 
IntArray, p4: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:47"
13132;1060;"Python3";"class Solution:
    def validSquare(self, p1: List[int], p2: List
[int], p3: List[int], p4: List[int]) -> bool:";"";"2020-03-25 15:18:47"
13133;1060;"JavaScript";"/**
 * @param {number[]} p1
 * @param {number[]} p2
 * @param {number[]} p3
 * @param {number[]} p4
 * @return {boolean}
 */
var validSquare = function(p1, p2, p3, p4) {
 
};";"";"2020-03-25 15:18:47"
13134;1060;"PHP";"class Solution {";"";"2020-03-25 15:18:47"
13135;1060;"Swift";"class Solution {
    func validSquare(_ p1: [Int], _ p2: [Int], _ 
p3: [Int], _ p4: [Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:47"
13136;1060;"Ruby";"# @param {Integer[]} p1
# @param {Integer[]} p2
# @param {Integer[]} p3
# @param {Integer[]} p4
# @return {Boolean}
def valid_square(p1, p2, p3, p4)
 
end";"";"2020-03-25 15:18:47"
13137;1060;"Python";"class Solution(object):
    def validSquare(self, p1, p2, p3, p4):
        """"""
        :type p1: List[int]
        :type p2: List[int]
        :type p3: List[int]
        :type p4: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:47"
13138;1061;"C#";"public class Solution {
    public int ExchangeBits(int num) {
 
    }
}";"";"2020-03-25 15:18:47"
13139;1061;"Java";"class Solution {
    public int exchangeBits(int num) {
 
    }
}";"";"2020-03-25 15:18:47"
13140;1061;"C";"int exchangeBits(int num){
 
}";"";"2020-03-25 15:18:47"
13141;1061;"Rust";"impl Solution {
    pub fn exchange_bits(num: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:47"
13142;1061;"Scala";"object Solution {
    def exchangeBits(num: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:47"
13143;1061;"Go";"func exchangeBits(num int) int {
 
}";"";"2020-03-25 15:18:47"
13144;1061;"Kotlin";"class Solution {
    fun exchangeBits(num: Int): Int {
 
    }
}";"";"2020-03-25 15:18:47"
13145;1061;"Python3";"class Solution:
    def exchangeBits(self, num: int) -> int:";"";"2020-03-25 15:18:47"
13146;1061;"JavaScript";"/**
 * @param {number} num
 * @return {number}
 */
var exchangeBits = function(num) {
 
};";"";"2020-03-25 15:18:47"
13147;1061;"PHP";"class Solution {
 
    /**
     * @param Integer $num
     * @return Integer
     */
    function exchangeBits($num) {
 
    }
}";"";"2020-03-25 15:18:47"
13148;1061;"Swift";"class Solution {
    func exchangeBits(_ num: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:47"
13149;1061;"Ruby";"# @param {Integer} num
# @return {Integer}
def exchange_bits(num)
 
end";"";"2020-03-25 15:18:47"
13150;1061;"Python";"class Solution(object):
    def exchangeBits(self, num):
        """"""
        :type num: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:47"
13151;1062;"C#";"public class Solution {
    public int FindKthNumber(int m, int n, int k) {
 
    }
}";"";"2020-03-25 15:18:47"
13152;1062;"Java";"class Solution {
    public int findKthNumber(int m, int n, int k) {
 
    }
}";"";"2020-03-25 15:18:47"
13153;1062;"Rust";"impl Solution {
    pub fn find_kth_number(m: i32, n: i32, k: i32) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:47"
13154;1062;"C";"int findKthNumber(int m, int n, int k){
 
}";"";"2020-03-25 15:18:47"
13155;1062;"Scala";"object Solution {
    def findKthNumber(m: Int, n: Int, k: Int): Int 
= {
 
    }
}";"";"2020-03-25 15:18:47"
13156;1062;"Go";"func findKthNumber(m int, n int, k int) int {
 
}";"";"2020-03-25 15:18:47"
13157;1062;"Kotlin";"class Solution {
    fun findKthNumber(m: Int, n: Int, k: Int): Int {
 
    }
}";"";"2020-03-25 15:18:47"
13158;1062;"Python3";"class Solution:
    def findKthNumber(self, m: int, n: int, k: int) 
-> int:";"";"2020-03-25 15:18:47"
13159;1062;"JavaScript";"/**
 * @param {number} m
 * @param {number} n
 * @param {number} k
 * @return {number}
 */
var findKthNumber = function(m, n, k) {
 
};";"";"2020-03-25 15:18:47"
13160;1062;"PHP";"class Solution {
 
    /**
     * @param Integer $m
     * @param Integer $n
     * @param Integer $k
     * @return Integer
     */
    function findKthNumber($m, $n, $k) {
        
    }
}";"";"2020-03-25 15:18:47"
13161;1062;"Swift";"class Solution {
    func findKthNumber(_ m: Int, _ n: Int, _ k: Int)
 -> Int {
        
    }
}";"";"2020-03-25 15:18:47"
13162;1062;"Ruby";"# @param {Integer} m
# @param {Integer} n
# @param {Integer} k
# @return {Integer}
def find_kth_number(m, n, k)
 
end";"";"2020-03-25 15:18:47"
13163;1062;"Python";"class Solution(object):
    def findKthNumber(self, m, n, k):
        """"""
        :type m: int
        :type n: int
        :type k: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:47"
13164;1063;"C#";"public class Solution {
    public int LongestSubsequence(int[] arr, int 
difference) {
 
    }
}";"";"2020-03-25 15:18:47"
13165;1063;"Java";"class Solution {
    public int longestSubsequence(int[] arr, int 
difference) {
 
    }
}";"";"2020-03-25 15:18:47"
13166;1063;"Rust";"impl Solution {
    pub fn longest_subsequence(arr: Vec<i32>, 
difference: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:47"
13167;1063;"C";"int longestSubsequence(int* arr, int arrSize, int 
difference){
 
}";"";"2020-03-25 15:18:47"
13168;1063;"Scala";"object Solution {
    def longestSubsequence(arr: Array[Int], 
difference: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:47"
13169;1063;"Go";"func longestSubsequence(arr []int, difference int) 
int {
 
}";"";"2020-03-25 15:18:47"
13170;1063;"Kotlin";"class Solution {
    fun longestSubsequence(arr: IntArray, 
difference: Int): Int {
 
    }
}";"";"2020-03-25 15:18:47"
13171;1063;"Python3";"class Solution:
    def longestSubsequence(self, arr: List[int], 
difference: int) -> int:";"";"2020-03-25 15:18:47"
13172;1063;"JavaScript";"/**
 * @param {number[]} arr
 * @param {number} difference
 * @return {number}
 */
var longestSubsequence = function(arr, difference) {
 
};";"";"2020-03-25 15:18:47"
13173;1063;"PHP";"class Solution {
 
    /**
     * @param Integer[] $arr
     * @param Integer $difference
     * @return Integer
     */
    function longestSubsequence($arr, $difference) {
 
    }
}";"";"2020-03-25 15:18:47"
13174;1063;"Swift";"class Solution {
    func longestSubsequence(_ arr: [Int], _ 
difference: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:47"
13175;1063;"Ruby";"# @param {Integer[]} arr
# @param {Integer} difference
# @return {Integer}
def longest_subsequence(arr, difference)
 
end";"";"2020-03-25 15:18:47"
13176;1063;"Python";"class Solution(object):
    def longestSubsequence(self, arr, difference):
        """"""
        :type arr: List[int]
        :type difference: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:47"
13177;1064;"C#";"public class Solution {
    public int NumSubarraysWithSum(int[] A, int S) {
 
    }
}";"";"2020-03-25 15:18:47"
13178;1064;"Java";"class Solution {
    public int numSubarraysWithSum(int[] A, int S) {
 
    }
}";"";"2020-03-25 15:18:47"
13179;1064;"C";"int numSubarraysWithSum(int* A, int ASize, int S){
 
}";"";"2020-03-25 15:18:47"
13180;1064;"Rust";"impl Solution {
    pub fn num_subarrays_with_sum(a: Vec<i32>, s: 
i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:47"
13181;1064;"Scala";"object Solution {
    def numSubarraysWithSum(A: Array[Int], S: Int): 
Int = {
 
    }
}";"";"2020-03-25 15:18:47"
13182;1064;"Go";"func numSubarraysWithSum(A []int, S int) int {
 
}";"";"2020-03-25 15:18:47"
13183;1064;"Kotlin";"class Solution {
    fun numSubarraysWithSum(A: IntArray, S: Int): 
Int {
 
    }
}";"";"2020-03-25 15:18:47"
13184;1064;"Python3";"class Solution:
    def numSubarraysWithSum(self, A: List[int], S: 
int) -> int:";"";"2020-03-25 15:18:47"
13185;1064;"JavaScript";"/**
 * @param {number[]} A
 * @param {number} S
 * @return {number}
 */
var numSubarraysWithSum = function(A, S) {
 
};";"";"2020-03-25 15:18:47"
13186;1064;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @param Integer $S
     * @return Integer
     */
    function numSubarraysWithSum($A, $S) {
        
    }
}";"";"2020-03-25 15:18:47"
13187;1064;"Swift";"class Solution {
    func numSubarraysWithSum(_ A: [Int], _ S: Int) 
-> Int {
        
    }
}";"";"2020-03-25 15:18:47"
13188;1064;"Ruby";"# @param {Integer[]} a";"";"2020-03-25 15:18:47"
13189;1064;"Python";"class Solution(object):
    def numSubarraysWithSum(self, A, S):
        """"""
        :type A: List[int]
        :type S: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:47"
13190;1065;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<TreeNode> GenerateTrees(int n) {
 
    }
}";"";"2020-03-25 15:18:47"
13191;1065;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<TreeNode> generateTrees(int n) {
 
    }
}";"";"2020-03-25 15:18:47"
13192;1065;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
struct TreeNode** generateTrees(int n, int* 
returnSize){
 
}";"";"2020-03-25 15:18:47"
13193;1065;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn generate_trees(n: i32) -> 
Vec<Option<Rc<RefCell<TreeNode>>>> {
        
    }
}";"";"2020-03-25 15:18:47"
13194;1065;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def generateTrees(n: Int): List[TreeNode] = {
 
    }
}";"";"2020-03-25 15:18:47"
13195;1065;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func generateTrees(n int) []*TreeNode {
 
}";"";"2020-03-25 15:18:47"
13196;1065;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun generateTrees(n: Int): List<TreeNode?> {
 
    }
}";"";"2020-03-25 15:18:47"
13197;1065;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def generateTrees(self, n: int) -> List
[TreeNode]:";"";"2020-03-25 15:18:47"
13198;1065;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {number} n
 * @return {TreeNode[]}
 */
var generateTrees = function(n) {
 
};";"";"2020-03-25 15:18:47"
13199;1065;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param Integer $n
     * @return TreeNode[]
     */
    function generateTrees($n) {
        
    }
}";"";"2020-03-25 15:18:47"
13200;1065;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func generateTrees(_ n: Int) -> [TreeNode?] {
        
    }
}";"";"2020-03-25 15:18:47"
13201;1065;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:47"
13202;1065;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def generateTrees(self, n):
        """"""
        :type n: int
        :rtype: List[TreeNode]
        """"""";"";"2020-03-25 15:18:47"
13203;1066;"C#";"public class Solution {
    public int RangeBitwiseAnd(int m, int n) {
 
    }
}";"";"2020-03-25 15:18:47"
13204;1066;"Java";"class Solution {
    public int rangeBitwiseAnd(int m, int n) {
 
    }
}";"";"2020-03-25 15:18:47"
13205;1066;"Rust";"impl Solution {
    pub fn range_bitwise_and(m: i32, n: i32) -> i32 
{
 
    }
}";"";"2020-03-25 15:18:47"
13206;1066;"C";"int rangeBitwiseAnd(int m, int n){
 
}";"";"2020-03-25 15:18:47"
13207;1066;"Scala";"object Solution {
    def rangeBitwiseAnd(m: Int, n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:47"
13208;1066;"Go";"func rangeBitwiseAnd(m int, n int) int {
 
}";"";"2020-03-25 15:18:47"
13209;1066;"Kotlin";"class Solution {
    fun rangeBitwiseAnd(m: Int, n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:47"
13210;1066;"Python3";"class Solution:
    def rangeBitwiseAnd(self, m: int, n: int) -> 
int:";"";"2020-03-25 15:18:47"
13211;1066;"JavaScript";"/**
 * @param {number} m
 * @param {number} n
 * @return {number}
 */
var rangeBitwiseAnd = function(m, n) {
 
};";"";"2020-03-25 15:18:47"
13212;1066;"PHP";"class Solution {
 
    /**
     * @param Integer $m
     * @param Integer $n
     * @return Integer
     */
    function rangeBitwiseAnd($m, $n) {
 
    }
}";"";"2020-03-25 15:18:47"
13213;1066;"Swift";"class Solution {
    func rangeBitwiseAnd(_ m: Int, _ n: Int) -> Int 
{
 
    }
}";"";"2020-03-25 15:18:47"
13214;1066;"Ruby";"# @param {Integer} m
# @param {Integer} n
# @return {Integer}
def range_bitwise_and(m, n)
 
end";"";"2020-03-25 15:18:47"
13215;1066;"Python";"class Solution(object):
    def rangeBitwiseAnd(self, m, n):
        """"""
        :type m: int
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:47"
13216;1067;"C#";"public class TimeMap {
 
    /** Initialize your data structure here. */
    public TimeMap() {
 
    }
    
    public void Set(string key, string value, int 
timestamp) {
 
    }
    
    public string Get(string key, int timestamp) {
 
    }
}
 
/**
 * Your TimeMap object will be instantiated and 
called as such:
 * TimeMap obj = new TimeMap();
 * obj.Set(key,value,timestamp);
 * string param_2 = obj.Get(key,timestamp);
 */";"";"2020-03-25 15:18:47"
13217;1067;"Java";"class TimeMap {
 
    /** Initialize your data structure here. */
    public TimeMap() {
 
    }
    
    public void set(String key, String value, int 
timestamp) {
 
    }
    
    public String get(String key, int timestamp) {
 
    }
}
 
/**
 * Your TimeMap object will be instantiated and 
called as such:
 * TimeMap obj = new TimeMap();
 * obj.set(key,value,timestamp);
 * String param_2 = obj.get(key,timestamp);
 */";"";"2020-03-25 15:18:47"
13218;1067;"Rust";"struct TimeMap {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl TimeMap {
 
    /** Initialize your data structure here. */
    fn new() -> Self {
        
    }
    
    fn set(&self, key: String, value: String, 
timestamp: i32) {
        
    }
    
    fn get(&self, key: String, timestamp: i32) -> 
String {
        ";"";"2020-03-25 15:18:47"
13219;1067;"C";"typedef struct {
    
} TimeMap;
 
/** Initialize your data structure here. */
 
TimeMap* timeMapCreate() {
    
}
 
void timeMapSet(TimeMap* obj, char * key, char * 
value, int timestamp) {
  
}
 
char * timeMapGet(TimeMap* obj, char * key, int 
timestamp) {
  
}
 
void timeMapFree(TimeMap* obj) {
    
}
 
/**
 * Your TimeMap struct will be instantiated and ";"";"2020-03-25 15:18:47"
13220;1067;"Scala";"class TimeMap() {
 
    /** Initialize your data structure here. */
 
 
    def set(key: String, value: String, timestamp: 
Int) {
 
    }
 
    def get(key: String, timestamp: Int): String = {
 
    }
 
}
 
/**
 * Your TimeMap object will be instantiated and 
called as such:
 * var obj = new TimeMap()
 * obj.set(key,value,timestamp)
 * var param_2 = obj.get(key,timestamp)
 */";"";"2020-03-25 15:18:47"
13221;1067;"Go";"type TimeMap struct {
 
}
 
 
/** Initialize your data structure here. */
func Constructor() TimeMap {
 
}
 
 
func (this *TimeMap) Set(key string, value string, 
timestamp int)  {
 
}
 
 
func (this *TimeMap) Get(key string, timestamp int) 
string {
 
}
 
 
/**
 * Your TimeMap object will be instantiated and 
called as such:";"";"2020-03-25 15:18:47"
13222;1067;"Kotlin";"class TimeMap() {
 
    /** Initialize your data structure here. */
 
 
    fun set(key: String, value: String, timestamp: 
Int) {
 
    }
 
    fun get(key: String, timestamp: Int): String {
 
    }
 
}
 
/**
 * Your TimeMap object will be instantiated and 
called as such:
 * var obj = TimeMap()
 * obj.set(key,value,timestamp)
 * var param_2 = obj.get(key,timestamp)
 */";"";"2020-03-25 15:18:47"
13223;1067;"Python3";"class TimeMap:
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
        
 
    def set(self, key: str, value: str, timestamp: 
int) -> None:
        
 
    def get(self, key: str, timestamp: int) -> str:
        
 
 
# Your TimeMap object will be instantiated and 
called as such:
# obj = TimeMap()
# obj.set(key,value,timestamp)
# param_2 = obj.get(key,timestamp)";"";"2020-03-25 15:18:47"
13224;1067;"JavaScript";"/**
 * Initialize your data structure here.
 */
var TimeMap = function() {
 
};
 
/** 
 * @param {string} key 
 * @param {string} value 
 * @param {number} timestamp
 * @return {void}
 */
TimeMap.prototype.set = function(key, value, 
timestamp) {
 
};
 
/** 
 * @param {string} key 
 * @param {number} timestamp
 * @return {string}
 */
TimeMap.prototype.get = function(key, timestamp) {
 
};";"";"2020-03-25 15:18:47"
13225;1067;"PHP";"class TimeMap {";"";"2020-03-25 15:18:47"
13226;1067;"Swift";"class TimeMap {
 
    /** Initialize your data structure here. */
    init() {
        
    }
    
    func set(_ key: String, _ value: String, _ 
timestamp: Int) {
        
    }
    
    func get(_ key: String, _ timestamp: Int) -> 
String {
        
    }
}
 
/**
 * Your TimeMap object will be instantiated and 
called as such:
 * let obj = TimeMap()
 * obj.set(key, value, timestamp)
 * let ret_2: String = obj.get(key, timestamp)
 */";"";"2020-03-25 15:18:47"
13227;1067;"Ruby";"class TimeMap
 
=begin
    Initialize your data structure here.
=end
    def initialize()
 
    end
 
 
=begin
    :type key: String
    :type value: String
    :type timestamp: Integer
    :rtype: Void
=end
    def set(key, value, timestamp)
 
    end
 
 
=begin
    :type key: String
    :type timestamp: Integer
    :rtype: String
=end";"";"2020-03-25 15:18:47"
13228;1067;"Python";"class TimeMap(object):
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
        
 
    def set(self, key, value, timestamp):
        """"""
        :type key: str
        :type value: str
        :type timestamp: int
        :rtype: None
        """"""
        
 
    def get(self, key, timestamp):
        """"""
        :type key: str
        :type timestamp: int
        :rtype: str
        """"""
        
 
 ";"";"2020-03-25 15:18:47"
13229;1068;"C#";"public class Solution {
    public int[] SearchRange(int[] nums, int target)
 {
 
    }
}";"";"2020-03-25 15:18:47"
13230;1068;"Java";"class Solution {
    public int[] searchRange(int[] nums, int target)
 {
 
    }
}";"";"2020-03-25 15:18:47"
13231;1068;"Rust";"impl Solution {
    pub fn search_range(nums: Vec<i32>, target: i32)
 -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:47"
13232;1068;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* searchRange(int* nums, int numsSize, int 
target, int* returnSize){
 
}";"";"2020-03-25 15:18:47"
13233;1068;"Scala";"object Solution {
    def searchRange(nums: Array[Int], target: Int): 
Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:47"
13234;1068;"Go";"func searchRange(nums []int, target int) []int {
 
}";"";"2020-03-25 15:18:47"
13235;1068;"Kotlin";"class Solution {
    fun searchRange(nums: IntArray, target: Int): 
IntArray {
 
    }
}";"";"2020-03-25 15:18:47"
13236;1068;"Python3";"class Solution:
    def searchRange(self, nums: List[int], target: 
int) -> List[int]:";"";"2020-03-25 15:18:47"
13237;1068;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
var searchRange = function(nums, target) {
 
};";"";"2020-03-25 15:18:47"
13238;1068;"PHP";"class Solution {";"";"2020-03-25 15:18:47"
13239;1068;"Swift";"class Solution {
    func searchRange(_ nums: [Int], _ target: Int) 
-> [Int] {
        
    }
}";"";"2020-03-25 15:18:47"
13240;1068;"Ruby";"# @param {Integer[]} nums
# @param {Integer} target
# @return {Integer[]}
def search_range(nums, target)
 
end";"";"2020-03-25 15:18:47"
13241;1068;"Python";"class Solution(object):
    def searchRange(self, nums, target):
        """"""
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:47"
13242;1069;"C#";"public class FizzBuzz {
    private int n;
 
    public FizzBuzz(int n) {
        this.n = n;
    }
 
    // printFizz() outputs ""fizz"".
    public void Fizz(Action printFizz) {
        
    }
 
    // printBuzzz() outputs ""buzz"".
    public void Buzz(Action printBuzz) {
        
    }
 
    // printFizzBuzz() outputs ""fizzbuzz"".
    public void Fizzbuzz(Action printFizzBuzz) {
        
    }
 
    // printNumber(x) outputs ""x"", where x is an 
integer.
    public void Number(Action<int> printNumber) {
        ";"";"2020-03-25 15:18:47"
13243;1069;"Java";"class FizzBuzz {
    private int n;
 
    public FizzBuzz(int n) {
        this.n = n;
    }
 
    // printFizz.run() outputs ""fizz"".
    public void fizz(Runnable printFizz) throws 
InterruptedException {
        
    }
 
    // printBuzz.run() outputs ""buzz"".
    public void buzz(Runnable printBuzz) throws 
InterruptedException {
        
    }
 
    // printFizzBuzz.run() outputs ""fizzbuzz"".
    public void fizzbuzz(Runnable printFizzBuzz) 
throws InterruptedException {
        
    }
 
    // printNumber.accept(x) outputs ""x"", where x ";"";"2020-03-25 15:18:47"
13244;1069;"C++";"class FizzBuzz {";"";"2020-03-25 15:18:47"
13245;1069;"C";"typedef struct {
    int n;
} FizzBuzz;
 
FizzBuzz* fizzBuzzCreate(int n) {
    FizzBuzz* obj = (FizzBuzz*) malloc(sizeof
(FizzBuzz));
    obj->n = n;
    return obj;
}
 
// printFizz() outputs ""fizz"".
void fizz(FizzBuzz* obj) {
    
}
 
// printBuzz() outputs ""buzz"".
void buzz(FizzBuzz* obj) {
    
}
 
// printFizzBuzz() outputs ""fizzbuzz"".
void fizzbuzz(FizzBuzz* obj) {
    
}
 ";"";"2020-03-25 15:18:47"
13246;1069;"Python3";"class FizzBuzz:
    def __init__(self, n: int):
        self.n = n
 
    # printFizz() outputs ""fizz""
    def fizz(self, printFizz: 'Callable[[], None]') 
-> None:
        
 
    # printBuzz() outputs ""buzz""
    def buzz(self, printBuzz: 'Callable[[], None]') 
-> None:
        
 
    # printFizzBuzz() outputs ""fizzbuzz""
    def fizzbuzz(self, printFizzBuzz: 'Callable[[], 
None]') -> None:
        
 
    # printNumber(x) outputs ""x"", where x is an 
integer.
    def number(self, printNumber: 'Callable[[int], 
None]') -> None:";"";"2020-03-25 15:18:47"
13247;1069;"Python";"class FizzBuzz(object):
    def __init__(self, n):
        self.n = n
 
    # printFizz() outputs ""fizz""
    def fizz(self, printFizz):
        """"""
        :type printFizz: method
        :rtype: void
        """"""
        
 
    # printBuzz() outputs ""buzz""
    def buzz(self, printBuzz):
        """"""
        :type printBuzz: method
        :rtype: void
        """"""
        
 
    # printFizzBuzz() outputs ""fizzbuzz""
    def fizzbuzz(self, printFizzBuzz):
        """"""
        :type printFizzBuzz: method
        :rtype: void
        """"""";"";"2020-03-25 15:18:47"
13248;1070;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode ReverseKGroup(ListNode head, 
int k) {
 
    }
}";"";"2020-03-25 15:18:47"
13249;1070;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, 
int k) {
 
    }
}";"";"2020-03-25 15:18:47"
13250;1070;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
struct ListNode* reverseKGroup(struct ListNode* 
head, int k){
 
}";"";"2020-03-25 15:18:47"
13251;1070;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn reverse_k_group(head: 
Option<Box<ListNode>>, k: i32) -> 
Option<Box<ListNode>> {
        
    }
}";"";"2020-03-25 15:18:47"
13252;1070;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def reverseKGroup(head: ListNode, k: Int): 
ListNode = {
 
    }
}";"";"2020-03-25 15:18:47"
13253;1070;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func reverseKGroup(head *ListNode, k int) *ListNode 
{
 
}";"";"2020-03-25 15:18:47"
13254;1070;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun reverseKGroup(head: ListNode?, k: Int): 
ListNode? {
 
    }
}";"";"2020-03-25 15:18:47"
13255;1070;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def reverseKGroup(self, head: ListNode, k: int) 
-> ListNode:";"";"2020-03-25 15:18:47"
13256;1070;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @param {number} k
 * @return {ListNode}
 */
var reverseKGroup = function(head, k) {
 
};";"";"2020-03-25 15:18:47"
13257;1070;"PHP";"/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
class Solution {
 
    /**
     * @param ListNode $head
     * @param Integer $k
     * @return ListNode
     */
    function reverseKGroup($head, $k) {
        
    }
}";"";"2020-03-25 15:18:47"
13258;1070;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func reverseKGroup(_ head: ListNode?, _ k: Int) 
-> ListNode? {
        
    }
}";"";"2020-03-25 15:18:47"
13259;1070;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# @param {ListNode} head
# @param {Integer} k
# @return {ListNode}
def reverse_k_group(head, k)
 
end";"";"2020-03-25 15:18:47"
13260;1070;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def reverseKGroup(self, head, k):
        """"""
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:47"
13261;1071;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode InsertionSortList(ListNode head)
 {
 
    }
}";"";"2020-03-25 15:18:47"
13262;1071;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode insertionSortList(ListNode head)
 {
 
    }
}";"";"2020-03-25 15:18:47"
13263;1071;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
struct ListNode* insertionSortList(struct ListNode* 
head){
 
}";"";"2020-03-25 15:18:47"
13264;1071;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn insertion_sort_list(head: 
Option<Box<ListNode>>) -> Option<Box<ListNode>> {
 
    }
}";"";"2020-03-25 15:18:47"
13265;1071;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def insertionSortList(head: ListNode): ListNode 
= {
 
    }
}";"";"2020-03-25 15:18:47"
13266;1071;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func insertionSortList(head *ListNode) *ListNode {
 
}";"";"2020-03-25 15:18:47"
13267;1071;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun insertionSortList(head: ListNode?): 
ListNode? {
 
    }
}";"";"2020-03-25 15:18:47"
13268;1071;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def insertionSortList(self, head: ListNode) -> 
ListNode:";"";"2020-03-25 15:18:47"
13269;1071;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var insertionSortList = function(head) {
 
};";"";"2020-03-25 15:18:47"
13270;1071;"PHP";"/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
class Solution {
 
    /**
     * @param ListNode $head
     * @return ListNode
     */
    function insertionSortList($head) {
 
    }
}";"";"2020-03-25 15:18:47"
13271;1071;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func insertionSortList(_ head: ListNode?) -> 
ListNode? {
 
    }
}";"";"2020-03-25 15:18:47"
13272;1071;"Ruby";"# Definition for singly-linked list.";"";"2020-03-25 15:18:47"
13273;1071;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def insertionSortList(self, head):
        """"""
        :type head: ListNode
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:47"
13274;1072;"C#";"public class Solution {
    public int MinMutation(string start, string end,
 string[] bank) {
 
    }
}";"";"2020-03-25 15:18:47"
13275;1072;"Java";"class Solution {
    public int minMutation(String start, String end,
 String[] bank) {
 
    }
}";"";"2020-03-25 15:18:47"
13276;1072;"Rust";"impl Solution {
    pub fn min_mutation(start: String, end: String, 
bank: Vec<String>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:47"
13277;1072;"C";"int minMutation(char * start, char * end, char ** 
bank, int bankSize){
 
}";"";"2020-03-25 15:18:47"
13278;1072;"Scala";"object Solution {
    def minMutation(start: String, end: String, 
bank: Array[String]): Int = {
 
    }
}";"";"2020-03-25 15:18:47"
13279;1072;"Go";"func minMutation(start string, end string, bank []
string) int {
 
}";"";"2020-03-25 15:18:47"
13280;1072;"Kotlin";"class Solution {
    fun minMutation(start: String, end: String, 
bank: Array<String>): Int {
 
    }
}";"";"2020-03-25 15:18:47"
13281;1072;"Python3";"class Solution:
    def minMutation(self, start: str, end: str, 
bank: List[str]) -> int:";"";"2020-03-25 15:18:47"
13282;1072;"JavaScript";"/**
 * @param {string} start
 * @param {string} end
 * @param {string[]} bank
 * @return {number}
 */
var minMutation = function(start, end, bank) {
 
};";"";"2020-03-25 15:18:47"
13283;1072;"PHP";"class Solution {
 
    /**
     * @param String $start
     * @param String $end
     * @param String[] $bank
     * @return Integer
     */
    function minMutation($start, $end, $bank) {
        
    }
}";"";"2020-03-25 15:18:47"
13284;1072;"Swift";"class Solution {
    func minMutation(_ start: String, _ end: String,
 _ bank: [String]) -> Int {
        
    }
}";"";"2020-03-25 15:18:47"
13285;1072;"Ruby";"# @param {String} start
# @param {String} end
# @param {String[]} bank
# @return {Integer}
def min_mutation(start, end, bank)
 
end";"";"2020-03-25 15:18:47"
13286;1072;"Python";"class Solution(object):
    def minMutation(self, start, end, bank):
        """"""
        :type start: str
        :type end: str
        :type bank: List[str]
        :rtype: int
        """"""";"";"2020-03-25 15:18:47"
13287;1073;"C#";"public class FreqStack {
 
    public FreqStack() {
 
    }
    
    public void Push(int x) {
 
    }
    
    public int Pop() {
 
    }
}
 
/**
 * Your FreqStack object will be instantiated and 
called as such:
 * FreqStack obj = new FreqStack();
 * obj.Push(x);
 * int param_2 = obj.Pop();
 */";"";"2020-03-25 15:18:47"
13288;1073;"Java";"class FreqStack {
 
    public FreqStack() {
 
    }
    
    public void push(int x) {
 
    }
    
    public int pop() {
 
    }
}
 
/**
 * Your FreqStack object will be instantiated and 
called as such:
 * FreqStack obj = new FreqStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 */";"";"2020-03-25 15:18:47"
13289;1073;"C";"typedef struct {
    
} FreqStack;
 
 
FreqStack* freqStackCreate() {
    
}
 
void freqStackPush(FreqStack* obj, int x) {
  
}
 
int freqStackPop(FreqStack* obj) {
  
}
 
void freqStackFree(FreqStack* obj) {
    
}
 
/**
 * Your FreqStack struct will be instantiated and 
called as such:
 * FreqStack* obj = freqStackCreate();
 * freqStackPush(obj, x);";"";"2020-03-25 15:18:47"
13290;1073;"Rust";"struct FreqStack {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl FreqStack {
 
    fn new() -> Self {
        
    }
    
    fn push(&self, x: i32) {
        
    }
    
    fn pop(&self) -> i32 {
        
    }
}
 ";"";"2020-03-25 15:18:47"
13291;1073;"Scala";"class FreqStack() {
 
    def push(x: Int) {
 
    }
 
    def pop(): Int = {
 
    }
 
}
 
/**
 * Your FreqStack object will be instantiated and 
called as such:
 * var obj = new FreqStack()
 * obj.push(x)
 * var param_2 = obj.pop()
 */";"";"2020-03-25 15:18:47"
13292;1073;"Go";"type FreqStack struct {
 
}
 
 
func Constructor() FreqStack {
 
}
 
 
func (this *FreqStack) Push(x int)  {
 
}
 
 
func (this *FreqStack) Pop() int {
 
}
 
 
/**
 * Your FreqStack object will be instantiated and 
called as such:
 * obj := Constructor();
 * obj.Push(x);
 * param_2 := obj.Pop();";"";"2020-03-25 15:18:47"
13293;1073;"Kotlin";"class FreqStack() {
 
    fun push(x: Int) {
 
    }
 
    fun pop(): Int {
 
    }
 
}
 
/**
 * Your FreqStack object will be instantiated and 
called as such:
 * var obj = FreqStack()
 * obj.push(x)
 * var param_2 = obj.pop()
 */";"";"2020-03-25 15:18:47"
13294;1073;"Python3";"class FreqStack:
 
    def __init__(self):
        
 
    def push(self, x: int) -> None:
        
 
    def pop(self) -> int:
        
 
 
# Your FreqStack object will be instantiated and 
called as such:
# obj = FreqStack()
# obj.push(x)
# param_2 = obj.pop()";"";"2020-03-25 15:18:47"
13295;1073;"JavaScript";"var FreqStack = function() {
 
};
 
/** 
 * @param {number} x
 * @return {void}
 */
FreqStack.prototype.push = function(x) {
 
};
 
/**
 * @return {number}
 */
FreqStack.prototype.pop = function() {
 
};
 
/**
 * Your FreqStack object will be instantiated and 
called as such:
 * var obj = new FreqStack()
 * obj.push(x)
 * var param_2 = obj.pop()
 */";"";"2020-03-25 15:18:47"
13296;1073;"PHP";"class FreqStack {
    /**
     */
    function __construct() {
        
    }
  
    /**
     * @param Integer $x
     * @return NULL
     */
    function push($x) {
        
    }
  
    /**
     * @return Integer
     */
    function pop() {
        
    }
}
 
/**
 * Your FreqStack object will be instantiated and 
called as such:";"";"2020-03-25 15:18:47"
13297;1073;"Swift";"class FreqStack {
 
    init() {
        
    }
    
    func push(_ x: Int) {
        
    }
    
    func pop() -> Int {
        
    }
}
 
/**
 * Your FreqStack object will be instantiated and 
called as such:
 * let obj = FreqStack()
 * obj.push(x)
 * let ret_2: Int = obj.pop()
 */";"";"2020-03-25 15:18:47"
13298;1073;"Ruby";"";"";"2020-03-25 15:18:47"
13299;1073;"Python";"class FreqStack(object):
 
    def __init__(self):
        
 
    def push(self, x):
        """"""
        :type x: int
        :rtype: None
        """"""
        
 
    def pop(self):
        """"""
        :rtype: int
        """"""
        
 
 
# Your FreqStack object will be instantiated and 
called as such:
# obj = FreqStack()
# obj.push(x)
# param_2 = obj.pop()";"";"2020-03-25 15:18:47"
13300;1074;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class FindElements {
 
    public FindElements(TreeNode root) {
 
    }
    
    public bool Find(int target) {
 
    }
}
 
/**
 * Your FindElements object will be instantiated 
and called as such:
 * FindElements obj = new FindElements(root);
 * bool param_1 = obj.Find(target);
 */";"";"2020-03-25 15:18:47"
13301;1074;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class FindElements {
 
    public FindElements(TreeNode root) {
 
    }
    
    public boolean find(int target) {
 
    }
}
 
/**
 * Your FindElements object will be instantiated 
and called as such:
 * FindElements obj = new FindElements(root);
 * boolean param_1 = obj.find(target);
 */";"";"2020-03-25 15:18:47"
13302;1074;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
struct FindElements {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.";"";"2020-03-25 15:18:47"
13303;1074;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
 
typedef struct {
    
} FindElements;
 
 
FindElements* findElementsCreate(struct TreeNode* 
root) {
    
}
 
bool findElementsFind(FindElements* obj, int target)
 {
  
}
 ";"";"2020-03-25 15:18:47"
13304;1074;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
class FindElements(_root: TreeNode) {
 
    def find(target: Int): Boolean = {
 
    }
 
}
 
/**
 * Your FindElements object will be instantiated 
and called as such:
 * var obj = new FindElements(root)
 * var param_1 = obj.find(target)
 */";"";"2020-03-25 15:18:47"
13305;1074;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
type FindElements struct {
 
}
 
 
func Constructor(root *TreeNode) FindElements {
 
}
 
 
func (this *FindElements) Find(target int) bool {
 
}
 
 
/**
 * Your FindElements object will be instantiated 
and called as such:";"";"2020-03-25 15:18:47"
13306;1074;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class FindElements(root: TreeNode?) {
 
    fun find(target: Int): Boolean {
 
    }
 
}
 
/**
 * Your FindElements object will be instantiated 
and called as such:
 * var obj = FindElements(root)
 * var param_1 = obj.find(target)
 */";"";"2020-03-25 15:18:47"
13307;1074;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class FindElements:
 
    def __init__(self, root: TreeNode):
        
 
    def find(self, target: int) -> bool:
        
 
 
# Your FindElements object will be instantiated and 
called as such:
# obj = FindElements(root)
# param_1 = obj.find(target)";"";"2020-03-25 15:18:47"
13308;1074;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 */
var FindElements = function(root) {
 
};
 
/** 
 * @param {number} target
 * @return {boolean}
 */
FindElements.prototype.find = function(target) {
 
};
 
/**
 * Your FindElements object will be instantiated 
and called as such:
 * var obj = new FindElements(root)";"";"2020-03-25 15:18:47"
13309;1074;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class FindElements {
    /**
     * @param TreeNode $root
     */
    function __construct($root) {
        
    }
  
    /**
     * @param Integer $target
     * @return Boolean
     */
    function find($target) {
        
    }
}";"";"2020-03-25 15:18:47"
13310;1074;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
 
class FindElements {
 
    init(_ root: TreeNode?) {
 
    }
    
    func find(_ target: Int) -> Bool {
 
    }
}
 
/**";"";"2020-03-25 15:18:47"
13311;1074;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
class FindElements
 
=begin
    :type root: TreeNode
=end
    def initialize(root)
 
    end
 
 
=begin
    :type target: Integer
    :rtype: Boolean
=end
    def find(target)
 
    end";"";"2020-03-25 15:18:47"
13312;1074;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class FindElements(object):
 
    def __init__(self, root):
        """"""
        :type root: TreeNode
        """"""
        
 
    def find(self, target):
        """"""
        :type target: int
        :rtype: bool
        """"""
        
 
 
# Your FindElements object will be instantiated and 
called as such:
# obj = FindElements(root)";"";"2020-03-25 15:18:47"
13313;1075;"C#";"public class Solution {
    public bool IsAnagram(string s, string t) {
 
    }
}";"";"2020-03-25 15:18:47"
13314;1075;"Java";"class Solution {
    public boolean isAnagram(String s, String t) {
 
    }
}";"";"2020-03-25 15:18:47"
13315;1075;"Rust";"impl Solution {
    pub fn is_anagram(s: String, t: String) -> bool 
{
 
    }
}";"";"2020-03-25 15:18:47"
13316;1075;"C";"bool isAnagram(char * s, char * t){
 
}";"";"2020-03-25 15:18:47"
13317;1075;"Scala";"object Solution {
    def isAnagram(s: String, t: String): Boolean = {
 
    }
}";"";"2020-03-25 15:18:47"
13318;1075;"Go";"func isAnagram(s string, t string) bool {
 
}";"";"2020-03-25 15:18:47"
13319;1075;"Kotlin";"class Solution {
    fun isAnagram(s: String, t: String): Boolean {
 
    }
}";"";"2020-03-25 15:18:47"
13320;1075;"Python3";"class Solution:
    def isAnagram(self, s: str, t: str) -> bool:";"";"2020-03-25 15:18:47"
13321;1075;"JavaScript";"/**
 * @param {string} s
 * @param {string} t
 * @return {boolean}
 */
var isAnagram = function(s, t) {
 
};";"";"2020-03-25 15:18:47"
13322;1075;"PHP";"class Solution {";"";"2020-03-25 15:18:47"
13323;1075;"Swift";"class Solution {
    func isAnagram(_ s: String, _ t: String) -> 
Bool {
 
    }
}";"";"2020-03-25 15:18:47"
13324;1075;"Ruby";"# @param {String} s
# @param {String} t
# @return {Boolean}
def is_anagram(s, t)
 
end";"";"2020-03-25 15:18:47"
13325;1075;"Python";"class Solution(object):
    def isAnagram(self, s, t):
        """"""
        :type s: str
        :type t: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:47"
13326;1076;"C#";"public class Solution {
    public IList<string> GenerateParenthesis(int n) 
{
 
    }
}";"";"2020-03-25 15:18:48"
13327;1076;"Java";"class Solution {
    public List<String> generateParenthesis(int n) {
 
    }
}";"";"2020-03-25 15:18:48"
13328;1076;"Rust";"impl Solution {
    pub fn generate_parenthesis(n: i32) -> 
Vec<String> {
        
    }
}";"";"2020-03-25 15:18:48"
13329;1076;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** generateParenthesis(int n, int* returnSize){
 
}";"";"2020-03-25 15:18:48"
13330;1076;"Scala";"object Solution {
    def generateParenthesis(n: Int): List[String] = 
{
 
    }
}";"";"2020-03-25 15:18:48"
13331;1076;"Go";"func generateParenthesis(n int) []string {
 
}";"";"2020-03-25 15:18:48"
13332;1076;"Kotlin";"class Solution {
    fun generateParenthesis(n: Int): List<String> {
 
    }
}";"";"2020-03-25 15:18:48"
13333;1076;"Python3";"class Solution:
    def generateParenthesis(self, n: int) -> List
[str]:";"";"2020-03-25 15:18:48"
13334;1076;"JavaScript";"/**
 * @param {number} n
 * @return {string[]}
 */
var generateParenthesis = function(n) {
 
};";"";"2020-03-25 15:18:48"
13335;1076;"PHP";"class Solution {";"";"2020-03-25 15:18:48"
13336;1076;"Swift";"class Solution {
    func generateParenthesis(_ n: Int) -> [String] {
        
    }
}";"";"2020-03-25 15:18:48"
13337;1076;"Ruby";"# @param {Integer} n
# @return {String[]}
def generate_parenthesis(n)
 
end";"";"2020-03-25 15:18:48"
13338;1076;"Python";"class Solution(object):
    def generateParenthesis(self, n):
        """"""
        :type n: int
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:48"
13339;1077;"C#";"public class Solution {
    public int UniqueMorseRepresentations(string[] 
words) {
 
    }
}";"";"2020-03-25 15:18:48"
13340;1077;"Java";"class Solution {
    public int uniqueMorseRepresentations(String[] 
words) {
 
    }
}";"";"2020-03-25 15:18:48"
13341;1077;"C";"int uniqueMorseRepresentations(char ** words, int 
wordsSize){
 
}";"";"2020-03-25 15:18:48"
13342;1077;"Rust";"impl Solution {
    pub fn unique_morse_representations(words: 
Vec<String>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:48"
13343;1077;"Scala";"object Solution {
    def uniqueMorseRepresentations(words: Array
[String]): Int = {
 
    }
}";"";"2020-03-25 15:18:48"
13344;1077;"Go";"func uniqueMorseRepresentations(words []string) int 
{
 
}";"";"2020-03-25 15:18:48"
13345;1077;"Kotlin";"class Solution {
    fun uniqueMorseRepresentations(words: 
Array<String>): Int {
 
    }
}";"";"2020-03-25 15:18:48"
13346;1077;"Python3";"class Solution:
    def uniqueMorseRepresentations(self, words: List
[str]) -> int:";"";"2020-03-25 15:18:48"
13347;1077;"JavaScript";"/**
 * @param {string[]} words
 * @return {number}
 */
var uniqueMorseRepresentations = function(words) {
 
};";"";"2020-03-25 15:18:48"
13348;1077;"PHP";"class Solution {
 
    /**
     * @param String[] $words
     * @return Integer
     */
    function uniqueMorseRepresentations($words) {
        
    }
}";"";"2020-03-25 15:18:48"
13349;1077;"Swift";"class Solution {
    func uniqueMorseRepresentations(_ words: 
[String]) -> Int {
        
    }
}";"";"2020-03-25 15:18:48"
13350;1077;"Ruby";"# @param {String[]} words
# @return {Integer}
def unique_morse_representations(words)
 
end";"";"2020-03-25 15:18:48"
13351;1077;"Python";"class Solution(object):
    def uniqueMorseRepresentations(self, words):
        """"""
        :type words: List[str]
        :rtype: int
        """"""";"";"2020-03-25 15:18:48"
13352;1078;"C#";"public class Solution {
    public int Reverse(int x) {
 
    }
}";"";"2020-03-25 15:18:48"
13353;1078;"Java";"class Solution {
    public int reverse(int x) {
 
    }
}";"";"2020-03-25 15:18:48"
13354;1078;"C";"int reverse(int x){
 
}";"";"2020-03-25 15:18:48"
13355;1078;"Rust";"impl Solution {
    pub fn reverse(x: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:48"
13356;1078;"Scala";"object Solution {
    def reverse(x: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:48"
13357;1078;"JavaScript";"/**";"";"2020-03-25 15:18:48"
13358;1078;"Python3";"class Solution:
    def reverse(self, x: int) -> int:";"";"2020-03-25 15:18:48"
13359;1078;"Go";"func reverse(x int) int {
 
}";"";"2020-03-25 15:18:48"
13360;1078;"Swift";"class Solution {
    func reverse(_ x: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:48"
13361;1078;"Ruby";"# @param {Integer} x
# @return {Integer}
def reverse(x)
 
end";"";"2020-03-25 15:18:48"
13362;1078;"Python";"class Solution(object):
    def reverse(self, x):
        """"""
        :type x: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:48"
13363;1078;"Kotlin";"class Solution {
    fun reverse(x: Int): Int {
 
    }
}";"";"2020-03-25 15:18:48"
13364;1079;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<int> GetAllElements(TreeNode root1,
 TreeNode root2) {
 
    }
}";"";"2020-03-25 15:18:48"
13365;1079;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> getAllElements(TreeNode 
root1, TreeNode root2) {
 
    }
}";"";"2020-03-25 15:18:48"
13366;1079;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn get_all_elements(root1: 
Option<Rc<RefCell<TreeNode>>>, root2: 
Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {
 
    }";"";"2020-03-25 15:18:48"
13367;1079;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* getAllElements(struct TreeNode* root1, struct 
TreeNode* root2, int* returnSize){
 
}";"";"2020-03-25 15:18:48"
13368;1079;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def getAllElements(root1: TreeNode, root2: 
TreeNode): List[Int] = {
 
    }
}";"";"2020-03-25 15:18:48"
13369;1079;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func getAllElements(root1 *TreeNode, root2 
*TreeNode) []int {
 
}";"";"2020-03-25 15:18:48"
13370;1079;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun getAllElements(root1: TreeNode?, root2: 
TreeNode?): List<Int> {
 
    }
}";"";"2020-03-25 15:18:48"
13371;1079;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def getAllElements(self, root1: TreeNode, 
root2: TreeNode) -> List[int]:";"";"2020-03-25 15:18:48"
13372;1079;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root1
 * @param {TreeNode} root2
 * @return {number[]}
 */
var getAllElements = function(root1, root2) {
 
};";"";"2020-03-25 15:18:48"
13373;1079;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root1
     * @param TreeNode $root2
     * @return Integer[]
     */
    function getAllElements($root1, $root2) {
 
    }
}";"";"2020-03-25 15:18:48"
13374;1079;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func getAllElements(_ root1: TreeNode?, _ 
root2: TreeNode?) -> [Int] {
 
    }
}";"";"2020-03-25 15:18:48"
13375;1079;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root1
# @param {TreeNode} root2
# @return {Integer[]}
def get_all_elements(root1, root2)
 
end";"";"2020-03-25 15:18:48"
13376;1079;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def getAllElements(self, root1, root2):
        """"""
        :type root1: TreeNode
        :type root2: TreeNode
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:48"
13377;1080;"C#";"public class Solution {
    public int Search(int[] nums, int target) {
 
    }
}";"";"2020-03-25 15:18:48"
13378;1080;"Java";"class Solution {
    public int search(int[] nums, int target) {
 
    }
}";"";"2020-03-25 15:18:48"
13379;1080;"Rust";"impl Solution {
    pub fn search(nums: Vec<i32>, target: i32) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:48"
13380;1080;"C";"int search(int* nums, int numsSize, int target){
 
}";"";"2020-03-25 15:18:48"
13381;1080;"Scala";"object Solution {
    def search(nums: Array[Int], target: Int): Int 
= {
 
    }
}";"";"2020-03-25 15:18:48"
13382;1080;"Python3";"class Solution:
    def search(self, nums: List[int], target: int) 
-> int:";"";"2020-03-25 15:18:48"
13383;1080;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */
var search = function(nums, target) {
 
};";"";"2020-03-25 15:18:48"
13384;1080;"Go";"func search(nums []int, target int) int {
 
}";"";"2020-03-25 15:18:48"
13385;1080;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer $target
     * @return Integer
     */
    function search($nums, $target) {
        
    }
}";"";"2020-03-25 15:18:48"
13386;1080;"Swift";"class Solution {
    func search(_ nums: [Int], _ target: Int) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:48"
13387;1080;"Ruby";"# @param {Integer[]} nums
# @param {Integer} target
# @return {Integer}
def search(nums, target)
 
end";"";"2020-03-25 15:18:48"
13388;1080;"Python";"class Solution(object):
    def search(self, nums, target):
        """"""
        :type nums: List[int]
        :type target: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:48"
13389;1081;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode SufficientSubset(TreeNode root, 
int limit) {
 
    }
}";"";"2020-03-25 15:18:48"
13390;1081;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode sufficientSubset(TreeNode root, 
int limit) {
 
    }
}";"";"2020-03-25 15:18:48"
13391;1081;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* sufficientSubset(struct TreeNode* 
root, int limit){
 
}";"";"2020-03-25 15:18:48"
13392;1081;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn sufficient_subset(root: 
Option<Rc<RefCell<TreeNode>>>, limit: i32) -> 
Option<Rc<RefCell<TreeNode>>> {
        
    }";"";"2020-03-25 15:18:48"
13393;1081;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def sufficientSubset(root: TreeNode, limit: Int)
: TreeNode = {
 
    }
}";"";"2020-03-25 15:18:48"
13394;1081;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func sufficientSubset(root *TreeNode, limit int) 
*TreeNode {
 
}";"";"2020-03-25 15:18:48"
13395;1081;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun sufficientSubset(root: TreeNode?, limit: 
Int): TreeNode? {
 
    }
}";"";"2020-03-25 15:18:48"
13396;1081;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def sufficientSubset(self, root: TreeNode, 
limit: int) -> TreeNode:";"";"2020-03-25 15:18:48"
13397;1081;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} limit
 * @return {TreeNode}
 */
var sufficientSubset = function(root, limit) {
 
};";"";"2020-03-25 15:18:48"
13398;1081;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @param Integer $limit
     * @return TreeNode
     */
    function sufficientSubset($root, $limit) {
        
    }
}";"";"2020-03-25 15:18:48"
13399;1081;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func sufficientSubset(_ root: TreeNode?, _ 
limit: Int) -> TreeNode? {
        
    }
}";"";"2020-03-25 15:18:48"
13400;1081;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:48"
13401;1081;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def sufficientSubset(self, root, limit):
        """"""
        :type root: TreeNode
        :type limit: int
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:48"
13402;1082;"C#";"public class Solution {
    public string LargestNumber(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:48"
13403;1082;"Java";"class Solution {
    public String largestNumber(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:48"
13404;1082;"C++";"class Solution {";"";"2020-03-25 15:18:48"
13405;1082;"C";"char * largestNumber(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:48"
13406;1082;"Rust";"impl Solution {
    pub fn largest_number(nums: Vec<i32>) -> String 
{
 
    }
}";"";"2020-03-25 15:18:48"
13407;1082;"Scala";"object Solution {
    def largestNumber(nums: Array[Int]): String = {
 
    }
}";"";"2020-03-25 15:18:48"
13408;1082;"Go";"func largestNumber(nums []int) string {
 
}";"";"2020-03-25 15:18:48"
13409;1082;"Kotlin";"class Solution {
    fun largestNumber(nums: IntArray): String {
 
    }
}";"";"2020-03-25 15:18:48"
13410;1082;"Python3";"class Solution:
    def largestNumber(self, nums: List[int]) -> str:";"";"2020-03-25 15:18:48"
13411;1082;"JavaScript";"/**
 * @param {number[]} nums
 * @return {string}
 */
var largestNumber = function(nums) {
 
};";"";"2020-03-25 15:18:48"
13412;1082;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return String
     */
    function largestNumber($nums) {
 
    }
}";"";"2020-03-25 15:18:48"
13413;1082;"Swift";"class Solution {
    func largestNumber(_ nums: [Int]) -> String {
 
    }
}";"";"2020-03-25 15:18:48"
13414;1082;"Ruby";"# @param {Integer[]} nums
# @return {String}
def largest_number(nums)
 
end";"";"2020-03-25 15:18:48"
13415;1082;"Python";"class Solution(object):
    def largestNumber(self, nums):
        """"""
        :type nums: List[int]
        :rtype: str
        """"""";"";"2020-03-25 15:18:48"
13416;1083;"C#";"public class Solution {
    public int Jump(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:48"
13417;1083;"Java";"class Solution {
    public int jump(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:48"
13418;1083;"Rust";"impl Solution {
    pub fn jump(nums: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:48"
13419;1083;"C";"int jump(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:48"
13420;1083;"Scala";"object Solution {
    def jump(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:48"
13421;1083;"Go";"func jump(nums []int) int {
 
}";"";"2020-03-25 15:18:48"
13422;1083;"Kotlin";"class Solution {
    fun jump(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:48"
13423;1083;"Python3";"class Solution:
    def jump(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:48"
13424;1083;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var jump = function(nums) {
 
};";"";"2020-03-25 15:18:48"
13425;1083;"PHP";"class Solution {";"";"2020-03-25 15:18:48"
13426;1083;"Swift";"class Solution {
    func jump(_ nums: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:48"
13427;1083;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def jump(nums)
 
end";"";"2020-03-25 15:18:48"
13428;1083;"Python";"class Solution(object):
    def jump(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:48"
13429;1084;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode DeleteNode(ListNode head, int 
val) {
 
    }
}";"";"2020-03-25 15:18:48"
13430;1084;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode deleteNode(ListNode head, int 
val) {
 
    }
}";"";"2020-03-25 15:18:48"
13431;1084;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
struct ListNode* deleteNode(struct ListNode* head, 
int val){
 
}";"";"2020-03-25 15:18:48"
13432;1084;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn delete_node(head: Option<Box<ListNode>>, 
val: i32) -> Option<Box<ListNode>> {
 
    }
}";"";"2020-03-25 15:18:48"
13433;1084;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def deleteNode(head: ListNode, `val`: Int): 
ListNode = {
 
    }
}";"";"2020-03-25 15:18:48"
13434;1084;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func deleteNode(head *ListNode, val int) *ListNode {
 
}";"";"2020-03-25 15:18:48"
13435;1084;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun deleteNode(head: ListNode?, `val`: Int): 
ListNode? {
 
    }
}";"";"2020-03-25 15:18:48"
13436;1084;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def deleteNode(self, head: ListNode, val: int) 
-> ListNode:";"";"2020-03-25 15:18:48"
13437;1084;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @param {number} val
 * @return {ListNode}
 */
var deleteNode = function(head, val) {
 
};";"";"2020-03-25 15:18:48"
13438;1084;"PHP";"/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
class Solution {
 
    /**
     * @param ListNode $head
     * @param Integer $val
     * @return ListNode
     */
    function deleteNode($head, $val) {
 
    }
}";"";"2020-03-25 15:18:48"
13439;1084;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func deleteNode(_ head: ListNode?, _ val: Int) 
-> ListNode? {
 
    }
}";"";"2020-03-25 15:18:48"
13440;1084;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# @param {ListNode} head
# @param {Integer} val
# @return {ListNode}
def delete_node(head, val)
 
end";"";"2020-03-25 15:18:48"
13441;1084;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def deleteNode(self, head, val):
        """"""
        :type head: ListNode
        :type val: int
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:48"
13442;1085;"C#";"public class Solution {
    public string ReverseVowels(string s) {
 
    }
}";"";"2020-03-25 15:18:48"
13443;1085;"Java";"class Solution {
    public String reverseVowels(String s) {
 
    }
}";"";"2020-03-25 15:18:48"
13444;1085;"Rust";"impl Solution {
    pub fn reverse_vowels(s: String) -> String {
        
    }
}";"";"2020-03-25 15:18:48"
13445;1085;"C";"char * reverseVowels(char * s){
 
}";"";"2020-03-25 15:18:48"
13446;1085;"Scala";"object Solution {
    def reverseVowels(s: String): String = {
 
    }
}";"";"2020-03-25 15:18:48"
13447;1085;"Go";"func reverseVowels(s string) string {
 
}";"";"2020-03-25 15:18:48"
13448;1085;"Kotlin";"class Solution {
    fun reverseVowels(s: String): String {
 
    }
}";"";"2020-03-25 15:18:48"
13449;1085;"Python3";"class Solution:
    def reverseVowels(self, s: str) -> str:";"";"2020-03-25 15:18:48"
13450;1085;"JavaScript";"/**
 * @param {string} s
 * @return {string}
 */
var reverseVowels = function(s) {
 
};";"";"2020-03-25 15:18:48"
13451;1085;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return String
     */
    function reverseVowels($s) {
        
    }
}";"";"2020-03-25 15:18:48"
13452;1085;"Swift";"class Solution {
    func reverseVowels(_ s: String) -> String {
        
    }
}";"";"2020-03-25 15:18:48"
13453;1085;"Ruby";"# @param {String} s
# @return {String}
def reverse_vowels(s)
 
end";"";"2020-03-25 15:18:48"
13454;1085;"Python";"class Solution(object):
    def reverseVowels(self, s):
        """"""
        :type s: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:48"
13455;1086;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode InorderSuccessor(TreeNode root, 
TreeNode p) {
 
    }
}";"";"2020-03-25 15:18:48"
13456;1086;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode inorderSuccessor(TreeNode root, 
TreeNode p) {
 
    }
}";"";"2020-03-25 15:18:48"
13457;1086;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* inorderSuccessor(struct TreeNode* 
root, struct TreeNode* p){
 
}";"";"2020-03-25 15:18:48"
13458;1086;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def inorderSuccessor(self, root: TreeNode, p: 
TreeNode) -> TreeNode:";"";"2020-03-25 15:18:48"
13459;1086;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {TreeNode} p
 * @return {TreeNode}
 */
var inorderSuccessor = function(root, p) {
 
};";"";"2020-03-25 15:18:48"
13460;1086;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @param {TreeNode} p
# @return {TreeNode}
def inorder_successor(root, p)
 
end";"";"2020-03-25 15:18:48"
13461;1086;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def inorderSuccessor(self, root, p):
        """"""
        :type root: TreeNode
        :type p: TreeNode
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:48"
13462;1087;"C#";"public class MagicDictionary {
 
    /** Initialize your data structure here. */
    public MagicDictionary() {
 
    }
    
    /** Build a dictionary through a list of words 
*/
    public void BuildDict(string[] dict) {
 
    }
    
    /** Returns if there is any word in the trie 
that equals to the given word after modifying 
exactly one character */
    public bool Search(string word) {
 
    }
}
 
/**
 * Your MagicDictionary object will be instantiated 
and called as such:
 * MagicDictionary obj = new MagicDictionary();
 * obj.BuildDict(dict);";"";"2020-03-25 15:18:48"
13463;1087;"Java";"class MagicDictionary {
 
    /** Initialize your data structure here. */
    public MagicDictionary() {
 
    }
    
    /** Build a dictionary through a list of words 
*/
    public void buildDict(String[] dict) {
 
    }
    
    /** Returns if there is any word in the trie 
that equals to the given word after modifying 
exactly one character */
    public boolean search(String word) {
 
    }
}
 
/**
 * Your MagicDictionary object will be instantiated 
and called as such:
 * MagicDictionary obj = new MagicDictionary();
 * obj.buildDict(dict);";"";"2020-03-25 15:18:48"
13464;1087;"Rust";"struct MagicDictionary {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl MagicDictionary {
 
    /** Initialize your data structure here. */
    fn new() -> Self {
        
    }
    
    /** Build a dictionary through a list of words 
*/
    fn build_dict(&self, dict: Vec<String>) {
        
    }
    
    /** Returns if there is any word in the trie 
that equals to the given word after modifying ";"";"2020-03-25 15:18:48"
13465;1087;"C";"typedef struct {
    
} MagicDictionary;
 
/** Initialize your data structure here. */
 
MagicDictionary* magicDictionaryCreate() {
    
}
 
/** Build a dictionary through a list of words */
void magicDictionaryBuildDict(MagicDictionary* obj, 
char ** dict, int dictSize) {
  
}
 
/** Returns if there is any word in the trie that 
equals to the given word after modifying exactly 
one character */
bool magicDictionarySearch(MagicDictionary* obj, 
char * word) {
  
}
 
void magicDictionaryFree(MagicDictionary* obj) {
    ";"";"2020-03-25 15:18:48"
13466;1087;"Scala";"class MagicDictionary() {
 
    /** Initialize your data structure here. */
 
 
    /** Build a dictionary through a list of words 
*/
    def buildDict(dict: Array[String]) {
 
    }
 
    /** Returns if there is any word in the trie 
that equals to the given word after modifying 
exactly one character */
    def search(word: String): Boolean = {
 
    }
 
}
 
/**
 * Your MagicDictionary object will be instantiated 
and called as such:
 * var obj = new MagicDictionary()
 * obj.buildDict(dict)
 * var param_2 = obj.search(word)";"";"2020-03-25 15:18:48"
13467;1087;"Go";"type MagicDictionary struct {
 
}
 
 
/** Initialize your data structure here. */
func Constructor() MagicDictionary {
 
}
 
 
/** Build a dictionary through a list of words */
func (this *MagicDictionary) BuildDict(dict []
string)  {
 
}
 
 
/** Returns if there is any word in the trie that 
equals to the given word after modifying exactly 
one character */
func (this *MagicDictionary) Search(word string) 
bool {
 
}
 ";"";"2020-03-25 15:18:48"
13468;1087;"Kotlin";"class MagicDictionary() {
 
    /** Initialize your data structure here. */
 
 
    /** Build a dictionary through a list of words 
*/
    fun buildDict(dict: Array<String>) {
 
    }
 
    /** Returns if there is any word in the trie 
that equals to the given word after modifying 
exactly one character */
    fun search(word: String): Boolean {
 
    }
 
}
 
/**
 * Your MagicDictionary object will be instantiated 
and called as such:
 * var obj = MagicDictionary()
 * obj.buildDict(dict)
 * var param_2 = obj.search(word)";"";"2020-03-25 15:18:48"
13469;1087;"Python3";"class MagicDictionary:
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
        
 
    def buildDict(self, dict: List[str]) -> None:
        """"""
        Build a dictionary through a list of words
        """"""
        
 
    def search(self, word: str) -> bool:
        """"""
        Returns if there is any word in the trie 
that equals to the given word after modifying 
exactly one character
        """"""
        
 
 
# Your MagicDictionary object will be instantiated 
and called as such:
# obj = MagicDictionary()";"";"2020-03-25 15:18:48"
13470;1087;"JavaScript";"/**
 * Initialize your data structure here.
 */
var MagicDictionary = function() {
 
};
 
/**
 * Build a dictionary through a list of words 
 * @param {string[]} dict
 * @return {void}
 */
MagicDictionary.prototype.buildDict = function(dict)
 {
 
};
 
/**
 * Returns if there is any word in the trie that 
equals to the given word after modifying exactly 
one character 
 * @param {string} word
 * @return {boolean}
 */
MagicDictionary.prototype.search = function(word) {
 ";"";"2020-03-25 15:18:48"
13471;1087;"PHP";"class MagicDictionary {";"";"2020-03-25 15:18:48"
13472;1087;"Swift";"class MagicDictionary {
 
    /** Initialize your data structure here. */
    init() {
        
    }
    
    /** Build a dictionary through a list of words 
*/
    func buildDict(_ dict: [String]) {
        
    }
    
    /** Returns if there is any word in the trie 
that equals to the given word after modifying 
exactly one character */
    func search(_ word: String) -> Bool {
        
    }
}
 
/**
 * Your MagicDictionary object will be instantiated 
and called as such:
 * let obj = MagicDictionary()
 * obj.buildDict(dict)";"";"2020-03-25 15:18:48"
13473;1087;"Ruby";"class MagicDictionary
 
=begin
    Initialize your data structure here.
=end
    def initialize()
 
    end
 
 
=begin
    Build a dictionary through a list of words
    :type dict: String[]
    :rtype: Void
=end
    def build_dict(dict)
 
    end
 
 
=begin
    Returns if there is any word in the trie that 
equals to the given word after modifying exactly 
one character
    :type word: String
    :rtype: Boolean";"";"2020-03-25 15:18:48"
13474;1087;"Python";"class MagicDictionary(object):
 
    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
        
 
    def buildDict(self, dict):
        """"""
        Build a dictionary through a list of words
        :type dict: List[str]
        :rtype: None
        """"""
        
 
    def search(self, word):
        """"""
        Returns if there is any word in the trie 
that equals to the given word after modifying 
exactly one character
        :type word: str
        :rtype: bool
        """"""
        
 ";"";"2020-03-25 15:18:48"
13475;1088;"C#";"public class Solution {
    public int CanCompleteCircuit(int[] gas, int[] 
cost) {
 
    }
}";"";"2020-03-25 15:18:48"
13476;1088;"Java";"class Solution {
    public int canCompleteCircuit(int[] gas, int[] 
cost) {
 
    }
}";"";"2020-03-25 15:18:48"
13477;1088;"C";"int canCompleteCircuit(int* gas, int gasSize, int* 
cost, int costSize){
 
}";"";"2020-03-25 15:18:48"
13478;1088;"Python3";"class Solution:
    def canCompleteCircuit(self, gas: List[int], 
cost: List[int]) -> int:";"";"2020-03-25 15:18:48"
13479;1088;"JavaScript";"/**
 * @param {number[]} gas
 * @param {number[]} cost
 * @return {number}
 */
var canCompleteCircuit = function(gas, cost) {
 
};";"";"2020-03-25 15:18:48"
13480;1088;"Go";"func canCompleteCircuit(gas []int, cost []int) int {";"";"2020-03-25 15:18:48"
13481;1088;"Swift";"class Solution {
    func canCompleteCircuit(_ gas: [Int], _ cost: 
[Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:48"
13482;1088;"Ruby";"# @param {Integer[]} gas
# @param {Integer[]} cost
# @return {Integer}
def can_complete_circuit(gas, cost)
 
end";"";"2020-03-25 15:18:48"
13483;1088;"Python";"class Solution(object):
    def canCompleteCircuit(self, gas, cost):
        """"""
        :type gas: List[int]
        :type cost: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:48"
13484;1089;"C#";"public class Solution {
    public int RemoveCoveredIntervals(int[][] 
intervals) {
 
    }
}";"";"2020-03-25 15:18:48"
13485;1089;"Java";"class Solution {
    public int removeCoveredIntervals(int[][] 
intervals) {
 
    }
}";"";"2020-03-25 15:18:48"
13486;1089;"Rust";"impl Solution {
    pub fn remove_covered_intervals(intervals: 
Vec<Vec<i32>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:48"
13487;1089;"C";"int removeCoveredIntervals(int** intervals, int 
intervalsSize, int* intervalsColSize){
 
}";"";"2020-03-25 15:18:48"
13488;1089;"Scala";"object Solution {
    def removeCoveredIntervals(intervals: Array
[Array[Int]]): Int = {
 
    }
}";"";"2020-03-25 15:18:48"
13489;1089;"Go";"func removeCoveredIntervals(intervals [][]int) int {
 
}";"";"2020-03-25 15:18:48"
13490;1089;"Kotlin";"class Solution {
    fun removeCoveredIntervals(intervals: 
Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:48"
13491;1089;"Python3";"class Solution:
    def removeCoveredIntervals(self, intervals: List
[List[int]]) -> int:";"";"2020-03-25 15:18:48"
13492;1089;"JavaScript";"/**
 * @param {number[][]} intervals
 * @return {number}
 */
var removeCoveredIntervals = function(intervals) {
 
};";"";"2020-03-25 15:18:48"
13493;1089;"PHP";"class Solution {";"";"2020-03-25 15:18:48"
13494;1089;"Swift";"class Solution {
    func removeCoveredIntervals(_ intervals: [[Int]]
) -> Int {
        
    }
}";"";"2020-03-25 15:18:48"
13495;1089;"Ruby";"# @param {Integer[][]} intervals
# @return {Integer}
def remove_covered_intervals(intervals)
 
end";"";"2020-03-25 15:18:48"
13496;1089;"Python";"class Solution(object):
    def removeCoveredIntervals(self, intervals):
        """"""
        :type intervals: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:48"
13497;1090;"C#";"public class Solution {
    public int MaxStudents(char[][] seats) {
 
    }
}";"";"2020-03-25 15:18:48"
13498;1090;"Java";"class Solution {
    public int maxStudents(char[][] seats) {
 
    }
}";"";"2020-03-25 15:18:48"
13499;1090;"C";"int maxStudents(char** seats, int seatsSize, int* 
seatsColSize){
 
}";"";"2020-03-25 15:18:48"
13500;1090;"Rust";"impl Solution {
    pub fn max_students(seats: Vec<Vec<char>>) -> 
i32 {
 
    }
}";"";"2020-03-25 15:18:48"
13501;1090;"Scala";"object Solution {
    def maxStudents(seats: Array[Array[Char]]): Int 
= {
 
    }
}";"";"2020-03-25 15:18:48"
13502;1090;"Go";"func maxStudents(seats [][]byte) int {
 
}";"";"2020-03-25 15:18:48"
13503;1090;"Kotlin";"class Solution {
    fun maxStudents(seats: Array<CharArray>): Int {
 
    }
}";"";"2020-03-25 15:18:48"
13504;1090;"Python3";"class Solution:
    def maxStudents(self, seats: List[List[str]]) 
-> int:";"";"2020-03-25 15:18:48"
13505;1090;"JavaScript";"/**
 * @param {character[][]} seats
 * @return {number}
 */
var maxStudents = function(seats) {
 
};";"";"2020-03-25 15:18:48"
13506;1090;"PHP";"class Solution {
 
    /**
     * @param String[][] $seats
     * @return Integer
     */
    function maxStudents($seats) {
 
    }
}";"";"2020-03-25 15:18:48"
13507;1090;"Swift";"class Solution {
    func maxStudents(_ seats: [[Character]]) -> Int 
{
        
    }
}";"";"2020-03-25 15:18:48"
13508;1090;"Ruby";"# @param {Character[][]} seats
# @return {Integer}
def max_students(seats)
 
end";"";"2020-03-25 15:18:48"
13509;1090;"Python";"class Solution(object):
    def maxStudents(self, seats):
        """"""
        :type seats: List[List[str]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:48"
13510;1091;"C#";"public class Solution {
    public int Clumsy(int N) {
 
    }
}";"";"2020-03-25 15:18:48"
13511;1091;"Java";"class Solution {
    public int clumsy(int N) {
 
    }
}";"";"2020-03-25 15:18:48"
13512;1091;"C";"int clumsy(int N){
 
}";"";"2020-03-25 15:18:48"
13513;1091;"Rust";"impl Solution {
    pub fn clumsy(n: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:48"
13514;1091;"Scala";"object Solution {
    def clumsy(N: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:48"
13515;1091;"Go";"func clumsy(N int) int {
 
}";"";"2020-03-25 15:18:48"
13516;1091;"Kotlin";"class Solution {
    fun clumsy(N: Int): Int {
 
    }
}";"";"2020-03-25 15:18:48"
13517;1091;"Python3";"class Solution:
    def clumsy(self, N: int) -> int:";"";"2020-03-25 15:18:48"
13518;1091;"JavaScript";"/**
 * @param {number} N
 * @return {number}
 */
var clumsy = function(N) {
 
};";"";"2020-03-25 15:18:48"
13519;1091;"PHP";"class Solution {
 
    /**
     * @param Integer $N
     * @return Integer
     */
    function clumsy($N) {
        
    }
}";"";"2020-03-25 15:18:48"
13520;1091;"Swift";"class Solution {
    func clumsy(_ N: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:48"
13521;1091;"Ruby";"# @param {Integer} n";"";"2020-03-25 15:18:48"
13522;1091;"Python";"class Solution(object):
    def clumsy(self, N):
        """"""
        :type N: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:48"
13523;1092;"C#";"public class Solution {
    public IList<string> LetterCombinations(string 
digits) {
 
    }
}";"";"2020-03-25 15:18:48"
13524;1092;"Java";"class Solution {
    public List<String> letterCombinations(String 
digits) {
 
    }
}";"";"2020-03-25 15:18:48"
13525;1092;"Rust";"impl Solution {
    pub fn letter_combinations(digits: String) -> 
Vec<String> {
        
    }
}";"";"2020-03-25 15:18:48"
13526;1092;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** letterCombinations(char * digits, int* 
returnSize){
 
}";"";"2020-03-25 15:18:48"
13527;1092;"Scala";"object Solution {
    def letterCombinations(digits: String): List
[String] = {
 
    }
}";"";"2020-03-25 15:18:48"
13528;1092;"Go";"func letterCombinations(digits string) []string {
 
}";"";"2020-03-25 15:18:48"
13529;1092;"Kotlin";"class Solution {
    fun letterCombinations(digits: String): 
List<String> {
 
    }
}";"";"2020-03-25 15:18:48"
13530;1092;"Python3";"class Solution:
    def letterCombinations(self, digits: str) -> 
List[str]:";"";"2020-03-25 15:18:48"
13531;1092;"JavaScript";"/**
 * @param {string} digits
 * @return {string[]}
 */
var letterCombinations = function(digits) {
 
};";"";"2020-03-25 15:18:48"
13532;1092;"PHP";"class Solution {";"";"2020-03-25 15:18:48"
13533;1092;"Swift";"class Solution {
    func letterCombinations(_ digits: String) -> 
[String] {
        
    }
}";"";"2020-03-25 15:18:48"
13534;1092;"Ruby";"# @param {String} digits
# @return {String[]}
def letter_combinations(digits)
 
end";"";"2020-03-25 15:18:48"
13535;1092;"Python";"class Solution(object):
    def letterCombinations(self, digits):
        """"""
        :type digits: str
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:48"
13536;1093;"C#";"public class Solution {
    public int MaxScoreWords(string[] words, char[] 
letters, int[] score) {
 
    }
}";"";"2020-03-25 15:18:48"
13537;1093;"Java";"class Solution {
    public int maxScoreWords(String[] words, char[] 
letters, int[] score) {
 
    }
}";"";"2020-03-25 15:18:48"
13538;1093;"Rust";"impl Solution {
    pub fn max_score_words(words: Vec<String>, 
letters: Vec<char>, score: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:48"
13539;1093;"C";"int maxScoreWords(char ** words, int wordsSize, 
char* letters, int lettersSize, int* score, int 
scoreSize){
 
}";"";"2020-03-25 15:18:48"
13540;1093;"Scala";"object Solution {
    def maxScoreWords(words: Array[String], 
letters: Array[Char], score: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:48"
13541;1093;"Go";"func maxScoreWords(words []string, letters []byte, 
score []int) int {
 
}";"";"2020-03-25 15:18:48"
13542;1093;"Kotlin";"class Solution {
    fun maxScoreWords(words: Array<String>, 
letters: CharArray, score: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:48"
13543;1093;"Python3";"class Solution:
    def maxScoreWords(self, words: List[str], 
letters: List[str], score: List[int]) -> int:";"";"2020-03-25 15:18:48"
13544;1093;"JavaScript";"/**
 * @param {string[]} words
 * @param {character[]} letters
 * @param {number[]} score
 * @return {number}
 */
var maxScoreWords = function(words, letters, score) 
{
 
};";"";"2020-03-25 15:18:48"
13545;1093;"PHP";"class Solution {
 
    /**
     * @param String[] $words
     * @param String[] $letters
     * @param Integer[] $score
     * @return Integer
     */
    function maxScoreWords($words, $letters, $score)
 {
 
    }
}";"";"2020-03-25 15:18:48"
13546;1093;"Swift";"class Solution {
    func maxScoreWords(_ words: [String], _ 
letters: [Character], _ score: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:48"
13547;1093;"Ruby";"# @param {String[]} words
# @param {Character[]} letters
# @param {Integer[]} score
# @return {Integer}
def max_score_words(words, letters, score)
 
end";"";"2020-03-25 15:18:48"
13548;1093;"Python";"class Solution(object):
    def maxScoreWords(self, words, letters, score):
        """"""
        :type words: List[str]
        :type letters: List[str]
        :type score: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:48"
13549;1094;"C#";"public class Solution {
    public int[] TwoSum(int[] numbers, int target) {
 
    }
}";"";"2020-03-25 15:18:48"
13550;1094;"Java";"class Solution {
    public int[] twoSum(int[] numbers, int target) {
 
    }
}";"";"2020-03-25 15:18:48"
13551;1094;"Rust";"impl Solution {
    pub fn two_sum(numbers: Vec<i32>, target: i32) 
-> Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:48"
13552;1094;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* twoSum(int* numbers, int numbersSize, int 
target, int* returnSize){
 
}";"";"2020-03-25 15:18:48"
13553;1094;"Scala";"object Solution {
    def twoSum(numbers: Array[Int], target: Int): 
Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:48"
13554;1094;"Go";"func twoSum(numbers []int, target int) []int {
 
}";"";"2020-03-25 15:18:48"
13555;1094;"Kotlin";"class Solution {
    fun twoSum(numbers: IntArray, target: Int): 
IntArray {
 
    }
}";"";"2020-03-25 15:18:48"
13556;1094;"Python3";"class Solution:
    def twoSum(self, numbers: List[int], target: 
int) -> List[int]:";"";"2020-03-25 15:18:48"
13557;1094;"JavaScript";"/**
 * @param {number[]} numbers
 * @param {number} target
 * @return {number[]}
 */
var twoSum = function(numbers, target) {
 
};";"";"2020-03-25 15:18:48"
13558;1094;"PHP";"class Solution {";"";"2020-03-25 15:18:48"
13559;1094;"Swift";"class Solution {
    func twoSum(_ numbers: [Int], _ target: Int) -> 
[Int] {
 
    }
}";"";"2020-03-25 15:18:48"
13560;1094;"Ruby";"# @param {Integer[]} numbers
# @param {Integer} target
# @return {Integer[]}
def two_sum(numbers, target)
 
end";"";"2020-03-25 15:18:48"
13561;1094;"Python";"class Solution(object):
    def twoSum(self, numbers, target):
        """"""
        :type numbers: List[int]
        :type target: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:48"
13562;1095;"C#";"public class Solution {
    public int MinSubArrayLen(int s, int[] nums) {
 
    }
}";"";"2020-03-25 15:18:48"
13563;1095;"Java";"class Solution {
    public int minSubArrayLen(int s, int[] nums) {
 
    }
}";"";"2020-03-25 15:18:48"
13564;1095;"C";"int minSubArrayLen(int s, int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:48"
13565;1095;"Rust";"impl Solution {
    pub fn min_sub_array_len(s: i32, nums: Vec<i32>)
 -> i32 {
 
    }
}";"";"2020-03-25 15:18:48"
13566;1095;"Scala";"object Solution {
    def minSubArrayLen(s: Int, nums: Array[Int]): 
Int = {
 
    }
}";"";"2020-03-25 15:18:48"
13567;1095;"Go";"func minSubArrayLen(s int, nums []int) int {
 
}";"";"2020-03-25 15:18:48"
13568;1095;"Kotlin";"class Solution {
    fun minSubArrayLen(s: Int, nums: IntArray): Int 
{
 
    }
}";"";"2020-03-25 15:18:48"
13569;1095;"Python3";"class Solution:
    def minSubArrayLen(self, s: int, nums: List[int]
) -> int:";"";"2020-03-25 15:18:48"
13570;1095;"JavaScript";"/**
 * @param {number} s
 * @param {number[]} nums
 * @return {number}
 */
var minSubArrayLen = function(s, nums) {
 
};";"";"2020-03-25 15:18:48"
13571;1095;"PHP";"class Solution {
 
    /**
     * @param Integer $s
     * @param Integer[] $nums
     * @return Integer
     */
    function minSubArrayLen($s, $nums) {
 
    }
}";"";"2020-03-25 15:18:48"
13572;1095;"Swift";"class Solution {
    func minSubArrayLen(_ s: Int, _ nums: [Int]) -> 
Int {
 
    }
}";"";"2020-03-25 15:18:48"
13573;1095;"Ruby";"# @param {Integer} s
# @param {Integer[]} nums
# @return {Integer}
def min_sub_array_len(s, nums)
 
end";"";"2020-03-25 15:18:48"
13574;1095;"Python";"class Solution(object):
    def minSubArrayLen(self, s, nums):
        """"""
        :type s: int
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:48"
13575;1096;"C#";"public class Solution {
    public int[][] Insert(int[][] intervals, int[] 
newInterval) {
 
    }
}";"";"2020-03-25 15:18:48"
13576;1096;"Java";"class Solution {
    public int[][] insert(int[][] intervals, int[] 
newInterval) {
 
    }
}";"";"2020-03-25 15:18:48"
13577;1096;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** insert(int** intervals, int intervalsSize, 
int* intervalsColSize, int* newInterval, int 
newIntervalSize, int* returnSize, int** 
returnColumnSizes){
 
}";"";"2020-03-25 15:18:48"
13578;1096;"Rust";"impl Solution {
    pub fn insert(intervals: Vec<Vec<i32>>, 
new_interval: Vec<i32>) -> Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:48"
13579;1096;"Scala";"object Solution {
    def insert(intervals: Array[Array[Int]], 
newInterval: Array[Int]): Array[Array[Int]] = {
 
    }
}";"";"2020-03-25 15:18:48"
13580;1096;"Go";"func insert(intervals [][]int, newInterval []int) []
[]int {
 
}";"";"2020-03-25 15:18:48"
13581;1096;"Kotlin";"class Solution {
    fun insert(intervals: Array<IntArray>, 
newInterval: IntArray): Array<IntArray> {
 
    }
}";"";"2020-03-25 15:18:48"
13582;1096;"Python3";"class Solution:
    def insert(self, intervals: List[List[int]], 
newInterval: List[int]) -> List[List[int]]:";"";"2020-03-25 15:18:48"
13583;1096;"JavaScript";"/**
 * @param {number[][]} intervals
 * @param {number[]} newInterval
 * @return {number[][]}
 */
var insert = function(intervals, newInterval) {
 
};";"";"2020-03-25 15:18:48"
13584;1096;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $intervals
     * @param Integer[] $newInterval
     * @return Integer[][]
     */
    function insert($intervals, $newInterval) {
        
    }
}";"";"2020-03-25 15:18:48"
13585;1096;"Swift";"class Solution {
    func insert(_ intervals: [[Int]], _ 
newInterval: [Int]) -> [[Int]] {
        
    }
}";"";"2020-03-25 15:18:48"
13586;1096;"Ruby";"# @param {Integer[][]} intervals";"";"2020-03-25 15:18:48"
13587;1096;"Python";"class Solution(object):
    def insert(self, intervals, newInterval):
        """"""
        :type intervals: List[List[int]]
        :type newInterval: List[int]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:48"
13588;1097;"C#";"public class Solution {
    public int FindSpecialInteger(int[] arr) {
 
    }
}";"";"2020-03-25 15:18:49"
13589;1097;"Java";"class Solution {
    public int findSpecialInteger(int[] arr) {
 
    }
}";"";"2020-03-25 15:18:49"
13590;1097;"C";"int findSpecialInteger(int* arr, int arrSize){
 
}";"";"2020-03-25 15:18:49"
13591;1097;"Rust";"impl Solution {
    pub fn find_special_integer(arr: Vec<i32>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:49"
13592;1097;"Scala";"object Solution {
    def findSpecialInteger(arr: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:49"
13593;1097;"Go";"func findSpecialInteger(arr []int) int {
 
}";"";"2020-03-25 15:18:49"
13594;1097;"Kotlin";"class Solution {
    fun findSpecialInteger(arr: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:49"
13595;1097;"Python3";"class Solution:
    def findSpecialInteger(self, arr: List[int]) -> 
int:";"";"2020-03-25 15:18:49"
13596;1097;"JavaScript";"/**
 * @param {number[]} arr
 * @return {number}
 */
var findSpecialInteger = function(arr) {
 
};";"";"2020-03-25 15:18:49"
13597;1097;"PHP";"class Solution {
 
    /**
     * @param Integer[] $arr
     * @return Integer
     */
    function findSpecialInteger($arr) {
        
    }
}";"";"2020-03-25 15:18:49"
13598;1097;"Swift";"class Solution {
    func findSpecialInteger(_ arr: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:49"
13599;1097;"Ruby";"# @param {Integer[]} arr
# @return {Integer}
def find_special_integer(arr)
 
end";"";"2020-03-25 15:18:49"
13600;1097;"Python";"class Solution(object):
    def findSpecialInteger(self, arr):
        """"""
        :type arr: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:49"
13601;1098;"C#";"public class Solution {
    public int NumSquarefulPerms(int[] A) {
 
    }
}";"";"2020-03-25 15:18:49"
13602;1098;"Java";"class Solution {
    public int numSquarefulPerms(int[] A) {
 
    }
}";"";"2020-03-25 15:18:49"
13603;1098;"C";"int numSquarefulPerms(int* A, int ASize){
 
}";"";"2020-03-25 15:18:49"
13604;1098;"Rust";"impl Solution {
    pub fn num_squareful_perms(a: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:49"
13605;1098;"Scala";"object Solution {
    def numSquarefulPerms(A: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:49"
13606;1098;"Go";"func numSquarefulPerms(A []int) int {
 
}";"";"2020-03-25 15:18:49"
13607;1098;"Kotlin";"class Solution {
    fun numSquarefulPerms(A: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:49"
13608;1098;"Python3";"class Solution:
    def numSquarefulPerms(self, A: List[int]) -> 
int:";"";"2020-03-25 15:18:49"
13609;1098;"JavaScript";"/**
 * @param {number[]} A
 * @return {number}
 */
var numSquarefulPerms = function(A) {
 
};";"";"2020-03-25 15:18:49"
13610;1098;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @return Integer
     */
    function numSquarefulPerms($A) {
        
    }
}";"";"2020-03-25 15:18:49"
13611;1098;"Swift";"class Solution {
    func numSquarefulPerms(_ A: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:49"
13612;1098;"Ruby";"# @param {Integer[]} a
# @return {Integer}
def num_squareful_perms(a)
 
end";"";"2020-03-25 15:18:49"
13613;1098;"Python";"class Solution(object):
    def numSquarefulPerms(self, A):
        """"""
        :type A: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:49"
13614;1099;"C#";"public class Solution {
    public int GetKth(int lo, int hi, int k) {
 
    }
}";"";"2020-03-25 15:18:49"
13615;1099;"Java";"class Solution {
    public int getKth(int lo, int hi, int k) {
 
    }
}";"";"2020-03-25 15:18:49"
13616;1099;"Rust";"impl Solution {
    pub fn get_kth(lo: i32, hi: i32, k: i32) -> i32 
{
 
    }
}";"";"2020-03-25 15:18:49"
13617;1099;"C";"int getKth(int lo, int hi, int k){
 
}";"";"2020-03-25 15:18:49"
13618;1099;"Scala";"object Solution {
    def getKth(lo: Int, hi: Int, k: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:49"
13619;1099;"Go";"func getKth(lo int, hi int, k int) int {
 
}";"";"2020-03-25 15:18:49"
13620;1099;"Kotlin";"class Solution {
    fun getKth(lo: Int, hi: Int, k: Int): Int {
 
    }
}";"";"2020-03-25 15:18:49"
13621;1099;"Python3";"class Solution:
    def getKth(self, lo: int, hi: int, k: int) -> 
int:";"";"2020-03-25 15:18:49"
13622;1099;"JavaScript";"/**
 * @param {number} lo
 * @param {number} hi
 * @param {number} k
 * @return {number}
 */
var getKth = function(lo, hi, k) {
 
};";"";"2020-03-25 15:18:49"
13623;1099;"PHP";"class Solution {
 
    /**
     * @param Integer $lo
     * @param Integer $hi
     * @param Integer $k
     * @return Integer
     */
    function getKth($lo, $hi, $k) {
 
    }
}";"";"2020-03-25 15:18:49"
13624;1099;"Swift";"class Solution {
    func getKth(_ lo: Int, _ hi: Int, _ k: Int) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:49"
13625;1099;"Ruby";"# @param {Integer} lo
# @param {Integer} hi
# @param {Integer} k
# @return {Integer}
def get_kth(lo, hi, k)
 
end";"";"2020-03-25 15:18:49"
13626;1099;"Python";"class Solution(object):
    def getKth(self, lo, hi, k):
        """"""
        :type lo: int
        :type hi: int
        :type k: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:49"
13627;1100;"C#";"public class Solution {
    public int[][] AllCellsDistOrder(int R, int C, 
int r0, int c0) {
 
    }
}";"";"2020-03-25 15:18:49"
13628;1100;"Java";"class Solution {
    public int[][] allCellsDistOrder(int R, int C, 
int r0, int c0) {
 
    }
}";"";"2020-03-25 15:18:49"
13629;1100;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** allCellsDistOrder(int R, int C, int r0, int 
c0, int* returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:49"
13630;1100;"Rust";"impl Solution {
    pub fn all_cells_dist_order(r: i32, c: i32, r0: 
i32, c0: i32) -> Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:49"
13631;1100;"Scala";"object Solution {
    def allCellsDistOrder(R: Int, C: Int, r0: Int, 
c0: Int): Array[Array[Int]] = {
 
    }
}";"";"2020-03-25 15:18:49"
13632;1100;"Go";"func allCellsDistOrder(R int, C int, r0 int, c0 int)
 [][]int {
 
}";"";"2020-03-25 15:18:49"
13633;1100;"Kotlin";"class Solution {
    fun allCellsDistOrder(R: Int, C: Int, r0: Int, 
c0: Int): Array<IntArray> {
 
    }
}";"";"2020-03-25 15:18:49"
13634;1100;"Python3";"class Solution:
    def allCellsDistOrder(self, R: int, C: int, r0: 
int, c0: int) -> List[List[int]]:";"";"2020-03-25 15:18:49"
13635;1100;"JavaScript";"/**
 * @param {number} R
 * @param {number} C
 * @param {number} r0
 * @param {number} c0
 * @return {number[][]}
 */
var allCellsDistOrder = function(R, C, r0, c0) {
 
};";"";"2020-03-25 15:18:49"
13636;1100;"PHP";"class Solution {
 
    /**
     * @param Integer $R
     * @param Integer $C
     * @param Integer $r0
     * @param Integer $c0
     * @return Integer[][]
     */
    function allCellsDistOrder($R, $C, $r0, $c0) {
        
    }
}";"";"2020-03-25 15:18:49"
13637;1100;"Swift";"class Solution {
    func allCellsDistOrder(_ R: Int, _ C: Int, _ 
r0: Int, _ c0: Int) -> [[Int]] {
        
    }
}";"";"2020-03-25 15:18:49"
13638;1100;"Ruby";"# @param {Integer} r";"";"2020-03-25 15:18:49"
13639;1100;"Python";"class Solution(object):
    def allCellsDistOrder(self, R, C, r0, c0):
        """"""
        :type R: int
        :type C: int
        :type r0: int
        :type c0: int
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:49"
13640;1101;"C#";"public class Solution {
    public IList<IList<int>> PairSums(int[] nums, 
int target) {
 
    }
}";"";"2020-03-25 15:18:49"
13641;1101;"Java";"class Solution {
    public List<List<Integer>> pairSums(int[] nums, 
int target) {
 
    }
}";"";"2020-03-25 15:18:49"
13642;1101;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** pairSums(int* nums, int numsSize, int target, 
int* returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:49"
13643;1101;"Rust";"impl Solution {
    pub fn pair_sums(nums: Vec<i32>, target: i32) 
-> Vec<Vec<i32>> {
 
    }
}";"";"2020-03-25 15:18:49"
13644;1101;"Scala";"object Solution {
    def pairSums(nums: Array[Int], target: Int): 
List[List[Int]] = {
 
    }
}";"";"2020-03-25 15:18:49"
13645;1101;"Go";"func pairSums(nums []int, target int) [][]int {
 
}";"";"2020-03-25 15:18:49"
13646;1101;"Kotlin";"class Solution {
    fun pairSums(nums: IntArray, target: Int): 
List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:49"
13647;1101;"Python3";"class Solution:
    def pairSums(self, nums: List[int], target: int)
 -> List[List[int]]:";"";"2020-03-25 15:18:49"
13648;1101;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[][]}
 */
var pairSums = function(nums, target) {
 
};";"";"2020-03-25 15:18:49"
13649;1101;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer $target
     * @return Integer[][]
     */
    function pairSums($nums, $target) {
 
    }
}";"";"2020-03-25 15:18:49"
13650;1101;"Swift";"class Solution {
    func pairSums(_ nums: [Int], _ target: Int) -> [
[Int]] {
 
    }
}";"";"2020-03-25 15:18:49"
13651;1101;"Ruby";"# @param {Integer[]} nums
# @param {Integer} target
# @return {Integer[][]}
def pair_sums(nums, target)
 
end";"";"2020-03-25 15:18:49"
13652;1101;"Python";"class Solution(object):
    def pairSums(self, nums, target):
        """"""
        :type nums: List[int]
        :type target: int
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:49"
13653;1102;"C#";"public class Solution {
    public int MajorityElement(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:49"
13654;1102;"Java";"class Solution {
    public int majorityElement(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:49"
13655;1102;"C";"int majorityElement(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:49"
13656;1102;"Rust";"impl Solution {
    pub fn majority_element(nums: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:49"
13657;1102;"Scala";"object Solution {
    def majorityElement(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:49"
13658;1102;"Go";"func majorityElement(nums []int) int {
 
}";"";"2020-03-25 15:18:49"
13659;1102;"Kotlin";"class Solution {
    fun majorityElement(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:49"
13660;1102;"Python3";"class Solution:
    def majorityElement(self, nums: List[int]) -> 
int:";"";"2020-03-25 15:18:49"
13661;1102;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var majorityElement = function(nums) {
 
};";"";"2020-03-25 15:18:49"
13662;1102;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function majorityElement($nums) {
 
    }
}";"";"2020-03-25 15:18:49"
13663;1102;"Swift";"class Solution {
    func majorityElement(_ nums: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:49"
13664;1102;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:18:49"
13665;1102;"Python";"class Solution(object):
    def majorityElement(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:49"
13666;1103;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<string> BinaryTreePaths(TreeNode 
root) {
 
    }
}";"";"2020-03-25 15:18:49"
13667;1103;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode 
root) {
 
    }
}";"";"2020-03-25 15:18:49"
13668;1103;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** binaryTreePaths(struct TreeNode* root, int* 
returnSize){
 
}";"";"2020-03-25 15:18:49"
13669;1103;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn binary_tree_paths(root: 
Option<Rc<RefCell<TreeNode>>>) -> Vec<String> {
 
    }
}";"";"2020-03-25 15:18:49"
13670;1103;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def binaryTreePaths(root: TreeNode): List
[String] = {
 
    }
}";"";"2020-03-25 15:18:49"
13671;1103;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func binaryTreePaths(root *TreeNode) []string {
 
}";"";"2020-03-25 15:18:49"
13672;1103;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun binaryTreePaths(root: TreeNode?): 
List<String> {
 
    }
}";"";"2020-03-25 15:18:49"
13673;1103;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def binaryTreePaths(self, root: TreeNode) -> 
List[str]:";"";"2020-03-25 15:18:49"
13674;1103;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {string[]}
 */
var binaryTreePaths = function(root) {
 
};";"";"2020-03-25 15:18:49"
13675;1103;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return String[]
     */
    function binaryTreePaths($root) {
 
    }
}";"";"2020-03-25 15:18:49"
13676;1103;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func binaryTreePaths(_ root: TreeNode?) -> 
[String] {
 
    }
}";"";"2020-03-25 15:18:49"
13677;1103;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {String[]}
def binary_tree_paths(root)
 
end";"";"2020-03-25 15:18:49"
13678;1103;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def binaryTreePaths(self, root):
        """"""
        :type root: TreeNode
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:49"
13679;1104;"C#";"public class Solution {
    public int ComputeArea(int A, int B, int C, int 
D, int E, int F, int G, int H) {
 
    }
}";"";"2020-03-25 15:18:49"
13680;1104;"Java";"class Solution {
    public int computeArea(int A, int B, int C, int 
D, int E, int F, int G, int H) {
 
    }
}";"";"2020-03-25 15:18:49"
13681;1104;"C";"int computeArea(int A, int B, int C, int D, int E, 
int F, int G, int H){
 
}";"";"2020-03-25 15:18:49"
13682;1104;"Rust";"impl Solution {
    pub fn compute_area(a: i32, b: i32, c: i32, d: 
i32, e: i32, f: i32, g: i32, h: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:49"
13683;1104;"Scala";"object Solution {
    def computeArea(A: Int, B: Int, C: Int, D: Int, 
E: Int, F: Int, G: Int, H: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:49"
13684;1104;"Go";"func computeArea(A int, B int, C int, D int, E int, 
F int, G int, H int) int {
 
}";"";"2020-03-25 15:18:49"
13685;1104;"Kotlin";"class Solution {
    fun computeArea(A: Int, B: Int, C: Int, D: Int, 
E: Int, F: Int, G: Int, H: Int): Int {
 
    }
}";"";"2020-03-25 15:18:49"
13686;1104;"Python3";"class Solution:
    def computeArea(self, A: int, B: int, C: int, 
D: int, E: int, F: int, G: int, H: int) -> int:";"";"2020-03-25 15:18:49"
13687;1104;"JavaScript";"/**
 * @param {number} A
 * @param {number} B
 * @param {number} C
 * @param {number} D
 * @param {number} E
 * @param {number} F
 * @param {number} G
 * @param {number} H
 * @return {number}
 */
var computeArea = function(A, B, C, D, E, F, G, H) {
 
};";"";"2020-03-25 15:18:49"
13688;1104;"PHP";"class Solution {
 
    /**
     * @param Integer $A
     * @param Integer $B
     * @param Integer $C
     * @param Integer $D
     * @param Integer $E
     * @param Integer $F
     * @param Integer $G
     * @param Integer $H
     * @return Integer
     */
    function computeArea($A, $B, $C, $D, $E, $F, $G,
 $H) {
 
    }
}";"";"2020-03-25 15:18:49"
13689;1104;"Swift";"class Solution {
    func computeArea(_ A: Int, _ B: Int, _ C: Int, 
_ D: Int, _ E: Int, _ F: Int, _ G: Int, _ H: Int) 
-> Int {
 
    }
}";"";"2020-03-25 15:18:49"
13690;1104;"Ruby";"# @param {Integer} a";"";"2020-03-25 15:18:49"
13691;1104;"Python";"class Solution(object):
    def computeArea(self, A, B, C, D, E, F, G, H):
        """"""
        :type A: int
        :type B: int
        :type C: int
        :type D: int
        :type E: int
        :type F: int
        :type G: int
        :type H: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:49"
13692;1105;"C#";"public class Solution {
    public bool CanIWin(int maxChoosableInteger, 
int desiredTotal) {
 
    }
}";"";"2020-03-25 15:18:49"
13693;1105;"Java";"class Solution {
    public boolean canIWin(int maxChoosableInteger, 
int desiredTotal) {
 
    }
}";"";"2020-03-25 15:18:49"
13694;1105;"Rust";"impl Solution {
    pub fn can_i_win(max_choosable_integer: i32, 
desired_total: i32) -> bool {
        
    }
}";"";"2020-03-25 15:18:49"
13695;1105;"C";"bool canIWin(int maxChoosableInteger, int 
desiredTotal){
 
}";"";"2020-03-25 15:18:49"
13696;1105;"Scala";"object Solution {
    def canIWin(maxChoosableInteger: Int, 
desiredTotal: Int): Boolean = {
 
    }
}";"";"2020-03-25 15:18:49"
13697;1105;"Go";"func canIWin(maxChoosableInteger int, desiredTotal 
int) bool {
 
}";"";"2020-03-25 15:18:49"
13698;1105;"Kotlin";"class Solution {
    fun canIWin(maxChoosableInteger: Int, 
desiredTotal: Int): Boolean {
 
    }
}";"";"2020-03-25 15:18:49"
13699;1105;"Python3";"class Solution:
    def canIWin(self, maxChoosableInteger: int, 
desiredTotal: int) -> bool:";"";"2020-03-25 15:18:49"
13700;1105;"JavaScript";"/**
 * @param {number} maxChoosableInteger
 * @param {number} desiredTotal
 * @return {boolean}
 */
var canIWin = function(maxChoosableInteger, 
desiredTotal) {
 
};";"";"2020-03-25 15:18:49"
13701;1105;"PHP";"class Solution {
 
    /**
     * @param Integer $maxChoosableInteger
     * @param Integer $desiredTotal
     * @return Boolean
     */
    function canIWin($maxChoosableInteger, 
$desiredTotal) {
        
    }
}";"";"2020-03-25 15:18:49"
13702;1105;"Swift";"class Solution {
    func canIWin(_ maxChoosableInteger: Int, _ 
desiredTotal: Int) -> Bool {
        
    }
}";"";"2020-03-25 15:18:49"
13703;1105;"Ruby";"# @param {Integer} max_choosable_integer
# @param {Integer} desired_total
# @return {Boolean}
def can_i_win(max_choosable_integer, desired_total)
 
end";"";"2020-03-25 15:18:49"
13704;1105;"Python";"class Solution(object):
    def canIWin(self, maxChoosableInteger, 
desiredTotal):
        """"""
        :type maxChoosableInteger: int
        :type desiredTotal: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:49"
13705;1106;"C#";"public class Cashier {
 
    public Cashier(int n, int discount, int[] 
products, int[] prices) {
 
    }
    
    public double GetBill(int[] product, int[] 
amount) {
 
    }
}
 
/**
 * Your Cashier object will be instantiated and 
called as such:
 * Cashier obj = new Cashier(n, discount, products, 
prices);
 * double param_1 = obj.GetBill(product,amount);
 */";"";"2020-03-25 15:18:49"
13706;1106;"Java";"class Cashier {
 
    public Cashier(int n, int discount, int[] 
products, int[] prices) {
 
    }
    
    public double getBill(int[] product, int[] 
amount) {
 
    }
}
 
/**
 * Your Cashier object will be instantiated and 
called as such:
 * Cashier obj = new Cashier(n, discount, products, 
prices);
 * double param_1 = obj.getBill(product,amount);
 */";"";"2020-03-25 15:18:49"
13707;1106;"Rust";"struct Cashier {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl Cashier {
 
    fn new(n: i32, discount: i32, products: 
Vec<i32>, prices: Vec<i32>) -> Self {
 
    }
    
    fn get_bill(&self, product: Vec<i32>, amount: 
Vec<i32>) -> f64 {
 
    }
}
 
/**
 * Your Cashier object will be instantiated and ";"";"2020-03-25 15:18:49"
13708;1106;"C";"typedef struct {
 
} Cashier;
 
 
Cashier* cashierCreate(int n, int discount, int* 
products, int productsSize, int* prices, int 
pricesSize) {
 
}
 
double cashierGetBill(Cashier* obj, int* product, 
int productSize, int* amount, int amountSize) {
 
}
 
void cashierFree(Cashier* obj) {
 
}
 
/**
 * Your Cashier struct will be instantiated and 
called as such:
 * Cashier* obj = cashierCreate(n, discount, 
products, productsSize, prices, pricesSize);
 * double param_1 = cashierGetBill(obj, product, ";"";"2020-03-25 15:18:49"
13709;1106;"Scala";"class Cashier(_n: Int, _discount: Int, _products: 
Array[Int], _prices: Array[Int]) {
 
    def getBill(product: Array[Int], amount: Array
[Int]): Double = {
 
    }
 
}
 
/**
 * Your Cashier object will be instantiated and 
called as such:
 * var obj = new Cashier(n, discount, products, 
prices)
 * var param_1 = obj.getBill(product,amount)
 */";"";"2020-03-25 15:18:49"
13710;1106;"Go";"type Cashier struct {
 
}
 
 
func Constructor(n int, discount int, products []
int, prices []int) Cashier {
 
}
 
 
func (this *Cashier) GetBill(product []int, amount 
[]int) float64 {
 
}
 
 
/**
 * Your Cashier object will be instantiated and 
called as such:
 * obj := Constructor(n, discount, products, prices)
;
 * param_1 := obj.GetBill(product,amount);
 */";"";"2020-03-25 15:18:49"
13711;1106;"Kotlin";"class Cashier(n: Int, discount: Int, products: 
IntArray, prices: IntArray) {
 
    fun getBill(product: IntArray, amount: IntArray)
: Double {
 
    }
 
}
 
/**
 * Your Cashier object will be instantiated and 
called as such:
 * var obj = Cashier(n, discount, products, prices)
 * var param_1 = obj.getBill(product,amount)
 */";"";"2020-03-25 15:18:49"
13712;1106;"Python3";"class Cashier:
 
    def __init__(self, n: int, discount: int, 
products: List[int], prices: List[int]):
 
 
    def getBill(self, product: List[int], amount: 
List[int]) -> float:
 
 
 
# Your Cashier object will be instantiated and 
called as such:
# obj = Cashier(n, discount, products, prices)
# param_1 = obj.getBill(product,amount)";"";"2020-03-25 15:18:49"
13713;1106;"JavaScript";"/**
 * @param {number} n
 * @param {number} discount
 * @param {number[]} products
 * @param {number[]} prices
 */
var Cashier = function(n, discount, products, 
prices) {
 
};
 
/** 
 * @param {number[]} product 
 * @param {number[]} amount
 * @return {number}
 */
Cashier.prototype.getBill = function(product, 
amount) {
 
};
 
/**
 * Your Cashier object will be instantiated and 
called as such:
 * var obj = new Cashier(n, discount, products, 
prices)";"";"2020-03-25 15:18:49"
13714;1106;"PHP";"class Cashier {";"";"2020-03-25 15:18:49"
13715;1106;"Swift";"class Cashier {
 
    init(_ n: Int, _ discount: Int, _ products: 
[Int], _ prices: [Int]) {
 
    }
    
    func getBill(_ product: [Int], _ amount: [Int]) 
-> Double {
 
    }
}
 
/**
 * Your Cashier object will be instantiated and 
called as such:
 * let obj = Cashier(n, discount, products, prices)
 * let ret_1: Double = obj.getBill(product, amount)
 */";"";"2020-03-25 15:18:49"
13716;1106;"Ruby";"class Cashier
 
=begin
    :type n: Integer
    :type discount: Integer
    :type products: Integer[]
    :type prices: Integer[]
=end
    def initialize(n, discount, products, prices)
 
    end
 
 
=begin
    :type product: Integer[]
    :type amount: Integer[]
    :rtype: Float
=end
    def get_bill(product, amount)
 
    end
 
 
end
 
# Your Cashier object will be instantiated and ";"";"2020-03-25 15:18:49"
13717;1106;"Python";"class Cashier(object):
 
    def __init__(self, n, discount, products, 
prices):
        """"""
        :type n: int
        :type discount: int
        :type products: List[int]
        :type prices: List[int]
        """"""
 
 
    def getBill(self, product, amount):
        """"""
        :type product: List[int]
        :type amount: List[int]
        :rtype: float
        """"""
 
 
 
# Your Cashier object will be instantiated and 
called as such:
# obj = Cashier(n, discount, products, prices)
# param_1 = obj.getBill(product,amount)";"";"2020-03-25 15:18:49"
13718;1107;"C#";"public class Solution {
    public int RemoveBoxes(int[] boxes) {
 
    }
}";"";"2020-03-25 15:18:49"
13719;1107;"Java";"class Solution {
    public int removeBoxes(int[] boxes) {
 
    }
}";"";"2020-03-25 15:18:49"
13720;1107;"C";"int removeBoxes(int* boxes, int boxesSize){
 
}";"";"2020-03-25 15:18:49"
13721;1107;"Rust";"impl Solution {
    pub fn remove_boxes(boxes: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:49"
13722;1107;"Scala";"object Solution {
    def removeBoxes(boxes: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:49"
13723;1107;"Go";"func removeBoxes(boxes []int) int {
 
}";"";"2020-03-25 15:18:49"
13724;1107;"Kotlin";"class Solution {
    fun removeBoxes(boxes: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:49"
13725;1107;"Python3";"class Solution:
    def removeBoxes(self, boxes: List[int]) -> int:";"";"2020-03-25 15:18:49"
13726;1107;"JavaScript";"/**
 * @param {number[]} boxes
 * @return {number}
 */
var removeBoxes = function(boxes) {
 
};";"";"2020-03-25 15:18:49"
13727;1107;"PHP";"class Solution {
 
    /**
     * @param Integer[] $boxes
     * @return Integer
     */
    function removeBoxes($boxes) {
        
    }
}";"";"2020-03-25 15:18:49"
13728;1107;"Swift";"class Solution {
    func removeBoxes(_ boxes: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:49"
13729;1107;"Ruby";"# @param {Integer[]} boxes
# @return {Integer}
def remove_boxes(boxes)
 
end";"";"2020-03-25 15:18:49"
13730;1107;"Python";"class Solution(object):
    def removeBoxes(self, boxes):
        """"""
        :type boxes: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:49"
13731;1108;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode ConstructFromPrePost(int[] pre, 
int[] post) {
 
    }
}";"";"2020-03-25 15:18:49"
13732;1108;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode constructFromPrePost(int[] pre, 
int[] post) {
 
    }
}";"";"2020-03-25 15:18:49"
13733;1108;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* constructFromPrePost(int* pre, int 
preSize, int* post, int postSize){
 
}";"";"2020-03-25 15:18:49"
13734;1108;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn construct_from_pre_post(pre: Vec<i32>, 
post: Vec<i32>) -> Option<Rc<RefCell<TreeNode>>> {
        
    }
}";"";"2020-03-25 15:18:49"
13735;1108;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def constructFromPrePost(pre: Array[Int], post: 
Array[Int]): TreeNode = {
 
    }
}";"";"2020-03-25 15:18:49"
13736;1108;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func constructFromPrePost(pre []int, post []int) 
*TreeNode {
 
}";"";"2020-03-25 15:18:49"
13737;1108;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun constructFromPrePost(pre: IntArray, post: 
IntArray): TreeNode? {
 
    }
}";"";"2020-03-25 15:18:49"
13738;1108;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def constructFromPrePost(self, pre: List[int], 
post: List[int]) -> TreeNode:";"";"2020-03-25 15:18:49"
13739;1108;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {number[]} pre
 * @param {number[]} post
 * @return {TreeNode}
 */
var constructFromPrePost = function(pre, post) {
 
};";"";"2020-03-25 15:18:49"
13740;1108;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param Integer[] $pre
     * @param Integer[] $post
     * @return TreeNode
     */
    function constructFromPrePost($pre, $post) {
        
    }
}";"";"2020-03-25 15:18:49"
13741;1108;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func constructFromPrePost(_ pre: [Int], _ post: 
[Int]) -> TreeNode? {
        
    }
}";"";"2020-03-25 15:18:49"
13742;1108;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:49"
13743;1108;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def constructFromPrePost(self, pre, post):
        """"""
        :type pre: List[int]
        :type post: List[int]
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:49"
13744;1109;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int DiameterOfBinaryTree(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:49"
13745;1109;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int diameterOfBinaryTree(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:49"
13746;1109;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn diameter_of_binary_tree(root: 
Option<Rc<RefCell<TreeNode>>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:49"
13747;1109;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int diameterOfBinaryTree(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:49"
13748;1109;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def diameterOfBinaryTree(root: TreeNode): Int = 
{
 
    }
}";"";"2020-03-25 15:18:49"
13749;1109;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func diameterOfBinaryTree(root *TreeNode) int {
 
}";"";"2020-03-25 15:18:49"
13750;1109;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun diameterOfBinaryTree(root: TreeNode?): Int {
 
    }
}";"";"2020-03-25 15:18:49"
13751;1109;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def diameterOfBinaryTree(self, root: TreeNode) 
-> int:";"";"2020-03-25 15:18:49"
13752;1109;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var diameterOfBinaryTree = function(root) {
 
};";"";"2020-03-25 15:18:49"
13753;1109;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer
     */
    function diameterOfBinaryTree($root) {
        
    }
}";"";"2020-03-25 15:18:49"
13754;1109;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func diameterOfBinaryTree(_ root: TreeNode?) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:49"
13755;1109;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer}
def diameter_of_binary_tree(root)
 
end";"";"2020-03-25 15:18:49"
13756;1109;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def diameterOfBinaryTree(self, root):
        """"""
        :type root: TreeNode
        :rtype: int
        """"""";"";"2020-03-25 15:18:49"
13757;1110;"C#";"public class Solution {
    public IList<int> GrayCode(int n) {
 
    }
}";"";"2020-03-25 15:18:49"
13758;1110;"Java";"class Solution {
    public List<Integer> grayCode(int n) {
 
    }
}";"";"2020-03-25 15:18:49"
13759;1110;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* grayCode(int n, int* returnSize){
 
}";"";"2020-03-25 15:18:49"
13760;1110;"Rust";"impl Solution {
    pub fn gray_code(n: i32) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:49"
13761;1110;"Scala";"object Solution {
    def grayCode(n: Int): List[Int] = {
 
    }
}";"";"2020-03-25 15:18:49"
13762;1110;"Go";"func grayCode(n int) []int {
 
}";"";"2020-03-25 15:18:49"
13763;1110;"Kotlin";"class Solution {
    fun grayCode(n: Int): List<Int> {
 
    }
}";"";"2020-03-25 15:18:49"
13764;1110;"Python3";"class Solution:
    def grayCode(self, n: int) -> List[int]:";"";"2020-03-25 15:18:49"
13765;1110;"JavaScript";"/**
 * @param {number} n
 * @return {number[]}
 */
var grayCode = function(n) {
 
};";"";"2020-03-25 15:18:49"
13766;1110;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer[]
     */
    function grayCode($n) {
        
    }
}";"";"2020-03-25 15:18:49"
13767;1110;"Swift";"class Solution {
    func grayCode(_ n: Int) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:49"
13768;1110;"Ruby";"# @param {Integer} n";"";"2020-03-25 15:18:49"
13769;1110;"Python";"class Solution(object):
    def grayCode(self, n):
        """"""
        :type n: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:49"
13770;1111;"C#";"public class Solution {
    public int[] BeautifulArray(int N) {
 
    }
}";"";"2020-03-25 15:18:49"
13771;1111;"Java";"class Solution {
    public int[] beautifulArray(int N) {
 
    }
}";"";"2020-03-25 15:18:49"
13772;1111;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* beautifulArray(int N, int* returnSize){
 
}";"";"2020-03-25 15:18:49"
13773;1111;"Rust";"impl Solution {
    pub fn beautiful_array(n: i32) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:49"
13774;1111;"Scala";"object Solution {
    def beautifulArray(N: Int): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:49"
13775;1111;"Go";"func beautifulArray(N int) []int {
 
}";"";"2020-03-25 15:18:49"
13776;1111;"Kotlin";"class Solution {
    fun beautifulArray(N: Int): IntArray {
 
    }
}";"";"2020-03-25 15:18:49"
13777;1111;"Python3";"class Solution:
    def beautifulArray(self, N: int) -> List[int]:";"";"2020-03-25 15:18:49"
13778;1111;"JavaScript";"/**
 * @param {number} N
 * @return {number[]}
 */
var beautifulArray = function(N) {
 
};";"";"2020-03-25 15:18:49"
13779;1111;"PHP";"class Solution {
 
    /**
     * @param Integer $N
     * @return Integer[]
     */
    function beautifulArray($N) {
        
    }
}";"";"2020-03-25 15:18:49"
13780;1111;"Swift";"class Solution {
    func beautifulArray(_ N: Int) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:49"
13781;1111;"Ruby";"# @param {Integer} n";"";"2020-03-25 15:18:49"
13782;1111;"Python";"class Solution(object):
    def beautifulArray(self, N):
        """"""
        :type N: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:49"
13783;1112;"C#";"public class Solution {
    public int MaxJumps(int[] arr, int d) {
        
    }
}";"";"2020-03-25 15:18:49"
13784;1112;"Java";"class Solution {
    public int maxJumps(int[] arr, int d) {
 
    }
}";"";"2020-03-25 15:18:49"
13785;1112;"Rust";"impl Solution {
    pub fn max_jumps(arr: Vec<i32>, d: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:49"
13786;1112;"C";"int maxJumps(int* arr, int arrSize, int d){
 
}";"";"2020-03-25 15:18:49"
13787;1112;"Scala";"object Solution {
    def maxJumps(arr: Array[Int], d: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:49"
13788;1112;"Go";"func maxJumps(arr []int, d int) int {
 
}";"";"2020-03-25 15:18:49"
13789;1112;"Kotlin";"class Solution {
    fun maxJumps(arr: IntArray, d: Int): Int {
 
    }
}";"";"2020-03-25 15:18:49"
13790;1112;"Python3";"class Solution:
    def maxJumps(self, arr: List[int], d: int) -> 
int:";"";"2020-03-25 15:18:49"
13791;1112;"JavaScript";"/**
 * @param {number[]} arr
 * @param {number} d
 * @return {number}
 */
var maxJumps = function(arr, d) {
    
};";"";"2020-03-25 15:18:49"
13792;1112;"PHP";"class Solution {
 
    /**
     * @param Integer[] $arr
     * @param Integer $d
     * @return Integer
     */
    function maxJumps($arr, $d) {
 
    }
}";"";"2020-03-25 15:18:49"
13793;1112;"Swift";"class Solution {
    func maxJumps(_ arr: [Int], _ d: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:49"
13794;1112;"Ruby";"# @param {Integer[]} arr
# @param {Integer} d
# @return {Integer}
def max_jumps(arr, d)
    
end";"";"2020-03-25 15:18:49"
13795;1112;"Python";"class Solution(object):
    def maxJumps(self, arr, d):
        """"""
        :type arr: List[int]
        :type d: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:49"
13796;1113;"C#";"public class Solution {
    public bool CanReorderDoubled(int[] A) {
 
    }
}";"";"2020-03-25 15:18:49"
13797;1113;"Java";"class Solution {
    public boolean canReorderDoubled(int[] A) {
 
    }
}";"";"2020-03-25 15:18:49"
13798;1113;"Rust";"impl Solution {
    pub fn can_reorder_doubled(a: Vec<i32>) -> bool 
{
        
    }
}";"";"2020-03-25 15:18:49"
13799;1113;"C";"bool canReorderDoubled(int* A, int ASize){
 
}";"";"2020-03-25 15:18:49"
13800;1113;"Scala";"object Solution {
    def canReorderDoubled(A: Array[Int]): Boolean = 
{
 
    }
}";"";"2020-03-25 15:18:49"
13801;1113;"Go";"func canReorderDoubled(A []int) bool {
 
}";"";"2020-03-25 15:18:49"
13802;1113;"Kotlin";"class Solution {
    fun canReorderDoubled(A: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:49"
13803;1113;"Python3";"class Solution:
    def canReorderDoubled(self, A: List[int]) -> 
bool:";"";"2020-03-25 15:18:49"
13804;1113;"JavaScript";"/**
 * @param {number[]} A
 * @return {boolean}
 */
var canReorderDoubled = function(A) {
 
};";"";"2020-03-25 15:18:49"
13805;1113;"PHP";"class Solution {";"";"2020-03-25 15:18:49"
13806;1113;"Swift";"class Solution {
    func canReorderDoubled(_ A: [Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:49"
13807;1113;"Ruby";"# @param {Integer[]} a
# @return {Boolean}
def can_reorder_doubled(a)
 
end";"";"2020-03-25 15:18:49"
13808;1113;"Python";"class Solution(object):
    def canReorderDoubled(self, A):
        """"""
        :type A: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:49"
13809;1114;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode GetIntersectionNode(ListNode 
headA, ListNode headB) {
        
    }
}";"";"2020-03-25 15:18:49"
13810;1114;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode 
headA, ListNode headB) {
        
    }
}";"";"2020-03-25 15:18:49"
13811;1114;"C++";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, 
ListNode *headB) {
        
    }
};";"";"2020-03-25 15:18:49"
13812;1114;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode *getIntersectionNode(struct 
ListNode *headA, struct ListNode *headB) {
    
}";"";"2020-03-25 15:18:49"
13813;1114;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def getIntersectionNode(self, headA: ListNode, 
headB: ListNode) -> ListNode:";"";"2020-03-25 15:18:49"
13814;1114;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
 
/**
 * @param {ListNode} headA
 * @param {ListNode} headB
 * @return {ListNode}
 */
var getIntersectionNode = function(headA, headB) {
    
};";"";"2020-03-25 15:18:49"
13815;1114;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func getIntersectionNode(headA, headB *ListNode) 
*ListNode {
    
}";"";"2020-03-25 15:18:49"
13816;1114;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """"""
        :type head1, head1: ListNode
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:49"
13817;1115;"Java";"class Solution {
    public int[] bonus(int n, int[][] leadership, 
int[][] operations) {
 
    }
}";"";"2020-03-25 15:18:50"
13818;1115;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* bonus(int n, int** leadership, int 
leadershipSize, int* leadershipColSize, int** 
operations, int operationsSize, int* 
operationsColSize, int* returnSize){
 
}";"";"2020-03-25 15:18:50"
13819;1115;"Python3";"class Solution:
    def bonus(self, n: int, leadership: List[List
[int]], operations: List[List[int]]) -> List[int]:";"";"2020-03-25 15:18:50"
13820;1115;"JavaScript";"/**
 * @param {number} n
 * @param {number[][]} leadership
 * @param {number[][]} operations
 * @return {number[]}
 */
var bonus = function(n, leadership, operations) {
 
};";"";"2020-03-25 15:18:50"
13821;1115;"Go";"func bonus(n int, leadership [][]int, operations []";"";"2020-03-25 15:18:50"
13822;1115;"Python";"class Solution(object):
    def bonus(self, n, leadership, operations):
        """"""
        :type n: int
        :type leadership: List[List[int]]
        :type operations: List[List[int]]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:50"
13823;1116;"C#";"public class Solution {
    public int MinMalwareSpread(int[][] graph, int[]
 initial) {
 
    }
}";"";"2020-03-25 15:18:50"
13824;1116;"Java";"class Solution {
    public int minMalwareSpread(int[][] graph, int[]
 initial) {
 
    }
}";"";"2020-03-25 15:18:50"
13825;1116;"C";"int minMalwareSpread(int** graph, int graphSize, 
int* graphColSize, int* initial, int initialSize){
 
}";"";"2020-03-25 15:18:50"
13826;1116;"Rust";"impl Solution {
    pub fn min_malware_spread(graph: Vec<Vec<i32>>, 
initial: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:50"
13827;1116;"Scala";"object Solution {
    def minMalwareSpread(graph: Array[Array[Int]], 
initial: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:50"
13828;1116;"Go";"func minMalwareSpread(graph [][]int, initial []int) 
int {
 
}";"";"2020-03-25 15:18:50"
13829;1116;"Kotlin";"class Solution {
    fun minMalwareSpread(graph: Array<IntArray>, 
initial: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:50"
13830;1116;"Python3";"class Solution:
    def minMalwareSpread(self, graph: List[List[int]
], initial: List[int]) -> int:";"";"2020-03-25 15:18:50"
13831;1116;"JavaScript";"/**
 * @param {number[][]} graph
 * @param {number[]} initial
 * @return {number}
 */
var minMalwareSpread = function(graph, initial) {
 
};";"";"2020-03-25 15:18:50"
13832;1116;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $graph
     * @param Integer[] $initial
     * @return Integer
     */
    function minMalwareSpread($graph, $initial) {
        
    }
}";"";"2020-03-25 15:18:50"
13833;1116;"Swift";"class Solution {
    func minMalwareSpread(_ graph: [[Int]], _ 
initial: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:50"
13834;1116;"Ruby";"# @param {Integer[][]} graph";"";"2020-03-25 15:18:50"
13835;1116;"Python";"class Solution(object):
    def minMalwareSpread(self, graph, initial):
        """"""
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:50"
13836;1117;"C#";"public class Solution {
    public int WaysToStep(int n) {
 
    }
}";"";"2020-03-25 15:18:50"
13837;1117;"Java";"class Solution {
    public int waysToStep(int n) {
 
    }
}";"";"2020-03-25 15:18:50"
13838;1117;"C";"int waysToStep(int n){
 
}";"";"2020-03-25 15:18:50"
13839;1117;"Rust";"impl Solution {
    pub fn ways_to_step(n: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:50"
13840;1117;"Scala";"object Solution {
    def waysToStep(n: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:50"
13841;1117;"Go";"func waysToStep(n int) int {
 
}";"";"2020-03-25 15:18:50"
13842;1117;"Kotlin";"class Solution {
    fun waysToStep(n: Int): Int {
 
    }
}";"";"2020-03-25 15:18:50"
13843;1117;"Python3";"class Solution:
    def waysToStep(self, n: int) -> int:";"";"2020-03-25 15:18:50"
13844;1117;"JavaScript";"/**
 * @param {number} n
 * @return {number}
 */
var waysToStep = function(n) {
 
};";"";"2020-03-25 15:18:50"
13845;1117;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return Integer
     */
    function waysToStep($n) {
 
    }
}";"";"2020-03-25 15:18:50"
13846;1117;"Swift";"class Solution {
    func waysToStep(_ n: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:50"
13847;1117;"Ruby";"# @param {Integer} n
# @return {Integer}
def ways_to_step(n)
 
end";"";"2020-03-25 15:18:50"
13848;1117;"Python";"class Solution(object):
    def waysToStep(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:50"
13849;1118;"C#";"public class Solution {
    public int Search(int[] nums, int target) {
 
    }
}";"";"2020-03-25 15:18:50"
13850;1118;"Java";"class Solution {
    public int search(int[] nums, int target) {
 
    }
}";"";"2020-03-25 15:18:50"
13851;1118;"C";"int search(int* nums, int numsSize, int target){
 
}";"";"2020-03-25 15:18:50"
13852;1118;"Rust";"impl Solution {
    pub fn search(nums: Vec<i32>, target: i32) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:50"
13853;1118;"Scala";"object Solution {
    def search(nums: Array[Int], target: Int): Int 
= {
 
    }
}";"";"2020-03-25 15:18:50"
13854;1118;"Go";"func search(nums []int, target int) int {
 
}";"";"2020-03-25 15:18:50"
13855;1118;"Kotlin";"class Solution {
    fun search(nums: IntArray, target: Int): Int {
 
    }
}";"";"2020-03-25 15:18:50"
13856;1118;"Python3";"class Solution:
    def search(self, nums: List[int], target: int) 
-> int:";"";"2020-03-25 15:18:50"
13857;1118;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */
var search = function(nums, target) {
 
};";"";"2020-03-25 15:18:50"
13858;1118;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @param Integer $target
     * @return Integer
     */
    function search($nums, $target) {
        
    }
}";"";"2020-03-25 15:18:50"
13859;1118;"Swift";"class Solution {
    func search(_ nums: [Int], _ target: Int) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:50"
13860;1118;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:18:50"
13861;1118;"Python";"class Solution(object):
    def search(self, nums, target):
        """"""
        :type nums: List[int]
        :type target: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:50"
13862;1119;"C#";"public class Solution {
    public int PeakIndexInMountainArray(int[] A) {
 
    }
}";"";"2020-03-25 15:18:50"
13863;1119;"Java";"class Solution {
    public int peakIndexInMountainArray(int[] A) {
 
    }
}";"";"2020-03-25 15:18:50"
13864;1119;"C";"int peakIndexInMountainArray(int* A, int ASize){
 
}";"";"2020-03-25 15:18:50"
13865;1119;"Scala";"object Solution {
    def peakIndexInMountainArray(A: Array[Int]): 
Int = {
 
    }
}";"";"2020-03-25 15:18:50"
13866;1119;"Python3";"class Solution:
    def peakIndexInMountainArray(self, A: List[int])
 -> int:";"";"2020-03-25 15:18:50"
13867;1119;"JavaScript";"/**
 * @param {number[]} A
 * @return {number}
 */
var peakIndexInMountainArray = function(A) {
 
};";"";"2020-03-25 15:18:50"
13868;1119;"Go";"func peakIndexInMountainArray(A []int) int {
 
}";"";"2020-03-25 15:18:50"
13869;1119;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @return Integer
     */
    function peakIndexInMountainArray($A) {
        
    }
}";"";"2020-03-25 15:18:50"
13870;1119;"Swift";"class Solution {
    func peakIndexInMountainArray(_ A: [Int]) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:50"
13871;1119;"Ruby";"# @param {Integer[]} a";"";"2020-03-25 15:18:50"
13872;1119;"Python";"class Solution(object):
    def peakIndexInMountainArray(self, A):
        """"""
        :type A: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:50"
13873;1119;"Kotlin";"class Solution {
    fun peakIndexInMountainArray(A: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:50"
13874;1120;"C#";"public class Solution {
    public int[] PrisonAfterNDays(int[] cells, int 
N) {
 
    }
}";"";"2020-03-25 15:18:50"
13875;1120;"Java";"class Solution {
    public int[] prisonAfterNDays(int[] cells, int 
N) {
 
    }
}";"";"2020-03-25 15:18:50"
13876;1120;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* prisonAfterNDays(int* cells, int cellsSize, 
int N, int* returnSize){
 
}";"";"2020-03-25 15:18:50"
13877;1120;"Rust";"impl Solution {
    pub fn prison_after_n_days(cells: Vec<i32>, n: 
i32) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:50"
13878;1120;"Scala";"object Solution {
    def prisonAfterNDays(cells: Array[Int], N: Int)
: Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:50"
13879;1120;"Go";"func prisonAfterNDays(cells []int, N int) []int {
 
}";"";"2020-03-25 15:18:50"
13880;1120;"Kotlin";"class Solution {
    fun prisonAfterNDays(cells: IntArray, N: Int): 
IntArray {
 
    }
}";"";"2020-03-25 15:18:50"
13881;1120;"Python3";"class Solution:
    def prisonAfterNDays(self, cells: List[int], N: 
int) -> List[int]:";"";"2020-03-25 15:18:50"
13882;1120;"JavaScript";"/**
 * @param {number[]} cells
 * @param {number} N
 * @return {number[]}
 */
var prisonAfterNDays = function(cells, N) {
 
};";"";"2020-03-25 15:18:50"
13883;1120;"PHP";"class Solution {
 
    /**
     * @param Integer[] $cells
     * @param Integer $N
     * @return Integer[]
     */
    function prisonAfterNDays($cells, $N) {
        
    }
}";"";"2020-03-25 15:18:50"
13884;1120;"Swift";"class Solution {
    func prisonAfterNDays(_ cells: [Int], _ N: Int) 
-> [Int] {
        
    }
}";"";"2020-03-25 15:18:50"
13885;1120;"Ruby";"# @param {Integer[]} cells";"";"2020-03-25 15:18:50"
13886;1120;"Python";"class Solution(object):
    def prisonAfterNDays(self, cells, N):
        """"""
        :type cells: List[int]
        :type N: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:50"
13887;1121;"C#";"public class Solution {
    public int MinimumMoves(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:50"
13888;1121;"Java";"class Solution {
    public int minimumMoves(int[][] grid) {
 
    }
}";"";"2020-03-25 15:18:50"
13889;1121;"Rust";"impl Solution {
    pub fn minimum_moves(grid: Vec<Vec<i32>>) -> 
i32 {
 
    }
}";"";"2020-03-25 15:18:50"
13890;1121;"C";"int minimumMoves(int** grid, int gridSize, int* 
gridColSize){
 
}";"";"2020-03-25 15:18:50"
13891;1121;"Scala";"object Solution {
    def minimumMoves(grid: Array[Array[Int]]): Int 
= {
 
    }
}";"";"2020-03-25 15:18:50"
13892;1121;"Go";"func minimumMoves(grid [][]int) int {
 
}";"";"2020-03-25 15:18:50"
13893;1121;"Kotlin";"class Solution {
    fun minimumMoves(grid: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:50"
13894;1121;"Python3";"class Solution:
    def minimumMoves(self, grid: List[List[int]]) 
-> int:";"";"2020-03-25 15:18:50"
13895;1121;"JavaScript";"/**
 * @param {number[][]} grid
 * @return {number}
 */
var minimumMoves = function(grid) {
 
};";"";"2020-03-25 15:18:50"
13896;1121;"PHP";"class Solution {";"";"2020-03-25 15:18:50"
13897;1121;"Swift";"class Solution {
    func minimumMoves(_ grid: [[Int]]) -> Int {
 
    }
}";"";"2020-03-25 15:18:50"
13898;1121;"Ruby";"# @param {Integer[][]} grid
# @return {Integer}
def minimum_moves(grid)
 
end";"";"2020-03-25 15:18:50"
13899;1121;"Python";"class Solution(object):
    def minimumMoves(self, grid):
        """"""
        :type grid: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:50"
13900;1122;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public bool IsSubStructure(TreeNode A, TreeNode 
B) {
 
    }
}";"";"2020-03-25 15:18:50"
13901;1122;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSubStructure(TreeNode A, 
TreeNode B) {
 
    }
}";"";"2020-03-25 15:18:50"
13902;1122;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
bool isSubStructure(struct TreeNode* A, struct 
TreeNode* B){
 
}";"";"2020-03-25 15:18:50"
13903;1122;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn is_sub_structure(a: 
Option<Rc<RefCell<TreeNode>>>, b: 
Option<Rc<RefCell<TreeNode>>>) -> bool {
 
    }";"";"2020-03-25 15:18:50"
13904;1122;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def isSubStructure(A: TreeNode, B: TreeNode): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:50"
13905;1122;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func isSubStructure(A *TreeNode, B *TreeNode) bool {
 
}";"";"2020-03-25 15:18:50"
13906;1122;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun isSubStructure(A: TreeNode?, B: TreeNode?): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:50"
13907;1122;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def isSubStructure(self, A: TreeNode, B: 
TreeNode) -> bool:";"";"2020-03-25 15:18:50"
13908;1122;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} A
 * @param {TreeNode} B
 * @return {boolean}
 */
var isSubStructure = function(A, B) {
 
};";"";"2020-03-25 15:18:50"
13909;1122;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $A
     * @param TreeNode $B
     * @return Boolean
     */
    function isSubStructure($A, $B) {
 
    }
}";"";"2020-03-25 15:18:50"
13910;1122;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func isSubStructure(_ A: TreeNode?, _ B: 
TreeNode?) -> Bool {
 
    }
}";"";"2020-03-25 15:18:50"
13911;1122;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} a
# @param {TreeNode} b
# @return {Boolean}
def is_sub_structure(a, b)
 
end";"";"2020-03-25 15:18:50"
13912;1122;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def isSubStructure(self, A, B):
        """"""
        :type A: TreeNode
        :type B: TreeNode
        :rtype: bool
        """"""";"";"2020-03-25 15:18:50"
13913;1123;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int FindSecondMinimumValue(TreeNode root)
 {
 
    }
}";"";"2020-03-25 15:18:50"
13914;1123;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int findSecondMinimumValue(TreeNode root)
 {
 
    }
}";"";"2020-03-25 15:18:50"
13915;1123;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int findSecondMinimumValue(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:50"
13916;1123;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn find_second_minimum_value(root: 
Option<Rc<RefCell<TreeNode>>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:50"
13917;1123;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def findSecondMinimumValue(root: TreeNode): Int 
= {
 
    }
}";"";"2020-03-25 15:18:50"
13918;1123;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func findSecondMinimumValue(root *TreeNode) int {
 
}";"";"2020-03-25 15:18:50"
13919;1123;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun findSecondMinimumValue(root: TreeNode?): 
Int {
 
    }
}";"";"2020-03-25 15:18:50"
13920;1123;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def findSecondMinimumValue(self, root: TreeNode)
 -> int:";"";"2020-03-25 15:18:50"
13921;1123;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var findSecondMinimumValue = function(root) {
 
};";"";"2020-03-25 15:18:50"
13922;1123;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer
     */
    function findSecondMinimumValue($root) {
        
    }
}";"";"2020-03-25 15:18:50"
13923;1123;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func findSecondMinimumValue(_ root: TreeNode?) 
-> Int {
        
    }
}";"";"2020-03-25 15:18:50"
13924;1123;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer}
def find_second_minimum_value(root)
 
end";"";"2020-03-25 15:18:50"
13925;1123;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def findSecondMinimumValue(self, root):
        """"""
        :type root: TreeNode
        :rtype: int
        """"""";"";"2020-03-25 15:18:50"
13926;1124;"C#";"public class Solution {
    public int Search(int[] arr, int target) {
 
    }
}";"";"2020-03-25 15:18:50"
13927;1124;"Java";"class Solution {
    public int search(int[] arr, int target) {
 
    }
}";"";"2020-03-25 15:18:50"
13928;1124;"C";"int search(int* arr, int arrSize, int target){
 
}";"";"2020-03-25 15:18:50"
13929;1124;"Rust";"impl Solution {
    pub fn search(arr: Vec<i32>, target: i32) -> 
i32 {
 
    }
}";"";"2020-03-25 15:18:50"
13930;1124;"Scala";"object Solution {
    def search(arr: Array[Int], target: Int): Int = 
{
 
    }
}";"";"2020-03-25 15:18:50"
13931;1124;"Go";"func search(arr []int, target int) int {
 
}";"";"2020-03-25 15:18:50"
13932;1124;"Kotlin";"class Solution {
    fun search(arr: IntArray, target: Int): Int {
 
    }
}";"";"2020-03-25 15:18:50"
13933;1124;"Python3";"class Solution:
    def search(self, arr: List[int], target: int) 
-> int:";"";"2020-03-25 15:18:50"
13934;1124;"JavaScript";"/**
 * @param {number[]} arr
 * @param {number} target
 * @return {number}
 */
var search = function(arr, target) {
 
};";"";"2020-03-25 15:18:50"
13935;1124;"PHP";"class Solution {
 
    /**
     * @param Integer[] $arr
     * @param Integer $target
     * @return Integer
     */
    function search($arr, $target) {
 
    }
}";"";"2020-03-25 15:18:50"
13936;1124;"Swift";"class Solution {
    func search(_ arr: [Int], _ target: Int) -> Int 
{
 
    }
}";"";"2020-03-25 15:18:50"
13937;1124;"Ruby";"# @param {Integer[]} arr
# @param {Integer} target
# @return {Integer}
def search(arr, target)
 
end";"";"2020-03-25 15:18:50"
13938;1124;"Python";"class Solution(object):
    def search(self, arr, target):
        """"""
        :type arr: List[int]
        :type target: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:50"
13939;1125;"C#";"public class Solution {
    public bool IsScramble(string s1, string s2) {
 
    }
}";"";"2020-03-25 15:18:50"
13940;1125;"Java";"class Solution {
    public boolean isScramble(String s1, String s2) 
{
 
    }
}";"";"2020-03-25 15:18:50"
13941;1125;"C";"bool isScramble(char * s1, char * s2){
 
}";"";"2020-03-25 15:18:50"
13942;1125;"Rust";"impl Solution {
    pub fn is_scramble(s1: String, s2: String) -> 
bool {
        
    }
}";"";"2020-03-25 15:18:50"
13943;1125;"Scala";"object Solution {
    def isScramble(s1: String, s2: String): Boolean 
= {
 
    }
}";"";"2020-03-25 15:18:50"
13944;1125;"Go";"func isScramble(s1 string, s2 string) bool {
 
}";"";"2020-03-25 15:18:50"
13945;1125;"Kotlin";"class Solution {
    fun isScramble(s1: String, s2: String): Boolean 
{
 
    }
}";"";"2020-03-25 15:18:50"
13946;1125;"Python3";"class Solution:
    def isScramble(self, s1: str, s2: str) -> bool:";"";"2020-03-25 15:18:50"
13947;1125;"JavaScript";"/**
 * @param {string} s1
 * @param {string} s2
 * @return {boolean}
 */
var isScramble = function(s1, s2) {
 
};";"";"2020-03-25 15:18:50"
13948;1125;"PHP";"class Solution {
 
    /**
     * @param String $s1
     * @param String $s2
     * @return Boolean
     */
    function isScramble($s1, $s2) {
        
    }
}";"";"2020-03-25 15:18:50"
13949;1125;"Swift";"class Solution {
    func isScramble(_ s1: String, _ s2: String) -> 
Bool {
        
    }
}";"";"2020-03-25 15:18:50"
13950;1125;"Ruby";"# @param {String} s1";"";"2020-03-25 15:18:50"
13951;1125;"Python";"class Solution(object):
    def isScramble(self, s1, s2):
        """"""
        :type s1: str
        :type s2: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:50"
13952;1126;"C#";"public class Solution {
    public int Largest1BorderedSquare(int[][] grid) 
{
 
    }
}";"";"2020-03-25 15:18:50"
13953;1126;"Java";"class Solution {
    public int largest1BorderedSquare(int[][] grid) 
{
 
    }
}";"";"2020-03-25 15:18:50"
13954;1126;"Rust";"impl Solution {
    pub fn largest1_bordered_square(grid: 
Vec<Vec<i32>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:50"
13955;1126;"C";"int largest1BorderedSquare(int** grid, int gridSize,
 int* gridColSize){
 
}";"";"2020-03-25 15:18:50"
13956;1126;"Scala";"object Solution {
    def largest1BorderedSquare(grid: Array[Array
[Int]]): Int = {
 
    }
}";"";"2020-03-25 15:18:50"
13957;1126;"Go";"func largest1BorderedSquare(grid [][]int) int {
 
}";"";"2020-03-25 15:18:50"
13958;1126;"Kotlin";"class Solution {
    fun largest1BorderedSquare(grid: 
Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:50"
13959;1126;"Python3";"class Solution:
    def largest1BorderedSquare(self, grid: List[List
[int]]) -> int:";"";"2020-03-25 15:18:50"
13960;1126;"JavaScript";"/**
 * @param {number[][]} grid
 * @return {number}
 */
var largest1BorderedSquare = function(grid) {
 
};";"";"2020-03-25 15:18:50"
13961;1126;"PHP";"class Solution {";"";"2020-03-25 15:18:50"
13962;1126;"Swift";"class Solution {
    func largest1BorderedSquare(_ grid: [[Int]]) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:50"
13963;1126;"Ruby";"# @param {Integer[][]} grid
# @return {Integer}
def largest1_bordered_square(grid)
 
end";"";"2020-03-25 15:18:50"
13964;1126;"Python";"class Solution(object):
    def largest1BorderedSquare(self, grid):
        """"""
        :type grid: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:50"
13965;1127;"C#";"public class Solution {
    public IList<int> MajorityElement(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:50"
13966;1127;"Java";"class Solution {
    public List<Integer> majorityElement(int[] nums)
 {
 
    }
}";"";"2020-03-25 15:18:50"
13967;1127;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* majorityElement(int* nums, int numsSize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:50"
13968;1127;"Rust";"impl Solution {
    pub fn majority_element(nums: Vec<i32>) -> 
Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:50"
13969;1127;"Scala";"object Solution {
    def majorityElement(nums: Array[Int]): List[Int]
 = {
 
    }
}";"";"2020-03-25 15:18:50"
13970;1127;"Go";"func majorityElement(nums []int) []int {
 
}";"";"2020-03-25 15:18:50"
13971;1127;"Kotlin";"class Solution {
    fun majorityElement(nums: IntArray): List<Int> {
 
    }
}";"";"2020-03-25 15:18:50"
13972;1127;"Python3";"class Solution:
    def majorityElement(self, nums: List[int]) -> 
List[int]:";"";"2020-03-25 15:18:50"
13973;1127;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number[]}
 */
var majorityElement = function(nums) {
 
};";"";"2020-03-25 15:18:50"
13974;1127;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer[]
     */
    function majorityElement($nums) {
 
    }
}";"";"2020-03-25 15:18:50"
13975;1127;"Swift";"class Solution {
    func majorityElement(_ nums: [Int]) -> [Int] {
 
    }
}";"";"2020-03-25 15:18:50"
13976;1127;"Ruby";"# @param {Integer[]} nums
# @return {Integer[]}
def majority_element(nums)
 
end";"";"2020-03-25 15:18:50"
13977;1127;"Python";"class Solution(object):
    def majorityElement(self, nums):
        """"""
        :type nums: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:50"
13978;1128;"C#";"public class WordFilter {
 
    public WordFilter(string[] words) {
 
    }
    
    public int F(string prefix, string suffix) {
 
    }
}
 
/**
 * Your WordFilter object will be instantiated and 
called as such:
 * WordFilter obj = new WordFilter(words);
 * int param_1 = obj.F(prefix,suffix);
 */";"";"2020-03-25 15:18:50"
13979;1128;"Java";"class WordFilter {
 
    public WordFilter(String[] words) {
 
    }
    
    public int f(String prefix, String suffix) {
 
    }
}
 
/**
 * Your WordFilter object will be instantiated and 
called as such:
 * WordFilter obj = new WordFilter(words);
 * int param_1 = obj.f(prefix,suffix);
 */";"";"2020-03-25 15:18:50"
13980;1128;"C";"typedef struct {
    
} WordFilter;
 
 
WordFilter* wordFilterCreate(char ** words, int 
wordsSize) {
    
}
 
int wordFilterF(WordFilter* obj, char * prefix, 
char * suffix) {
  
}
 
void wordFilterFree(WordFilter* obj) {
    
}
 
/**
 * Your WordFilter struct will be instantiated and 
called as such:
 * WordFilter* obj = wordFilterCreate(words, 
wordsSize);
 * int param_1 = wordFilterF(obj, prefix, suffix);
 ";"";"2020-03-25 15:18:50"
13981;1128;"Rust";"struct WordFilter {
 
}
 
 
/** 
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl WordFilter {
 
    fn new(words: Vec<String>) -> Self {
        
    }
    
    fn f(&self, prefix: String, suffix: String) -> 
i32 {
        
    }
}
 
/**
 * Your WordFilter object will be instantiated and 
called as such:";"";"2020-03-25 15:18:50"
13982;1128;"Scala";"class WordFilter(_words: Array[String]) {
 
    def f(prefix: String, suffix: String): Int = {
 
    }
 
}
 
/**
 * Your WordFilter object will be instantiated and 
called as such:
 * var obj = new WordFilter(words)
 * var param_1 = obj.f(prefix,suffix)
 */";"";"2020-03-25 15:18:50"
13983;1128;"Go";"type WordFilter struct {
 
}
 
 
func Constructor(words []string) WordFilter {
 
}
 
 
func (this *WordFilter) F(prefix string, suffix 
string) int {
 
}
 
 
/**
 * Your WordFilter object will be instantiated and 
called as such:
 * obj := Constructor(words);
 * param_1 := obj.F(prefix,suffix);
 */";"";"2020-03-25 15:18:50"
13984;1128;"Kotlin";"class WordFilter(words: Array<String>) {
 
    fun f(prefix: String, suffix: String): Int {
 
    }
 
}
 
/**
 * Your WordFilter object will be instantiated and 
called as such:
 * var obj = WordFilter(words)
 * var param_1 = obj.f(prefix,suffix)
 */";"";"2020-03-25 15:18:50"
13985;1128;"Python3";"class WordFilter:
 
    def __init__(self, words: List[str]):
        
 
    def f(self, prefix: str, suffix: str) -> int:
        
 
 
# Your WordFilter object will be instantiated and 
called as such:
# obj = WordFilter(words)
# param_1 = obj.f(prefix,suffix)";"";"2020-03-25 15:18:50"
13986;1128;"JavaScript";"/**
 * @param {string[]} words
 */
var WordFilter = function(words) {
 
};
 
/** 
 * @param {string} prefix 
 * @param {string} suffix
 * @return {number}
 */
WordFilter.prototype.f = function(prefix, suffix) {
 
};
 
/**
 * Your WordFilter object will be instantiated and 
called as such:
 * var obj = new WordFilter(words)
 * var param_1 = obj.f(prefix,suffix)
 */";"";"2020-03-25 15:18:50"
13987;1128;"PHP";"class WordFilter {
    /**
     * @param String[] $words
     */
    function __construct($words) {
        
    }
  
    /**
     * @param String $prefix
     * @param String $suffix
     * @return Integer
     */
    function f($prefix, $suffix) {
        
    }
}
 
/**
 * Your WordFilter object will be instantiated and 
called as such:
 * $obj = WordFilter($words);
 * $ret_1 = $obj->f($prefix, $suffix);
 */";"";"2020-03-25 15:18:50"
13988;1128;"Swift";"class WordFilter {
 
    init(_ words: [String]) {
        
    }
    
    func f(_ prefix: String, _ suffix: String) -> 
Int {
        
    }
}
 
/**
 * Your WordFilter object will be instantiated and 
called as such:
 * let obj = WordFilter(words)
 * let ret_1: Int = obj.f(prefix, suffix)
 */";"";"2020-03-25 15:18:50"
13989;1128;"Ruby";"class WordFilter
 
=begin
    :type words: String[]
=end
    def initialize(words)
 
    end
 
 
=begin
    :type prefix: String
    :type suffix: String
    :rtype: Integer
=end
    def f(prefix, suffix)
 
    end
 
 
end
 
# Your WordFilter object will be instantiated and 
called as such:
# obj = WordFilter.new(words)
# param_1 = obj.f(prefix, suffix)";"";"2020-03-25 15:18:50"
13990;1128;"Python";"class WordFilter(object):
 
    def __init__(self, words):
        """"""
        :type words: List[str]
        """"""
        
 
    def f(self, prefix, suffix):
        """"""
        :type prefix: str
        :type suffix: str
        :rtype: int
        """"""
        
 
 
# Your WordFilter object will be instantiated and 
called as such:
# obj = WordFilter(words)
# param_1 = obj.f(prefix,suffix)";"";"2020-03-25 15:18:50"
13991;1129;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode BstFromPreorder(int[] preorder) 
{
 
    }
}";"";"2020-03-25 15:18:50"
13992;1129;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode bstFromPreorder(int[] preorder) 
{
 
    }
}";"";"2020-03-25 15:18:50"
13993;1129;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* bstFromPreorder(int* preorder, int 
preorderSize){
 
}";"";"2020-03-25 15:18:50"
13994;1129;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn bst_from_preorder(preorder: Vec<i32>) -> 
Option<Rc<RefCell<TreeNode>>> {
        
    }
}";"";"2020-03-25 15:18:50"
13995;1129;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def bstFromPreorder(preorder: Array[Int]): 
TreeNode = {
 
    }
}";"";"2020-03-25 15:18:50"
13996;1129;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func bstFromPreorder(preorder []int) *TreeNode {
 
}";"";"2020-03-25 15:18:50"
13997;1129;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun bstFromPreorder(preorder: IntArray): 
TreeNode? {
 
    }
}";"";"2020-03-25 15:18:50"
13998;1129;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def bstFromPreorder(self, preorder: List[int]) 
-> TreeNode:";"";"2020-03-25 15:18:50"
13999;1129;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {number[]} preorder
 * @return {TreeNode}
 */
var bstFromPreorder = function(preorder) {
 
};";"";"2020-03-25 15:18:50"
14000;1129;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param Integer[] $preorder
     * @return TreeNode
     */
    function bstFromPreorder($preorder) {
        
    }
}";"";"2020-03-25 15:18:50"
14001;1129;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func bstFromPreorder(_ preorder: [Int]) -> 
TreeNode? {
        
    }
}";"";"2020-03-25 15:18:50"
14002;1129;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:50"
14003;1129;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def bstFromPreorder(self, preorder):
        """"""
        :type preorder: List[int]
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:50"
14004;1130;"Bash";"# Read from the file file.txt and output all valid 
phone numbers to stdout.";"";"2020-03-25 15:18:50"
14005;1131;"C#";"public class Solution {
    public IList<IList<int>> Subsets(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:50"
14006;1131;"Java";"class Solution {
    public List<List<Integer>> subsets(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:50"
14007;1131;"Rust";"impl Solution {
    pub fn subsets(nums: Vec<i32>) -> Vec<Vec<i32>> 
{
        
    }
}";"";"2020-03-25 15:18:50"
14008;1131;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** subsets(int* nums, int numsSize, int* 
returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:50"
14009;1131;"Scala";"object Solution {
    def subsets(nums: Array[Int]): List[List[Int]] 
= {
 
    }
}";"";"2020-03-25 15:18:50"
14010;1131;"Go";"func subsets(nums []int) [][]int {
 
}";"";"2020-03-25 15:18:50"
14011;1131;"Kotlin";"class Solution {
    fun subsets(nums: IntArray): List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:50"
14012;1131;"Python3";"class Solution:
    def subsets(self, nums: List[int]) -> List[List
[int]]:";"";"2020-03-25 15:18:50"
14013;1131;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number[][]}
 */
var subsets = function(nums) {
 
};";"";"2020-03-25 15:18:50"
14014;1131;"PHP";"class Solution {";"";"2020-03-25 15:18:50"
14015;1131;"Swift";"class Solution {
    func subsets(_ nums: [Int]) -> [[Int]] {
        
    }
}";"";"2020-03-25 15:18:50"
14016;1131;"Ruby";"# @param {Integer[]} nums
# @return {Integer[][]}
def subsets(nums)
 
end";"";"2020-03-25 15:18:50"
14017;1131;"Python";"class Solution(object):
    def subsets(self, nums):
        """"""
        :type nums: List[int]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:50"
14018;1132;"C#";"public class TripleInOne {
 
    public TripleInOne(int stackSize) {
 
    }
    
    public void Push(int stackNum, int value) {
 
    }
    
    public int Pop(int stackNum) {
 
    }
    
    public int Peek(int stackNum) {
 
    }
    
    public bool IsEmpty(int stackNum) {
 
    }
}
 
/**
 * Your TripleInOne object will be instantiated and 
called as such:";"";"2020-03-25 15:18:50"
14019;1132;"Java";"class TripleInOne {
 
    public TripleInOne(int stackSize) {
 
    }
    
    public void push(int stackNum, int value) {
 
    }
    
    public int pop(int stackNum) {
 
    }
    
    public int peek(int stackNum) {
 
    }
    
    public boolean isEmpty(int stackNum) {
 
    }
}
 
/**
 * Your TripleInOne object will be instantiated and 
called as such:";"";"2020-03-25 15:18:50"
14020;1132;"C";"typedef struct {
 
} TripleInOne;
 
 
TripleInOne* tripleInOneCreate(int stackSize) {
 
}
 
void tripleInOnePush(TripleInOne* obj, int stackNum,
 int value) {
 
}
 
int tripleInOnePop(TripleInOne* obj, int stackNum) {
 
}
 
int tripleInOnePeek(TripleInOne* obj, int stackNum) 
{
 
}
 
bool tripleInOneIsEmpty(TripleInOne* obj, int 
stackNum) {
 ";"";"2020-03-25 15:18:50"
14021;1132;"Python3";"class TripleInOne:
 
    def __init__(self, stackSize: int):
 
 
    def push(self, stackNum: int, value: int) -> 
None:
 
 
    def pop(self, stackNum: int) -> int:
 
 
    def peek(self, stackNum: int) -> int:
 
 
    def isEmpty(self, stackNum: int) -> bool:
 
 
 
# Your TripleInOne object will be instantiated and 
called as such:
# obj = TripleInOne(stackSize)
# obj.push(stackNum,value)
# param_2 = obj.pop(stackNum)
# param_3 = obj.peek(stackNum)
# param_4 = obj.isEmpty(stackNum)";"";"2020-03-25 15:18:50"
14022;1132;"JavaScript";"/**
 * @param {number} stackSize
 */
var TripleInOne = function(stackSize) {
 
};
 
/** 
 * @param {number} stackNum 
 * @param {number} value
 * @return {void}
 */
TripleInOne.prototype.push = function(stackNum, 
value) {
 
};
 
/** 
 * @param {number} stackNum
 * @return {number}
 */
TripleInOne.prototype.pop = function(stackNum) {
 
};
 
/** ";"";"2020-03-25 15:18:50"
14023;1132;"Go";"type TripleInOne struct {
 
}
 
 
func Constructor(stackSize int) TripleInOne {
 
}
 
 
func (this *TripleInOne) Push(stackNum int, value 
int)  {
 
}
 
 
func (this *TripleInOne) Pop(stackNum int) int {
 
}
 
 
func (this *TripleInOne) Peek(stackNum int) int {
 
}
 
 ";"";"2020-03-25 15:18:50"
14024;1132;"Swift";"class TripleInOne {
 
    init(_ stackSize: Int) {
 
    }
    
    func push(_ stackNum: Int, _ value: Int) {
 
    }
    
    func pop(_ stackNum: Int) -> Int {
 
    }
    
    func peek(_ stackNum: Int) -> Int {
 
    }
    
    func isEmpty(_ stackNum: Int) -> Bool {
 
    }
}
 
/**
 * Your TripleInOne object will be instantiated and 
called as such:";"";"2020-03-25 15:18:50"
14025;1132;"Ruby";"class TripleInOne
 
=begin
    :type stack_size: Integer
=end
    def initialize(stack_size)
 
    end
 
 
=begin
    :type stack_num: Integer
    :type value: Integer
    :rtype: Void
=end
    def push(stack_num, value)
 
    end
 
 
=begin
    :type stack_num: Integer
    :rtype: Integer
=end
    def pop(stack_num)
 ";"";"2020-03-25 15:18:50"
14026;1132;"Python";"class TripleInOne(object):
 
    def __init__(self, stackSize):
        """"""
        :type stackSize: int
        """"""
 
 
    def push(self, stackNum, value):
        """"""
        :type stackNum: int
        :type value: int
        :rtype: None
        """"""
 
 
    def pop(self, stackNum):
        """"""
        :type stackNum: int
        :rtype: int
        """"""
 
 
    def peek(self, stackNum):
        """"""
        :type stackNum: int";"";"2020-03-25 15:18:50"
14027;1133;"Java";"class Solution {
    public int[] fraction(int[] cont) {
 
    }
}";"";"2020-03-25 15:18:50"
14028;1133;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* fraction(int* cont, int contSize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:50"
14029;1133;"Python3";"class Solution:
    def fraction(self, cont: List[int]) -> List[int]
:";"";"2020-03-25 15:18:50"
14030;1133;"JavaScript";"/**
 * @param {number[]} cont
 * @return {number[]}
 */
var fraction = function(cont) {
 
};";"";"2020-03-25 15:18:50"
14031;1133;"Go";"func fraction(cont []int) []int {
 
}";"";"2020-03-25 15:18:50"
14032;1133;"Python";"class Solution(object):
    def fraction(self, cont):
        """"""
        :type cont: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:50"
14033;1134;"C#";"public class Solution {
    public int JobScheduling(int[] startTime, int[] 
endTime, int[] profit) {
 
    }
}";"";"2020-03-25 15:18:50"
14034;1134;"Java";"class Solution {
    public int jobScheduling(int[] startTime, int[] 
endTime, int[] profit) {
 
    }
}";"";"2020-03-25 15:18:50"
14035;1134;"C";"int jobScheduling(int* startTime, int startTimeSize,
 int* endTime, int endTimeSize, int* profit, int 
profitSize){
 
}";"";"2020-03-25 15:18:50"
14036;1134;"Rust";"impl Solution {
    pub fn job_scheduling(start_time: Vec<i32>, 
end_time: Vec<i32>, profit: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:50"
14037;1134;"Scala";"object Solution {
    def jobScheduling(startTime: Array[Int], 
endTime: Array[Int], profit: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:50"
14038;1134;"Go";"func jobScheduling(startTime []int, endTime []int, 
profit []int) int {
 
}";"";"2020-03-25 15:18:50"
14039;1134;"Kotlin";"class Solution {
    fun jobScheduling(startTime: IntArray, endTime: 
IntArray, profit: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:50"
14040;1134;"Python3";"class Solution:
    def jobScheduling(self, startTime: List[int], 
endTime: List[int], profit: List[int]) -> int:";"";"2020-03-25 15:18:50"
14041;1134;"JavaScript";"/**
 * @param {number[]} startTime
 * @param {number[]} endTime
 * @param {number[]} profit
 * @return {number}
 */
var jobScheduling = function(startTime, endTime, 
profit) {
 
};";"";"2020-03-25 15:18:50"
14042;1134;"PHP";"class Solution {
 
    /**
     * @param Integer[] $startTime
     * @param Integer[] $endTime
     * @param Integer[] $profit
     * @return Integer
     */
    function jobScheduling($startTime, $endTime, 
$profit) {
 
    }
}";"";"2020-03-25 15:18:50"
14043;1134;"Swift";"class Solution {
    func jobScheduling(_ startTime: [Int], _ 
endTime: [Int], _ profit: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:50"
14044;1134;"Ruby";"# @param {Integer[]} start_time
# @param {Integer[]} end_time
# @param {Integer[]} profit
# @return {Integer}
def job_scheduling(start_time, end_time, profit)
 
end";"";"2020-03-25 15:18:50"
14045;1134;"Python";"class Solution(object):
    def jobScheduling(self, startTime, endTime, 
profit):
        """"""
        :type startTime: List[int]
        :type endTime: List[int]
        :type profit: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:50"
14046;1135;"C#";"public class Solution {
    public void NextPermutation(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:50"
14047;1135;"Java";"class Solution {
    public void nextPermutation(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:50"
14048;1135;"C";"void nextPermutation(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:50"
14049;1135;"Rust";"impl Solution {
    pub fn next_permutation(nums: &mut Vec<i32>) {
        
    }
}";"";"2020-03-25 15:18:50"
14050;1135;"Scala";"object Solution {
    def nextPermutation(nums: Array[Int]): Unit = {
 
    }
}";"";"2020-03-25 15:18:50"
14051;1135;"Go";"func nextPermutation(nums []int)  {
 
}";"";"2020-03-25 15:18:50"
14052;1135;"Kotlin";"class Solution {
    fun nextPermutation(nums: IntArray): Unit {
 
    }
}";"";"2020-03-25 15:18:50"
14053;1135;"Python3";"class Solution:
    def nextPermutation(self, nums: List[int]) -> 
None:
        """"""
        Do not return anything, modify nums 
in-place instead.
        """"""";"";"2020-03-25 15:18:50"
14054;1135;"JavaScript";"/**
 * @param {number[]} nums
 * @return {void} Do not return anything, modify 
nums in-place instead.
 */
var nextPermutation = function(nums) {
 
};";"";"2020-03-25 15:18:50"
14055;1135;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return NULL
     */
    function nextPermutation(&$nums) {
        
    }
}";"";"2020-03-25 15:18:50"
14056;1135;"Swift";"class Solution {
    func nextPermutation(_ nums: inout [Int]) {
        
    }
}";"";"2020-03-25 15:18:50"
14057;1135;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:18:50"
14058;1135;"Python";"class Solution(object):
    def nextPermutation(self, nums):
        """"""
        :type nums: List[int]
        :rtype: None Do not return anything, modify 
nums in-place instead.
        """"""";"";"2020-03-25 15:18:50"
14059;1136;"C#";"public class Solution {
    public int NumRookCaptures(char[][] board) {
 
    }
}";"";"2020-03-25 15:18:50"
14060;1136;"Java";"class Solution {
    public int numRookCaptures(char[][] board) {
 
    }
}";"";"2020-03-25 15:18:50"
14061;1136;"Rust";"impl Solution {
    pub fn num_rook_captures(board: Vec<Vec<char>>) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:50"
14062;1136;"C";"int numRookCaptures(char** board, int boardSize, 
int* boardColSize){
 
}";"";"2020-03-25 15:18:50"
14063;1136;"Scala";"object Solution {
    def numRookCaptures(board: Array[Array[Char]]): 
Int = {
 
    }
}";"";"2020-03-25 15:18:50"
14064;1136;"Go";"func numRookCaptures(board [][]byte) int {
 
}";"";"2020-03-25 15:18:50"
14065;1136;"Kotlin";"class Solution {
    fun numRookCaptures(board: Array<CharArray>): 
Int {
 
    }
}";"";"2020-03-25 15:18:50"
14066;1136;"Python3";"class Solution:
    def numRookCaptures(self, board: List[List[str]]
) -> int:";"";"2020-03-25 15:18:50"
14067;1136;"JavaScript";"/**
 * @param {character[][]} board
 * @return {number}
 */
var numRookCaptures = function(board) {
 
};";"";"2020-03-25 15:18:50"
14068;1136;"PHP";"class Solution {";"";"2020-03-25 15:18:50"
14069;1136;"Swift";"class Solution {
    func numRookCaptures(_ board: [[Character]]) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:50"
14070;1136;"Ruby";"# @param {Character[][]} board
# @return {Integer}
def num_rook_captures(board)
 
end";"";"2020-03-25 15:18:50"
14071;1136;"Python";"class Solution(object):
    def numRookCaptures(self, board):
        """"""
        :type board: List[List[str]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:50"
14072;1137;"C#";"public class Solution {
    public int MakeArrayIncreasing(int[] arr1, int[]
 arr2) {
 
    }
}";"";"2020-03-25 15:18:51"
14073;1137;"Java";"class Solution {
    public int makeArrayIncreasing(int[] arr1, int[]
 arr2) {
 
    }
}";"";"2020-03-25 15:18:51"
14074;1137;"Rust";"impl Solution {
    pub fn make_array_increasing(arr1: Vec<i32>, 
arr2: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:51"
14075;1137;"C";"int makeArrayIncreasing(int* arr1, int arr1Size, 
int* arr2, int arr2Size){
 
}";"";"2020-03-25 15:18:51"
14076;1137;"Scala";"object Solution {
    def makeArrayIncreasing(arr1: Array[Int], arr2: 
Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:51"
14077;1137;"Go";"func makeArrayIncreasing(arr1 []int, arr2 []int) 
int {
 
}";"";"2020-03-25 15:18:51"
14078;1137;"Kotlin";"class Solution {
    fun makeArrayIncreasing(arr1: IntArray, arr2: 
IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:51"
14079;1137;"Python3";"class Solution:
    def makeArrayIncreasing(self, arr1: List[int], 
arr2: List[int]) -> int:";"";"2020-03-25 15:18:51"
14080;1137;"JavaScript";"/**
 * @param {number[]} arr1
 * @param {number[]} arr2
 * @return {number}
 */
var makeArrayIncreasing = function(arr1, arr2) {
 
};";"";"2020-03-25 15:18:51"
14081;1137;"PHP";"class Solution {";"";"2020-03-25 15:18:51"
14082;1137;"Swift";"class Solution {
    func makeArrayIncreasing(_ arr1: [Int], _ arr2: 
[Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:51"
14083;1137;"Ruby";"# @param {Integer[]} arr1
# @param {Integer[]} arr2
# @return {Integer}
def make_array_increasing(arr1, arr2)
 
end";"";"2020-03-25 15:18:51"
14084;1137;"Python";"class Solution(object):
    def makeArrayIncreasing(self, arr1, arr2):
        """"""
        :type arr1: List[int]
        :type arr2: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:51"
14085;1138;"C#";"public class Solution {
    public bool CheckPermutation(string s1, string 
s2) {
 
    }
}";"";"2020-03-25 15:18:51"
14086;1138;"Java";"class Solution {
    public boolean CheckPermutation(String s1, 
String s2) {
 
    }
}";"";"2020-03-25 15:18:51"
14087;1138;"C";"bool CheckPermutation(char* s1, char* s2){
 
}";"";"2020-03-25 15:18:51"
14088;1138;"Rust";"impl Solution {
    pub fn check_permutation(s1: String, s2: String)
 -> bool {
 
    }
}";"";"2020-03-25 15:18:51"
14089;1138;"Scala";"object Solution {
    def CheckPermutation(s1: String, s2: String): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:51"
14090;1138;"Go";"func CheckPermutation(s1 string, s2 string) bool {
 
}";"";"2020-03-25 15:18:51"
14091;1138;"Kotlin";"class Solution {
    fun CheckPermutation(s1: String, s2: String): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:51"
14092;1138;"Python3";"class Solution:
    def CheckPermutation(self, s1: str, s2: str) -> 
bool:";"";"2020-03-25 15:18:51"
14093;1138;"JavaScript";"/**
 * @param {string} s1
 * @param {string} s2
 * @return {boolean}
 */
var CheckPermutation = function(s1, s2) {
 
};";"";"2020-03-25 15:18:51"
14094;1138;"PHP";"class Solution {
 
    /**
     * @param String $s1
     * @param String $s2
     * @return Boolean
     */
    function CheckPermutation($s1, $s2) {
 
    }
}";"";"2020-03-25 15:18:51"
14095;1138;"Swift";"class Solution {
    func CheckPermutation(_ s1: String, _ s2: 
String) -> Bool {
 
    }
}";"";"2020-03-25 15:18:51"
14096;1138;"Ruby";"# @param {String} s1
# @param {String} s2
# @return {Boolean}
def check_permutation(s1, s2)
 
end";"";"2020-03-25 15:18:51"
14097;1138;"Python";"class Solution(object):
    def CheckPermutation(self, s1, s2):
        """"""
        :type s1: str
        :type s2: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:51"
14098;1139;"C#";"public class Solution {
    public int FindIntegers(int num) {
 
    }
}";"";"2020-03-25 15:18:51"
14099;1139;"Java";"class Solution {
    public int findIntegers(int num) {
 
    }
}";"";"2020-03-25 15:18:51"
14100;1139;"Rust";"impl Solution {
    pub fn find_integers(num: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:51"
14101;1139;"C";"int findIntegers(int num){
 
}";"";"2020-03-25 15:18:51"
14102;1139;"Scala";"object Solution {
    def findIntegers(num: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:51"
14103;1139;"Go";"func findIntegers(num int) int {
 
}";"";"2020-03-25 15:18:51"
14104;1139;"Kotlin";"class Solution {
    fun findIntegers(num: Int): Int {
 
    }
}";"";"2020-03-25 15:18:51"
14105;1139;"Python3";"class Solution:
    def findIntegers(self, num: int) -> int:";"";"2020-03-25 15:18:51"
14106;1139;"JavaScript";"/**
 * @param {number} num
 * @return {number}
 */
var findIntegers = function(num) {
 
};";"";"2020-03-25 15:18:51"
14107;1139;"PHP";"class Solution {
 
    /**
     * @param Integer $num
     * @return Integer
     */
    function findIntegers($num) {
        
    }
}";"";"2020-03-25 15:18:51"
14108;1139;"Swift";"class Solution {
    func findIntegers(_ num: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:51"
14109;1139;"Ruby";"# @param {Integer} num
# @return {Integer}
def find_integers(num)
 
end";"";"2020-03-25 15:18:51"
14110;1139;"Python";"class Solution(object):
    def findIntegers(self, num):
        """"""
        :type num: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:51"
14111;1140;"C#";"public class Solution {
    public bool CanReach(int[] arr, int start) {
 
    }
}";"";"2020-03-25 15:18:51"
14112;1140;"Java";"class Solution {
    public boolean canReach(int[] arr, int start) {
 
    }
}";"";"2020-03-25 15:18:51"
14113;1140;"C";"bool canReach(int* arr, int arrSize, int start){
 
}";"";"2020-03-25 15:18:51"
14114;1140;"Rust";"impl Solution {
    pub fn can_reach(arr: Vec<i32>, start: i32) -> 
bool {
 
    }
}";"";"2020-03-25 15:18:51"
14115;1140;"Scala";"object Solution {
    def canReach(arr: Array[Int], start: Int): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:51"
14116;1140;"Go";"func canReach(arr []int, start int) bool {
 
}";"";"2020-03-25 15:18:51"
14117;1140;"Kotlin";"class Solution {
    fun canReach(arr: IntArray, start: Int): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:51"
14118;1140;"Python3";"class Solution:
    def canReach(self, arr: List[int], start: int) 
-> bool:";"";"2020-03-25 15:18:51"
14119;1140;"JavaScript";"/**
 * @param {number[]} arr
 * @param {number} start
 * @return {boolean}
 */
var canReach = function(arr, start) {
 
};";"";"2020-03-25 15:18:51"
14120;1140;"PHP";"class Solution {
 
    /**
     * @param Integer[] $arr
     * @param Integer $start
     * @return Boolean
     */
    function canReach($arr, $start) {
 
    }
}";"";"2020-03-25 15:18:51"
14121;1140;"Swift";"class Solution {
    func canReach(_ arr: [Int], _ start: Int) -> 
Bool {
 
    }
}";"";"2020-03-25 15:18:51"
14122;1140;"Ruby";"# @param {Integer[]} arr";"";"2020-03-25 15:18:51"
14123;1140;"Python";"class Solution(object):
    def canReach(self, arr, start):
        """"""
        :type arr: List[int]
        :type start: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:51"
14124;1141;"C#";"public class MinStack {
 
    /** initialize your data structure here. */
    public MinStack() {
 
    }
    
    public void Push(int x) {
 
    }
    
    public void Pop() {
 
    }
    
    public int Top() {
 
    }
    
    public int GetMin() {
 
    }
}
 
/**
 * Your MinStack object will be instantiated and ";"";"2020-03-25 15:18:51"
14125;1141;"Java";"class MinStack {
 
    /** initialize your data structure here. */
    public MinStack() {
 
    }
    
    public void push(int x) {
 
    }
    
    public void pop() {
 
    }
    
    public int top() {
 
    }
    
    public int getMin() {
 
    }
}
 
/**
 * Your MinStack object will be instantiated and ";"";"2020-03-25 15:18:51"
14126;1141;"C";"typedef struct {
 
} MinStack;
 
/** initialize your data structure here. */
 
MinStack* minStackCreate() {
 
}
 
void minStackPush(MinStack* obj, int x) {
 
}
 
void minStackPop(MinStack* obj) {
 
}
 
int minStackTop(MinStack* obj) {
 
}
 
int minStackGetMin(MinStack* obj) {
 
}
 ";"";"2020-03-25 15:18:51"
14127;1141;"Rust";"struct MinStack {
 
}
 
 
/**
 * `&self` means the method takes an immutable 
reference.
 * If you need a mutable reference, change it to `&
mut self` instead.
 */
impl MinStack {
 
    /** initialize your data structure here. */
    fn new() -> Self {
 
    }
    
    fn push(&self, x: i32) {
 
    }
    
    fn pop(&self) {
 
    }
    ";"";"2020-03-25 15:18:51"
14128;1141;"Scala";"class MinStack() {
 
    /** initialize your data structure here. */
 
 
    def push(x: Int) {
 
    }
 
    def pop() {
 
    }
 
    def top(): Int = {
 
    }
 
    def getMin(): Int = {
 
    }
 
}
 
/**
 * Your MinStack object will be instantiated and 
called as such:";"";"2020-03-25 15:18:51"
14129;1141;"Go";"type MinStack struct {
 
}
 
 
/** initialize your data structure here. */
func Constructor() MinStack {
 
}
 
 
func (this *MinStack) Push(x int)  {
 
}
 
 
func (this *MinStack) Pop()  {
 
}
 
 
func (this *MinStack) Top() int {
 
}
 
 ";"";"2020-03-25 15:18:51"
14130;1141;"Kotlin";"class MinStack() {
 
    /** initialize your data structure here. */
 
 
    fun push(x: Int) {
 
    }
 
    fun pop() {
 
    }
 
    fun top(): Int {
 
    }
 
    fun getMin(): Int {
 
    }
 
}
 
/**
 * Your MinStack object will be instantiated and 
called as such:";"";"2020-03-25 15:18:51"
14131;1141;"Python3";"class MinStack:
 
    def __init__(self):
        """"""
        initialize your data structure here.
        """"""
 
 
    def push(self, x: int) -> None:
 
 
    def pop(self) -> None:
 
 
    def top(self) -> int:
 
 
    def getMin(self) -> int:
 
 
 
# Your MinStack object will be instantiated and 
called as such:
# obj = MinStack()
# obj.push(x)
# obj.pop()";"";"2020-03-25 15:18:51"
14132;1141;"JavaScript";"/**
 * initialize your data structure here.
 */
var MinStack = function() {
 
};
 
/** 
 * @param {number} x
 * @return {void}
 */
MinStack.prototype.push = function(x) {
 
};
 
/**
 * @return {void}
 */
MinStack.prototype.pop = function() {
 
};
 
/**
 * @return {number}
 */
MinStack.prototype.top = function() {";"";"2020-03-25 15:18:51"
14133;1141;"PHP";"class MinStack {
    /**
     * initialize your data structure here.
     */
    function __construct() {
 
    }
 
    /**
     * @param Integer $x
     * @return NULL
     */
    function push($x) {
 
    }
 
    /**
     * @return NULL
     */
    function pop() {
 
    }
 
    /**
     * @return Integer
     */";"";"2020-03-25 15:18:51"
14134;1141;"Swift";"class MinStack {
 
    /** initialize your data structure here. */
    init() {
 
    }
    
    func push(_ x: Int) {
 
    }
    
    func pop() {
 
    }
    
    func top() -> Int {
 
    }
    
    func getMin() -> Int {
 
    }
}
 
/**
 * Your MinStack object will be instantiated and ";"";"2020-03-25 15:18:51"
14135;1141;"Ruby";"class MinStack
 
=begin
    initialize your data structure here.
=end
    def initialize()
 
    end
 
 
=begin
    :type x: Integer
    :rtype: Void
=end
    def push(x)
 
    end
 
 
=begin
    :rtype: Void
=end
    def pop()
 
    end
 ";"";"2020-03-25 15:18:51"
14136;1141;"Python";"class MinStack(object):
 
    def __init__(self):
        """"""
        initialize your data structure here.
        """"""
 
 
    def push(self, x):
        """"""
        :type x: int
        :rtype: None
        """"""
 
 
    def pop(self):
        """"""
        :rtype: None
        """"""
 
 
    def top(self):
        """"""
        :rtype: int
        """"""
 ";"";"2020-03-25 15:18:51"
14137;1142;"C#";"/*
// Definition for a Node.
public class Node {
    public int val;
    public Node next;
    public Node random;
    
    public Node(int _val) {
        val = _val;
        next = null;
        random = null;
    }
}
*/
public class Solution {
    public Node CopyRandomList(Node head) {
        
    }
}";"";"2020-03-25 15:18:51"
14138;1142;"Java";"/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;
 
    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/
class Solution {
    public Node copyRandomList(Node head) {
        
    }
}";"";"2020-03-25 15:18:51"
14139;1142;"C++";"/*";"";"2020-03-25 15:18:51"
14140;1142;"Python3";"""""""
# Definition for a Node.
class Node:
    def __init__(self, x: int, next: 'Node' = None, 
random: 'Node' = None):
        self.val = int(x)
        self.next = next
        self.random = random
""""""
class Solution:
    def copyRandomList(self, head: 'Node') -> 
'Node':";"";"2020-03-25 15:18:51"
14141;1142;"JavaScript";"/**
 * // Definition for a Node.
 * function Node(val, next, random) {
 *    this.val = val;
 *    this.next = next;
 *    this.random = random;
 * };
 */
/**
 * @param {Node} head
 * @return {Node}
 */
var copyRandomList = function(head) {
    
};";"";"2020-03-25 15:18:51"
14142;1142;"Go";"/**
 * Definition for a Node.
 * type Node struct {
 *     Val int
 *     Next *Node
 *     Random *Node
 * }
 */
 
func copyRandomList(head *Node) *Node {
    
}";"";"2020-03-25 15:18:51"
14143;1142;"Swift";"/**
 * Definition for a Node.
 * public class Node {
 *     public var val: Int
 *     public var next: Node?
 *     public var random: Node?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *         self.random = nil
 *     }
 * }
 */
 
class Solution {
    func copyRandomList(_ head: Node?) -> Node? {
        
    }
}";"";"2020-03-25 15:18:51"
14144;1142;"Python";"""""""
# Definition for a Node.
class Node:
    def __init__(self, x, next=None, random=None):
        self.val = int(x)
        self.next = next
        self.random = random
""""""
class Solution(object):
    def copyRandomList(self, head):
        """"""
        :type head: Node
        :rtype: Node
        """"""";"";"2020-03-25 15:18:51"
14145;1143;"C#";"public class Solution {
    public bool IsGoodArray(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:51"
14146;1143;"Java";"class Solution {
    public boolean isGoodArray(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:51"
14147;1143;"Rust";"impl Solution {
    pub fn is_good_array(nums: Vec<i32>) -> bool {
 
    }
}";"";"2020-03-25 15:18:51"
14148;1143;"C";"bool isGoodArray(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:51"
14149;1143;"Scala";"object Solution {
    def isGoodArray(nums: Array[Int]): Boolean = {
 
    }
}";"";"2020-03-25 15:18:51"
14150;1143;"Go";"func isGoodArray(nums []int) bool {
 
}";"";"2020-03-25 15:18:51"
14151;1143;"Kotlin";"class Solution {
    fun isGoodArray(nums: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:51"
14152;1143;"Python3";"class Solution:
    def isGoodArray(self, nums: List[int]) -> bool:";"";"2020-03-25 15:18:51"
14153;1143;"JavaScript";"/**
 * @param {number[]} nums
 * @return {boolean}
 */
var isGoodArray = function(nums) {
 
};";"";"2020-03-25 15:18:51"
14154;1143;"PHP";"class Solution {";"";"2020-03-25 15:18:51"
14155;1143;"Swift";"class Solution {
    func isGoodArray(_ nums: [Int]) -> Bool {
 
    }
}";"";"2020-03-25 15:18:51"
14156;1143;"Ruby";"# @param {Integer[]} nums
# @return {Boolean}
def is_good_array(nums)
 
end";"";"2020-03-25 15:18:51"
14157;1143;"Python";"class Solution(object):
    def isGoodArray(self, nums):
        """"""
        :type nums: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:51"
14158;1144;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int DeepestLeavesSum(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:51"
14159;1144;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int deepestLeavesSum(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:51"
14160;1144;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
int deepestLeavesSum(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:51"
14161;1144;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn deepest_leaves_sum(root: 
Option<Rc<RefCell<TreeNode>>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:51"
14162;1144;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def deepestLeavesSum(root: TreeNode): Int = {
 
    }
}";"";"2020-03-25 15:18:51"
14163;1144;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func deepestLeavesSum(root *TreeNode) int {
 
}";"";"2020-03-25 15:18:51"
14164;1144;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun deepestLeavesSum(root: TreeNode?): Int {
 
    }
}";"";"2020-03-25 15:18:51"
14165;1144;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def deepestLeavesSum(self, root: TreeNode) -> 
int:";"";"2020-03-25 15:18:51"
14166;1144;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var deepestLeavesSum = function(root) {
 
};";"";"2020-03-25 15:18:51"
14167;1144;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return Integer
     */
    function deepestLeavesSum($root) {
        
    }
}";"";"2020-03-25 15:18:51"
14168;1144;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func deepestLeavesSum(_ root: TreeNode?) -> Int 
{
        
    }
}";"";"2020-03-25 15:18:51"
14169;1144;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer}
def deepest_leaves_sum(root)
 
end";"";"2020-03-25 15:18:51"
14170;1144;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def deepestLeavesSum(self, root):
        """"""
        :type root: TreeNode
        :rtype: int
        """"""";"";"2020-03-25 15:18:51"
14171;1145;"C#";"public class Solution {
    public int Search(int[] nums, int target) {
 
    }
}";"";"2020-03-25 15:18:51"
14172;1145;"Java";"class Solution {
    public int search(int[] nums, int target) {
 
    }
}";"";"2020-03-25 15:18:51"
14173;1145;"C";"int search(int* nums, int numsSize, int target){
 
}";"";"2020-03-25 15:18:51"
14174;1145;"Python3";"class Solution:
    def search(self, nums: List[int], target: int) 
-> int:";"";"2020-03-25 15:18:51"
14175;1145;"JavaScript";"/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */
var search = function(nums, target) {
 
};";"";"2020-03-25 15:18:51"
14176;1145;"Go";"func search(nums []int, target int) int {
 
}";"";"2020-03-25 15:18:51"
14177;1145;"Swift";"class Solution {
    func search(_ nums: [Int], _ target: Int) -> 
Int {
 
    }
}";"";"2020-03-25 15:18:51"
14178;1145;"Ruby";"# @param {Integer[]} nums
# @param {Integer} target
# @return {Integer}
def search(nums, target)
 
end";"";"2020-03-25 15:18:51"
14179;1145;"Python";"class Solution(object):
    def search(self, nums, target):
        """"""
        :type nums: List[int]
        :type target: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:51"
14180;1146;"MySQL";"# Write your MySQL query statement below";"";"2020-03-25 15:18:51"
14181;1146;"MS SQL Server";"/* Write your T-SQL query statement below */";"";"2020-03-25 15:18:51"
14182;1146;"Oracle";"/* Write your PL/SQL query statement below */";"";"2020-03-25 15:18:51"
14183;1147;"C#";"public class Solution {
    public string Tictactoe(int[][] moves) {
 
    }
}";"";"2020-03-25 15:18:51"
14184;1147;"Java";"class Solution {
    public String tictactoe(int[][] moves) {
 
    }
}";"";"2020-03-25 15:18:51"
14185;1147;"C";"char * tictactoe(int** moves, int movesSize, int* 
movesColSize){
 
}";"";"2020-03-25 15:18:51"
14186;1147;"Rust";"impl Solution {
    pub fn tictactoe(moves: Vec<Vec<i32>>) -> 
String {
 
    }
}";"";"2020-03-25 15:18:51"
14187;1147;"Scala";"object Solution {
    def tictactoe(moves: Array[Array[Int]]): String 
= {
 
    }
}";"";"2020-03-25 15:18:51"
14188;1147;"Go";"func tictactoe(moves [][]int) string {
 
}";"";"2020-03-25 15:18:51"
14189;1147;"Kotlin";"class Solution {
    fun tictactoe(moves: Array<IntArray>): String {
 
    }
}";"";"2020-03-25 15:18:51"
14190;1147;"Python3";"class Solution:
    def tictactoe(self, moves: List[List[int]]) -> 
str:";"";"2020-03-25 15:18:51"
14191;1147;"JavaScript";"/**
 * @param {number[][]} moves
 * @return {string}
 */
var tictactoe = function(moves) {
 
};";"";"2020-03-25 15:18:51"
14192;1147;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $moves
     * @return String
     */
    function tictactoe($moves) {
 
    }
}";"";"2020-03-25 15:18:51"
14193;1147;"Swift";"class Solution {
    func tictactoe(_ moves: [[Int]]) -> String {
 
    }
}";"";"2020-03-25 15:18:51"
14194;1147;"Ruby";"# @param {Integer[][]} moves
# @return {String}
def tictactoe(moves)
 
end";"";"2020-03-25 15:18:51"
14195;1147;"Python";"class Solution(object):
    def tictactoe(self, moves):
        """"""
        :type moves: List[List[int]]
        :rtype: str
        """"""";"";"2020-03-25 15:18:51"
14196;1148;"C#";"public class Solution {
    public bool CanJump(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:51"
14197;1148;"Java";"class Solution {
    public boolean canJump(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:51"
14198;1148;"C";"bool canJump(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:51"
14199;1148;"Rust";"impl Solution {
    pub fn can_jump(nums: Vec<i32>) -> bool {
        
    }
}";"";"2020-03-25 15:18:51"
14200;1148;"Scala";"object Solution {
    def canJump(nums: Array[Int]): Boolean = {
 
    }
}";"";"2020-03-25 15:18:51"
14201;1148;"Go";"func canJump(nums []int) bool {
 
}";"";"2020-03-25 15:18:51"
14202;1148;"Kotlin";"class Solution {
    fun canJump(nums: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:51"
14203;1148;"Python3";"class Solution:
    def canJump(self, nums: List[int]) -> bool:";"";"2020-03-25 15:18:51"
14204;1148;"JavaScript";"/**
 * @param {number[]} nums
 * @return {boolean}
 */
var canJump = function(nums) {
 
};";"";"2020-03-25 15:18:51"
14205;1148;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Boolean
     */
    function canJump($nums) {
        
    }
}";"";"2020-03-25 15:18:51"
14206;1148;"Swift";"class Solution {
    func canJump(_ nums: [Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:51"
14207;1148;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:18:51"
14208;1148;"Python";"class Solution(object):
    def canJump(self, nums):
        """"""
        :type nums: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:51"
14209;1149;"C#";"public class Solution {
    public bool IsIdealPermutation(int[] A) {
 
    }
}";"";"2020-03-25 15:18:51"
14210;1149;"Java";"class Solution {
    public boolean isIdealPermutation(int[] A) {
 
    }
}";"";"2020-03-25 15:18:51"
14211;1149;"Rust";"impl Solution {
    pub fn is_ideal_permutation(a: Vec<i32>) -> 
bool {
        
    }
}";"";"2020-03-25 15:18:51"
14212;1149;"C";"bool isIdealPermutation(int* A, int ASize){
 
}";"";"2020-03-25 15:18:51"
14213;1149;"Scala";"object Solution {
    def isIdealPermutation(A: Array[Int]): Boolean 
= {
 
    }
}";"";"2020-03-25 15:18:51"
14214;1149;"Go";"func isIdealPermutation(A []int) bool {
 
}";"";"2020-03-25 15:18:51"
14215;1149;"Kotlin";"class Solution {
    fun isIdealPermutation(A: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:51"
14216;1149;"Python3";"class Solution:
    def isIdealPermutation(self, A: List[int]) -> 
bool:";"";"2020-03-25 15:18:51"
14217;1149;"JavaScript";"/**
 * @param {number[]} A
 * @return {boolean}
 */
var isIdealPermutation = function(A) {
 
};";"";"2020-03-25 15:18:51"
14218;1149;"PHP";"class Solution {";"";"2020-03-25 15:18:51"
14219;1149;"Swift";"class Solution {
    func isIdealPermutation(_ A: [Int]) -> Bool {
        
    }
}";"";"2020-03-25 15:18:51"
14220;1149;"Ruby";"# @param {Integer[]} a
# @return {Boolean}
def is_ideal_permutation(a)
 
end";"";"2020-03-25 15:18:51"
14221;1149;"Python";"class Solution(object):
    def isIdealPermutation(self, A):
        """"""
        :type A: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:51"
14222;1150;"C#";"public class Solution {
    public int ArrayPairSum(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:51"
14223;1150;"Java";"class Solution {
    public int arrayPairSum(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:51"
14224;1150;"C";"int arrayPairSum(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:51"
14225;1150;"Rust";"impl Solution {
    pub fn array_pair_sum(nums: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:51"
14226;1150;"Scala";"object Solution {
    def arrayPairSum(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:51"
14227;1150;"Go";"func arrayPairSum(nums []int) int {
 
}";"";"2020-03-25 15:18:51"
14228;1150;"Kotlin";"class Solution {
    fun arrayPairSum(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:51"
14229;1150;"Python3";"class Solution:
    def arrayPairSum(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:51"
14230;1150;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var arrayPairSum = function(nums) {
 
};";"";"2020-03-25 15:18:51"
14231;1150;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function arrayPairSum($nums) {
        
    }
}";"";"2020-03-25 15:18:51"
14232;1150;"Swift";"class Solution {
    func arrayPairSum(_ nums: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:51"
14233;1150;"Ruby";"# @param {Integer[]} nums";"";"2020-03-25 15:18:51"
14234;1150;"Python";"class Solution(object):
    def arrayPairSum(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:51"
14235;1151;"C#";"public class Solution {
    public int NumIslands(char[][] grid) {
 
    }
}";"";"2020-03-25 15:18:51"
14236;1151;"Java";"class Solution {
    public int numIslands(char[][] grid) {
 
    }
}";"";"2020-03-25 15:18:51"
14237;1151;"C";"int numIslands(char** grid, int gridSize, int* 
gridColSize){
 
}";"";"2020-03-25 15:18:51"
14238;1151;"Rust";"impl Solution {
    pub fn num_islands(grid: Vec<Vec<char>>) -> i32 
{
 
    }
}";"";"2020-03-25 15:18:51"
14239;1151;"Scala";"object Solution {
    def numIslands(grid: Array[Array[Char]]): Int = 
{
 
    }
}";"";"2020-03-25 15:18:51"
14240;1151;"Go";"func numIslands(grid [][]byte) int {
 
}";"";"2020-03-25 15:18:51"
14241;1151;"Kotlin";"class Solution {
    fun numIslands(grid: Array<CharArray>): Int {
 
    }
}";"";"2020-03-25 15:18:51"
14242;1151;"Python3";"class Solution:
    def numIslands(self, grid: List[List[str]]) -> 
int:";"";"2020-03-25 15:18:51"
14243;1151;"JavaScript";"/**
 * @param {character[][]} grid
 * @return {number}
 */
var numIslands = function(grid) {
 
};";"";"2020-03-25 15:18:51"
14244;1151;"PHP";"class Solution {
 
    /**
     * @param String[][] $grid
     * @return Integer
     */
    function numIslands($grid) {
 
    }
}";"";"2020-03-25 15:18:51"
14245;1151;"Swift";"class Solution {
    func numIslands(_ grid: [[Character]]) -> Int {
 
    }
}";"";"2020-03-25 15:18:51"
14246;1151;"Ruby";"# @param {Character[][]} grid
# @return {Integer}
def num_islands(grid)
 
end";"";"2020-03-25 15:18:51"
14247;1151;"Python";"class Solution(object):
    def numIslands(self, grid):
        """"""
        :type grid: List[List[str]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:51"
14248;1152;"C#";"public class Solution {
    public int MaxSumSubmatrix(int[][] matrix, int 
k) {
 
    }
}";"";"2020-03-25 15:18:51"
14249;1152;"Java";"class Solution {
    public int maxSumSubmatrix(int[][] matrix, int 
k) {
 
    }
}";"";"2020-03-25 15:18:51"
14250;1152;"Rust";"impl Solution {
    pub fn max_sum_submatrix(matrix: Vec<Vec<i32>>, 
k: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:51"
14251;1152;"C";"int maxSumSubmatrix(int** matrix, int matrixSize, 
int* matrixColSize, int k){
 
}";"";"2020-03-25 15:18:51"
14252;1152;"Scala";"object Solution {
    def maxSumSubmatrix(matrix: Array[Array[Int]], 
k: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:51"
14253;1152;"Go";"func maxSumSubmatrix(matrix [][]int, k int) int {
 
}";"";"2020-03-25 15:18:51"
14254;1152;"Kotlin";"class Solution {
    fun maxSumSubmatrix(matrix: Array<IntArray>, k: 
Int): Int {
 
    }
}";"";"2020-03-25 15:18:51"
14255;1152;"Python3";"class Solution:
    def maxSumSubmatrix(self, matrix: List[List[int]
], k: int) -> int:";"";"2020-03-25 15:18:51"
14256;1152;"JavaScript";"/**
 * @param {number[][]} matrix
 * @param {number} k
 * @return {number}
 */
var maxSumSubmatrix = function(matrix, k) {
 
};";"";"2020-03-25 15:18:51"
14257;1152;"PHP";"class Solution {";"";"2020-03-25 15:18:51"
14258;1152;"Swift";"class Solution {
    func maxSumSubmatrix(_ matrix: [[Int]], _ k: 
Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:51"
14259;1152;"Ruby";"# @param {Integer[][]} matrix
# @param {Integer} k
# @return {Integer}
def max_sum_submatrix(matrix, k)
 
end";"";"2020-03-25 15:18:51"
14260;1152;"Python";"class Solution(object):
    def maxSumSubmatrix(self, matrix, k):
        """"""
        :type matrix: List[List[int]]
        :type k: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:51"
14261;1153;"C#";"public class Solution {
    public int MinJumps(int[] arr) {
 
    }
}";"";"2020-03-25 15:18:51"
14262;1153;"Java";"class Solution {
    public int minJumps(int[] arr) {
 
    }
}";"";"2020-03-25 15:18:51"
14263;1153;"C";"int minJumps(int* arr, int arrSize){
 
}";"";"2020-03-25 15:18:51"
14264;1153;"Rust";"impl Solution {
    pub fn min_jumps(arr: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:51"
14265;1153;"Scala";"object Solution {
    def minJumps(arr: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:51"
14266;1153;"Go";"func minJumps(arr []int) int {
 
}";"";"2020-03-25 15:18:51"
14267;1153;"Kotlin";"class Solution {
    fun minJumps(arr: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:51"
14268;1153;"Python3";"class Solution:
    def minJumps(self, arr: List[int]) -> int:";"";"2020-03-25 15:18:51"
14269;1153;"JavaScript";"/**
 * @param {number[]} arr
 * @return {number}
 */
var minJumps = function(arr) {
 
};";"";"2020-03-25 15:18:51"
14270;1153;"PHP";"class Solution {
 
    /**
     * @param Integer[] $arr
     * @return Integer
     */
    function minJumps($arr) {
 
    }
}";"";"2020-03-25 15:18:51"
14271;1153;"Swift";"class Solution {
    func minJumps(_ arr: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:51"
14272;1153;"Ruby";"# @param {Integer[]} arr";"";"2020-03-25 15:18:51"
14273;1153;"Python";"class Solution(object):
    def minJumps(self, arr):
        """"""
        :type arr: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:51"
14274;1154;"C#";"public class Solution {
    public bool JudgeSquareSum(int c) {
 
    }
}";"";"2020-03-25 15:18:51"
14275;1154;"Java";"class Solution {
    public boolean judgeSquareSum(int c) {
 
    }
}";"";"2020-03-25 15:18:51"
14276;1154;"C";"bool judgeSquareSum(int c){
 
}";"";"2020-03-25 15:18:51"
14277;1154;"Rust";"impl Solution {
    pub fn judge_square_sum(c: i32) -> bool {
        
    }
}";"";"2020-03-25 15:18:51"
14278;1154;"Scala";"object Solution {
    def judgeSquareSum(c: Int): Boolean = {
 
    }
}";"";"2020-03-25 15:18:51"
14279;1154;"Go";"func judgeSquareSum(c int) bool {
 
}";"";"2020-03-25 15:18:51"
14280;1154;"Kotlin";"class Solution {
    fun judgeSquareSum(c: Int): Boolean {
 
    }
}";"";"2020-03-25 15:18:51"
14281;1154;"Python3";"class Solution:
    def judgeSquareSum(self, c: int) -> bool:";"";"2020-03-25 15:18:51"
14282;1154;"JavaScript";"/**
 * @param {number} c
 * @return {boolean}
 */
var judgeSquareSum = function(c) {
 
};";"";"2020-03-25 15:18:51"
14283;1154;"PHP";"class Solution {
 
    /**
     * @param Integer $c
     * @return Boolean
     */
    function judgeSquareSum($c) {
        
    }
}";"";"2020-03-25 15:18:51"
14284;1154;"Swift";"class Solution {
    func judgeSquareSum(_ c: Int) -> Bool {
        
    }
}";"";"2020-03-25 15:18:51"
14285;1154;"Ruby";"# @param {Integer} c
# @return {Boolean}
def judge_square_sum(c)
 
end";"";"2020-03-25 15:18:51"
14286;1154;"Python";"class Solution(object):
    def judgeSquareSum(self, c):
        """"""
        :type c: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:51"
14287;1155;"C#";"public class Solution {
    public int NumberOfSubstrings(string s) {
 
    }
}";"";"2020-03-25 15:18:51"
14288;1155;"Java";"class Solution {
    public int numberOfSubstrings(String s) {
 
    }
}";"";"2020-03-25 15:18:51"
14289;1155;"C";"int numberOfSubstrings(char * s){
 
}";"";"2020-03-25 15:18:51"
14290;1155;"Rust";"impl Solution {
    pub fn number_of_substrings(s: String) -> i32 {
 
    }
}";"";"2020-03-25 15:18:51"
14291;1155;"Scala";"object Solution {
    def numberOfSubstrings(s: String): Int = {
 
    }
}";"";"2020-03-25 15:18:51"
14292;1155;"Go";"func numberOfSubstrings(s string) int {
 
}";"";"2020-03-25 15:18:51"
14293;1155;"Kotlin";"class Solution {
    fun numberOfSubstrings(s: String): Int {
 
    }
}";"";"2020-03-25 15:18:51"
14294;1155;"Python3";"class Solution:
    def numberOfSubstrings(self, s: str) -> int:";"";"2020-03-25 15:18:51"
14295;1155;"JavaScript";"/**
 * @param {string} s
 * @return {number}
 */
var numberOfSubstrings = function(s) {
 
};";"";"2020-03-25 15:18:51"
14296;1155;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return Integer
     */
    function numberOfSubstrings($s) {
 
    }
}";"";"2020-03-25 15:18:51"
14297;1155;"Swift";"class Solution {
    func numberOfSubstrings(_ s: String) -> Int {
 
    }
}";"";"2020-03-25 15:18:51"
14298;1155;"Ruby";"# @param {String} s
# @return {Integer}
def number_of_substrings(s)
 
end";"";"2020-03-25 15:18:51"
14299;1155;"Python";"class Solution(object):
    def numberOfSubstrings(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:51"
14300;1156;"C#";"public class Solution {
    public double MinAreaFreeRect(int[][] points) {
 
    }
}";"";"2020-03-25 15:18:51"
14301;1156;"Java";"class Solution {
    public double minAreaFreeRect(int[][] points) {
 
    }
}";"";"2020-03-25 15:18:51"
14302;1156;"C";"double minAreaFreeRect(int** points, int pointsSize,
 int* pointsColSize){
 
}";"";"2020-03-25 15:18:51"
14303;1156;"Rust";"impl Solution {
    pub fn min_area_free_rect(points: Vec<Vec<i32>>)
 -> f64 {
        
    }
}";"";"2020-03-25 15:18:51"
14304;1156;"Scala";"object Solution {
    def minAreaFreeRect(points: Array[Array[Int]]): 
Double = {
 
    }
}";"";"2020-03-25 15:18:51"
14305;1156;"Go";"func minAreaFreeRect(points [][]int) float64 {
 
}";"";"2020-03-25 15:18:51"
14306;1156;"Kotlin";"class Solution {
    fun minAreaFreeRect(points: Array<IntArray>): 
Double {
 
    }
}";"";"2020-03-25 15:18:51"
14307;1156;"Python3";"class Solution:
    def minAreaFreeRect(self, points: List[List[int]
]) -> float:";"";"2020-03-25 15:18:51"
14308;1156;"JavaScript";"/**
 * @param {number[][]} points
 * @return {number}
 */
var minAreaFreeRect = function(points) {
 
};";"";"2020-03-25 15:18:51"
14309;1156;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $points
     * @return Float
     */
    function minAreaFreeRect($points) {
        
    }
}";"";"2020-03-25 15:18:51"
14310;1156;"Swift";"class Solution {
    func minAreaFreeRect(_ points: [[Int]]) -> 
Double {
        
    }
}";"";"2020-03-25 15:18:51"
14311;1156;"Ruby";"# @param {Integer[][]} points";"";"2020-03-25 15:18:51"
14312;1156;"Python";"class Solution(object):
    def minAreaFreeRect(self, points):
        """"""
        :type points: List[List[int]]
        :rtype: float
        """"""";"";"2020-03-25 15:18:51"
14313;1157;"C#";"public class Solution {
    public int FindMaximizedCapital(int k, int W, 
int[] Profits, int[] Capital) {
 
    }
}";"";"2020-03-25 15:18:51"
14314;1157;"Java";"class Solution {
    public int findMaximizedCapital(int k, int W, 
int[] Profits, int[] Capital) {
 
    }
}";"";"2020-03-25 15:18:51"
14315;1157;"Rust";"impl Solution {
    pub fn find_maximized_capital(k: i32, w: i32, 
profits: Vec<i32>, capital: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:51"
14316;1157;"C";"int findMaximizedCapital(int k, int W, int* Profits,
 int ProfitsSize, int* Capital, int CapitalSize){
 
}";"";"2020-03-25 15:18:51"
14317;1157;"Scala";"object Solution {
    def findMaximizedCapital(k: Int, W: Int, 
Profits: Array[Int], Capital: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:51"
14318;1157;"Go";"func findMaximizedCapital(k int, W int, Profits []
int, Capital []int) int {
 
}";"";"2020-03-25 15:18:51"
14319;1157;"Kotlin";"class Solution {
    fun findMaximizedCapital(k: Int, W: Int, 
Profits: IntArray, Capital: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:51"
14320;1157;"Python3";"class Solution:
    def findMaximizedCapital(self, k: int, W: int, 
Profits: List[int], Capital: List[int]) -> int:";"";"2020-03-25 15:18:51"
14321;1157;"JavaScript";"/**
 * @param {number} k
 * @param {number} W
 * @param {number[]} Profits
 * @param {number[]} Capital
 * @return {number}
 */
var findMaximizedCapital = function(k, W, Profits, 
Capital) {
 
};";"";"2020-03-25 15:18:51"
14322;1157;"PHP";"class Solution {
 
    /**
     * @param Integer $k
     * @param Integer $W
     * @param Integer[] $Profits
     * @param Integer[] $Capital
     * @return Integer
     */
    function findMaximizedCapital($k, $W, $Profits, 
$Capital) {
        
    }
}";"";"2020-03-25 15:18:51"
14323;1157;"Swift";"class Solution {
    func findMaximizedCapital(_ k: Int, _ W: Int, _ 
Profits: [Int], _ Capital: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:51"
14324;1157;"Ruby";"# @param {Integer} k
# @param {Integer} w
# @param {Integer[]} profits
# @param {Integer[]} capital
# @return {Integer}
def find_maximized_capital(k, w, profits, capital)
 
end";"";"2020-03-25 15:18:51"
14325;1157;"Python";"class Solution(object):
    def findMaximizedCapital(self, k, W, Profits, 
Capital):
        """"""
        :type k: int
        :type W: int
        :type Profits: List[int]
        :type Capital: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:51"
14326;1158;"C#";"/*
 * // This is the custom function interface.
 * // You should not implement it, or speculate 
about its implementation
 * public class CustomFunction {
 *     // Returns f(x, y) for any given positive 
integers x and y.
 *     // Note that f(x, y) is increasing with 
respect to both x and y.
 *     // i.e. f(x, y) < f(x + 1, y), f(x, y) < f(x,
 y + 1)
 *     public int f(int x, int y);
 * };
 */
 
public class Solution {
    public IList<IList<int>> FindSolution
(CustomFunction customfunction, int z) {
        
    }
}";"";"2020-03-25 15:18:51"
14327;1158;"Java";"/*
 * // This is the custom function interface.
 * // You should not implement it, or speculate 
about its implementation
 * class CustomFunction {
 *     // Returns f(x, y) for any given positive 
integers x and y.
 *     // Note that f(x, y) is increasing with 
respect to both x and y.
 *     // i.e. f(x, y) < f(x + 1, y), f(x, y) < f(x,
 y + 1)
 *     public int f(int x, int y);
 * };
 */
class Solution {
    public List<List<Integer>> findSolution
(CustomFunction customfunction, int z) {
        
    }
}";"";"2020-03-25 15:18:51"
14328;1158;"C++";"/*
 * // This is the custom function interface.
 * // You should not implement it, or speculate 
about its implementation
 * class CustomFunction {
 * public:
 *     // Returns f(x, y) for any given positive 
integers x and y.
 *     // Note that f(x, y) is increasing with 
respect to both x and y.
 *     // i.e. f(x, y) < f(x + 1, y), f(x, y) < f(x,
 y + 1)
 *     int f(int x, int y);
 * };
 */
 
class Solution {
public:
    vector<vector<int>> findSolution(CustomFunction&
 customfunction, int z) {
        
    }
};";"";"2020-03-25 15:18:51"
14329;1158;"Python3";"""""""
   This is the custom function interface.
   You should not implement it, or speculate about 
its implementation
   class CustomFunction:
       # Returns f(x, y) for any given positive 
integers x and y.
       # Note that f(x, y) is increasing with 
respect to both x and y.
       # i.e. f(x, y) < f(x + 1, y), f(x, y) < f(x, 
y + 1)
       def f(self, x, y):
  
""""""
class Solution:
    def findSolution(self, customfunction: 
'CustomFunction', z: int) -> List[List[int]]:";"";"2020-03-25 15:18:51"
14330;1158;"JavaScript";"/**
 * // This is the CustomFunction's API interface.
 * // You should not implement it, or speculate 
about its implementation
 * function CustomFunction() {
 *
 *     @param {integer, integer} x, y
 *     @return {integer}
 *     this.f = function(x, y) {
 *         ...
 *     };
 *
 * };
 */
/**
 * @param {CustomFunction} customfunction
 * @param {integer} z
 * @return {integer[][]}
 */
var findSolution = function(customfunction, z) {
    
};";"";"2020-03-25 15:18:51"
14331;1158;"Python";"""""""
   This is the custom function interface.
   You should not implement it, or speculate about 
its implementation
   class CustomFunction:
       # Returns f(x, y) for any given positive 
integers x and y.
       # Note that f(x, y) is increasing with 
respect to both x and y.
       # i.e. f(x, y) < f(x + 1, y), f(x, y) < f(x, 
y + 1)
       def f(self, x, y):
  
""""""
class Solution(object):
    def findSolution(self, customfunction, z):
        """"""
        :type num: int
        :type z: int
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:51"
14332;1159;"C#";"public class Solution {
    public IList<string> FizzBuzz(int n) {
 
    }
}";"";"2020-03-25 15:18:52"
14333;1159;"Java";"class Solution {
    public List<String> fizzBuzz(int n) {
 
    }
}";"";"2020-03-25 15:18:52"
14334;1159;"Rust";"impl Solution {
    pub fn fizz_buzz(n: i32) -> Vec<String> {
        
    }
}";"";"2020-03-25 15:18:52"
14335;1159;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** fizzBuzz(int n, int* returnSize){
 
}";"";"2020-03-25 15:18:52"
14336;1159;"Scala";"object Solution {
    def fizzBuzz(n: Int): List[String] = {
 
    }
}";"";"2020-03-25 15:18:52"
14337;1159;"Go";"func fizzBuzz(n int) []string {
 
}";"";"2020-03-25 15:18:52"
14338;1159;"Kotlin";"class Solution {
    fun fizzBuzz(n: Int): List<String> {
 
    }
}";"";"2020-03-25 15:18:52"
14339;1159;"Python3";"class Solution:
    def fizzBuzz(self, n: int) -> List[str]:";"";"2020-03-25 15:18:52"
14340;1159;"JavaScript";"/**
 * @param {number} n
 * @return {string[]}
 */
var fizzBuzz = function(n) {
 
};";"";"2020-03-25 15:18:52"
14341;1159;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @return String[]
     */
    function fizzBuzz($n) {
        
    }
}";"";"2020-03-25 15:18:52"
14342;1159;"Swift";"class Solution {
    func fizzBuzz(_ n: Int) -> [String] {
        
    }
}";"";"2020-03-25 15:18:52"
14343;1159;"Ruby";"# @param {Integer} n
# @return {String[]}
def fizz_buzz(n)
 
end";"";"2020-03-25 15:18:52"
14344;1159;"Python";"class Solution(object):
    def fizzBuzz(self, n):
        """"""
        :type n: int
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:52"
14345;1160;"C#";"public class Solution {
    public int MinCostToMoveChips(int[] chips) {
 
    }
}";"";"2020-03-25 15:18:52"
14346;1160;"Java";"class Solution {
    public int minCostToMoveChips(int[] chips) {
 
    }
}";"";"2020-03-25 15:18:52"
14347;1160;"C";"int minCostToMoveChips(int* chips, int chipsSize){
 
}";"";"2020-03-25 15:18:52"
14348;1160;"Rust";"impl Solution {
    pub fn min_cost_to_move_chips(chips: Vec<i32>) 
-> i32 {
 
    }
}";"";"2020-03-25 15:18:52"
14349;1160;"Scala";"object Solution {
    def minCostToMoveChips(chips: Array[Int]): Int 
= {
 
    }
}";"";"2020-03-25 15:18:52"
14350;1160;"Go";"func minCostToMoveChips(chips []int) int {
 
}";"";"2020-03-25 15:18:52"
14351;1160;"Kotlin";"class Solution {
    fun minCostToMoveChips(chips: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:52"
14352;1160;"Python3";"class Solution:
    def minCostToMoveChips(self, chips: List[int]) 
-> int:";"";"2020-03-25 15:18:52"
14353;1160;"JavaScript";"/**
 * @param {number[]} chips
 * @return {number}
 */
var minCostToMoveChips = function(chips) {
 
};";"";"2020-03-25 15:18:52"
14354;1160;"PHP";"class Solution {
 
    /**
     * @param Integer[] $chips
     * @return Integer
     */
    function minCostToMoveChips($chips) {
 
    }
}";"";"2020-03-25 15:18:52"
14355;1160;"Swift";"class Solution {
    func minCostToMoveChips(_ chips: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:52"
14356;1160;"Ruby";"# @param {Integer[]} chips
# @return {Integer}
def min_cost_to_move_chips(chips)
 
end";"";"2020-03-25 15:18:52"
14357;1160;"Python";"class Solution(object):
    def minCostToMoveChips(self, chips):
        """"""
        :type chips: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:52"
14358;1161;"MS SQL Server";"/* Write your T-SQL query statement below */";"";"2020-03-25 15:18:52"
14359;1161;"Oracle";"/* Write your PL/SQL query statement below */";"";"2020-03-25 15:18:52"
14360;1162;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode OddEvenList(ListNode head) {
 
    }
}";"";"2020-03-25 15:18:52"
14361;1162;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode oddEvenList(ListNode head) {
 
    }
}";"";"2020-03-25 15:18:52"
14362;1162;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
struct ListNode* oddEvenList(struct ListNode* head){
 
}";"";"2020-03-25 15:18:52"
14363;1162;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn odd_even_list(head: 
Option<Box<ListNode>>) -> Option<Box<ListNode>> {
        
    }
}";"";"2020-03-25 15:18:52"
14364;1162;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def oddEvenList(head: ListNode): ListNode = {
 
    }
}";"";"2020-03-25 15:18:52"
14365;1162;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func oddEvenList(head *ListNode) *ListNode {
 
}";"";"2020-03-25 15:18:52"
14366;1162;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun oddEvenList(head: ListNode?): ListNode? {
 
    }
}";"";"2020-03-25 15:18:52"
14367;1162;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def oddEvenList(self, head: ListNode) -> 
ListNode:";"";"2020-03-25 15:18:52"
14368;1162;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var oddEvenList = function(head) {
 
};";"";"2020-03-25 15:18:52"
14369;1162;"PHP";"/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
class Solution {
 
    /**
     * @param ListNode $head
     * @return ListNode
     */
    function oddEvenList($head) {
        
    }
}";"";"2020-03-25 15:18:52"
14370;1162;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func oddEvenList(_ head: ListNode?) -> ListNode?
 {
        
    }
}";"";"2020-03-25 15:18:52"
14371;1162;"Ruby";"# Definition for singly-linked list.";"";"2020-03-25 15:18:52"
14372;1162;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def oddEvenList(self, head):
        """"""
        :type head: ListNode
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:52"
14373;1163;"C#";"/*
// Definition for a Node.
public class Node {
    public int val;
    public IList<Node> children;
 
    public Node() {}
 
    public Node(int _val) {
        val = _val;
    }
 
    public Node(int _val, IList<Node> _children) {
        val = _val;
        children = _children;
    }
}
*/
public class Solution {
    public IList<IList<int>> LevelOrder(Node root) {
        
    }
}";"";"2020-03-25 15:18:52"
14374;1163;"Java";"/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;
 
    public Node() {}
 
    public Node(int _val) {
        val = _val;
    }
 
    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public List<List<Integer>> levelOrder(Node root)
 {
        
    }
}";"";"2020-03-25 15:18:52"
14375;1163;"JavaScript";"/**
 * // Definition for a Node.
 * function Node(val,children) {
 *    this.val = val;
 *    this.children = children;
 * };
 */
/**
 * @param {Node} root
 * @return {number[][]}
 */
var levelOrder = function(root) {
    
};";"";"2020-03-25 15:18:52"
14376;1163;"Python3";"""""""
# Definition for a Node.
class Node:
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children
""""""
class Solution:
    def levelOrder(self, root: 'Node') -> List[List
[int]]:";"";"2020-03-25 15:18:52"
14377;1163;"Go";"/**
 * Definition for a Node.
 * type Node struct {
 *     Val int
 *     Children []*Node
 * }
 */
 
func levelOrder(root *Node) [][]int {
    
}";"";"2020-03-25 15:18:52"
14378;1163;"Python";"""""""
# Definition for a Node.
class Node(object):
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children
""""""
class Solution(object):
    def levelOrder(self, root):
        """"""
        :type root: Node
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:52"
14379;1164;"C#";"public class Solution {
    public int HammingWeight(uint n) {
        
    }
}";"";"2020-03-25 15:18:52"
14380;1164;"Java";"public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
        
    }
}";"";"2020-03-25 15:18:52"
14381;1164;"C";"int hammingWeight(uint32_t n) {
    
}";"";"2020-03-25 15:18:52"
14382;1164;"Python3";"class Solution:
    def hammingWeight(self, n: int) -> int:";"";"2020-03-25 15:18:52"
14383;1164;"JavaScript";"/**
 * @param {number} n - a positive integer
 * @return {number}
 */
var hammingWeight = function(n) {
    
};";"";"2020-03-25 15:18:52"
14384;1164;"Go";"func hammingWeight(num uint32) int {";"";"2020-03-25 15:18:52"
14385;1164;"Swift";"class Solution {
    func hammingWeight(_ n: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:52"
14386;1164;"Ruby";"# @param {Integer} n, a positive integer
# @return {Integer}
def hamming_weight(n)
    
end";"";"2020-03-25 15:18:52"
14387;1164;"Python";"class Solution(object):
    def hammingWeight(self, n):
        """"""
        :type n: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:52"
14388;1165;"C#";"public class Solution {
    public bool CheckPerfectNumber(int num) {
 
    }
}";"";"2020-03-25 15:18:52"
14389;1165;"Java";"class Solution {
    public boolean checkPerfectNumber(int num) {
 
    }
}";"";"2020-03-25 15:18:52"
14390;1165;"C";"bool checkPerfectNumber(int num){
 
}";"";"2020-03-25 15:18:52"
14391;1165;"Rust";"impl Solution {
    pub fn check_perfect_number(num: i32) -> bool {
        
    }
}";"";"2020-03-25 15:18:52"
14392;1165;"Scala";"object Solution {
    def checkPerfectNumber(num: Int): Boolean = {
 
    }
}";"";"2020-03-25 15:18:52"
14393;1165;"Go";"func checkPerfectNumber(num int) bool {
 
}";"";"2020-03-25 15:18:52"
14394;1165;"Kotlin";"class Solution {
    fun checkPerfectNumber(num: Int): Boolean {
 
    }
}";"";"2020-03-25 15:18:52"
14395;1165;"Python3";"class Solution:
    def checkPerfectNumber(self, num: int) -> bool:";"";"2020-03-25 15:18:52"
14396;1165;"JavaScript";"/**
 * @param {number} num
 * @return {boolean}
 */
var checkPerfectNumber = function(num) {
 
};";"";"2020-03-25 15:18:52"
14397;1165;"PHP";"class Solution {
 
    /**
     * @param Integer $num
     * @return Boolean
     */
    function checkPerfectNumber($num) {
        
    }
}";"";"2020-03-25 15:18:52"
14398;1165;"Swift";"class Solution {
    func checkPerfectNumber(_ num: Int) -> Bool {
        
    }
}";"";"2020-03-25 15:18:52"
14399;1165;"Ruby";"# @param {Integer} num
# @return {Boolean}
def check_perfect_number(num)
 
end";"";"2020-03-25 15:18:52"
14400;1165;"Python";"class Solution(object):
    def checkPerfectNumber(self, num):
        """"""
        :type num: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:52"
14401;1166;"C#";"public class Solution {
    public IList<string> PrintVertically(string s) {
        
    }
}";"";"2020-03-25 15:18:52"
14402;1166;"Java";"class Solution {
    public List<String> printVertically(String s) {
 
    }
}";"";"2020-03-25 15:18:52"
14403;1166;"Rust";"impl Solution {
    pub fn print_vertically(s: String) -> 
Vec<String> {
 
    }
}";"";"2020-03-25 15:18:52"
14404;1166;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** printVertically(char * s, int* returnSize){
 
}";"";"2020-03-25 15:18:52"
14405;1166;"Scala";"object Solution {
    def printVertically(s: String): List[String] = {
 
    }
}";"";"2020-03-25 15:18:52"
14406;1166;"Go";"func printVertically(s string) []string {
 
}";"";"2020-03-25 15:18:52"
14407;1166;"Kotlin";"class Solution {
    fun printVertically(s: String): List<String> {
 
    }
}";"";"2020-03-25 15:18:52"
14408;1166;"Python3";"class Solution:
    def printVertically(self, s: str) -> List[str]:";"";"2020-03-25 15:18:52"
14409;1166;"JavaScript";"/**
 * @param {string} s
 * @return {string[]}
 */
var printVertically = function(s) {
    
};";"";"2020-03-25 15:18:52"
14410;1166;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return String[]
     */
    function printVertically($s) {
 
    }
}";"";"2020-03-25 15:18:52"
14411;1166;"Swift";"class Solution {
    func printVertically(_ s: String) -> [String] {
 
    }
}";"";"2020-03-25 15:18:52"
14412;1166;"Ruby";"# @param {String} s
# @return {String[]}
def print_vertically(s)
    
end";"";"2020-03-25 15:18:52"
14413;1166;"Python";"class Solution(object):
    def printVertically(self, s):
        """"""
        :type s: str
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:52"
14414;1167;"C#";"public class Solution {
    public string MakeLargestSpecial(string S) {
 
    }
}";"";"2020-03-25 15:18:52"
14415;1167;"Java";"class Solution {
    public String makeLargestSpecial(String S) {
 
    }
}";"";"2020-03-25 15:18:52"
14416;1167;"C";"char * makeLargestSpecial(char * S){
 
}";"";"2020-03-25 15:18:52"
14417;1167;"Rust";"impl Solution {
    pub fn make_largest_special(s: String) -> 
String {
        
    }
}";"";"2020-03-25 15:18:52"
14418;1167;"Scala";"object Solution {
    def makeLargestSpecial(S: String): String = {
 
    }
}";"";"2020-03-25 15:18:52"
14419;1167;"Python3";"class Solution:
    def makeLargestSpecial(self, S: str) -> str:";"";"2020-03-25 15:18:52"
14420;1167;"JavaScript";"/**
 * @param {string} S
 * @return {string}
 */
var makeLargestSpecial = function(S) {
 
};";"";"2020-03-25 15:18:52"
14421;1167;"Go";"func makeLargestSpecial(S string) string {
 
}";"";"2020-03-25 15:18:52"
14422;1167;"PHP";"class Solution {
 
    /**
     * @param String $S
     * @return String
     */
    function makeLargestSpecial($S) {
        
    }
}";"";"2020-03-25 15:18:52"
14423;1167;"Ruby";"# @param {String} s
# @return {String}
def make_largest_special(s)
 
end";"";"2020-03-25 15:18:52"
14424;1167;"Python";"class Solution(object):
    def makeLargestSpecial(self, S):
        """"""
        :type S: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:52"
14425;1167;"Kotlin";"class Solution {
    fun makeLargestSpecial(S: String): String {
 
    }
}";"";"2020-03-25 15:18:52"
14426;1168;"C#";"public class Solution {
    public int Rob(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:52"
14427;1168;"Java";"class Solution {
    public int rob(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:52"
14428;1168;"C++";"class Solution {
public:
    int rob(vector<int>& nums) {
 
    }
};";"";"2020-03-25 15:18:52"
14429;1168;"C";"int rob(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:52"
14430;1168;"Rust";"impl Solution {
    pub fn rob(nums: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:52"
14431;1168;"Scala";"object Solution {
    def rob(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:52"
14432;1168;"Go";"func rob(nums []int) int {
 
}";"";"2020-03-25 15:18:52"
14433;1168;"Kotlin";"class Solution {
    fun rob(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:52"
14434;1168;"Python3";"class Solution:
    def rob(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:52"
14435;1168;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var rob = function(nums) {
 
};";"";"2020-03-25 15:18:52"
14436;1168;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function rob($nums) {
 
    }
}";"";"2020-03-25 15:18:52"
14437;1168;"Swift";"class Solution {
    func rob(_ nums: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:52"
14438;1168;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def rob(nums)
 
end";"";"2020-03-25 15:18:52"
14439;1168;"Python";"class Solution(object):
    def rob(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:52"
14440;1169;"C#";"public class Solution {
    public double LargestTriangleArea(int[][] 
points) {
 
    }
}";"";"2020-03-25 15:18:52"
14441;1169;"Java";"class Solution {
    public double largestTriangleArea(int[][] 
points) {
 
    }
}";"";"2020-03-25 15:18:52"
14442;1169;"Rust";"impl Solution {
    pub fn largest_triangle_area(points: 
Vec<Vec<i32>>) -> f64 {
        
    }
}";"";"2020-03-25 15:18:52"
14443;1169;"C";"double largestTriangleArea(int** points, int 
pointsSize, int* pointsColSize){
 
}";"";"2020-03-25 15:18:52"
14444;1169;"Scala";"object Solution {
    def largestTriangleArea(points: Array[Array[Int]
]): Double = {
 
    }
}";"";"2020-03-25 15:18:52"
14445;1169;"Go";"func largestTriangleArea(points [][]int) float64 {
 
}";"";"2020-03-25 15:18:52"
14446;1169;"Kotlin";"class Solution {
    fun largestTriangleArea(points: Array<IntArray>)
: Double {
 
    }
}";"";"2020-03-25 15:18:52"
14447;1169;"Python3";"class Solution:
    def largestTriangleArea(self, points: List[List
[int]]) -> float:";"";"2020-03-25 15:18:52"
14448;1169;"JavaScript";"/**
 * @param {number[][]} points
 * @return {number}
 */
var largestTriangleArea = function(points) {
 
};";"";"2020-03-25 15:18:52"
14449;1169;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $points
     * @return Float
     */
    function largestTriangleArea($points) {
        
    }
}";"";"2020-03-25 15:18:52"
14450;1169;"Swift";"class Solution {
    func largestTriangleArea(_ points: [[Int]]) -> 
Double {
        
    }
}";"";"2020-03-25 15:18:52"
14451;1169;"Ruby";"# @param {Integer[][]} points
# @return {Float}
def largest_triangle_area(points)
 
end";"";"2020-03-25 15:18:52"
14452;1169;"Python";"class Solution(object):
    def largestTriangleArea(self, points):
        """"""
        :type points: List[List[int]]
        :rtype: float
        """"""";"";"2020-03-25 15:18:52"
14453;1170;"C#";"public class Solution {
    public int LadderLength(string beginWord, 
string endWord, IList<string> wordList) {
 
    }
}";"";"2020-03-25 15:18:52"
14454;1170;"Java";"class Solution {
    public int ladderLength(String beginWord, 
String endWord, List<String> wordList) {
 
    }
}";"";"2020-03-25 15:18:52"
14455;1170;"Rust";"impl Solution {
    pub fn ladder_length(begin_word: String, 
end_word: String, word_list: Vec<String>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:52"
14456;1170;"C";"int ladderLength(char * beginWord, char * endWord, 
char ** wordList, int wordListSize){
 
}";"";"2020-03-25 15:18:52"
14457;1170;"Scala";"object Solution {
    def ladderLength(beginWord: String, endWord: 
String, wordList: List[String]): Int = {
 
    }
}";"";"2020-03-25 15:18:52"
14458;1170;"Go";"func ladderLength(beginWord string, endWord string, 
wordList []string) int {
 
}";"";"2020-03-25 15:18:52"
14459;1170;"Kotlin";"class Solution {
    fun ladderLength(beginWord: String, endWord: 
String, wordList: List<String>): Int {
 
    }
}";"";"2020-03-25 15:18:52"
14460;1170;"Python3";"class Solution:
    def ladderLength(self, beginWord: str, endWord: 
str, wordList: List[str]) -> int:";"";"2020-03-25 15:18:52"
14461;1170;"JavaScript";"/**
 * @param {string} beginWord
 * @param {string} endWord
 * @param {string[]} wordList
 * @return {number}
 */
var ladderLength = function(beginWord, endWord, 
wordList) {
 
};";"";"2020-03-25 15:18:52"
14462;1170;"PHP";"class Solution {";"";"2020-03-25 15:18:52"
14463;1170;"Swift";"class Solution {
    func ladderLength(_ beginWord: String, _ 
endWord: String, _ wordList: [String]) -> Int {
 
    }
}";"";"2020-03-25 15:18:52"
14464;1170;"Ruby";"# @param {String} begin_word
# @param {String} end_word
# @param {String[]} word_list
# @return {Integer}
def ladder_length(begin_word, end_word, word_list)
 
end";"";"2020-03-25 15:18:52"
14465;1170;"Python";"class Solution(object):
    def ladderLength(self, beginWord, endWord, 
wordList):
        """"""
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: int
        """"""";"";"2020-03-25 15:18:52"
14466;1171;"C#";"public class Solution {
    public int[] SortArray(int[] nums) {
        
    }
}";"";"2020-03-25 15:18:52"
14467;1171;"Java";"class Solution {
    public int[] sortArray(int[] nums) {
        
    }
}";"";"2020-03-25 15:18:52"
14468;1171;"Rust";"impl Solution {
    pub fn sort_array(nums: Vec<i32>) -> Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:52"
14469;1171;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* sortArray(int* nums, int numsSize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:52"
14470;1171;"Scala";"object Solution {
    def sortArray(nums: Array[Int]): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:52"
14471;1171;"Go";"func sortArray(nums []int) []int {
    
}";"";"2020-03-25 15:18:52"
14472;1171;"Kotlin";"class Solution {
    fun sortArray(nums: IntArray): IntArray {
 
    }
}";"";"2020-03-25 15:18:52"
14473;1171;"Python3";"class Solution:
    def sortArray(self, nums: List[int]) -> List
[int]:";"";"2020-03-25 15:18:52"
14474;1171;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number[]}
 */
var sortArray = function(nums) {
    
};";"";"2020-03-25 15:18:52"
14475;1171;"PHP";"class Solution {";"";"2020-03-25 15:18:52"
14476;1171;"Swift";"class Solution {
    func sortArray(_ nums: [Int]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:52"
14477;1171;"Ruby";"# @param {Integer[]} nums
# @return {Integer[]}
def sort_array(nums)
 
end";"";"2020-03-25 15:18:52"
14478;1171;"Python";"class Solution(object):
    def sortArray(self, nums):
        """"""
        :type nums: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:52"
14479;1172;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode RemoveNthFromEnd(ListNode head, 
int n) {
 
    }
}";"";"2020-03-25 15:18:52"
14480;1172;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, 
int n) {
 
    }
}";"";"2020-03-25 15:18:52"
14481;1172;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn remove_nth_from_end(head: 
Option<Box<ListNode>>, n: i32) -> 
Option<Box<ListNode>> {
        
    }
}";"";"2020-03-25 15:18:52"
14482;1172;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
struct ListNode* removeNthFromEnd(struct ListNode* 
head, int n){
 
}";"";"2020-03-25 15:18:52"
14483;1172;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def removeNthFromEnd(head: ListNode, n: Int): 
ListNode = {
 
    }
}";"";"2020-03-25 15:18:52"
14484;1172;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func removeNthFromEnd(head *ListNode, n int) 
*ListNode {
 
}";"";"2020-03-25 15:18:52"
14485;1172;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun removeNthFromEnd(head: ListNode?, n: Int): 
ListNode? {
 
    }
}";"";"2020-03-25 15:18:52"
14486;1172;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def removeNthFromEnd(self, head: ListNode, n: 
int) -> ListNode:";"";"2020-03-25 15:18:52"
14487;1172;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @param {number} n
 * @return {ListNode}
 */
var removeNthFromEnd = function(head, n) {
 
};";"";"2020-03-25 15:18:52"
14488;1172;"PHP";"/**";"";"2020-03-25 15:18:52"
14489;1172;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func removeNthFromEnd(_ head: ListNode?, _ n: 
Int) -> ListNode? {
        
    }
}";"";"2020-03-25 15:18:52"
14490;1172;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# @param {ListNode} head
# @param {Integer} n
# @return {ListNode}
def remove_nth_from_end(head, n)
 
end";"";"2020-03-25 15:18:52"
14491;1172;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def removeNthFromEnd(self, head, n):
        """"""
        :type head: ListNode
        :type n: int
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:52"
14492;1173;"C#";"public class Solution {
    public bool IsMatch(string s, string p) {
 
    }
}";"";"2020-03-25 15:18:52"
14493;1173;"Java";"class Solution {
    public boolean isMatch(String s, String p) {
 
    }
}";"";"2020-03-25 15:18:52"
14494;1173;"C++";"class Solution {
public:
    bool isMatch(string s, string p) {
        
    }
};";"";"2020-03-25 15:18:52"
14495;1173;"C";"bool isMatch(char * s, char * p){
 
}";"";"2020-03-25 15:18:52"
14496;1173;"Rust";"impl Solution {
    pub fn is_match(s: String, p: String) -> bool {
        
    }
}";"";"2020-03-25 15:18:52"
14497;1173;"Scala";"object Solution {
    def isMatch(s: String, p: String): Boolean = {
 
    }
}";"";"2020-03-25 15:18:52"
14498;1173;"Go";"func isMatch(s string, p string) bool {
 
}";"";"2020-03-25 15:18:52"
14499;1173;"Kotlin";"class Solution {
    fun isMatch(s: String, p: String): Boolean {
 
    }
}";"";"2020-03-25 15:18:52"
14500;1173;"Python3";"class Solution:
    def isMatch(self, s: str, p: str) -> bool:";"";"2020-03-25 15:18:52"
14501;1173;"JavaScript";"/**
 * @param {string} s
 * @param {string} p
 * @return {boolean}
 */
var isMatch = function(s, p) {
 
};";"";"2020-03-25 15:18:52"
14502;1173;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @param String $p
     * @return Boolean
     */
    function isMatch($s, $p) {
        
    }
}";"";"2020-03-25 15:18:52"
14503;1173;"Swift";"class Solution {
    func isMatch(_ s: String, _ p: String) -> Bool {
        
    }
}";"";"2020-03-25 15:18:52"
14504;1173;"Ruby";"# @param {String} s
# @param {String} p
# @return {Boolean}
def is_match(s, p)
 
end";"";"2020-03-25 15:18:52"
14505;1173;"Python";"class Solution(object):
    def isMatch(self, s, p):
        """"""
        :type s: str
        :type p: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:52"
14506;1174;"C#";"public class Solution {
    public int CoinChange(int[] coins, int amount) {
 
    }
}";"";"2020-03-25 15:18:52"
14507;1174;"Java";"class Solution {
    public int coinChange(int[] coins, int amount) {
 
    }
}";"";"2020-03-25 15:18:52"
14508;1174;"C";"int coinChange(int* coins, int coinsSize, int 
amount){
 
}";"";"2020-03-25 15:18:52"
14509;1174;"Rust";"impl Solution {
    pub fn coin_change(coins: Vec<i32>, amount: i32)
 -> i32 {
        
    }
}";"";"2020-03-25 15:18:52"
14510;1174;"Scala";"object Solution {
    def coinChange(coins: Array[Int], amount: Int): 
Int = {
 
    }
}";"";"2020-03-25 15:18:52"
14511;1174;"Go";"func coinChange(coins []int, amount int) int {
 
}";"";"2020-03-25 15:18:52"
14512;1174;"Kotlin";"class Solution {
    fun coinChange(coins: IntArray, amount: Int): 
Int {
 
    }
}";"";"2020-03-25 15:18:52"
14513;1174;"Python3";"class Solution:
    def coinChange(self, coins: List[int], amount: 
int) -> int:";"";"2020-03-25 15:18:52"
14514;1174;"JavaScript";"/**
 * @param {number[]} coins
 * @param {number} amount
 * @return {number}
 */
var coinChange = function(coins, amount) {
 
};";"";"2020-03-25 15:18:52"
14515;1174;"PHP";"class Solution {
 
    /**
     * @param Integer[] $coins
     * @param Integer $amount
     * @return Integer
     */
    function coinChange($coins, $amount) {
        
    }
}";"";"2020-03-25 15:18:52"
14516;1174;"Swift";"class Solution {
    func coinChange(_ coins: [Int], _ amount: Int) 
-> Int {
        
    }
}";"";"2020-03-25 15:18:52"
14517;1174;"Ruby";"# @param {Integer[]} coins
# @param {Integer} amount
# @return {Integer}
def coin_change(coins, amount)
 
end";"";"2020-03-25 15:18:52"
14518;1174;"Python";"class Solution(object):
    def coinChange(self, coins, amount):
        """"""
        :type coins: List[int]
        :type amount: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:52"
14519;1175;"C#";"public class Solution {
    public void SetZeroes(int[][] matrix) {
 
    }
}";"";"2020-03-25 15:18:52"
14520;1175;"Java";"class Solution {
    public void setZeroes(int[][] matrix) {
 
    }
}";"";"2020-03-25 15:18:52"
14521;1175;"C";"void setZeroes(int** matrix, int matrixSize, int* 
matrixColSize){
 
}";"";"2020-03-25 15:18:52"
14522;1175;"Rust";"impl Solution {
    pub fn set_zeroes(matrix: &mut Vec<Vec<i32>>) {
 
    }
}";"";"2020-03-25 15:18:52"
14523;1175;"Scala";"object Solution {
    def setZeroes(matrix: Array[Array[Int]]): Unit 
= {
 
    }
}";"";"2020-03-25 15:18:52"
14524;1175;"Go";"func setZeroes(matrix [][]int)  {
 
}";"";"2020-03-25 15:18:52"
14525;1175;"Kotlin";"class Solution {
    fun setZeroes(matrix: Array<IntArray>): Unit {
 
    }
}";"";"2020-03-25 15:18:52"
14526;1175;"Python3";"class Solution:
    def setZeroes(self, matrix: List[List[int]]) -> 
None:
        """"""
        Do not return anything, modify matrix 
in-place instead.
        """"""";"";"2020-03-25 15:18:52"
14527;1175;"JavaScript";"/**
 * @param {number[][]} matrix
 * @return {void} Do not return anything, modify 
matrix in-place instead.
 */
var setZeroes = function(matrix) {
 
};";"";"2020-03-25 15:18:52"
14528;1175;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $matrix
     * @return NULL
     */
    function setZeroes(&$matrix) {
 
    }
}";"";"2020-03-25 15:18:52"
14529;1175;"Swift";"class Solution {
    func setZeroes(_ matrix: inout [[Int]]) {
 
    }
}";"";"2020-03-25 15:18:52"
14530;1175;"Ruby";"# @param {Integer[][]} matrix
# @return {Void} Do not return anything, modify 
matrix in-place instead.
def set_zeroes(matrix)
 
end";"";"2020-03-25 15:18:52"
14531;1175;"Python";"class Solution(object):
    def setZeroes(self, matrix):
        """"""
        :type matrix: List[List[int]]
        :rtype: None Do not return anything, modify 
matrix in-place instead.
        """"""";"";"2020-03-25 15:18:52"
14532;1176;"C#";"public class Solution {
    public int MaxArea(int[] height) {
 
    }
}";"";"2020-03-25 15:18:52"
14533;1176;"Java";"class Solution {
    public int maxArea(int[] height) {
 
    }
}";"";"2020-03-25 15:18:52"
14534;1176;"Rust";"impl Solution {
    pub fn max_area(height: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:52"
14535;1176;"C";"int maxArea(int* height, int heightSize){
 
}";"";"2020-03-25 15:18:52"
14536;1176;"Scala";"object Solution {
    def maxArea(height: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:52"
14537;1176;"Go";"func maxArea(height []int) int {
 
}";"";"2020-03-25 15:18:52"
14538;1176;"Kotlin";"class Solution {
    fun maxArea(height: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:52"
14539;1176;"Python3";"class Solution:
    def maxArea(self, height: List[int]) -> int:";"";"2020-03-25 15:18:52"
14540;1176;"JavaScript";"/**
 * @param {number[]} height
 * @return {number}
 */
var maxArea = function(height) {
 
};";"";"2020-03-25 15:18:52"
14541;1176;"PHP";"class Solution {";"";"2020-03-25 15:18:52"
14542;1176;"Swift";"class Solution {
    func maxArea(_ height: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:52"
14543;1176;"Ruby";"# @param {Integer[]} height
# @return {Integer}
def max_area(height)
 
end";"";"2020-03-25 15:18:52"
14544;1176;"Python";"class Solution(object):
    def maxArea(self, height):
        """"""
        :type height: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:52"
14545;1177;"C#";"public class Solution {
    public IList<int> FindDisappearedNumbers(int[] 
nums) {
 
    }
}";"";"2020-03-25 15:18:52"
14546;1177;"Java";"class Solution {
    public List<Integer> findDisappearedNumbers(int
[] nums) {
 
    }
}";"";"2020-03-25 15:18:52"
14547;1177;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* findDisappearedNumbers(int* nums, int numsSize,
 int* returnSize){
 
}";"";"2020-03-25 15:18:52"
14548;1177;"Rust";"impl Solution {
    pub fn find_disappeared_numbers(nums: Vec<i32>) 
-> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:52"
14549;1177;"Scala";"object Solution {
    def findDisappearedNumbers(nums: Array[Int]): 
List[Int] = {
 
    }
}";"";"2020-03-25 15:18:52"
14550;1177;"Go";"func findDisappearedNumbers(nums []int) []int {
 
}";"";"2020-03-25 15:18:52"
14551;1177;"Kotlin";"class Solution {
    fun findDisappearedNumbers(nums: IntArray): 
List<Int> {
 
    }
}";"";"2020-03-25 15:18:52"
14552;1177;"Python3";"class Solution:
    def findDisappearedNumbers(self, nums: List[int]
) -> List[int]:";"";"2020-03-25 15:18:52"
14553;1177;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number[]}
 */
var findDisappearedNumbers = function(nums) {
 
};";"";"2020-03-25 15:18:52"
14554;1177;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer[]
     */
    function findDisappearedNumbers($nums) {
        
    }
}";"";"2020-03-25 15:18:52"
14555;1177;"Swift";"class Solution {
    func findDisappearedNumbers(_ nums: [Int]) -> 
[Int] {
        
    }
}";"";"2020-03-25 15:18:52"
14556;1177;"Ruby";"# @param {Integer[]} nums
# @return {Integer[]}
def find_disappeared_numbers(nums)
 
end";"";"2020-03-25 15:18:52"
14557;1177;"Python";"class Solution(object):
    def findDisappearedNumbers(self, nums):
        """"""
        :type nums: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:52"
14558;1178;"C#";"public class Solution {
    public int SmallestRangeI(int[] A, int K) {
 
    }
}";"";"2020-03-25 15:18:52"
14559;1178;"Java";"class Solution {
    public int smallestRangeI(int[] A, int K) {
 
    }
}";"";"2020-03-25 15:18:52"
14560;1178;"Rust";"impl Solution {
    pub fn smallest_range_i(a: Vec<i32>, k: i32) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:52"
14561;1178;"C";"int smallestRangeI(int* A, int ASize, int K){
 
}";"";"2020-03-25 15:18:52"
14562;1178;"Scala";"object Solution {
    def smallestRangeI(A: Array[Int], K: Int): Int 
= {
 
    }
}";"";"2020-03-25 15:18:52"
14563;1178;"Go";"func smallestRangeI(A []int, K int) int {
 
}";"";"2020-03-25 15:18:52"
14564;1178;"Kotlin";"class Solution {
    fun smallestRangeI(A: IntArray, K: Int): Int {
 
    }
}";"";"2020-03-25 15:18:52"
14565;1178;"Python3";"class Solution:
    def smallestRangeI(self, A: List[int], K: int) 
-> int:";"";"2020-03-25 15:18:52"
14566;1178;"JavaScript";"/**
 * @param {number[]} A
 * @param {number} K
 * @return {number}
 */
var smallestRangeI = function(A, K) {
 
};";"";"2020-03-25 15:18:52"
14567;1178;"PHP";"class Solution {";"";"2020-03-25 15:18:52"
14568;1178;"Swift";"class Solution {
    func smallestRangeI(_ A: [Int], _ K: Int) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:52"
14569;1178;"Ruby";"# @param {Integer[]} a
# @param {Integer} k
# @return {Integer}
def smallest_range_i(a, k)
 
end";"";"2020-03-25 15:18:52"
14570;1178;"Python";"class Solution(object):
    def smallestRangeI(self, A, K):
        """"""
        :type A: List[int]
        :type K: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:52"
14571;1179;"C#";"public class Solution {
    public int MaxCount(int m, int n, int[][] ops) {
 
    }
}";"";"2020-03-25 15:18:52"
14572;1179;"Java";"class Solution {
    public int maxCount(int m, int n, int[][] ops) {
 
    }
}";"";"2020-03-25 15:18:52"
14573;1179;"C++";"class Solution {
public:
    int maxCount(int m, int n, vector<vector<int>>& 
ops) {
 
    }
};";"";"2020-03-25 15:18:52"
14574;1179;"C";"int maxCount(int m, int n, int** ops, int opsSize, 
int* opsColSize){
 
}";"";"2020-03-25 15:18:52"
14575;1179;"Rust";"impl Solution {
    pub fn max_count(m: i32, n: i32, ops: 
Vec<Vec<i32>>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:52"
14576;1179;"Scala";"object Solution {
    def maxCount(m: Int, n: Int, ops: Array[Array
[Int]]): Int = {
 
    }
}";"";"2020-03-25 15:18:52"
14577;1179;"Go";"func maxCount(m int, n int, ops [][]int) int {
 
}";"";"2020-03-25 15:18:52"
14578;1179;"Kotlin";"class Solution {
    fun maxCount(m: Int, n: Int, ops: 
Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:52"
14579;1179;"Python3";"class Solution:
    def maxCount(self, m: int, n: int, ops: List
[List[int]]) -> int:";"";"2020-03-25 15:18:52"
14580;1179;"JavaScript";"/**
 * @param {number} m
 * @param {number} n
 * @param {number[][]} ops
 * @return {number}
 */
var maxCount = function(m, n, ops) {
 
};";"";"2020-03-25 15:18:52"
14581;1179;"PHP";"class Solution {
 
    /**
     * @param Integer $m
     * @param Integer $n
     * @param Integer[][] $ops
     * @return Integer
     */
    function maxCount($m, $n, $ops) {
        
    }
}";"";"2020-03-25 15:18:52"
14582;1179;"Swift";"class Solution {
    func maxCount(_ m: Int, _ n: Int, _ ops: [[Int]]
) -> Int {
        
    }
}";"";"2020-03-25 15:18:52"
14583;1179;"Ruby";"# @param {Integer} m
# @param {Integer} n
# @param {Integer[][]} ops
# @return {Integer}
def max_count(m, n, ops)
 
end";"";"2020-03-25 15:18:52"
14584;1179;"Python";"class Solution(object):
    def maxCount(self, m, n, ops):
        """"""
        :type m: int
        :type n: int
        :type ops: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:52"
14585;1180;"C#";"public class Solution {
    public int[][] SpiralMatrixIII(int R, int C, 
int r0, int c0) {
 
    }
}";"";"2020-03-25 15:18:52"
14586;1180;"Java";"class Solution {
    public int[][] spiralMatrixIII(int R, int C, 
int r0, int c0) {
 
    }
}";"";"2020-03-25 15:18:52"
14587;1180;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** spiralMatrixIII(int R, int C, int r0, int c0, 
int* returnSize, int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:52"
14588;1180;"Rust";"impl Solution {
    pub fn spiral_matrix_iii(r: i32, c: i32, r0: 
i32, c0: i32) -> Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:52"
14589;1180;"Scala";"object Solution {
    def spiralMatrixIII(R: Int, C: Int, r0: Int, 
c0: Int): Array[Array[Int]] = {
 
    }
}";"";"2020-03-25 15:18:52"
14590;1180;"Go";"func spiralMatrixIII(R int, C int, r0 int, c0 int) 
[][]int {
 
}";"";"2020-03-25 15:18:52"
14591;1180;"Kotlin";"class Solution {
    fun spiralMatrixIII(R: Int, C: Int, r0: Int, 
c0: Int): Array<IntArray> {
 
    }
}";"";"2020-03-25 15:18:52"
14592;1180;"Python3";"class Solution:
    def spiralMatrixIII(self, R: int, C: int, r0: 
int, c0: int) -> List[List[int]]:";"";"2020-03-25 15:18:52"
14593;1180;"JavaScript";"/**
 * @param {number} R
 * @param {number} C
 * @param {number} r0
 * @param {number} c0
 * @return {number[][]}
 */
var spiralMatrixIII = function(R, C, r0, c0) {
 
};";"";"2020-03-25 15:18:52"
14594;1180;"PHP";"class Solution {
 
    /**
     * @param Integer $R
     * @param Integer $C
     * @param Integer $r0
     * @param Integer $c0
     * @return Integer[][]
     */
    function spiralMatrixIII($R, $C, $r0, $c0) {
        
    }
}";"";"2020-03-25 15:18:52"
14595;1180;"Swift";"class Solution {
    func spiralMatrixIII(_ R: Int, _ C: Int, _ r0: 
Int, _ c0: Int) -> [[Int]] {
        
    }
}";"";"2020-03-25 15:18:52"
14596;1180;"Ruby";"# @param {Integer} r";"";"2020-03-25 15:18:52"
14597;1180;"Python";"class Solution(object):
    def spiralMatrixIII(self, R, C, r0, c0):
        """"""
        :type R: int
        :type C: int
        :type r0: int
        :type c0: int
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:52"
14598;1181;"C#";"public class Solution {
    public int[] GridIllumination(int N, int[][] 
lamps, int[][] queries) {
 
    }
}";"";"2020-03-25 15:18:52"
14599;1181;"Java";"class Solution {
    public int[] gridIllumination(int N, int[][] 
lamps, int[][] queries) {
 
    }
}";"";"2020-03-25 15:18:52"
14600;1181;"Rust";"impl Solution {
    pub fn grid_illumination(n: i32, lamps: 
Vec<Vec<i32>>, queries: Vec<Vec<i32>>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:52"
14601;1181;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* gridIllumination(int N, int** lamps, int 
lampsSize, int* lampsColSize, int** queries, int 
queriesSize, int* queriesColSize, int* returnSize){
 
}";"";"2020-03-25 15:18:52"
14602;1181;"Scala";"object Solution {
    def gridIllumination(N: Int, lamps: Array[Array
[Int]], queries: Array[Array[Int]]): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:52"
14603;1181;"Go";"func gridIllumination(N int, lamps [][]int, queries 
[][]int) []int {
 
}";"";"2020-03-25 15:18:52"
14604;1181;"Kotlin";"class Solution {
    fun gridIllumination(N: Int, lamps: 
Array<IntArray>, queries: Array<IntArray>): 
IntArray {
 
    }
}";"";"2020-03-25 15:18:52"
14605;1181;"Python3";"class Solution:
    def gridIllumination(self, N: int, lamps: List
[List[int]], queries: List[List[int]]) -> List[int]:";"";"2020-03-25 15:18:52"
14606;1181;"JavaScript";"/**
 * @param {number} N
 * @param {number[][]} lamps
 * @param {number[][]} queries
 * @return {number[]}
 */
var gridIllumination = function(N, lamps, queries) {
 
};";"";"2020-03-25 15:18:52"
14607;1181;"PHP";"class Solution {";"";"2020-03-25 15:18:52"
14608;1181;"Swift";"class Solution {
    func gridIllumination(_ N: Int, _ lamps: [[Int]]
, _ queries: [[Int]]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:52"
14609;1181;"Ruby";"# @param {Integer} n
# @param {Integer[][]} lamps
# @param {Integer[][]} queries
# @return {Integer[]}
def grid_illumination(n, lamps, queries)
 
end";"";"2020-03-25 15:18:52"
14610;1181;"Python";"class Solution(object):
    def gridIllumination(self, N, lamps, queries):
        """"""
        :type N: int
        :type lamps: List[List[int]]
        :type queries: List[List[int]]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:52"
14611;1182;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode BstToGst(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:53"
14612;1182;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode bstToGst(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:53"
14613;1182;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* bstToGst(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:53"
14614;1182;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn bst_to_gst(root: 
Option<Rc<RefCell<TreeNode>>>) -> 
Option<Rc<RefCell<TreeNode>>> {
        
    }";"";"2020-03-25 15:18:53"
14615;1182;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def bstToGst(root: TreeNode): TreeNode = {
 
    }
}";"";"2020-03-25 15:18:53"
14616;1182;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func bstToGst(root *TreeNode) *TreeNode {
 
}";"";"2020-03-25 15:18:53"
14617;1182;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun bstToGst(root: TreeNode?): TreeNode? {
 
    }
}";"";"2020-03-25 15:18:53"
14618;1182;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def bstToGst(self, root: TreeNode) -> TreeNode:";"";"2020-03-25 15:18:53"
14619;1182;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {TreeNode}
 */
var bstToGst = function(root) {
 
};";"";"2020-03-25 15:18:53"
14620;1182;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @return TreeNode
     */
    function bstToGst($root) {
        
    }
}";"";"2020-03-25 15:18:53"
14621;1182;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func bstToGst(_ root: TreeNode?) -> TreeNode? {
        
    }
}";"";"2020-03-25 15:18:53"
14622;1182;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:53"
14623;1182;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def bstToGst(self, root):
        """"""
        :type root: TreeNode
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:53"
14624;1183;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<TreeNode> DelNodes(TreeNode root, 
int[] to_delete) {
 
    }
}";"";"2020-03-25 15:18:53"
14625;1183;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<TreeNode> delNodes(TreeNode root, 
int[] to_delete) {
 
    }
}";"";"2020-03-25 15:18:53"
14626;1183;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
struct TreeNode** delNodes(struct TreeNode* root, 
int* to_delete, int to_deleteSize, int* returnSize){
 
}";"";"2020-03-25 15:18:53"
14627;1183;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn del_nodes(root: 
Option<Rc<RefCell<TreeNode>>>, to_delete: Vec<i32>) 
-> Vec<Option<Rc<RefCell<TreeNode>>>> {
        
    }";"";"2020-03-25 15:18:53"
14628;1183;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def delNodes(root: TreeNode, to_delete: Array
[Int]): List[TreeNode] = {
 
    }
}";"";"2020-03-25 15:18:53"
14629;1183;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func delNodes(root *TreeNode, to_delete []int) []
*TreeNode {
 
}";"";"2020-03-25 15:18:53"
14630;1183;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun delNodes(root: TreeNode?, to_delete: 
IntArray): List<TreeNode?> {
 
    }
}";"";"2020-03-25 15:18:53"
14631;1183;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def delNodes(self, root: TreeNode, to_delete: 
List[int]) -> List[TreeNode]:";"";"2020-03-25 15:18:53"
14632;1183;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number[]} to_delete
 * @return {TreeNode[]}
 */
var delNodes = function(root, to_delete) {
 
};";"";"2020-03-25 15:18:53"
14633;1183;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @param Integer[] $to_delete
     * @return TreeNode[]
     */
    function delNodes($root, $to_delete) {
        
    }
}";"";"2020-03-25 15:18:53"
14634;1183;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func delNodes(_ root: TreeNode?, _ to_delete: 
[Int]) -> [TreeNode?] {
        
    }
}";"";"2020-03-25 15:18:53"
14635;1183;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:53"
14636;1183;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def delNodes(self, root, to_delete):
        """"""
        :type root: TreeNode
        :type to_delete: List[int]
        :rtype: List[TreeNode]
        """"""";"";"2020-03-25 15:18:53"
14637;1184;"C#";"public class Solution {
    public int NumJewelsInStones(string J, string S)
 {
 
    }
}";"";"2020-03-25 15:18:53"
14638;1184;"Java";"class Solution {
    public int numJewelsInStones(String J, String S)
 {
 
    }
}";"";"2020-03-25 15:18:53"
14639;1184;"Rust";"impl Solution {
    pub fn num_jewels_in_stones(j: String, s: 
String) -> i32 {
        
    }
}";"";"2020-03-25 15:18:53"
14640;1184;"C";"int numJewelsInStones(char * J, char * S){
 
}";"";"2020-03-25 15:18:53"
14641;1184;"Scala";"object Solution {
    def numJewelsInStones(J: String, S: String): 
Int = {
 
    }
}";"";"2020-03-25 15:18:53"
14642;1184;"Go";"func numJewelsInStones(J string, S string) int {
 
}";"";"2020-03-25 15:18:53"
14643;1184;"Kotlin";"class Solution {
    fun numJewelsInStones(J: String, S: String): 
Int {
 
    }
}";"";"2020-03-25 15:18:53"
14644;1184;"Python3";"class Solution:
    def numJewelsInStones(self, J: str, S: str) -> 
int:";"";"2020-03-25 15:18:53"
14645;1184;"JavaScript";"/**
 * @param {string} J
 * @param {string} S
 * @return {number}
 */
var numJewelsInStones = function(J, S) {
 
};";"";"2020-03-25 15:18:53"
14646;1184;"PHP";"class Solution {
 
    /**
     * @param String $J
     * @param String $S
     * @return Integer
     */
    function numJewelsInStones($J, $S) {
        
    }
}";"";"2020-03-25 15:18:53"
14647;1184;"Swift";"class Solution {
    func numJewelsInStones(_ J: String, _ S: String)
 -> Int {
        
    }
}";"";"2020-03-25 15:18:53"
14648;1184;"Ruby";"# @param {String} j
# @param {String} s
# @return {Integer}
def num_jewels_in_stones(j, s)
 
end";"";"2020-03-25 15:18:53"
14649;1184;"Python";"class Solution(object):
    def numJewelsInStones(self, J, S):
        """"""
        :type J: str
        :type S: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:53"
14650;1185;"C#";"public class Solution {
    public string SmallestStringWithSwaps(string s, 
IList<IList<int>> pairs) {
 
    }
}";"";"2020-03-25 15:18:53"
14651;1185;"Java";"class Solution {
    public String smallestStringWithSwaps(String s, 
List<List<Integer>> pairs) {
 
    }
}";"";"2020-03-25 15:18:53"
14652;1185;"Rust";"impl Solution {
    pub fn smallest_string_with_swaps(s: String, 
pairs: Vec<Vec<i32>>) -> String {
 
    }
}";"";"2020-03-25 15:18:53"
14653;1185;"C";"char * smallestStringWithSwaps(char * s, int** 
pairs, int pairsSize, int* pairsColSize){
 
}";"";"2020-03-25 15:18:53"
14654;1185;"Scala";"object Solution {
    def smallestStringWithSwaps(s: String, pairs: 
List[List[Int]]): String = {
 
    }
}";"";"2020-03-25 15:18:53"
14655;1185;"Go";"func smallestStringWithSwaps(s string, pairs [][]
int) string {
 
}";"";"2020-03-25 15:18:53"
14656;1185;"Kotlin";"class Solution {
    fun smallestStringWithSwaps(s: String, pairs: 
List<List<Int>>): String {
 
    }
}";"";"2020-03-25 15:18:53"
14657;1185;"Python3";"class Solution:
    def smallestStringWithSwaps(self, s: str, 
pairs: List[List[int]]) -> str:";"";"2020-03-25 15:18:53"
14658;1185;"JavaScript";"/**
 * @param {string} s
 * @param {number[][]} pairs
 * @return {string}
 */
var smallestStringWithSwaps = function(s, pairs) {
 
};";"";"2020-03-25 15:18:53"
14659;1185;"PHP";"class Solution {";"";"2020-03-25 15:18:53"
14660;1185;"Swift";"class Solution {
    func smallestStringWithSwaps(_ s: String, _ 
pairs: [[Int]]) -> String {
 
    }
}";"";"2020-03-25 15:18:53"
14661;1185;"Ruby";"# @param {String} s
# @param {Integer[][]} pairs
# @return {String}
def smallest_string_with_swaps(s, pairs)
 
end";"";"2020-03-25 15:18:53"
14662;1185;"Python";"class Solution(object):
    def smallestStringWithSwaps(self, s, pairs):
        """"""
        :type s: str
        :type pairs: List[List[int]]
        :rtype: str
        """"""";"";"2020-03-25 15:18:53"
14663;1186;"C#";"public class Solution {
    public int KConcatenationMaxSum(int[] arr, int 
k) {
 
    }
}";"";"2020-03-25 15:18:53"
14664;1186;"Java";"class Solution {
    public int kConcatenationMaxSum(int[] arr, int 
k) {
 
    }
}";"";"2020-03-25 15:18:53"
14665;1186;"Rust";"impl Solution {
    pub fn k_concatenation_max_sum(arr: Vec<i32>, 
k: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:53"
14666;1186;"C";"int kConcatenationMaxSum(int* arr, int arrSize, int 
k){
 
}";"";"2020-03-25 15:18:53"
14667;1186;"Scala";"object Solution {
    def kConcatenationMaxSum(arr: Array[Int], k: 
Int): Int = {
 
    }
}";"";"2020-03-25 15:18:53"
14668;1186;"Go";"func kConcatenationMaxSum(arr []int, k int) int {
 
}";"";"2020-03-25 15:18:53"
14669;1186;"Kotlin";"class Solution {
    fun kConcatenationMaxSum(arr: IntArray, k: Int)
: Int {
 
    }
}";"";"2020-03-25 15:18:53"
14670;1186;"Python3";"class Solution:
    def kConcatenationMaxSum(self, arr: List[int], 
k: int) -> int:";"";"2020-03-25 15:18:53"
14671;1186;"JavaScript";"/**
 * @param {number[]} arr
 * @param {number} k
 * @return {number}
 */
var kConcatenationMaxSum = function(arr, k) {
 
};";"";"2020-03-25 15:18:53"
14672;1186;"PHP";"class Solution {";"";"2020-03-25 15:18:53"
14673;1186;"Swift";"class Solution {
    func kConcatenationMaxSum(_ arr: [Int], _ k: 
Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:53"
14674;1186;"Ruby";"# @param {Integer[]} arr
# @param {Integer} k
# @return {Integer}
def k_concatenation_max_sum(arr, k)
 
end";"";"2020-03-25 15:18:53"
14675;1186;"Python";"class Solution(object):
    def kConcatenationMaxSum(self, arr, k):
        """"""
        :type arr: List[int]
        :type k: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:53"
14676;1187;"C#";"public class Solution {
    public int[] FindErrorNums(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:53"
14677;1187;"Java";"class Solution {
    public int[] findErrorNums(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:53"
14678;1187;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* findErrorNums(int* nums, int numsSize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:53"
14679;1187;"Rust";"impl Solution {
    pub fn find_error_nums(nums: Vec<i32>) -> 
Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:53"
14680;1187;"Scala";"object Solution {
    def findErrorNums(nums: Array[Int]): Array[Int] 
= {
 
    }
}";"";"2020-03-25 15:18:53"
14681;1187;"Go";"func findErrorNums(nums []int) []int {
 
}";"";"2020-03-25 15:18:53"
14682;1187;"Kotlin";"class Solution {
    fun findErrorNums(nums: IntArray): IntArray {
 
    }
}";"";"2020-03-25 15:18:53"
14683;1187;"Python3";"class Solution:
    def findErrorNums(self, nums: List[int]) -> List
[int]:";"";"2020-03-25 15:18:53"
14684;1187;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number[]}
 */
var findErrorNums = function(nums) {
 
};";"";"2020-03-25 15:18:53"
14685;1187;"PHP";"class Solution {
 
    /**
     * @param Integer[] $nums
     * @return Integer[]
     */
    function findErrorNums($nums) {
        
    }
}";"";"2020-03-25 15:18:53"
14686;1187;"Swift";"class Solution {
    func findErrorNums(_ nums: [Int]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:53"
14687;1187;"Ruby";"";"";"2020-03-25 15:18:53"
14688;1187;"Python";"class Solution(object):
    def findErrorNums(self, nums):
        """"""
        :type nums: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:53"
14689;1188;"C#";"public class Solution {
    public int DistanceBetweenBusStops(int[] 
distance, int start, int destination) {
 
    }
}";"";"2020-03-25 15:18:53"
14690;1188;"Java";"class Solution {
    public int distanceBetweenBusStops(int[] 
distance, int start, int destination) {
 
    }
}";"";"2020-03-25 15:18:53"
14691;1188;"C++";"class Solution {";"";"2020-03-25 15:18:53"
14692;1188;"C";"int distanceBetweenBusStops(int* distance, int 
distanceSize, int start, int destination){
 
}";"";"2020-03-25 15:18:53"
14693;1188;"Rust";"impl Solution {
    pub fn distance_between_bus_stops(distance: 
Vec<i32>, start: i32, destination: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:53"
14694;1188;"Scala";"object Solution {
    def distanceBetweenBusStops(distance: Array[Int]
, start: Int, destination: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:53"
14695;1188;"Go";"func distanceBetweenBusStops(distance []int, start 
int, destination int) int {
 
}";"";"2020-03-25 15:18:53"
14696;1188;"Kotlin";"class Solution {
    fun distanceBetweenBusStops(distance: IntArray, 
start: Int, destination: Int): Int {
 
    }
}";"";"2020-03-25 15:18:53"
14697;1188;"Python3";"class Solution:
    def distanceBetweenBusStops(self, distance: List
[int], start: int, destination: int) -> int:";"";"2020-03-25 15:18:53"
14698;1188;"JavaScript";"/**
 * @param {number[]} distance
 * @param {number} start
 * @param {number} destination
 * @return {number}
 */
var distanceBetweenBusStops = function(distance, 
start, destination) {
 
};";"";"2020-03-25 15:18:53"
14699;1188;"PHP";"class Solution {
 
    /**
     * @param Integer[] $distance
     * @param Integer $start
     * @param Integer $destination
     * @return Integer
     */
    function distanceBetweenBusStops($distance, 
$start, $destination) {
        
    }
}";"";"2020-03-25 15:18:53"
14700;1188;"Swift";"class Solution {
    func distanceBetweenBusStops(_ distance: [Int], 
_ start: Int, _ destination: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:53"
14701;1188;"Ruby";"# @param {Integer[]} distance
# @param {Integer} start
# @param {Integer} destination
# @return {Integer}
def distance_between_bus_stops(distance, start, 
destination)
 
end";"";"2020-03-25 15:18:53"
14702;1188;"Python";"class Solution(object):
    def distanceBetweenBusStops(self, distance, 
start, destination):
        """"""
        :type distance: List[int]
        :type start: int
        :type destination: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:53"
14703;1189;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode AddOneRow(TreeNode root, int v, 
int d) {
 
    }
}";"";"2020-03-25 15:18:53"
14704;1189;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode addOneRow(TreeNode root, int v, 
int d) {
 
    }
}";"";"2020-03-25 15:18:53"
14705;1189;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* addOneRow(struct TreeNode* root, 
int v, int d){
 
}";"";"2020-03-25 15:18:53"
14706;1189;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn add_one_row(root: 
Option<Rc<RefCell<TreeNode>>>, v: i32, d: i32) -> 
Option<Rc<RefCell<TreeNode>>> {
        
    }";"";"2020-03-25 15:18:53"
14707;1189;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def addOneRow(root: TreeNode, v: Int, d: Int): 
TreeNode = {
 
    }
}";"";"2020-03-25 15:18:53"
14708;1189;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func addOneRow(root *TreeNode, v int, d int) 
*TreeNode {
 
}";"";"2020-03-25 15:18:53"
14709;1189;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun addOneRow(root: TreeNode?, v: Int, d: Int): 
TreeNode? {
 
    }
}";"";"2020-03-25 15:18:53"
14710;1189;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def addOneRow(self, root: TreeNode, v: int, d: 
int) -> TreeNode:";"";"2020-03-25 15:18:53"
14711;1189;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} v
 * @param {number} d
 * @return {TreeNode}
 */
var addOneRow = function(root, v, d) {
 
};";"";"2020-03-25 15:18:53"
14712;1189;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @param Integer $v
     * @param Integer $d
     * @return TreeNode
     */
    function addOneRow($root, $v, $d) {
        
    }
}";"";"2020-03-25 15:18:53"
14713;1189;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func addOneRow(_ root: TreeNode?, _ v: Int, _ 
d: Int) -> TreeNode? {
        
    }
}";"";"2020-03-25 15:18:53"
14714;1189;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:53"
14715;1189;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def addOneRow(self, root, v, d):
        """"""
        :type root: TreeNode
        :type v: int
        :type d: int
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:53"
14716;1190;"C#";"public class Solution {
    public int CountBinarySubstrings(string s) {
 
    }
}";"";"2020-03-25 15:18:53"
14717;1190;"Java";"class Solution {
    public int countBinarySubstrings(String s) {
 
    }
}";"";"2020-03-25 15:18:53"
14718;1190;"Rust";"impl Solution {
    pub fn count_binary_substrings(s: String) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:53"
14719;1190;"C";"int countBinarySubstrings(char * s){
 
}";"";"2020-03-25 15:18:53"
14720;1190;"Scala";"object Solution {
    def countBinarySubstrings(s: String): Int = {
 
    }
}";"";"2020-03-25 15:18:53"
14721;1190;"Go";"func countBinarySubstrings(s string) int {
 
}";"";"2020-03-25 15:18:53"
14722;1190;"Kotlin";"class Solution {
    fun countBinarySubstrings(s: String): Int {
 
    }
}";"";"2020-03-25 15:18:53"
14723;1190;"Python3";"class Solution:
    def countBinarySubstrings(self, s: str) -> int:";"";"2020-03-25 15:18:53"
14724;1190;"JavaScript";"/**
 * @param {string} s
 * @return {number}
 */
var countBinarySubstrings = function(s) {
 
};";"";"2020-03-25 15:18:53"
14725;1190;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return Integer
     */
    function countBinarySubstrings($s) {
        
    }
}";"";"2020-03-25 15:18:53"
14726;1190;"Swift";"class Solution {
    func countBinarySubstrings(_ s: String) -> Int {
        
    }
}";"";"2020-03-25 15:18:53"
14727;1190;"Ruby";"# @param {String} s
# @return {Integer}
def count_binary_substrings(s)
 
end";"";"2020-03-25 15:18:53"
14728;1190;"Python";"class Solution(object):
    def countBinarySubstrings(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:53"
14729;1191;"C#";"public class Solution {
    public int MovingCount(int m, int n, int k) {
 
    }
}";"";"2020-03-25 15:18:53"
14730;1191;"Java";"class Solution {
    public int movingCount(int m, int n, int k) {
 
    }
}";"";"2020-03-25 15:18:53"
14731;1191;"Rust";"impl Solution {
    pub fn moving_count(m: i32, n: i32, k: i32) -> 
i32 {
 
    }
}";"";"2020-03-25 15:18:53"
14732;1191;"C";"int movingCount(int m, int n, int k){
 
}";"";"2020-03-25 15:18:53"
14733;1191;"Scala";"object Solution {
    def movingCount(m: Int, n: Int, k: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:53"
14734;1191;"Go";"func movingCount(m int, n int, k int) int {
 
}";"";"2020-03-25 15:18:53"
14735;1191;"Kotlin";"class Solution {
    fun movingCount(m: Int, n: Int, k: Int): Int {
 
    }
}";"";"2020-03-25 15:18:53"
14736;1191;"Python3";"class Solution:
    def movingCount(self, m: int, n: int, k: int) 
-> int:";"";"2020-03-25 15:18:53"
14737;1191;"JavaScript";"/**
 * @param {number} m
 * @param {number} n
 * @param {number} k
 * @return {number}
 */
var movingCount = function(m, n, k) {
 
};";"";"2020-03-25 15:18:53"
14738;1191;"PHP";"class Solution {";"";"2020-03-25 15:18:53"
14739;1191;"Swift";"class Solution {
    func movingCount(_ m: Int, _ n: Int, _ k: Int) 
-> Int {
 
    }
}";"";"2020-03-25 15:18:53"
14740;1191;"Ruby";"# @param {Integer} m
# @param {Integer} n
# @param {Integer} k
# @return {Integer}
def moving_count(m, n, k)
 
end";"";"2020-03-25 15:18:53"
14741;1191;"Python";"class Solution(object):
    def movingCount(self, m, n, k):
        """"""
        :type m: int
        :type n: int
        :type k: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:53"
14742;1192;"C#";"public class Solution {
    public int NumRollsToTarget(int d, int f, int 
target) {
 
    }
}";"";"2020-03-25 15:18:53"
14743;1192;"Java";"class Solution {
    public int numRollsToTarget(int d, int f, int 
target) {
 
    }
}";"";"2020-03-25 15:18:53"
14744;1192;"Rust";"impl Solution {
    pub fn num_rolls_to_target(d: i32, f: i32, 
target: i32) -> i32 {
        
    }
}";"";"2020-03-25 15:18:53"
14745;1192;"C";"int numRollsToTarget(int d, int f, int target){
 
}";"";"2020-03-25 15:18:53"
14746;1192;"Scala";"object Solution {
    def numRollsToTarget(d: Int, f: Int, target: 
Int): Int = {
 
    }
}";"";"2020-03-25 15:18:53"
14747;1192;"Go";"func numRollsToTarget(d int, f int, target int) int 
{
 
}";"";"2020-03-25 15:18:53"
14748;1192;"Kotlin";"class Solution {
    fun numRollsToTarget(d: Int, f: Int, target: 
Int): Int {
 
    }
}";"";"2020-03-25 15:18:53"
14749;1192;"Python3";"class Solution:
    def numRollsToTarget(self, d: int, f: int, 
target: int) -> int:";"";"2020-03-25 15:18:53"
14750;1192;"JavaScript";"/**
 * @param {number} d
 * @param {number} f
 * @param {number} target
 * @return {number}
 */
var numRollsToTarget = function(d, f, target) {
 
};";"";"2020-03-25 15:18:53"
14751;1192;"PHP";"class Solution {";"";"2020-03-25 15:18:53"
14752;1192;"Swift";"class Solution {
    func numRollsToTarget(_ d: Int, _ f: Int, _ 
target: Int) -> Int {
        
    }
}";"";"2020-03-25 15:18:53"
14753;1192;"Ruby";"# @param {Integer} d
# @param {Integer} f
# @param {Integer} target
# @return {Integer}
def num_rolls_to_target(d, f, target)
 
end";"";"2020-03-25 15:18:53"
14754;1192;"Python";"class Solution(object):
    def numRollsToTarget(self, d, f, target):
        """"""
        :type d: int
        :type f: int
        :type target: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:53"
14755;1193;"C#";"public class Solution {
    public int SuperPow(int a, int[] b) {
 
    }
}";"";"2020-03-25 15:18:53"
14756;1193;"Java";"class Solution {
    public int superPow(int a, int[] b) {
 
    }
}";"";"2020-03-25 15:18:53"
14757;1193;"C";"int superPow(int a, int* b, int bSize){
 
}";"";"2020-03-25 15:18:53"
14758;1193;"Rust";"impl Solution {
    pub fn super_pow(a: i32, b: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:53"
14759;1193;"Scala";"object Solution {
    def superPow(a: Int, b: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:53"
14760;1193;"Go";"func superPow(a int, b []int) int {
 
}";"";"2020-03-25 15:18:53"
14761;1193;"Kotlin";"class Solution {
    fun superPow(a: Int, b: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:53"
14762;1193;"Python3";"class Solution:
    def superPow(self, a: int, b: List[int]) -> int:";"";"2020-03-25 15:18:53"
14763;1193;"JavaScript";"/**
 * @param {number} a
 * @param {number[]} b
 * @return {number}
 */
var superPow = function(a, b) {
 
};";"";"2020-03-25 15:18:53"
14764;1193;"PHP";"class Solution {
 
    /**
     * @param Integer $a
     * @param Integer[] $b
     * @return Integer
     */
    function superPow($a, $b) {
        
    }
}";"";"2020-03-25 15:18:53"
14765;1193;"Swift";"class Solution {
    func superPow(_ a: Int, _ b: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:53"
14766;1193;"Ruby";"# @param {Integer} a
# @param {Integer[]} b
# @return {Integer}
def super_pow(a, b)
 
end";"";"2020-03-25 15:18:53"
14767;1193;"Python";"class Solution(object):
    def superPow(self, a, b):
        """"""
        :type a: int
        :type b: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:53"
14768;1194;"C#";"public class Solution {
    public double LargestSumOfAverages(int[] A, int 
K) {
 
    }
}";"";"2020-03-25 15:18:53"
14769;1194;"Java";"class Solution {
    public double largestSumOfAverages(int[] A, int 
K) {
 
    }
}";"";"2020-03-25 15:18:53"
14770;1194;"C";"double largestSumOfAverages(int* A, int ASize, int 
K){
 
}";"";"2020-03-25 15:18:53"
14771;1194;"Rust";"impl Solution {
    pub fn largest_sum_of_averages(a: Vec<i32>, k: 
i32) -> f64 {
        
    }
}";"";"2020-03-25 15:18:53"
14772;1194;"Scala";"object Solution {
    def largestSumOfAverages(A: Array[Int], K: Int)
: Double = {
 
    }
}";"";"2020-03-25 15:18:53"
14773;1194;"Go";"func largestSumOfAverages(A []int, K int) float64 {
 
}";"";"2020-03-25 15:18:53"
14774;1194;"Kotlin";"class Solution {
    fun largestSumOfAverages(A: IntArray, K: Int): 
Double {
 
    }
}";"";"2020-03-25 15:18:53"
14775;1194;"Python3";"class Solution:
    def largestSumOfAverages(self, A: List[int], K: 
int) -> float:";"";"2020-03-25 15:18:53"
14776;1194;"JavaScript";"/**
 * @param {number[]} A
 * @param {number} K
 * @return {number}
 */
var largestSumOfAverages = function(A, K) {
 
};";"";"2020-03-25 15:18:53"
14777;1194;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @param Integer $K
     * @return Float
     */
    function largestSumOfAverages($A, $K) {
        
    }
}";"";"2020-03-25 15:18:53"
14778;1194;"Swift";"class Solution {
    func largestSumOfAverages(_ A: [Int], _ K: Int) 
-> Double {
        
    }
}";"";"2020-03-25 15:18:53"
14779;1194;"Ruby";"# @param {Integer[]} a";"";"2020-03-25 15:18:53"
14780;1194;"Python";"class Solution(object):
    def largestSumOfAverages(self, A, K):
        """"""
        :type A: List[int]
        :type K: int
        :rtype: float
        """"""";"";"2020-03-25 15:18:53"
14781;1195;"C#";"public class Solution {
    public string GcdOfStrings(string str1, string 
str2) {
 
    }
}";"";"2020-03-25 15:18:53"
14782;1195;"Java";"class Solution {
    public String gcdOfStrings(String str1, String 
str2) {
 
    }
}";"";"2020-03-25 15:18:53"
14783;1195;"Rust";"impl Solution {
    pub fn gcd_of_strings(str1: String, str2: 
String) -> String {
        
    }
}";"";"2020-03-25 15:18:53"
14784;1195;"C";"char * gcdOfStrings(char * str1, char * str2){
 
}";"";"2020-03-25 15:18:53"
14785;1195;"Scala";"object Solution {
    def gcdOfStrings(str1: String, str2: String): 
String = {
 
    }
}";"";"2020-03-25 15:18:53"
14786;1195;"Go";"func gcdOfStrings(str1 string, str2 string) string {
 
}";"";"2020-03-25 15:18:53"
14787;1195;"Kotlin";"class Solution {
    fun gcdOfStrings(str1: String, str2: String): 
String {
 
    }
}";"";"2020-03-25 15:18:53"
14788;1195;"Python3";"class Solution:
    def gcdOfStrings(self, str1: str, str2: str) -> 
str:";"";"2020-03-25 15:18:53"
14789;1195;"JavaScript";"/**
 * @param {string} str1
 * @param {string} str2
 * @return {string}
 */
var gcdOfStrings = function(str1, str2) {
 
};";"";"2020-03-25 15:18:53"
14790;1195;"PHP";"class Solution {";"";"2020-03-25 15:18:53"
14791;1195;"Swift";"class Solution {
    func gcdOfStrings(_ str1: String, _ str2: 
String) -> String {
        
    }
}";"";"2020-03-25 15:18:53"
14792;1195;"Ruby";"# @param {String} str1
# @param {String} str2
# @return {String}
def gcd_of_strings(str1, str2)
 
end";"";"2020-03-25 15:18:53"
14793;1195;"Python";"class Solution(object):
    def gcdOfStrings(self, str1, str2):
        """"""
        :type str1: str
        :type str2: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:53"
14794;1196;"C#";"public class Solution {
    public int ShortestPath(int[][] grid, int k) {
 
    }
}";"";"2020-03-25 15:18:53"
14795;1196;"Java";"class Solution {
    public int shortestPath(int[][] grid, int k) {
 
    }
}";"";"2020-03-25 15:18:53"
14796;1196;"C";"int shortestPath(int** grid, int gridSize, int* 
gridColSize, int k){
 
}";"";"2020-03-25 15:18:53"
14797;1196;"Rust";"impl Solution {
    pub fn shortest_path(grid: Vec<Vec<i32>>, k: 
i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:53"
14798;1196;"Scala";"object Solution {
    def shortestPath(grid: Array[Array[Int]], k: 
Int): Int = {
 
    }
}";"";"2020-03-25 15:18:53"
14799;1196;"Go";"func shortestPath(grid [][]int, k int) int {
 
}";"";"2020-03-25 15:18:53"
14800;1196;"Kotlin";"class Solution {
    fun shortestPath(grid: Array<IntArray>, k: Int)
: Int {
 
    }
}";"";"2020-03-25 15:18:53"
14801;1196;"Python3";"class Solution:
    def shortestPath(self, grid: List[List[int]], 
k: int) -> int:";"";"2020-03-25 15:18:53"
14802;1196;"JavaScript";"/**
 * @param {number[][]} grid
 * @param {number} k
 * @return {number}
 */
var shortestPath = function(grid, k) {
 
};";"";"2020-03-25 15:18:53"
14803;1196;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $grid
     * @param Integer $k
     * @return Integer
     */
    function shortestPath($grid, $k) {
 
    }
}";"";"2020-03-25 15:18:53"
14804;1196;"Swift";"class Solution {
    func shortestPath(_ grid: [[Int]], _ k: Int) -> 
Int {
 
    }
}";"";"2020-03-25 15:18:53"
14805;1196;"Ruby";"# @param {Integer[][]} grid
# @param {Integer} k
# @return {Integer}
def shortest_path(grid, k)
 
end";"";"2020-03-25 15:18:53"
14806;1196;"Python";"class Solution(object):
    def shortestPath(self, grid, k):
        """"""
        :type grid: List[List[int]]
        :type k: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:53"
14807;1197;"C#";"public class Solution {
    public int MaxRotateFunction(int[] A) {
 
    }
}";"";"2020-03-25 15:18:53"
14808;1197;"Java";"class Solution {
    public int maxRotateFunction(int[] A) {
 
    }
}";"";"2020-03-25 15:18:53"
14809;1197;"Rust";"impl Solution {
    pub fn max_rotate_function(a: Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:53"
14810;1197;"C";"int maxRotateFunction(int* A, int ASize){
 
}";"";"2020-03-25 15:18:53"
14811;1197;"Scala";"object Solution {
    def maxRotateFunction(A: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:53"
14812;1197;"Go";"func maxRotateFunction(A []int) int {
 
}";"";"2020-03-25 15:18:53"
14813;1197;"Kotlin";"class Solution {
    fun maxRotateFunction(A: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:53"
14814;1197;"Python3";"class Solution:
    def maxRotateFunction(self, A: List[int]) -> 
int:";"";"2020-03-25 15:18:53"
14815;1197;"JavaScript";"/**
 * @param {number[]} A
 * @return {number}
 */
var maxRotateFunction = function(A) {
 
};";"";"2020-03-25 15:18:53"
14816;1197;"PHP";"class Solution {";"";"2020-03-25 15:18:53"
14817;1197;"Swift";"class Solution {
    func maxRotateFunction(_ A: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:53"
14818;1197;"Ruby";"# @param {Integer[]} a
# @return {Integer}
def max_rotate_function(a)
 
end";"";"2020-03-25 15:18:53"
14819;1197;"Python";"class Solution(object):
    def maxRotateFunction(self, A):
        """"""
        :type A: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:53"
14820;1198;"C#";"public class Solution {
    public int[] MovesToStamp(string stamp, string 
target) {
 
    }
}";"";"2020-03-25 15:18:53"
14821;1198;"Java";"class Solution {
    public int[] movesToStamp(String stamp, String 
target) {
 
    }
}";"";"2020-03-25 15:18:53"
14822;1198;"Rust";"impl Solution {
    pub fn moves_to_stamp(stamp: String, target: 
String) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:53"
14823;1198;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* movesToStamp(char * stamp, char * target, int* 
returnSize){
 
}";"";"2020-03-25 15:18:53"
14824;1198;"Scala";"object Solution {
    def movesToStamp(stamp: String, target: String)
: Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:53"
14825;1198;"Go";"func movesToStamp(stamp string, target string) []
int {
 
}";"";"2020-03-25 15:18:53"
14826;1198;"Kotlin";"class Solution {
    fun movesToStamp(stamp: String, target: String)
: IntArray {
 
    }
}";"";"2020-03-25 15:18:53"
14827;1198;"Python3";"class Solution:
    def movesToStamp(self, stamp: str, target: str) 
-> List[int]:";"";"2020-03-25 15:18:53"
14828;1198;"JavaScript";"/**
 * @param {string} stamp
 * @param {string} target
 * @return {number[]}
 */
var movesToStamp = function(stamp, target) {
 
};";"";"2020-03-25 15:18:53"
14829;1198;"PHP";"class Solution {";"";"2020-03-25 15:18:53"
14830;1198;"Swift";"class Solution {
    func movesToStamp(_ stamp: String, _ target: 
String) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:53"
14831;1198;"Ruby";"# @param {String} stamp
# @param {String} target
# @return {Integer[]}
def moves_to_stamp(stamp, target)
 
end";"";"2020-03-25 15:18:53"
14832;1198;"Python";"class Solution(object):
    def movesToStamp(self, stamp, target):
        """"""
        :type stamp: str
        :type target: str
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:53"
14833;1199;"C#";"public class Solution {
    public bool IsPerfectSquare(int num) {
 
    }
}";"";"2020-03-25 15:18:53"
14834;1199;"Java";"class Solution {
    public boolean isPerfectSquare(int num) {
 
    }
}";"";"2020-03-25 15:18:53"
14835;1199;"Rust";"impl Solution {
    pub fn is_perfect_square(num: i32) -> bool {
        
    }
}";"";"2020-03-25 15:18:53"
14836;1199;"C";"bool isPerfectSquare(int num){
 
}";"";"2020-03-25 15:18:53"
14837;1199;"Scala";"object Solution {
    def isPerfectSquare(num: Int): Boolean = {
 
    }
}";"";"2020-03-25 15:18:53"
14838;1199;"Go";"func isPerfectSquare(num int) bool {
 
}";"";"2020-03-25 15:18:53"
14839;1199;"Kotlin";"class Solution {
    fun isPerfectSquare(num: Int): Boolean {
 
    }
}";"";"2020-03-25 15:18:53"
14840;1199;"Python3";"class Solution:
    def isPerfectSquare(self, num: int) -> bool:";"";"2020-03-25 15:18:53"
14841;1199;"JavaScript";"/**
 * @param {number} num
 * @return {boolean}
 */
var isPerfectSquare = function(num) {
 
};";"";"2020-03-25 15:18:53"
14842;1199;"PHP";"class Solution {
 
    /**
     * @param Integer $num
     * @return Boolean
     */
    function isPerfectSquare($num) {
        
    }
}";"";"2020-03-25 15:18:53"
14843;1199;"Swift";"class Solution {
    func isPerfectSquare(_ num: Int) -> Bool {
        
    }
}";"";"2020-03-25 15:18:53"
14844;1199;"Ruby";"# @param {Integer} num
# @return {Boolean}
def is_perfect_square(num)
 
end";"";"2020-03-25 15:18:53"
14845;1199;"Python";"class Solution(object):
    def isPerfectSquare(self, num):
        """"""
        :type num: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:53"
14846;1200;"C#";"public class Solution {
    public int FindLUSlength(string[] strs) {
 
    }
}";"";"2020-03-25 15:18:53"
14847;1200;"Java";"class Solution {
    public int findLUSlength(String[] strs) {
 
    }
}";"";"2020-03-25 15:18:53"
14848;1200;"C";"int findLUSlength(char ** strs, int strsSize){
 
}";"";"2020-03-25 15:18:53"
14849;1200;"Rust";"impl Solution {
    pub fn find_lu_slength(strs: Vec<String>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:53"
14850;1200;"Scala";"object Solution {
    def findLUSlength(strs: Array[String]): Int = {
 
    }
}";"";"2020-03-25 15:18:53"
14851;1200;"Go";"func findLUSlength(strs []string) int {
 
}";"";"2020-03-25 15:18:53"
14852;1200;"Kotlin";"class Solution {
    fun findLUSlength(strs: Array<String>): Int {
 
    }
}";"";"2020-03-25 15:18:53"
14853;1200;"Python3";"class Solution:
    def findLUSlength(self, strs: List[str]) -> int:";"";"2020-03-25 15:18:53"
14854;1200;"JavaScript";"/**
 * @param {string[]} strs
 * @return {number}
 */
var findLUSlength = function(strs) {
 
};";"";"2020-03-25 15:18:53"
14855;1200;"PHP";"class Solution {
 
    /**
     * @param String[] $strs
     * @return Integer
     */
    function findLUSlength($strs) {
        
    }
}";"";"2020-03-25 15:18:53"
14856;1200;"Swift";"class Solution {
    func findLUSlength(_ strs: [String]) -> Int {
        
    }
}";"";"2020-03-25 15:18:53"
14857;1200;"Ruby";"# @param {String[]} strs";"";"2020-03-25 15:18:53"
14858;1200;"Python";"class Solution(object):
    def findLUSlength(self, strs):
        """"""
        :type strs: List[str]
        :rtype: int
        """"""";"";"2020-03-25 15:18:53"
14859;1201;"C#";"public class Solution {
    public int MinDominoRotations(int[] A, int[] B) 
{
 
    }
}";"";"2020-03-25 15:18:53"
14860;1201;"Java";"class Solution {
    public int minDominoRotations(int[] A, int[] B) 
{
 
    }
}";"";"2020-03-25 15:18:53"
14861;1201;"Rust";"impl Solution {
    pub fn min_domino_rotations(a: Vec<i32>, b: 
Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:53"
14862;1201;"C";"int minDominoRotations(int* A, int ASize, int* B, 
int BSize){
 
}";"";"2020-03-25 15:18:53"
14863;1201;"Scala";"object Solution {
    def minDominoRotations(A: Array[Int], B: Array
[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:53"
14864;1201;"Go";"func minDominoRotations(A []int, B []int) int {
 
}";"";"2020-03-25 15:18:53"
14865;1201;"Kotlin";"class Solution {
    fun minDominoRotations(A: IntArray, B: IntArray)
: Int {
 
    }
}";"";"2020-03-25 15:18:53"
14866;1201;"Python3";"class Solution:
    def minDominoRotations(self, A: List[int], B: 
List[int]) -> int:";"";"2020-03-25 15:18:53"
14867;1201;"JavaScript";"/**
 * @param {number[]} A
 * @param {number[]} B
 * @return {number}
 */
var minDominoRotations = function(A, B) {
 
};";"";"2020-03-25 15:18:53"
14868;1201;"PHP";"class Solution {";"";"2020-03-25 15:18:53"
14869;1201;"Swift";"class Solution {
    func minDominoRotations(_ A: [Int], _ B: [Int]) 
-> Int {
        
    }
}";"";"2020-03-25 15:18:53"
14870;1201;"Ruby";"# @param {Integer[]} a
# @param {Integer[]} b
# @return {Integer}
def min_domino_rotations(a, b)
 
end";"";"2020-03-25 15:18:53"
14871;1201;"Python";"class Solution(object):
    def minDominoRotations(self, A, B):
        """"""
        :type A: List[int]
        :type B: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:53"
14872;1202;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<int> RightSideView(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:54"
14873;1202;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode 
root) {
 
    }
}";"";"2020-03-25 15:18:54"
14874;1202;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn right_side_view(root: 
Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:54"
14875;1202;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* rightSideView(struct TreeNode* root, int* 
returnSize){
 
}";"";"2020-03-25 15:18:54"
14876;1202;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def rightSideView(root: TreeNode): List[Int] = {
 
    }
}";"";"2020-03-25 15:18:54"
14877;1202;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func rightSideView(root *TreeNode) []int {
 
}";"";"2020-03-25 15:18:54"
14878;1202;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun rightSideView(root: TreeNode?): List<Int> {
 
    }
}";"";"2020-03-25 15:18:54"
14879;1202;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def rightSideView(self, root: TreeNode) -> List
[int]:";"";"2020-03-25 15:18:54"
14880;1202;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[]}
 */
var rightSideView = function(root) {
 
};";"";"2020-03-25 15:18:54"
14881;1202;"PHP";"/**";"";"2020-03-25 15:18:54"
14882;1202;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func rightSideView(_ root: TreeNode?) -> [Int] {
 
    }
}";"";"2020-03-25 15:18:54"
14883;1202;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Integer[]}
def right_side_view(root)
 
end";"";"2020-03-25 15:18:54"
14884;1202;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def rightSideView(self, root):
        """"""
        :type root: TreeNode
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:54"
14885;1203;"C#";"public class Solution {
    public int LastStoneWeightII(int[] stones) {
 
    }
}";"";"2020-03-25 15:18:54"
14886;1203;"Java";"class Solution {
    public int lastStoneWeightII(int[] stones) {
 
    }
}";"";"2020-03-25 15:18:54"
14887;1203;"C";"int lastStoneWeightII(int* stones, int stonesSize){
 
}";"";"2020-03-25 15:18:54"
14888;1203;"Rust";"impl Solution {
    pub fn last_stone_weight_ii(stones: Vec<i32>) 
-> i32 {
        
    }
}";"";"2020-03-25 15:18:54"
14889;1203;"Scala";"object Solution {
    def lastStoneWeightII(stones: Array[Int]): Int 
= {
 
    }
}";"";"2020-03-25 15:18:54"
14890;1203;"Go";"func lastStoneWeightII(stones []int) int {
 
}";"";"2020-03-25 15:18:54"
14891;1203;"Kotlin";"class Solution {
    fun lastStoneWeightII(stones: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:54"
14892;1203;"Python3";"class Solution:
    def lastStoneWeightII(self, stones: List[int]) 
-> int:";"";"2020-03-25 15:18:54"
14893;1203;"JavaScript";"/**
 * @param {number[]} stones
 * @return {number}
 */
var lastStoneWeightII = function(stones) {
 
};";"";"2020-03-25 15:18:54"
14894;1203;"PHP";"class Solution {
 
    /**
     * @param Integer[] $stones
     * @return Integer
     */
    function lastStoneWeightII($stones) {
        
    }
}";"";"2020-03-25 15:18:54"
14895;1203;"Swift";"class Solution {
    func lastStoneWeightII(_ stones: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:54"
14896;1203;"Ruby";"# @param {Integer[]} stones";"";"2020-03-25 15:18:54"
14897;1203;"Python";"class Solution(object):
    def lastStoneWeightII(self, stones):
        """"""
        :type stones: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:54"
14898;1204;"C#";"public class Solution {
    public string[] ReorderLogFiles(string[] logs) {
 
    }
}";"";"2020-03-25 15:18:54"
14899;1204;"Java";"class Solution {
    public String[] reorderLogFiles(String[] logs) {
 
    }
}";"";"2020-03-25 15:18:54"
14900;1204;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** reorderLogFiles(char ** logs, int logsSize, 
int* returnSize){
 
}";"";"2020-03-25 15:18:54"
14901;1204;"Rust";"impl Solution {
    pub fn reorder_log_files(logs: Vec<String>) -> 
Vec<String> {
        
    }
}";"";"2020-03-25 15:18:54"
14902;1204;"Scala";"object Solution {
    def reorderLogFiles(logs: Array[String]): Array
[String] = {
 
    }
}";"";"2020-03-25 15:18:54"
14903;1204;"Go";"func reorderLogFiles(logs []string) []string {
 
}";"";"2020-03-25 15:18:54"
14904;1204;"Kotlin";"class Solution {
    fun reorderLogFiles(logs: Array<String>): 
Array<String> {
 
    }
}";"";"2020-03-25 15:18:54"
14905;1204;"Python3";"class Solution:
    def reorderLogFiles(self, logs: List[str]) -> 
List[str]:";"";"2020-03-25 15:18:54"
14906;1204;"JavaScript";"/**
 * @param {string[]} logs
 * @return {string[]}
 */
var reorderLogFiles = function(logs) {
 
};";"";"2020-03-25 15:18:54"
14907;1204;"PHP";"class Solution {
 
    /**
     * @param String[] $logs
     * @return String[]
     */
    function reorderLogFiles($logs) {
        
    }
}";"";"2020-03-25 15:18:54"
14908;1204;"Swift";"class Solution {
    func reorderLogFiles(_ logs: [String]) -> 
[String] {
        
    }
}";"";"2020-03-25 15:18:54"
14909;1204;"Ruby";"# @param {String[]} logs";"";"2020-03-25 15:18:54"
14910;1204;"Python";"class Solution(object):
    def reorderLogFiles(self, logs):
        """"""
        :type logs: List[str]
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:54"
14911;1205;"C#";"public class Solution {
    public double ChampagneTower(int poured, int 
query_row, int query_glass) {
 
    }
}";"";"2020-03-25 15:18:54"
14912;1205;"Java";"class Solution {
    public double champagneTower(int poured, int 
query_row, int query_glass) {
 
    }
}";"";"2020-03-25 15:18:54"
14913;1205;"C";"double champagneTower(int poured, int query_row, 
int query_glass){
 
}";"";"2020-03-25 15:18:54"
14914;1205;"Scala";"object Solution {
    def champagneTower(poured: Int, query_row: Int, 
query_glass: Int): Double = {
 
    }
}";"";"2020-03-25 15:18:54"
14915;1205;"Python3";"class Solution:
    def champagneTower(self, poured: int, 
query_row: int, query_glass: int) -> float:";"";"2020-03-25 15:18:54"
14916;1205;"JavaScript";"/**
 * @param {number} poured
 * @param {number} query_row
 * @param {number} query_glass
 * @return {number}
 */
var champagneTower = function(poured, query_row, 
query_glass) {
 
};";"";"2020-03-25 15:18:54"
14917;1205;"Go";"func champagneTower(poured int, query_row int, 
query_glass int) float64 {
 
}";"";"2020-03-25 15:18:54"
14918;1205;"PHP";"class Solution {
 
    /**
     * @param Integer $poured
     * @param Integer $query_row
     * @param Integer $query_glass
     * @return Float
     */
    function champagneTower($poured, $query_row, 
$query_glass) {
        
    }
}";"";"2020-03-25 15:18:54"
14919;1205;"Swift";"class Solution {
    func champagneTower(_ poured: Int, _ query_row: 
Int, _ query_glass: Int) -> Double {
        
    }
}";"";"2020-03-25 15:18:54"
14920;1205;"Ruby";"# @param {Integer} poured
# @param {Integer} query_row
# @param {Integer} query_glass
# @return {Float}
def champagne_tower(poured, query_row, query_glass)
 
end";"";"2020-03-25 15:18:54"
14921;1205;"Kotlin";"class Solution {
    fun champagneTower(poured: Int, query_row: Int, 
query_glass: Int): Double {
 
    }
}";"";"2020-03-25 15:18:54"
14922;1205;"Python";"class Solution(object):
    def champagneTower(self, poured, query_row, 
query_glass):
        """"""
        :type poured: int
        :type query_row: int
        :type query_glass: int
        :rtype: float
        """"""";"";"2020-03-25 15:18:54"
14923;1206;"C#";"public class Solution {
    public char FirstUniqChar(string s) {
 
    }
}";"";"2020-03-25 15:18:54"
14924;1206;"Java";"class Solution {
    public char firstUniqChar(String s) {
 
    }
}";"";"2020-03-25 15:18:54"
14925;1206;"C";"char firstUniqChar(char* s){
 
}";"";"2020-03-25 15:18:54"
14926;1206;"Rust";"impl Solution {
    pub fn first_uniq_char(s: String) -> char {
 
    }
}";"";"2020-03-25 15:18:54"
14927;1206;"Scala";"object Solution {
    def firstUniqChar(s: String): Char = {
 
    }
}";"";"2020-03-25 15:18:54"
14928;1206;"Go";"func firstUniqChar(s string) byte {
 
}";"";"2020-03-25 15:18:54"
14929;1206;"Kotlin";"class Solution {
    fun firstUniqChar(s: String): Char {
 
    }
}";"";"2020-03-25 15:18:54"
14930;1206;"Python3";"class Solution:
    def firstUniqChar(self, s: str) -> str:";"";"2020-03-25 15:18:54"
14931;1206;"JavaScript";"/**
 * @param {string} s
 * @return {character}
 */
var firstUniqChar = function(s) {
 
};";"";"2020-03-25 15:18:54"
14932;1206;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return String
     */
    function firstUniqChar($s) {
 
    }
}";"";"2020-03-25 15:18:54"
14933;1206;"Swift";"class Solution {
    func firstUniqChar(_ s: String) -> Character {
 
    }
}";"";"2020-03-25 15:18:54"
14934;1206;"Ruby";"# @param {String} s";"";"2020-03-25 15:18:54"
14935;1206;"Python";"class Solution(object):
    def firstUniqChar(self, s):
        """"""
        :type s: str
        :rtype: str
        """"""";"";"2020-03-25 15:18:54"
14936;1207;"C#";"public class Solution {
    public int MinEatingSpeed(int[] piles, int H) {
 
    }
}";"";"2020-03-25 15:18:54"
14937;1207;"Java";"class Solution {
    public int minEatingSpeed(int[] piles, int H) {
 
    }
}";"";"2020-03-25 15:18:54"
14938;1207;"C";"int minEatingSpeed(int* piles, int pilesSize, int H)
{
 
}";"";"2020-03-25 15:18:54"
14939;1207;"Rust";"impl Solution {
    pub fn min_eating_speed(piles: Vec<i32>, h: i32)
 -> i32 {
        
    }
}";"";"2020-03-25 15:18:54"
14940;1207;"Scala";"object Solution {
    def minEatingSpeed(piles: Array[Int], H: Int): 
Int = {
 
    }
}";"";"2020-03-25 15:18:54"
14941;1207;"Python3";"class Solution:
    def minEatingSpeed(self, piles: List[int], H: 
int) -> int:";"";"2020-03-25 15:18:54"
14942;1207;"JavaScript";"/**
 * @param {number[]} piles
 * @param {number} H
 * @return {number}
 */
var minEatingSpeed = function(piles, H) {
 
};";"";"2020-03-25 15:18:54"
14943;1207;"Go";"func minEatingSpeed(piles []int, H int) int {
 
}";"";"2020-03-25 15:18:54"
14944;1207;"PHP";"class Solution {
 
    /**
     * @param Integer[] $piles
     * @param Integer $H
     * @return Integer
     */
    function minEatingSpeed($piles, $H) {
        
    }
}";"";"2020-03-25 15:18:54"
14945;1207;"Ruby";"# @param {Integer[]} piles";"";"2020-03-25 15:18:54"
14946;1207;"Python";"class Solution(object):
    def minEatingSpeed(self, piles, H):
        """"""
        :type piles: List[int]
        :type H: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:54"
14947;1207;"Kotlin";"class Solution {
    fun minEatingSpeed(piles: IntArray, H: Int): 
Int {
 
    }
}";"";"2020-03-25 15:18:54"
14948;1208;"C#";"public class Solution {
    public int KSimilarity(string A, string B) {
 
    }
}";"";"2020-03-25 15:18:54"
14949;1208;"Java";"class Solution {
    public int kSimilarity(String A, String B) {
 
    }
}";"";"2020-03-25 15:18:54"
14950;1208;"C";"int kSimilarity(char * A, char * B){
 
}";"";"2020-03-25 15:18:54"
14951;1208;"Rust";"impl Solution {
    pub fn k_similarity(a: String, b: String) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:54"
14952;1208;"Scala";"object Solution {
    def kSimilarity(A: String, B: String): Int = {
 
    }
}";"";"2020-03-25 15:18:54"
14953;1208;"Python3";"class Solution:
    def kSimilarity(self, A: str, B: str) -> int:";"";"2020-03-25 15:18:54"
14954;1208;"JavaScript";"/**
 * @param {string} A
 * @param {string} B
 * @return {number}
 */
var kSimilarity = function(A, B) {
 
};";"";"2020-03-25 15:18:54"
14955;1208;"PHP";"class Solution {
 
    /**
     * @param String $A
     * @param String $B
     * @return Integer
     */
    function kSimilarity($A, $B) {
        
    }
}";"";"2020-03-25 15:18:54"
14956;1208;"Swift";"class Solution {
    func kSimilarity(_ A: String, _ B: String) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:54"
14957;1208;"Ruby";"# @param {String} a";"";"2020-03-25 15:18:54"
14958;1208;"Python";"class Solution(object):
    def kSimilarity(self, A, B):
        """"""
        :type A: str
        :type B: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:54"
14959;1208;"Kotlin";"class Solution {
    fun kSimilarity(A: String, B: String): Int {
 
    }
}";"";"2020-03-25 15:18:54"
14960;1209;"C#";"public class Solution {
    public int NumFriendRequests(int[] ages) {
 
    }
}";"";"2020-03-25 15:18:54"
14961;1209;"Java";"class Solution {
    public int numFriendRequests(int[] ages) {
 
    }
}";"";"2020-03-25 15:18:54"
14962;1209;"Rust";"impl Solution {
    pub fn num_friend_requests(ages: Vec<i32>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:54"
14963;1209;"C";"int numFriendRequests(int* ages, int agesSize){
 
}";"";"2020-03-25 15:18:54"
14964;1209;"Scala";"object Solution {
    def numFriendRequests(ages: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:54"
14965;1209;"Go";"func numFriendRequests(ages []int) int {
 
}";"";"2020-03-25 15:18:54"
14966;1209;"Kotlin";"class Solution {
    fun numFriendRequests(ages: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:54"
14967;1209;"Python3";"class Solution:
    def numFriendRequests(self, ages: List[int]) -> 
int:";"";"2020-03-25 15:18:54"
14968;1209;"JavaScript";"/**
 * @param {number[]} ages
 * @return {number}
 */
var numFriendRequests = function(ages) {
 
};";"";"2020-03-25 15:18:54"
14969;1209;"PHP";"";"";"2020-03-25 15:18:54"
14970;1209;"Swift";"class Solution {
    func numFriendRequests(_ ages: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:54"
14971;1209;"Ruby";"# @param {Integer[]} ages
# @return {Integer}
def num_friend_requests(ages)
 
end";"";"2020-03-25 15:18:54"
14972;1209;"Python";"class Solution(object):
    def numFriendRequests(self, ages):
        """"""
        :type ages: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:54"
14973;1210;"C#";"public class Solution {
    public int[] SortItems(int n, int m, int[] 
group, IList<IList<int>> beforeItems) {
 
    }
}";"";"2020-03-25 15:18:54"
14974;1210;"Java";"class Solution {
    public int[] sortItems(int n, int m, int[] 
group, List<List<Integer>> beforeItems) {
 
    }
}";"";"2020-03-25 15:18:54"
14975;1210;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* sortItems(int n, int m, int* group, int 
groupSize, int** beforeItems, int beforeItemsSize, 
int* beforeItemsColSize, int* returnSize){
 
}";"";"2020-03-25 15:18:54"
14976;1210;"Rust";"impl Solution {
    pub fn sort_items(n: i32, m: i32, group: 
Vec<i32>, before_items: Vec<Vec<i32>>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:54"
14977;1210;"Scala";"object Solution {
    def sortItems(n: Int, m: Int, group: Array[Int],
 beforeItems: List[List[Int]]): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:54"
14978;1210;"Go";"func sortItems(n int, m int, group []int, 
beforeItems [][]int) []int {
 
}";"";"2020-03-25 15:18:54"
14979;1210;"Kotlin";"class Solution {
    fun sortItems(n: Int, m: Int, group: IntArray, 
beforeItems: List<List<Int>>): IntArray {
 
    }
}";"";"2020-03-25 15:18:54"
14980;1210;"Python3";"class Solution:
    def sortItems(self, n: int, m: int, group: List
[int], beforeItems: List[List[int]]) -> List[int]:";"";"2020-03-25 15:18:54"
14981;1210;"JavaScript";"/**
 * @param {number} n
 * @param {number} m
 * @param {number[]} group
 * @param {number[][]} beforeItems
 * @return {number[]}
 */
var sortItems = function(n, m, group, beforeItems) {
 
};";"";"2020-03-25 15:18:54"
14982;1210;"PHP";"class Solution {
 
    /**
     * @param Integer $n
     * @param Integer $m
     * @param Integer[] $group
     * @param Integer[][] $beforeItems
     * @return Integer[]
     */
    function sortItems($n, $m, $group, $beforeItems)
 {
        
    }
}";"";"2020-03-25 15:18:54"
14983;1210;"Swift";"class Solution {
    func sortItems(_ n: Int, _ m: Int, _ group: 
[Int], _ beforeItems: [[Int]]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:54"
14984;1210;"Ruby";"# @param {Integer} n
# @param {Integer} m
# @param {Integer[]} group
# @param {Integer[][]} before_items
# @return {Integer[]}
def sort_items(n, m, group, before_items)
 
end";"";"2020-03-25 15:18:54"
14985;1210;"Python";"class Solution(object):
    def sortItems(self, n, m, group, beforeItems):
        """"""
        :type n: int
        :type m: int
        :type group: List[int]
        :type beforeItems: List[List[int]]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:54"
14986;1211;"C#";"public class Solution {
    public int MinSwap(int[] A, int[] B) {
 
    }
}";"";"2020-03-25 15:18:54"
14987;1211;"Java";"class Solution {
    public int minSwap(int[] A, int[] B) {
 
    }
}";"";"2020-03-25 15:18:54"
14988;1211;"C";"int minSwap(int* A, int ASize, int* B, int BSize){
 
}";"";"2020-03-25 15:18:54"
14989;1211;"Rust";"impl Solution {
    pub fn min_swap(a: Vec<i32>, b: Vec<i32>) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:54"
14990;1211;"Scala";"object Solution {
    def minSwap(A: Array[Int], B: Array[Int]): Int 
= {
 
    }
}";"";"2020-03-25 15:18:54"
14991;1211;"Go";"func minSwap(A []int, B []int) int {
 
}";"";"2020-03-25 15:18:54"
14992;1211;"Kotlin";"class Solution {
    fun minSwap(A: IntArray, B: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:54"
14993;1211;"Python3";"class Solution:
    def minSwap(self, A: List[int], B: List[int]) 
-> int:";"";"2020-03-25 15:18:54"
14994;1211;"JavaScript";"/**
 * @param {number[]} A
 * @param {number[]} B
 * @return {number}
 */
var minSwap = function(A, B) {
 
};";"";"2020-03-25 15:18:54"
14995;1211;"PHP";"class Solution {
 
    /**
     * @param Integer[] $A
     * @param Integer[] $B
     * @return Integer
     */
    function minSwap($A, $B) {
        
    }
}";"";"2020-03-25 15:18:54"
14996;1211;"Swift";"class Solution {
    func minSwap(_ A: [Int], _ B: [Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:54"
14997;1211;"Ruby";"# @param {Integer[]} a
# @param {Integer[]} b
# @return {Integer}
def min_swap(a, b)
 
end";"";"2020-03-25 15:18:54"
14998;1211;"Python";"class Solution(object):
    def minSwap(self, A, B):
        """"""
        :type A: List[int]
        :type B: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:54"
14999;1212;"C#";"public class Solution {
    public int SingleNumber(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:54"
15000;1212;"Java";"class Solution {
    public int singleNumber(int[] nums) {
 
    }
}";"";"2020-03-25 15:18:54"
15001;1212;"Rust";"impl Solution {
    pub fn single_number(nums: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:54"
15002;1212;"C";"int singleNumber(int* nums, int numsSize){
 
}";"";"2020-03-25 15:18:54"
15003;1212;"Scala";"object Solution {
    def singleNumber(nums: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:54"
15004;1212;"Go";"func singleNumber(nums []int) int {
 
}";"";"2020-03-25 15:18:54"
15005;1212;"Kotlin";"class Solution {
    fun singleNumber(nums: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:54"
15006;1212;"Python3";"class Solution:
    def singleNumber(self, nums: List[int]) -> int:";"";"2020-03-25 15:18:54"
15007;1212;"JavaScript";"/**
 * @param {number[]} nums
 * @return {number}
 */
var singleNumber = function(nums) {
 
};";"";"2020-03-25 15:18:54"
15008;1212;"PHP";"class Solution {";"";"2020-03-25 15:18:54"
15009;1212;"Swift";"class Solution {
    func singleNumber(_ nums: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:54"
15010;1212;"Ruby";"# @param {Integer[]} nums
# @return {Integer}
def single_number(nums)
 
end";"";"2020-03-25 15:18:54"
15011;1212;"Python";"class Solution(object):
    def singleNumber(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:54"
15012;1213;"C#";"public class Solution {
    public IList<int> SpiralOrder(int[][] matrix) {
 
    }
}";"";"2020-03-25 15:18:54"
15013;1213;"Java";"class Solution {
    public List<Integer> spiralOrder(int[][] matrix)
 {
 
    }
}";"";"2020-03-25 15:18:54"
15014;1213;"Rust";"impl Solution {
    pub fn spiral_order(matrix: Vec<Vec<i32>>) -> 
Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:54"
15015;1213;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* spiralOrder(int** matrix, int matrixSize, int* 
matrixColSize, int* returnSize){
 
}";"";"2020-03-25 15:18:54"
15016;1213;"Scala";"object Solution {
    def spiralOrder(matrix: Array[Array[Int]]): List
[Int] = {
 
    }
}";"";"2020-03-25 15:18:54"
15017;1213;"Go";"func spiralOrder(matrix [][]int) []int {
 
}";"";"2020-03-25 15:18:54"
15018;1213;"Kotlin";"class Solution {
    fun spiralOrder(matrix: Array<IntArray>): 
List<Int> {
 
    }
}";"";"2020-03-25 15:18:54"
15019;1213;"Python3";"class Solution:
    def spiralOrder(self, matrix: List[List[int]]) 
-> List[int]:";"";"2020-03-25 15:18:54"
15020;1213;"JavaScript";"/**
 * @param {number[][]} matrix
 * @return {number[]}
 */
var spiralOrder = function(matrix) {
 
};";"";"2020-03-25 15:18:54"
15021;1213;"PHP";"class Solution {";"";"2020-03-25 15:18:54"
15022;1213;"Swift";"class Solution {
    func spiralOrder(_ matrix: [[Int]]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:54"
15023;1213;"Ruby";"# @param {Integer[][]} matrix
# @return {Integer[]}
def spiral_order(matrix)
 
end";"";"2020-03-25 15:18:54"
15024;1213;"Python";"class Solution(object):
    def spiralOrder(self, matrix):
        """"""
        :type matrix: List[List[int]]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:54"
15025;1214;"C#";"public class Solution {
    public int CompareVersion(string version1, 
string version2) {
 
    }
}";"";"2020-03-25 15:18:54"
15026;1214;"Java";"class Solution {
    public int compareVersion(String version1, 
String version2) {
 
    }
}";"";"2020-03-25 15:18:54"
15027;1214;"Rust";"impl Solution {
    pub fn compare_version(version1: String, 
version2: String) -> i32 {
 
    }
}";"";"2020-03-25 15:18:54"
15028;1214;"C";"int compareVersion(char * version1, char * version2)
{
 
}";"";"2020-03-25 15:18:54"
15029;1214;"Scala";"object Solution {
    def compareVersion(version1: String, version2: 
String): Int = {
 
    }
}";"";"2020-03-25 15:18:54"
15030;1214;"Go";"func compareVersion(version1 string, version2 
string) int {
 
}";"";"2020-03-25 15:18:54"
15031;1214;"Kotlin";"class Solution {
    fun compareVersion(version1: String, version2: 
String): Int {
 
    }
}";"";"2020-03-25 15:18:54"
15032;1214;"Python3";"class Solution:
    def compareVersion(self, version1: str, 
version2: str) -> int:";"";"2020-03-25 15:18:54"
15033;1214;"JavaScript";"/**
 * @param {string} version1
 * @param {string} version2
 * @return {number}
 */
var compareVersion = function(version1, version2) {
 
};";"";"2020-03-25 15:18:54"
15034;1214;"PHP";"class Solution {";"";"2020-03-25 15:18:54"
15035;1214;"Swift";"class Solution {
    func compareVersion(_ version1: String, _ 
version2: String) -> Int {
 
    }
}";"";"2020-03-25 15:18:54"
15036;1214;"Ruby";"# @param {String} version1
# @param {String} version2
# @return {Integer}
def compare_version(version1, version2)
 
end";"";"2020-03-25 15:18:54"
15037;1214;"Python";"class Solution(object):
    def compareVersion(self, version1, version2):
        """"""
        :type version1: str
        :type version2: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:54"
15038;1215;"C#";"public class Solution {
    public string LargestMultipleOfThree(int[] 
digits) {
 
    }
}";"";"2020-03-25 15:18:54"
15039;1215;"Java";"class Solution {
    public String largestMultipleOfThree(int[] 
digits) {
 
    }
}";"";"2020-03-25 15:18:54"
15040;1215;"Rust";"impl Solution {
    pub fn largest_multiple_of_three(digits: 
Vec<i32>) -> String {
        
    }
}";"";"2020-03-25 15:18:54"
15041;1215;"C";"char * largestMultipleOfThree(int* digits, int 
digitsSize){
 
}";"";"2020-03-25 15:18:54"
15042;1215;"Scala";"object Solution {
    def largestMultipleOfThree(digits: Array[Int]): 
String = {
 
    }
}";"";"2020-03-25 15:18:54"
15043;1215;"Go";"func largestMultipleOfThree(digits []int) string {
 
}";"";"2020-03-25 15:18:54"
15044;1215;"Kotlin";"class Solution {
    fun largestMultipleOfThree(digits: IntArray): 
String {
 
    }
}";"";"2020-03-25 15:18:54"
15045;1215;"Python3";"class Solution:
    def largestMultipleOfThree(self, digits: List
[int]) -> str:";"";"2020-03-25 15:18:54"
15046;1215;"JavaScript";"/**
 * @param {number[]} digits
 * @return {string}
 */
var largestMultipleOfThree = function(digits) {
 
};";"";"2020-03-25 15:18:54"
15047;1215;"PHP";"class Solution {
 
    /**
     * @param Integer[] $digits
     * @return String
     */
    function largestMultipleOfThree($digits) {
        
    }
}";"";"2020-03-25 15:18:54"
15048;1215;"Swift";"class Solution {
    func largestMultipleOfThree(_ digits: [Int]) -> 
String {
        
    }
}";"";"2020-03-25 15:18:54"
15049;1215;"Ruby";"# @param {Integer[]} digits
# @return {String}
def largest_multiple_of_three(digits)
 
end";"";"2020-03-25 15:18:54"
15050;1215;"Python";"class Solution(object):
    def largestMultipleOfThree(self, digits):
        """"""
        :type digits: List[int]
        :rtype: str
        """"""";"";"2020-03-25 15:18:54"
15051;1216;"C#";"public class Solution {
    public int NumWays(int steps, int arrLen) {
 
    }
}";"";"2020-03-25 15:18:54"
15052;1216;"Java";"class Solution {
    public int numWays(int steps, int arrLen) {
 
    }
}";"";"2020-03-25 15:18:54"
15053;1216;"Rust";"impl Solution {
    pub fn num_ways(steps: i32, arr_len: i32) -> 
i32 {
 
    }
}";"";"2020-03-25 15:18:54"
15054;1216;"C";"int numWays(int steps, int arrLen){
 
}";"";"2020-03-25 15:18:54"
15055;1216;"Scala";"object Solution {
    def numWays(steps: Int, arrLen: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:54"
15056;1216;"Go";"func numWays(steps int, arrLen int) int {
 
}";"";"2020-03-25 15:18:54"
15057;1216;"Kotlin";"class Solution {
    fun numWays(steps: Int, arrLen: Int): Int {
 
    }
}";"";"2020-03-25 15:18:54"
15058;1216;"Python3";"class Solution:
    def numWays(self, steps: int, arrLen: int) -> 
int:";"";"2020-03-25 15:18:54"
15059;1216;"JavaScript";"/**
 * @param {number} steps
 * @param {number} arrLen
 * @return {number}
 */
var numWays = function(steps, arrLen) {
 
};";"";"2020-03-25 15:18:54"
15060;1216;"PHP";"class Solution {
 
    /**
     * @param Integer $steps
     * @param Integer $arrLen
     * @return Integer
     */
    function numWays($steps, $arrLen) {
 
    }
}";"";"2020-03-25 15:18:54"
15061;1216;"Swift";"class Solution {
    func numWays(_ steps: Int, _ arrLen: Int) -> 
Int {
 
    }
}";"";"2020-03-25 15:18:54"
15062;1216;"Ruby";"# @param {Integer} steps
# @param {Integer} arr_len
# @return {Integer}
def num_ways(steps, arr_len)
 
end";"";"2020-03-25 15:18:54"
15063;1216;"Python";"class Solution(object):
    def numWays(self, steps, arrLen):
        """"""
        :type steps: int
        :type arrLen: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:54"
15064;1217;"C#";"public class Solution {
    public IList<int> GetRow(int rowIndex) {
 
    }
}";"";"2020-03-25 15:18:54"
15065;1217;"Java";"class Solution {
    public List<Integer> getRow(int rowIndex) {
 
    }
}";"";"2020-03-25 15:18:54"
15066;1217;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* getRow(int rowIndex, int* returnSize){
 
}";"";"2020-03-25 15:18:54"
15067;1217;"Rust";"impl Solution {
    pub fn get_row(row_index: i32) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:54"
15068;1217;"Scala";"object Solution {
    def getRow(rowIndex: Int): List[Int] = {
 
    }
}";"";"2020-03-25 15:18:54"
15069;1217;"Go";"func getRow(rowIndex int) []int {
 
}";"";"2020-03-25 15:18:54"
15070;1217;"Kotlin";"class Solution {
    fun getRow(rowIndex: Int): List<Int> {
 
    }
}";"";"2020-03-25 15:18:54"
15071;1217;"Python3";"class Solution:
    def getRow(self, rowIndex: int) -> List[int]:";"";"2020-03-25 15:18:54"
15072;1217;"JavaScript";"/**
 * @param {number} rowIndex
 * @return {number[]}
 */
var getRow = function(rowIndex) {
 
};";"";"2020-03-25 15:18:54"
15073;1217;"PHP";"class Solution {
 
    /**
     * @param Integer $rowIndex
     * @return Integer[]
     */
    function getRow($rowIndex) {
        
    }
}";"";"2020-03-25 15:18:54"
15074;1217;"Swift";"class Solution {
    func getRow(_ rowIndex: Int) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:54"
15075;1217;"Ruby";"# @param {Integer} row_index";"";"2020-03-25 15:18:54"
15076;1217;"Python";"class Solution(object):
    def getRow(self, rowIndex):
        """"""
        :type rowIndex: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:54"
15077;1218;"Bash";"# Read from the file file.txt and print its ";"";"2020-03-25 15:18:54"
15078;1219;"C#";"public class Solution {
    public int[] SortedSquares(int[] A) {
 
    }
}";"";"2020-03-25 15:18:54"
15079;1219;"Java";"class Solution {
    public int[] sortedSquares(int[] A) {
 
    }
}";"";"2020-03-25 15:18:54"
15080;1219;"Rust";"impl Solution {
    pub fn sorted_squares(a: Vec<i32>) -> Vec<i32> {
        
    }
}";"";"2020-03-25 15:18:54"
15081;1219;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* sortedSquares(int* A, int ASize, int* 
returnSize){
 
}";"";"2020-03-25 15:18:54"
15082;1219;"Scala";"object Solution {
    def sortedSquares(A: Array[Int]): Array[Int] = {
 
    }
}";"";"2020-03-25 15:18:54"
15083;1219;"Go";"func sortedSquares(A []int) []int {
 
}";"";"2020-03-25 15:18:54"
15084;1219;"Kotlin";"class Solution {
    fun sortedSquares(A: IntArray): IntArray {
 
    }
}";"";"2020-03-25 15:18:54"
15085;1219;"Python3";"class Solution:
    def sortedSquares(self, A: List[int]) -> List
[int]:";"";"2020-03-25 15:18:54"
15086;1219;"JavaScript";"/**
 * @param {number[]} A
 * @return {number[]}
 */
var sortedSquares = function(A) {
 
};";"";"2020-03-25 15:18:54"
15087;1219;"PHP";"class Solution {";"";"2020-03-25 15:18:54"
15088;1219;"Swift";"class Solution {
    func sortedSquares(_ A: [Int]) -> [Int] {
        
    }
}";"";"2020-03-25 15:18:54"
15089;1219;"Ruby";"# @param {Integer[]} a
# @return {Integer[]}
def sorted_squares(a)
 
end";"";"2020-03-25 15:18:54"
15090;1219;"Python";"class Solution(object):
    def sortedSquares(self, A):
        """"""
        :type A: List[int]
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:54"
15091;1220;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode InsertIntoMaxTree(TreeNode root,
 int val) {
 
    }
}";"";"2020-03-25 15:18:54"
15092;1220;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode insertIntoMaxTree(TreeNode root,
 int val) {
 
    }
}";"";"2020-03-25 15:18:54"
15093;1220;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
struct TreeNode* insertIntoMaxTree(struct TreeNode* 
root, int val){
 
}";"";"2020-03-25 15:18:54"
15094;1220;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn insert_into_max_tree(root: 
Option<Rc<RefCell<TreeNode>>>, val: i32) -> 
Option<Rc<RefCell<TreeNode>>> {
        
    }";"";"2020-03-25 15:18:54"
15095;1220;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def insertIntoMaxTree(root: TreeNode, `val`: 
Int): TreeNode = {
 
    }
}";"";"2020-03-25 15:18:54"
15096;1220;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func insertIntoMaxTree(root *TreeNode, val int) 
*TreeNode {
 
}";"";"2020-03-25 15:18:54"
15097;1220;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun insertIntoMaxTree(root: TreeNode?, `val`: 
Int): TreeNode? {
 
    }
}";"";"2020-03-25 15:18:54"
15098;1220;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def insertIntoMaxTree(self, root: TreeNode, 
val: int) -> TreeNode:";"";"2020-03-25 15:18:54"
15099;1220;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} val
 * @return {TreeNode}
 */
var insertIntoMaxTree = function(root, val) {
 
};";"";"2020-03-25 15:18:54"
15100;1220;"PHP";"/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($value) { $this->val = 
$value; }
 * }
 */
class Solution {
 
    /**
     * @param TreeNode $root
     * @param Integer $val
     * @return TreeNode
     */
    function insertIntoMaxTree($root, $val) {
        
    }
}";"";"2020-03-25 15:18:54"
15101;1220;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func insertIntoMaxTree(_ root: TreeNode?, _ 
val: Int) -> TreeNode? {
        
    }
}";"";"2020-03-25 15:18:54"
15102;1220;"Ruby";"# Definition for a binary tree node.";"";"2020-03-25 15:18:54"
15103;1220;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def insertIntoMaxTree(self, root, val):
        """"""
        :type root: TreeNode
        :type val: int
        :rtype: TreeNode
        """"""";"";"2020-03-25 15:18:54"
15104;1221;"C#";"public class Solution {
    public int UniqueLetterString(string s) {
 
    }
}";"";"2020-03-25 15:18:54"
15105;1221;"Java";"class Solution {
    public int uniqueLetterString(String s) {
 
    }
}";"";"2020-03-25 15:18:54"
15106;1221;"C";"int uniqueLetterString(char * s){
 
}";"";"2020-03-25 15:18:54"
15107;1221;"Rust";"impl Solution {
    pub fn unique_letter_string(s: String) -> i32 {
 
    }
}";"";"2020-03-25 15:18:54"
15108;1221;"Scala";"object Solution {
    def uniqueLetterString(s: String): Int = {
 
    }
}";"";"2020-03-25 15:18:54"
15109;1221;"Go";"func uniqueLetterString(s string) int {
 
}";"";"2020-03-25 15:18:54"
15110;1221;"Kotlin";"class Solution {
    fun uniqueLetterString(s: String): Int {
 
    }
}";"";"2020-03-25 15:18:54"
15111;1221;"Python3";"class Solution:
    def uniqueLetterString(self, s: str) -> int:";"";"2020-03-25 15:18:54"
15112;1221;"JavaScript";"/**
 * @param {string} s
 * @return {number}
 */
var uniqueLetterString = function(s) {
 
};";"";"2020-03-25 15:18:54"
15113;1221;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @return Integer
     */
    function uniqueLetterString($s) {
 
    }
}";"";"2020-03-25 15:18:54"
15114;1221;"Swift";"class Solution {
    func uniqueLetterString(_ s: String) -> Int {
 
    }
}";"";"2020-03-25 15:18:54"
15115;1221;"Ruby";"# @param {String} s
# @return {Integer}
def unique_letter_string(s)
 
end";"";"2020-03-25 15:18:54"
15116;1221;"Python";"class Solution(object):
    def uniqueLetterString(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:54"
15117;1222;"C#";"public class Solution {
    public bool HasGroupsSizeX(int[] deck) {
 
    }
}";"";"2020-03-25 15:18:54"
15118;1222;"Java";"class Solution {
    public boolean hasGroupsSizeX(int[] deck) {
 
    }
}";"";"2020-03-25 15:18:54"
15119;1222;"Rust";"impl Solution {
    pub fn has_groups_size_x(deck: Vec<i32>) -> 
bool {
 
    }
}";"";"2020-03-25 15:18:54"
15120;1222;"C";"bool hasGroupsSizeX(int* deck, int deckSize){
 
}";"";"2020-03-25 15:18:54"
15121;1222;"Scala";"object Solution {
    def hasGroupsSizeX(deck: Array[Int]): Boolean = 
{
 
    }
}";"";"2020-03-25 15:18:54"
15122;1222;"Go";"func hasGroupsSizeX(deck []int) bool {
 
}";"";"2020-03-25 15:18:54"
15123;1222;"Kotlin";"class Solution {
    fun hasGroupsSizeX(deck: IntArray): Boolean {
 
    }
}";"";"2020-03-25 15:18:54"
15124;1222;"Python3";"class Solution:
    def hasGroupsSizeX(self, deck: List[int]) -> 
bool:";"";"2020-03-25 15:18:54"
15125;1222;"JavaScript";"/**
 * @param {number[]} deck
 * @return {boolean}
 */
var hasGroupsSizeX = function(deck) {
 
};";"";"2020-03-25 15:18:54"
15126;1222;"PHP";"class Solution {";"";"2020-03-25 15:18:54"
15127;1222;"Swift";"class Solution {
    func hasGroupsSizeX(_ deck: [Int]) -> Bool {
 
    }
}";"";"2020-03-25 15:18:54"
15128;1222;"Ruby";"# @param {Integer[]} deck
# @return {Boolean}
def has_groups_size_x(deck)
 
end";"";"2020-03-25 15:18:54"
15129;1222;"Python";"class Solution(object):
    def hasGroupsSizeX(self, deck):
        """"""
        :type deck: List[int]
        :rtype: bool
        """"""";"";"2020-03-25 15:18:54"
15130;1223;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode RemoveZeroSumSublists(ListNode 
head) {
 
    }
}";"";"2020-03-25 15:18:55"
15131;1223;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode removeZeroSumSublists(ListNode 
head) {
 
    }
}";"";"2020-03-25 15:18:55"
15132;1223;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
struct ListNode* removeZeroSumSublists(struct 
ListNode* head){
 
}";"";"2020-03-25 15:18:55"
15133;1223;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn remove_zero_sum_sublists(head: 
Option<Box<ListNode>>) -> Option<Box<ListNode>> {
 
    }
}";"";"2020-03-25 15:18:55"
15134;1223;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def removeZeroSumSublists(head: ListNode): 
ListNode = {
 
    }
}";"";"2020-03-25 15:18:55"
15135;1223;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func removeZeroSumSublists(head *ListNode) 
*ListNode {
 
}";"";"2020-03-25 15:18:55"
15136;1223;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun removeZeroSumSublists(head: ListNode?): 
ListNode? {
 
    }
}";"";"2020-03-25 15:18:55"
15137;1223;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def removeZeroSumSublists(self, head: ListNode) 
-> ListNode:";"";"2020-03-25 15:18:55"
15138;1223;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var removeZeroSumSublists = function(head) {
 
};";"";"2020-03-25 15:18:55"
15139;1223;"PHP";"/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
class Solution {
 
    /**
     * @param ListNode $head
     * @return ListNode
     */
    function removeZeroSumSublists($head) {
 
    }
}";"";"2020-03-25 15:18:55"
15140;1223;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func removeZeroSumSublists(_ head: ListNode?) 
-> ListNode? {
 
    }
}";"";"2020-03-25 15:18:55"
15141;1223;"Ruby";"# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end
 
# @param {ListNode} head
# @return {ListNode}
def remove_zero_sum_sublists(head)
 
end";"";"2020-03-25 15:18:55"
15142;1223;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def removeZeroSumSublists(self, head):
        """"""
        :type head: ListNode
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:55"
15143;1224;"C#";"public class Solution {
    public bool IsUnique(string astr) {
 
    }
}";"";"2020-03-25 15:18:55"
15144;1224;"Java";"class Solution {
    public boolean isUnique(String astr) {
 
    }
}";"";"2020-03-25 15:18:55"
15145;1224;"C";"bool isUnique(char* astr){
 
}";"";"2020-03-25 15:18:55"
15146;1224;"Python3";"class Solution:
    def isUnique(self, astr: str) -> bool:";"";"2020-03-25 15:18:55"
15147;1224;"JavaScript";"/**
 * @param {string} astr
 * @return {boolean}
 */
var isUnique = function(astr) {
 
};";"";"2020-03-25 15:18:55"
15148;1224;"Go";"func isUnique(astr string) bool {
 
}";"";"2020-03-25 15:18:55"
15149;1224;"Swift";"class Solution {
    func isUnique(_ astr: String) -> Bool {
 
    }
}";"";"2020-03-25 15:18:55"
15150;1224;"Ruby";"# @param {String} astr
# @return {Boolean}
def is_unique(astr)
 
end";"";"2020-03-25 15:18:55"
15151;1224;"Python";"class Solution(object):
    def isUnique(self, astr):
        """"""
        :type astr: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:55"
15152;1225;"C#";"public class Foo {
 
    public Foo() {
        
    }
 
    public void First(Action printFirst) {
        
        // printFirst() outputs ""first"". Do not 
change or remove this line.
        printFirst();
    }
 
    public void Second(Action printSecond) {
        
        // printSecond() outputs ""second"". Do not 
change or remove this line.
        printSecond();
    }
 
    public void Third(Action printThird) {
        
        // printThird() outputs ""third"". Do not 
change or remove this line.
        printThird();
    }";"";"2020-03-25 15:18:55"
15153;1225;"Java";"class Foo {
 
    public Foo() {
        
    }
 
    public void first(Runnable printFirst) throws 
InterruptedException {
        
        // printFirst.run() outputs ""first"". Do not 
change or remove this line.
        printFirst.run();
    }
 
    public void second(Runnable printSecond) throws 
InterruptedException {
        
        // printSecond.run() outputs ""second"". Do 
not change or remove this line.
        printSecond.run();
    }
 
    public void third(Runnable printThird) throws 
InterruptedException {
        
        // printThird.run() outputs ""third"". Do not ";"";"2020-03-25 15:18:55"
15154;1225;"C++";"class Foo {
public:
    Foo() {
        
    }
 
    void first(function<void()> printFirst) {
        
        // printFirst() outputs ""first"". Do not 
change or remove this line.
        printFirst();
    }
 
    void second(function<void()> printSecond) {
        
        // printSecond() outputs ""second"". Do not 
change or remove this line.
        printSecond();
    }
 
    void third(function<void()> printThird) {
        
        // printThird() outputs ""third"". Do not 
change or remove this line.
        printThird();
    }";"";"2020-03-25 15:18:55"
15155;1225;"C";"typedef struct {
    // User defined data may be declared here.
    
} Foo;
 
Foo* fooCreate() {
    Foo* obj = (Foo*) malloc(sizeof(Foo));
    
    // Initialize user defined data here.
    
    return obj;
}
 
void first(Foo* obj) {
    
    // printFirst() outputs ""first"". Do not change 
or remove this line.
    printFirst();
}
 
void second(Foo* obj) {
    
    // printSecond() outputs ""second"". Do not 
change or remove this line.
    printSecond();
}";"";"2020-03-25 15:18:55"
15156;1225;"Python3";"class Foo:
    def __init__(self):
        pass
 
 
    def first(self, printFirst: 'Callable[[], None]
') -> None:
        
        # printFirst() outputs ""first"". Do not 
change or remove this line.
        printFirst()
 
 
    def second(self, printSecond: 'Callable[[], 
None]') -> None:
        
        # printSecond() outputs ""second"". Do not 
change or remove this line.
        printSecond()
 
 
    def third(self, printThird: 'Callable[[], None]
') -> None:
        
        # printThird() outputs ""third"". Do not 
change or remove this line.";"";"2020-03-25 15:18:55"
15157;1225;"Python";"class Foo(object):
    def __init__(self):
        pass
 
 
    def first(self, printFirst):
        """"""
        :type printFirst: method
        :rtype: void
        """"""
        
        # printFirst() outputs ""first"". Do not 
change or remove this line.
        printFirst()
 
 
    def second(self, printSecond):
        """"""
        :type printSecond: method
        :rtype: void
        """"""
        
        # printSecond() outputs ""second"". Do not 
change or remove this line.
        printSecond()
            ";"";"2020-03-25 15:18:55"
15158;1226;"C#";"public class Solution {
    public int StrToInt(string str) {
 
    }
}";"";"2020-03-25 15:18:55"
15159;1226;"Java";"class Solution {
    public int strToInt(String str) {
 
    }
}";"";"2020-03-25 15:18:55"
15160;1226;"C";"int strToInt(char* str){
 
}";"";"2020-03-25 15:18:55"
15161;1226;"Rust";"impl Solution {
    pub fn str_to_int(str: String) -> i32 {
 
    }
}";"";"2020-03-25 15:18:55"
15162;1226;"Scala";"object Solution {
    def strToInt(str: String): Int = {
 
    }
}";"";"2020-03-25 15:18:55"
15163;1226;"Go";"func strToInt(str string) int {
 
}";"";"2020-03-25 15:18:55"
15164;1226;"Kotlin";"class Solution {
    fun strToInt(str: String): Int {
 
    }
}";"";"2020-03-25 15:18:55"
15165;1226;"Python3";"class Solution:
    def strToInt(self, str: str) -> int:";"";"2020-03-25 15:18:55"
15166;1226;"JavaScript";"/**
 * @param {string} str
 * @return {number}
 */
var strToInt = function(str) {
 
};";"";"2020-03-25 15:18:55"
15167;1226;"PHP";"class Solution {
 
    /**
     * @param String $str
     * @return Integer
     */
    function strToInt($str) {
 
    }
}";"";"2020-03-25 15:18:55"
15168;1226;"Swift";"class Solution {
    func strToInt(_ str: String) -> Int {
 
    }
}";"";"2020-03-25 15:18:55"
15169;1226;"Ruby";"# @param {String} str";"";"2020-03-25 15:18:55"
15170;1226;"Python";"class Solution(object):
    def strToInt(self, str):
        """"""
        :type str: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:55"
15171;1227;"C#";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public bool IsBalanced(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:55"
15172;1227;"Java";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isBalanced(TreeNode root) {
 
    }
}";"";"2020-03-25 15:18:55"
15173;1227;"Rust";"// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
// 
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn is_balanced(root: 
Option<Rc<RefCell<TreeNode>>>) -> bool {
 
    }
}";"";"2020-03-25 15:18:55"
15174;1227;"C";"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
 
bool isBalanced(struct TreeNode* root){
 
}";"";"2020-03-25 15:18:55"
15175;1227;"Scala";"/**
 * Definition for a binary tree node.
 * class TreeNode(var _value: Int) {
 *   var value: Int = _value
 *   var left: TreeNode = null
 *   var right: TreeNode = null
 * }
 */
object Solution {
    def isBalanced(root: TreeNode): Boolean = {
 
    }
}";"";"2020-03-25 15:18:55"
15176;1227;"Go";"/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func isBalanced(root *TreeNode) bool {
 
}";"";"2020-03-25 15:18:55"
15177;1227;"Kotlin";"/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
    fun isBalanced(root: TreeNode?): Boolean {
 
    }
}";"";"2020-03-25 15:18:55"
15178;1227;"Python3";"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution:
    def isBalanced(self, root: TreeNode) -> bool:";"";"2020-03-25 15:18:55"
15179;1227;"JavaScript";"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isBalanced = function(root) {
 
};";"";"2020-03-25 15:18:55"
15180;1227;"PHP";"/**";"";"2020-03-25 15:18:55"
15181;1227;"Swift";"/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.left = nil
 *         self.right = nil
 *     }
 * }
 */
class Solution {
    func isBalanced(_ root: TreeNode?) -> Bool {
 
    }
}";"";"2020-03-25 15:18:55"
15182;1227;"Ruby";"# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end
 
# @param {TreeNode} root
# @return {Boolean}
def is_balanced(root)
 
end";"";"2020-03-25 15:18:55"
15183;1227;"Python";"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
 
class Solution(object):
    def isBalanced(self, root):
        """"""
        :type root: TreeNode
        :rtype: bool
        """"""";"";"2020-03-25 15:18:55"
15184;1228;"C#";"public class Solution {
    public int Maximum69Number (int num) {
        
    }
}";"";"2020-03-25 15:18:55"
15185;1228;"Java";"class Solution {
    public int maximum69Number (int num) {
 
    }
}";"";"2020-03-25 15:18:55"
15186;1228;"C";"int maximum69Number (int num){
 
}";"";"2020-03-25 15:18:55"
15187;1228;"Rust";"impl Solution {
    pub fn maximum69_number (num: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:55"
15188;1228;"Scala";"object Solution {
    def maximum69Number (num: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:55"
15189;1228;"Go";"func maximum69Number (num int) int {
 
}";"";"2020-03-25 15:18:55"
15190;1228;"Kotlin";"class Solution {
    fun maximum69Number (num: Int): Int {
 
    }
}";"";"2020-03-25 15:18:55"
15191;1228;"Python3";"class Solution:
    def maximum69Number (self, num: int) -> int:";"";"2020-03-25 15:18:55"
15192;1228;"JavaScript";"/**
 * @param {number} num
 * @return {number}
 */
var maximum69Number  = function(num) {
    
};";"";"2020-03-25 15:18:55"
15193;1228;"PHP";"class Solution {
 
    /**
     * @param Integer $num
     * @return Integer
     */
    function maximum69Number ($num) {
 
    }
}";"";"2020-03-25 15:18:55"
15194;1228;"Swift";"class Solution {
    func maximum69Number (_ num: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:55"
15195;1228;"Ruby";"# @param {Integer} num
# @return {Integer}
def maximum69_number (num)
    
end";"";"2020-03-25 15:18:55"
15196;1228;"Python";"class Solution(object):
    def maximum69Number (self, num):
        """"""
        :type num: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:55"
15197;1229;"C#";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode ReverseList(ListNode head) {
 
    }
}";"";"2020-03-25 15:18:55"
15198;1229;"Java";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
 
    }
}";"";"2020-03-25 15:18:55"
15199;1229;"C";"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 
struct ListNode* reverseList(struct ListNode* head){
 
}";"";"2020-03-25 15:18:55"
15200;1229;"Rust";"// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn reverse_list(head: Option<Box<ListNode>>)
 -> Option<Box<ListNode>> {
 
    }
}";"";"2020-03-25 15:18:55"
15201;1229;"Scala";"/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */
object Solution {
    def reverseList(head: ListNode): ListNode = {
 
    }
}";"";"2020-03-25 15:18:55"
15202;1229;"Go";"/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func reverseList(head *ListNode) *ListNode {
 
}";"";"2020-03-25 15:18:55"
15203;1229;"Kotlin";"/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun reverseList(head: ListNode?): ListNode? {
 
    }
}";"";"2020-03-25 15:18:55"
15204;1229;"Python3";"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def reverseList(self, head: ListNode) -> 
ListNode:";"";"2020-03-25 15:18:55"
15205;1229;"JavaScript";"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var reverseList = function(head) {
 
};";"";"2020-03-25 15:18:55"
15206;1229;"PHP";"/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = 
$val; }
 * }
 */
class Solution {
 
    /**
     * @param ListNode $head
     * @return ListNode
     */
    function reverseList($head) {
 
    }
}";"";"2020-03-25 15:18:55"
15207;1229;"Swift";"/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func reverseList(_ head: ListNode?) -> ListNode?
 {
 
    }
}";"";"2020-03-25 15:18:55"
15208;1229;"Ruby";"# Definition for singly-linked list.";"";"2020-03-25 15:18:55"
15209;1229;"Python";"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution(object):
    def reverseList(self, head):
        """"""
        :type head: ListNode
        :rtype: ListNode
        """"""";"";"2020-03-25 15:18:55"
15210;1230;"MS SQL Server";"/* Write your T-SQL query statement below */";"";"2020-03-25 15:18:55"
15211;1230;"Oracle";"/* Write your PL/SQL query statement below */";"";"2020-03-25 15:18:55"
15212;1231;"C#";"public class Solution {
    public IList<IList<string>> AccountsMerge
(IList<IList<string>> accounts) {
 
    }
}";"";"2020-03-25 15:18:55"
15213;1231;"Java";"class Solution {
    public List<List<String>> accountsMerge
(List<List<String>> accounts) {
 
    }
}";"";"2020-03-25 15:18:55"
15214;1231;"Rust";"impl Solution {
    pub fn accounts_merge(accounts: 
Vec<Vec<String>>) -> Vec<Vec<String>> {
        
    }
}";"";"2020-03-25 15:18:55"
15215;1231;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
char *** accountsMerge(char *** accounts, int 
accountsSize, int* accountsColSize, int* returnSize,
 int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:55"
15216;1231;"Scala";"object Solution {
    def accountsMerge(accounts: List[List[String]])
: List[List[String]] = {
 
    }
}";"";"2020-03-25 15:18:55"
15217;1231;"Go";"func accountsMerge(accounts [][]string) [][]string {
 
}";"";"2020-03-25 15:18:55"
15218;1231;"Kotlin";"class Solution {
    fun accountsMerge(accounts: List<List<String>>)
: List<List<String>> {
 
    }
}";"";"2020-03-25 15:18:55"
15219;1231;"Python3";"class Solution:
    def accountsMerge(self, accounts: List[List[str]
]) -> List[List[str]]:";"";"2020-03-25 15:18:55"
15220;1231;"JavaScript";"/**
 * @param {string[][]} accounts
 * @return {string[][]}
 */
var accountsMerge = function(accounts) {
 
};";"";"2020-03-25 15:18:55"
15221;1231;"PHP";"class Solution {
 
    /**
     * @param String[][] $accounts
     * @return String[][]
     */
    function accountsMerge($accounts) {
        
    }
}";"";"2020-03-25 15:18:55"
15222;1231;"Swift";"class Solution {
    func accountsMerge(_ accounts: [[String]]) -> [
[String]] {
        
    }
}";"";"2020-03-25 15:18:55"
15223;1231;"Ruby";"# @param {String[][]} accounts
# @return {String[][]}
def accounts_merge(accounts)
 
end";"";"2020-03-25 15:18:55"
15224;1231;"Python";"class Solution(object):
    def accountsMerge(self, accounts):
        """"""
        :type accounts: List[List[str]]
        :rtype: List[List[str]]
        """"""";"";"2020-03-25 15:18:55"
15225;1232;"C#";"public class Solution {
    public int NumDistinct(string s, string t) {
 
    }
}";"";"2020-03-25 15:18:55"
15226;1232;"Java";"class Solution {
    public int numDistinct(String s, String t) {
 
    }
}";"";"2020-03-25 15:18:55"
15227;1232;"Rust";"impl Solution {
    pub fn num_distinct(s: String, t: String) -> 
i32 {
        
    }
}";"";"2020-03-25 15:18:55"
15228;1232;"C";"int numDistinct(char * s, char * t){
 
}";"";"2020-03-25 15:18:55"
15229;1232;"Scala";"object Solution {
    def numDistinct(s: String, t: String): Int = {
 
    }
}";"";"2020-03-25 15:18:55"
15230;1232;"Go";"func numDistinct(s string, t string) int {
 
}";"";"2020-03-25 15:18:55"
15231;1232;"Kotlin";"class Solution {
    fun numDistinct(s: String, t: String): Int {
 
    }
}";"";"2020-03-25 15:18:55"
15232;1232;"Python3";"class Solution:
    def numDistinct(self, s: str, t: str) -> int:";"";"2020-03-25 15:18:55"
15233;1232;"JavaScript";"/**
 * @param {string} s
 * @param {string} t
 * @return {number}
 */
var numDistinct = function(s, t) {
 
};";"";"2020-03-25 15:18:55"
15234;1232;"PHP";"class Solution {";"";"2020-03-25 15:18:55"
15235;1232;"Swift";"class Solution {
    func numDistinct(_ s: String, _ t: String) -> 
Int {
        
    }
}";"";"2020-03-25 15:18:55"
15236;1232;"Ruby";"# @param {String} s
# @param {String} t
# @return {Integer}
def num_distinct(s, t)
 
end";"";"2020-03-25 15:18:55"
15237;1232;"Python";"class Solution(object):
    def numDistinct(self, s, t):
        """"""
        :type s: str
        :type t: str
        :rtype: int
        """"""";"";"2020-03-25 15:18:55"
15238;1233;"C#";"public class Solution {
    public bool IsFlipedString(string s1, string s2)
 {
 
    }
}";"";"2020-03-25 15:18:55"
15239;1233;"Java";"class Solution {
    public boolean isFlipedString(String s1, String 
s2) {
 
    }
}";"";"2020-03-25 15:18:55"
15240;1233;"Rust";"impl Solution {
    pub fn is_fliped_string(s1: String, s2: String) 
-> bool {
 
    }
}";"";"2020-03-25 15:18:55"
15241;1233;"C";"bool isFlipedString(char* s1, char* s2){
 
}";"";"2020-03-25 15:18:55"
15242;1233;"Scala";"object Solution {
    def isFlipedString(s1: String, s2: String): 
Boolean = {
 
    }
}";"";"2020-03-25 15:18:55"
15243;1233;"Go";"func isFlipedString(s1 string, s2 string) bool {
 
}";"";"2020-03-25 15:18:55"
15244;1233;"Kotlin";"class Solution {
    fun isFlipedString(s1: String, s2: String): 
Boolean {
 
    }
}";"";"2020-03-25 15:18:55"
15245;1233;"Python3";"class Solution:
    def isFlipedString(self, s1: str, s2: str) -> 
bool:";"";"2020-03-25 15:18:55"
15246;1233;"JavaScript";"/**
 * @param {string} s1
 * @param {string} s2
 * @return {boolean}
 */
var isFlipedString = function(s1, s2) {
 
};";"";"2020-03-25 15:18:55"
15247;1233;"PHP";"class Solution {
 
    /**
     * @param String $s1
     * @param String $s2
     * @return Boolean
     */
    function isFlipedString($s1, $s2) {
 
    }
}";"";"2020-03-25 15:18:55"
15248;1233;"Swift";"class Solution {
    func isFlipedString(_ s1: String, _ s2: String) 
-> Bool {
 
    }
}";"";"2020-03-25 15:18:55"
15249;1233;"Ruby";"# @param {String} s1
# @param {String} s2
# @return {Boolean}
def is_fliped_string(s1, s2)
 
end";"";"2020-03-25 15:18:55"
15250;1233;"Python";"class Solution(object):
    def isFlipedString(self, s1, s2):
        """"""
        :type s1: str
        :type s2: str
        :rtype: bool
        """"""";"";"2020-03-25 15:18:55"
15251;1234;"C#";"public class Solution {
    public int NumberOfSteps (int num) {
 
    }
}";"";"2020-03-25 15:18:55"
15252;1234;"Java";"class Solution {
    public int numberOfSteps (int num) {
 
    }
}";"";"2020-03-25 15:18:55"
15253;1234;"C";"int numberOfSteps (int num){
 
}";"";"2020-03-25 15:18:55"
15254;1234;"Rust";"impl Solution {
    pub fn number_of_steps (num: i32) -> i32 {
 
    }
}";"";"2020-03-25 15:18:55"
15255;1234;"Scala";"object Solution {
    def numberOfSteps (num: Int): Int = {
 
    }
}";"";"2020-03-25 15:18:55"
15256;1234;"Go";"func numberOfSteps (num int) int {
 
}";"";"2020-03-25 15:18:55"
15257;1234;"Kotlin";"class Solution {
    fun numberOfSteps (num: Int): Int {
 
    }
}";"";"2020-03-25 15:18:55"
15258;1234;"Python3";"class Solution:
    def numberOfSteps (self, num: int) -> int:";"";"2020-03-25 15:18:55"
15259;1234;"JavaScript";"/**
 * @param {number} num
 * @return {number}
 */
var numberOfSteps  = function(num) {
 
};";"";"2020-03-25 15:18:55"
15260;1234;"PHP";"class Solution {
 
    /**
     * @param Integer $num
     * @return Integer
     */
    function numberOfSteps ($num) {
 
    }
}";"";"2020-03-25 15:18:55"
15261;1234;"Swift";"class Solution {
    func numberOfSteps (_ num: Int) -> Int {
 
    }
}";"";"2020-03-25 15:18:55"
15262;1234;"Ruby";"# @param {Integer} num
# @return {Integer}
def number_of_steps (num)
 
end";"";"2020-03-25 15:18:55"
15263;1234;"Python";"class Solution(object):
    def numberOfSteps (self, num):
        """"""
        :type num: int
        :rtype: int
        """"""";"";"2020-03-25 15:18:55"
15264;1235;"C#";"public class Solution {
    public IList<IList<int>> LargeGroupPositions
(string S) {
 
    }
}";"";"2020-03-25 15:18:55"
15265;1235;"Java";"class Solution {
    public List<List<Integer>> largeGroupPositions
(String S) {
 
    }
}";"";"2020-03-25 15:18:55"
15266;1235;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** largeGroupPositions(char * S, int* returnSize,
 int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:55"
15267;1235;"Rust";"impl Solution {
    pub fn large_group_positions(s: String) -> 
Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:55"
15268;1235;"Scala";"object Solution {
    def largeGroupPositions(S: String): List[List
[Int]] = {
 
    }
}";"";"2020-03-25 15:18:55"
15269;1235;"Go";"func largeGroupPositions(S string) [][]int {
 
}";"";"2020-03-25 15:18:55"
15270;1235;"Kotlin";"class Solution {
    fun largeGroupPositions(S: String): 
List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:55"
15271;1235;"Python3";"class Solution:
    def largeGroupPositions(self, S: str) -> List
[List[int]]:";"";"2020-03-25 15:18:55"
15272;1235;"JavaScript";"/**
 * @param {string} S
 * @return {number[][]}
 */
var largeGroupPositions = function(S) {
 
};";"";"2020-03-25 15:18:55"
15273;1235;"PHP";"class Solution {
 
    /**
     * @param String $S
     * @return Integer[][]
     */
    function largeGroupPositions($S) {
        
    }
}";"";"2020-03-25 15:18:55"
15274;1235;"Swift";"class Solution {
    func largeGroupPositions(_ S: String) -> [[Int]]
 {
        
    }
}";"";"2020-03-25 15:18:55"
15275;1235;"Ruby";"# @param {String} s
# @return {Integer[][]}
def large_group_positions(s)
 
end";"";"2020-03-25 15:18:55"
15276;1235;"Python";"class Solution(object):
    def largeGroupPositions(self, S):
        """"""
        :type S: str
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:55"
15277;1236;"C#";"public class Solution {
    public bool CanPlaceFlowers(int[] flowerbed, 
int n) {
 
    }
}";"";"2020-03-25 15:18:55"
15278;1236;"Java";"class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, 
int n) {
 
    }
}";"";"2020-03-25 15:18:55"
15279;1236;"C";"bool canPlaceFlowers(int* flowerbed, int 
flowerbedSize, int n){
 
}";"";"2020-03-25 15:18:55"
15280;1236;"Rust";"impl Solution {
    pub fn can_place_flowers(flowerbed: Vec<i32>, 
n: i32) -> bool {
        
    }
}";"";"2020-03-25 15:18:55"
15281;1236;"Scala";"object Solution {
    def canPlaceFlowers(flowerbed: Array[Int], n: 
Int): Boolean = {
 
    }
}";"";"2020-03-25 15:18:55"
15282;1236;"Go";"func canPlaceFlowers(flowerbed []int, n int) bool {
 
}";"";"2020-03-25 15:18:55"
15283;1236;"Kotlin";"class Solution {
    fun canPlaceFlowers(flowerbed: IntArray, n: Int)
: Boolean {
 
    }
}";"";"2020-03-25 15:18:55"
15284;1236;"Python3";"class Solution:
    def canPlaceFlowers(self, flowerbed: List[int], 
n: int) -> bool:";"";"2020-03-25 15:18:55"
15285;1236;"JavaScript";"/**
 * @param {number[]} flowerbed
 * @param {number} n
 * @return {boolean}
 */
var canPlaceFlowers = function(flowerbed, n) {
 
};";"";"2020-03-25 15:18:55"
15286;1236;"PHP";"class Solution {
 
    /**
     * @param Integer[] $flowerbed
     * @param Integer $n
     * @return Boolean
     */
    function canPlaceFlowers($flowerbed, $n) {
        
    }
}";"";"2020-03-25 15:18:55"
15287;1236;"Swift";"class Solution {
    func canPlaceFlowers(_ flowerbed: [Int], _ n: 
Int) -> Bool {
        
    }
}";"";"2020-03-25 15:18:55"
15288;1236;"Ruby";"# @param {Integer[]} flowerbed
# @param {Integer} n
# @return {Boolean}
def can_place_flowers(flowerbed, n)
 
end";"";"2020-03-25 15:18:55"
15289;1236;"Python";"class Solution(object):
    def canPlaceFlowers(self, flowerbed, n):
        """"""
        :type flowerbed: List[int]
        :type n: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:55"
15290;1237;"C#";"public class Solution {
    public bool SearchMatrix(int[][] matrix, int 
target) {
 
    }
}";"";"2020-03-25 15:18:55"
15291;1237;"Java";"class Solution {
    public boolean searchMatrix(int[][] matrix, int 
target) {
 
    }
}";"";"2020-03-25 15:18:55"
15292;1237;"Rust";"impl Solution {
    pub fn search_matrix(matrix: Vec<Vec<i32>>, 
target: i32) -> bool {
        
    }
}";"";"2020-03-25 15:18:55"
15293;1237;"C";"bool searchMatrix(int** matrix, int matrixSize, 
int* matrixColSize, int target){
 
}";"";"2020-03-25 15:18:55"
15294;1237;"Scala";"object Solution {
    def searchMatrix(matrix: Array[Array[Int]], 
target: Int): Boolean = {
 
    }
}";"";"2020-03-25 15:18:55"
15295;1237;"Go";"func searchMatrix(matrix [][]int, target int) bool {
 
}";"";"2020-03-25 15:18:55"
15296;1237;"Kotlin";"class Solution {
    fun searchMatrix(matrix: Array<IntArray>, 
target: Int): Boolean {
 
    }
}";"";"2020-03-25 15:18:55"
15297;1237;"Python3";"class Solution:
    def searchMatrix(self, matrix: List[List[int]], 
target: int) -> bool:";"";"2020-03-25 15:18:55"
15298;1237;"JavaScript";"/**
 * @param {number[][]} matrix
 * @param {number} target
 * @return {boolean}
 */
var searchMatrix = function(matrix, target) {
 
};";"";"2020-03-25 15:18:55"
15299;1237;"PHP";"class Solution {";"";"2020-03-25 15:18:55"
15300;1237;"Swift";"class Solution {
    func searchMatrix(_ matrix: [[Int]], _ target: 
Int) -> Bool {
        
    }
}";"";"2020-03-25 15:18:55"
15301;1237;"Ruby";"# @param {Integer[][]} matrix
# @param {Integer} target
# @return {Boolean}
def search_matrix(matrix, target)
 
end";"";"2020-03-25 15:18:55"
15302;1237;"Python";"class Solution(object):
    def searchMatrix(self, matrix, target):
        """"""
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """"""";"";"2020-03-25 15:18:55"
15303;1238;"C#";"public class Solution {
    public int FindRadius(int[] houses, int[] 
heaters) {
 
    }
}";"";"2020-03-25 15:18:55"
15304;1238;"Java";"class Solution {
    public int findRadius(int[] houses, int[] 
heaters) {
 
    }
}";"";"2020-03-25 15:18:55"
15305;1238;"C";"int findRadius(int* houses, int housesSize, int* 
heaters, int heatersSize){
 
}";"";"2020-03-25 15:18:55"
15306;1238;"Rust";"impl Solution {
    pub fn find_radius(houses: Vec<i32>, heaters: 
Vec<i32>) -> i32 {
        
    }
}";"";"2020-03-25 15:18:55"
15307;1238;"Scala";"object Solution {
    def findRadius(houses: Array[Int], heaters: 
Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:55"
15308;1238;"Go";"func findRadius(houses []int, heaters []int) int {
 
}";"";"2020-03-25 15:18:55"
15309;1238;"Kotlin";"class Solution {
    fun findRadius(houses: IntArray, heaters: 
IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:55"
15310;1238;"Python3";"class Solution:
    def findRadius(self, houses: List[int], 
heaters: List[int]) -> int:";"";"2020-03-25 15:18:55"
15311;1238;"JavaScript";"/**
 * @param {number[]} houses
 * @param {number[]} heaters
 * @return {number}
 */
var findRadius = function(houses, heaters) {
 
};";"";"2020-03-25 15:18:55"
15312;1238;"PHP";"class Solution {
 
    /**
     * @param Integer[] $houses
     * @param Integer[] $heaters
     * @return Integer
     */
    function findRadius($houses, $heaters) {
        
    }
}";"";"2020-03-25 15:18:55"
15313;1238;"Swift";"class Solution {
    func findRadius(_ houses: [Int], _ heaters: 
[Int]) -> Int {
        
    }
}";"";"2020-03-25 15:18:55"
15314;1238;"Ruby";"# @param {Integer[]} houses";"";"2020-03-25 15:18:55"
15315;1238;"Python";"class Solution(object):
    def findRadius(self, houses, heaters):
        """"""
        :type houses: List[int]
        :type heaters: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:55"
15316;1239;"C#";"public class Solution {
    public IList<IList<int>> AllPathsSourceTarget
(int[][] graph) {
 
    }
}";"";"2020-03-25 15:18:55"
15317;1239;"Java";"class Solution {
    public List<List<Integer>> allPathsSourceTarget
(int[][] graph) {
 
    }
}";"";"2020-03-25 15:18:55"
15318;1239;"Rust";"impl Solution {
    pub fn all_paths_source_target(graph: 
Vec<Vec<i32>>) -> Vec<Vec<i32>> {
        
    }
}";"";"2020-03-25 15:18:55"
15319;1239;"C";"/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as 
*returnColumnSizes array.
 * Note: Both returned array and *columnSizes array 
must be malloced, assume caller calls free().
 */
int** allPathsSourceTarget(int** graph, int 
graphSize, int* graphColSize, int* returnSize, 
int** returnColumnSizes){
 
}";"";"2020-03-25 15:18:55"
15320;1239;"Scala";"object Solution {
    def allPathsSourceTarget(graph: Array[Array[Int]
]): List[List[Int]] = {
 
    }
}";"";"2020-03-25 15:18:55"
15321;1239;"Go";"func allPathsSourceTarget(graph [][]int) [][]int {
 
}";"";"2020-03-25 15:18:55"
15322;1239;"Kotlin";"class Solution {
    fun allPathsSourceTarget(graph: Array<IntArray>)
: List<List<Int>> {
 
    }
}";"";"2020-03-25 15:18:55"
15323;1239;"Python3";"class Solution:
    def allPathsSourceTarget(self, graph: List[List
[int]]) -> List[List[int]]:";"";"2020-03-25 15:18:55"
15324;1239;"JavaScript";"/**
 * @param {number[][]} graph
 * @return {number[][]}
 */
var allPathsSourceTarget = function(graph) {
 
};";"";"2020-03-25 15:18:55"
15325;1239;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $graph
     * @return Integer[][]
     */
    function allPathsSourceTarget($graph) {
        
    }
}";"";"2020-03-25 15:18:55"
15326;1239;"Swift";"class Solution {
    func allPathsSourceTarget(_ graph: [[Int]]) -> [
[Int]] {
        
    }
}";"";"2020-03-25 15:18:55"
15327;1239;"Ruby";"# @param {Integer[][]} graph
# @return {Integer[][]}
def all_paths_source_target(graph)
 
end";"";"2020-03-25 15:18:55"
15328;1239;"Python";"class Solution(object):
    def allPathsSourceTarget(self, graph):
        """"""
        :type graph: List[List[int]]
        :rtype: List[List[int]]
        """"""";"";"2020-03-25 15:18:55"
15329;1240;"C#";"public class Solution {
    public IList<string> GetValidT9Words(string num,
 string[] words) {
 
    }
}";"";"2020-03-25 15:18:55"
15330;1240;"Java";"class Solution {
    public List<String> getValidT9Words(String num, 
String[] words) {
 
    }
}";"";"2020-03-25 15:18:55"
15331;1240;"Rust";"impl Solution {
    pub fn get_valid_t9_words(num: String, words: 
Vec<String>) -> Vec<String> {
 
    }
}";"";"2020-03-25 15:18:55"
15332;1240;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char** getValidT9Words(char* num, char** words, int 
wordsSize, int* returnSize){
 
}";"";"2020-03-25 15:18:55"
15333;1240;"Scala";"object Solution {
    def getValidT9Words(num: String, words: Array
[String]): List[String] = {
 
    }
}";"";"2020-03-25 15:18:55"
15334;1240;"Go";"func getValidT9Words(num string, words []string) []
string {
 
}";"";"2020-03-25 15:18:55"
15335;1240;"Kotlin";"class Solution {
    fun getValidT9Words(num: String, words: 
Array<String>): List<String> {
 
    }
}";"";"2020-03-25 15:18:55"
15336;1240;"Python3";"class Solution:
    def getValidT9Words(self, num: str, words: List
[str]) -> List[str]:";"";"2020-03-25 15:18:55"
15337;1240;"JavaScript";"/**
 * @param {string} num
 * @param {string[]} words
 * @return {string[]}
 */
var getValidT9Words = function(num, words) {
 
};";"";"2020-03-25 15:18:55"
15338;1240;"PHP";"class Solution {
 
    /**
     * @param String $num
     * @param String[] $words
     * @return String[]
     */
    function getValidT9Words($num, $words) {
 
    }
}";"";"2020-03-25 15:18:55"
15339;1240;"Swift";"class Solution {
    func getValidT9Words(_ num: String, _ words: 
[String]) -> [String] {
 
    }
}";"";"2020-03-25 15:18:55"
15340;1240;"Ruby";"# @param {String} num
# @param {String[]} words
# @return {String[]}
def get_valid_t9_words(num, words)
 
end";"";"2020-03-25 15:18:55"
15341;1240;"Python";"class Solution(object):
    def getValidT9Words(self, num, words):
        """"""
        :type num: str
        :type words: List[str]
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:55"
15342;1241;"C#";"public class Solution {
    public IList<string> WordBreak(string s, 
IList<string> wordDict) {
 
    }
}";"";"2020-03-25 15:18:55"
15343;1241;"Java";"class Solution {
    public List<String> wordBreak(String s, 
List<String> wordDict) {
 
    }
}";"";"2020-03-25 15:18:55"
15344;1241;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
char ** wordBreak(char * s, char ** wordDict, int 
wordDictSize, int* returnSize){
 
}";"";"2020-03-25 15:18:55"
15345;1241;"Rust";"impl Solution {
    pub fn word_break(s: String, word_dict: 
Vec<String>) -> Vec<String> {
 
    }
}";"";"2020-03-25 15:18:55"
15346;1241;"Scala";"object Solution {
    def wordBreak(s: String, wordDict: List[String])
: List[String] = {
 
    }
}";"";"2020-03-25 15:18:55"
15347;1241;"Go";"func wordBreak(s string, wordDict []string) []
string {
 
}";"";"2020-03-25 15:18:55"
15348;1241;"Kotlin";"class Solution {
    fun wordBreak(s: String, wordDict: List<String>)
: List<String> {
 
    }
}";"";"2020-03-25 15:18:55"
15349;1241;"Python3";"class Solution:
    def wordBreak(self, s: str, wordDict: List[str])
 -> List[str]:";"";"2020-03-25 15:18:55"
15350;1241;"JavaScript";"/**
 * @param {string} s
 * @param {string[]} wordDict
 * @return {string[]}
 */
var wordBreak = function(s, wordDict) {
 
};";"";"2020-03-25 15:18:55"
15351;1241;"PHP";"class Solution {
 
    /**
     * @param String $s
     * @param String[] $wordDict
     * @return String[]
     */
    function wordBreak($s, $wordDict) {
 
    }
}";"";"2020-03-25 15:18:55"
15352;1241;"Swift";"class Solution {
    func wordBreak(_ s: String, _ wordDict: [String]
) -> [String] {
 
    }
}";"";"2020-03-25 15:18:55"
15353;1241;"Ruby";"# @param {String} s
# @param {String[]} word_dict
# @return {String[]}
def word_break(s, word_dict)
 
end";"";"2020-03-25 15:18:55"
15354;1241;"Python";"class Solution(object):
    def wordBreak(self, s, wordDict):
        """"""
        :type s: str
        :type wordDict: List[str]
        :rtype: List[str]
        """"""";"";"2020-03-25 15:18:55"
15355;1242;"C#";"public class Solution {
    public int HIndex(int[] citations) {
 
    }
}";"";"2020-03-25 15:18:55"
15356;1242;"Java";"class Solution {
    public int hIndex(int[] citations) {
 
    }
}";"";"2020-03-25 15:18:55"
15357;1242;"Rust";"impl Solution {
    pub fn h_index(citations: Vec<i32>) -> i32 {
 
    }
}";"";"2020-03-25 15:18:55"
15358;1242;"C";"int hIndex(int* citations, int citationsSize){
 
}";"";"2020-03-25 15:18:55"
15359;1242;"Scala";"object Solution {
    def hIndex(citations: Array[Int]): Int = {
 
    }
}";"";"2020-03-25 15:18:55"
15360;1242;"Go";"func hIndex(citations []int) int {
 
}";"";"2020-03-25 15:18:55"
15361;1242;"Kotlin";"class Solution {
    fun hIndex(citations: IntArray): Int {
 
    }
}";"";"2020-03-25 15:18:55"
15362;1242;"Python3";"class Solution:
    def hIndex(self, citations: List[int]) -> int:";"";"2020-03-25 15:18:55"
15363;1242;"JavaScript";"/**
 * @param {number[]} citations
 * @return {number}
 */
var hIndex = function(citations) {
 
};";"";"2020-03-25 15:18:55"
15364;1242;"PHP";"class Solution {";"";"2020-03-25 15:18:55"
15365;1242;"Swift";"class Solution {
    func hIndex(_ citations: [Int]) -> Int {
 
    }
}";"";"2020-03-25 15:18:55"
15366;1242;"Ruby";"# @param {Integer[]} citations
# @return {Integer}
def h_index(citations)
 
end";"";"2020-03-25 15:18:55"
15367;1242;"Python";"class Solution(object):
    def hIndex(self, citations):
        """"""
        :type citations: List[int]
        :rtype: int
        """"""";"";"2020-03-25 15:18:55"
15368;1243;"C#";"public class Solution {
    public int[] NumsSameConsecDiff(int N, int K) {
 
    }
}";"";"2020-03-25 15:18:55"
15369;1243;"Java";"class Solution {
    public int[] numsSameConsecDiff(int N, int K) {
 
    }
}";"";"2020-03-25 15:18:55"
15370;1243;"C";"/**
 * Note: The returned array must be malloced, 
assume caller calls free().
 */
int* numsSameConsecDiff(int N, int K, int* 
returnSize){
 
}";"";"2020-03-25 15:18:55"
15371;1243;"Rust";"impl Solution {
    pub fn nums_same_consec_diff(n: i32, k: i32) -> 
Vec<i32> {
 
    }
}";"";"2020-03-25 15:18:55"
15372;1243;"Scala";"object Solution {
    def numsSameConsecDiff(N: Int, K: Int): Array
[Int] = {
 
    }
}";"";"2020-03-25 15:18:55"
15373;1243;"Go";"func numsSameConsecDiff(N int, K int) []int {
 
}";"";"2020-03-25 15:18:55"
15374;1243;"Kotlin";"class Solution {
    fun numsSameConsecDiff(N: Int, K: Int): 
IntArray {
 
    }
}";"";"2020-03-25 15:18:55"
15375;1243;"Python3";"class Solution:
    def numsSameConsecDiff(self, N: int, K: int) -> 
List[int]:";"";"2020-03-25 15:18:55"
15376;1243;"JavaScript";"/**
 * @param {number} N
 * @param {number} K
 * @return {number[]}
 */
var numsSameConsecDiff = function(N, K) {
 
};";"";"2020-03-25 15:18:55"
15377;1243;"PHP";"class Solution {
 
    /**
     * @param Integer $N
     * @param Integer $K
     * @return Integer[]
     */
    function numsSameConsecDiff($N, $K) {
 
    }
}";"";"2020-03-25 15:18:55"
15378;1243;"Swift";"class Solution {
    func numsSameConsecDiff(_ N: Int, _ K: Int) -> 
[Int] {
 
    }
}";"";"2020-03-25 15:18:55"
15379;1243;"Ruby";"# @param {Integer} n";"";"2020-03-25 15:18:55"
15380;1243;"Python";"class Solution(object):
    def numsSameConsecDiff(self, N, K):
        """"""
        :type N: int
        :type K: int
        :rtype: List[int]
        """"""";"";"2020-03-25 15:18:55"
15381;1244;"C#";"public class Solution {
    public int ShortestBridge(int[][] A) {
 
    }
}";"";"2020-03-25 15:18:55"
15382;1244;"Java";"class Solution {
    public int shortestBridge(int[][] A) {
 
    }
}";"";"2020-03-25 15:18:55"
15383;1244;"C";"int shortestBridge(int** A, int ASize, int* 
AColSize){
 
}";"";"2020-03-25 15:18:55"
15384;1244;"Rust";"impl Solution {
    pub fn shortest_bridge(a: Vec<Vec<i32>>) -> i32 
{
        
    }
}";"";"2020-03-25 15:18:55"
15385;1244;"Scala";"object Solution {
    def shortestBridge(A: Array[Array[Int]]): Int = 
{
 
    }
}";"";"2020-03-25 15:18:55"
15386;1244;"Go";"func shortestBridge(A [][]int) int {
 
}";"";"2020-03-25 15:18:55"
15387;1244;"Kotlin";"class Solution {
    fun shortestBridge(A: Array<IntArray>): Int {
 
    }
}";"";"2020-03-25 15:18:55"
15388;1244;"Python3";"class Solution:
    def shortestBridge(self, A: List[List[int]]) -> 
int:";"";"2020-03-25 15:18:55"
15389;1244;"JavaScript";"/**
 * @param {number[][]} A
 * @return {number}
 */
var shortestBridge = function(A) {
 
};";"";"2020-03-25 15:18:55"
15390;1244;"PHP";"class Solution {
 
    /**
     * @param Integer[][] $A
     * @return Integer
     */
    function shortestBridge($A) {
        
    }
}";"";"2020-03-25 15:18:55"
15391;1244;"Swift";"class Solution {
    func shortestBridge(_ A: [[Int]]) -> Int {
        
    }
}";"";"2020-03-25 15:18:55"
15392;1244;"Ruby";"# @param {Integer[][]} a";"";"2020-03-25 15:18:55"
15393;1244;"Python";"class Solution(object):
    def shortestBridge(self, A):
        """"""
        :type A: List[List[int]]
        :rtype: int
        """"""";"";"2020-03-25 15:18:55"
